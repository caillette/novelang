== Pretty color palette for tags

Default representation of tags attempts to help locating them at a glance, with nice colors.
"Nice colors" means a lot of care.

Defining a color palette from scratch is tricky. Colors must be dinstiguishable one from the other.
They must spread evenly on the visible spectrum; but this is not easy because the visual effect
depends on the display. For this reason, I use the "140 colors"
http://www.w3.org/TR/SVG/types.html#ColorKeywords
of the SVG specification (the same are used in the CSS spec).
Much of hard work is done here, including finding pretty names.

But that's not all. Because the small rectangle of the tag has text, too, there must be a
foreground color. First I tried to compute it, using a simple algorithm (increasing Red, Green
and Blue of `50%` each and applying modulus 255). The text was always barely readable.
Not really good.

Another problem was the choice of the color for each tag.
I've chosen to pick the color of each tag in a predefined list. When all the colors have been
set, we start from the start again.
This round-robin algorithm for chosing
colors is ok, but inside the 140 colors, many look quite the same.
Colors like mistyrose and lavenderblush are very close, and if we have only 10 tags, it's a pity
to see two tags looking the same. So it makes sense to edit the color list in order to make the
first one look very different. In addition, because those first colors will be picked up the
most often, they must be in the same tone (mild saturation).

If there are more than 10 or 20 tags, similar colors will be unavoidable, finally.
But, since we display text (and a thin border) there is a foreground color to chose.
This gives (140 «multiplication-sign» 139) 19460 possibilities! Of course background and foreground
cannot be the same (hence the 139) and many possibilities are unreadable.
But, given a color like white, those colors look quite similar:
mintcream,
honeydew,
ghostwhite,
floralwhite,
seashell,
azure,
linen,
aliceblue,
cornsilk,
oldlace,
ivory,
snow,
whitesmoke.
Wow!

Maybe there is a clever algorithm to detect which foreground colors give best contrast //and//
distinguishability, but I didn't find it. It seems much more convenient to let a human do the job.

Since editing some lines of code would require to switch back-and-forth between the code editor
and the web browser, I wrote a palette editor based on a HTML page. It looks like this:

./images/2009-05-26_Tag-colors/All-tags.png

It's easy to change the order of appearance of a color with a drag and drop:

./images/2009-05-26_Tag-colors/Moving-color.png

And, after clicking on one color, you set the foreground with an ``alt-click`` on wished color.

Don't forget to save using the Save button (File `>` Save in Web browser's menu won't work).
Yes, the color palette editor only runs on Firefox by now.

./images/2009-05-26_Tag-colors/Save.png

The color palette is located in ``src/main-resources/style/javascript/colors.htm``

This new feature (and the beautiful color palette) will be available in the next release of
Novelang (`0.29.0`).