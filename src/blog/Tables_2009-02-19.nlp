== Tables

Other wikis make tables a daunting subject, often because they try to embed crazy formatting instructions. You can get a taste here:
http://www.wikicreole.org/wiki/ListOfTableMarkups
. First I decided that tables wouldn't be a concern before a long, long time because I felt I could live without them.
But everybody needs to create tables, and simulating them with literal in a fixed-width font is not great.
I reconsidered my position upon an external request that made me ask to myself: after all, would it be so hard to implement the simplest, smallest, least controversial feature set to let people define tables?

Obivously this would start around the well-adopted vertical line separator. To keep things clear, no line break is allowed inside table definition. Vertical lines may not be vertically-aligned. So it would look like:

<<<
| row1, col1 | row1, col2 | row1, col3 | 
| row2, col1 |  row2, col2   | row2, col3 | 
>>>

No headers, no justification, no span, no calculated fields, no neverending list of conflicting features. All complicated stuff must be done in the stylesheet or never. Then it becomes easy to support tables in Novelang grammar, and easy to write correct source documents using them.

There is still one potential conflict, however, with URL (or images, which will use the same grammatical approach). In a Novelang source document, the URL must appear at the start of a line. But how to make it appear inside a list of row cells while keeping the grammar readable? The answser is: no URL inside a table. A URL is a lengthy thing which doesn't fit in a table cell, so there is another syntax to find. Meanwhile, users are free to handle particular cases with a context-specific hack in their stylesheet.

Because users are encouraged to write stylesheets on their own, the XML structure given in input has to be very consistent. Of course the structure will look like a HTML table (table containing rows which contain divisions).
By avoiding semantic notations (`e.g.` drop ``n:emphasis`` and prefer ``n:block-inside-solidus-pairs``)  the XML tells offers a more structural view, letting the stylesheet give a meaning on its own.

There is the temptation to call a table a "table" but it would be lying. 
See this: 

<<<
| item1 | item2 | item3 |
>>>

The first vertical line indicates the start of the first item, the last vertical line indicates the end of the list, and items are separated by vertical lines. The table row is just a picture in your mind. 
In fact, it's no more than a list. The whole table is a list of lists. The default stylesheet will show it as a table, maybe with fancy headers, but its just one manner to show lists of lists.

So which name could tell it's a list of list, while not completely hiding the fact it's a table?

The word "cell" is a good start. Table have cells, but we're living in a universe where cells exist outside of tables. So our items get wrapped in ``n:cell`` elements. 

For a row, ``n:cell-list`` is an obvious choice but it doesn't tell about the "horizontality". So we'll prefer ``n:cell-row`` which is compatible with the table vocabulary, while staying close to the representation in the source document. Other XML elements tell about their delimiting character, like ``n:list-with-triple-hyphen`` so it's tempting to consider ``n:cell-row-with-vertical-lines-between-cells`` for consistency. 

The solution is to tell about the delimiter only in the element enclosing all the rows. (This is what embedded lists will intend to do, with a ``n:embedded-list-with-hyphen`` wrapping items with a more generic name.) Something like ``n:cell-rows-delimited-by-vertical-lines`` is a bit long and we don't need to embed the whole specification in the name. ``n:cell-rows-with-vertical-lines`` is shorter and evocative enough.

To summarize, the XML representation of a table which is in fact a list of lists would look like this:

<<<
<n:cell-rows-with-vertical-lines>
  <n:cell-row>
    <n:cell>item1</n:cell>
    <n:cell>item2</n:cell>
    <n:cell>item3</n:cell>
  </n:cell-row>
</n:cell-rows-with-vertical-lines>
>>>

