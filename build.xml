<?xml version="1.0" ?>

<project basedir="." name="Novelang build file" default="generate-antlr-idea" >

  <description>
    Build system for Novelang.

    Novelang is a lightweight authoring tool.
    
    Ant-1.7.1 required. Use other version at your own risk!
    
    ------------------------------------

    Copyright (C) 2008 Laurent Caillette

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation, either
    version 3 of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see http://www.gnu.org/licenses/

  </description>
  
  <target name="init" >
  
    <pathconvert property="basedir.fullpath" dirsep="/" >      
      <path>
        <pathelement location="${basedir}" />
      </path>
    </pathconvert>
    <echo>basedir.fullpath = ${basedir.fullpath}</echo>
    
    <tstamp>
      <format property="timestamp" pattern="yyyy-MM-dd_HH.mm" />
    </tstamp>

    <!-- Overrides any other property. -->
    <property file="${user.home}/.novelang-project.properties" />

    <property file="build.properties" />

    <!--<echo>novelang.style.dir = ${novelang.style.dir}</echo>-->

    <patternset id="resource-patterns" >
      <include name="**/*.properties" />
      <include name="**/*.xml" />
      <include name="**/*.xsl" />
      <include name="**/*.dtd" />
      <include name="**/*.ent" />
      <include name="**/*.pen" />
      <include name="**/*.mod" />
      <include name="**/*.png" />
      <include name="**/*.jpeg" />
      <include name="**/*.jpg" />
      <include name="**/*.gif" />
      <include name="**/*.svg" />
      <include name="**/*.css" />      
      <include name="**/*.js" />      
      <include name="**/*.html" />
      <include name="**/*.xhtml" />
      <include name="**/*.htm" />
      <include name="**/*.txt" />
      <include name="**/*.bin" />
      <include name="**/*.st" />
      <include name="**/*.ttf" />
      <include name="**/*.stg" />
      <include name="**/*.bin" />
      <include name="**/*.ico" />
    </patternset>

    <path id="deploy-libs" >
      <fileset dir="${lib.deploy.dir}" >
        <include name="*.jar" />
      </fileset>
    </path>

    <path id="build-libs" >
      <fileset dir="${lib.build.dir}" >
        <include name="*.jar" />
      </fileset>
    </path>

    <path id="antlr-grammars" >
      <fileset dir="${source.main.antlr.dir}" includes="*.g"/>
    </path>

    <condition property="project.version.isdocumented" >
      <available file="${source.documentation.version.dir}/${project.version}.nlp" />
    </condition>
    <echo>project.version.isdocumented = ${project.version.isdocumented}</echo>

    <echoproperties />
  </target>

  
  <target 
      name="display-properties"
      depends="init, login-on-remote-site"
      description="Useful for debugging only."
  >
    <echo message="target.distrib.path=${target.distrib.path}" />
    <echo message="publish.remote.host=${publish.remote.host}" />
    <echo message="publish.remote.dir=${publish.remote.doc.dir}" />
    <echo message="publish.remote.user=${publish.remote.user}" />
    <echo message="publish.remote.project=${publish.remote.project}" />
    <echo message="publish.remote.password=${publish.remote.password}" />

  </target>
  

  <target name="create-target-dir" depends="init" >
    <mkdir dir="${target.dir}" />
    <mkdir dir="${target.mainclasses.dir}" />
    <mkdir dir="${target.buildclasses.dir}" />
  </target>


  <target name="clean" depends="init" >
    <delete dir="${target.dir}" includeemptydirs="true" defaultexcludes="false" />  
  </target>
  
  <target name="verify-release-notes-exist" unless="project.version.isdocumented" >
    <fail message="Missing release notes in ${source.documentation.version.dir} for ${project.version}" />
  </target>


  <!--
    =======
    Compile
    =======  
  -->

  <target
      name="compile-code-generator"
      depends="init, create-target-dir"
      description="Compile Java classes generating ancillary Java code relative to ANTLR grammar"
      unless="target-buildclass-exists"
  >
    <javac
        destdir="${target.buildclasses.dir}"
        source="${compiler.source}"
        encoding="${source.encoding}"
        target="${compiler.target}"
        debug="on"
        debuglevel="lines,vars,source"
    >
      <classpath>
        <path refid="build-libs" />
        <path refid="deploy-libs" />
      </classpath>
      <src path="${source.codegeneration.java.dir}" />
      <!-- This is a perfectly dirty hack because source dependencies are not split enough. -->
      <src path="${source.main.java.dir}/novelang/parser/shared" />
    </javac>
 
    <copy todir="${target.buildclasses.dir}" >
      <fileset dir="${source.codegeneration.java.dir}" >
        <include name="**/*.stg"  />
        <include name="**/*.txt"  />
      </fileset>
    </copy>

  </target>

  <target
      name="run-java-generator"
      depends="init, compile-code-generator"
      description="This should superceded generate-antlr target in a near future"
  >
    <java
        classname="novelang.build.CodeGenerator"
        failonerror="true"
        fork="false"
    >
      <classpath refid="deploy-libs" />
      <classpath refid="build-libs" />
      <classpath path="${target.buildclasses.dir}" />
      <arg value="${source.main.antlr.dir}/${source.main.antlr.maingrammar}" />
      <arg value="${basedir.fullpath}/${target.antlr.generated.dir}" />
    </java>
  </target>


  <target
      name="run-unicodenames-generator"
      depends="init, compile-code-generator"
      description="Create indexed Unicode names"
  >
    <java
        classname="novelang.build.UnicodeNamesGenerator"
        failonerror="true"
        fork="false"
    >
      <classpath refid="deploy-libs" />
      <classpath refid="build-libs" />
      <classpath path="${target.buildclasses.dir}" />
      <arg value="${basedir.fullpath}/${target.antlr.generated.dir}" />
    </java>
  </target>



  <target
      name="generate-antlr-idea"
      depends="init"
      description="Generate ANTLR parser in IDEA's subdir"
  >
    <antcall target="run-java-generator" >
      <param name="target.antlr.generated.dir" value="${idea.antlr.generated.dir}" />
    </antcall>
  </target>


  <target
      name="generate-unicodenames-idea"
      depends="init"
      description="Generate Unicode names in IDEA's subdir"
  >
    <antcall target="run-unicodenames-generator" >
      <param name="target.antlr.generated.dir" value="${idea.antlr.generated.dir}" />
    </antcall>
  </target>


  <target name="compile-main" depends="init, create-target-dir" >

    <javac
        destdir="${target.mainclasses.dir}"
        source="${compiler.source}"
        encoding="${source.encoding}"
        target="${compiler.target}"
        debug="on"
        debuglevel="lines,vars,source"
    >
      <classpath>
        <path refid="deploy-libs" />
      </classpath>
      <src path="${source.main.java.dir}" />
      <src path="${target.antlr.generated.dir}" />
    </javac>

    <copy todir="${target.mainclasses.dir}" >
      <fileset dir="${source.main.java.dir}" >
        <patternset refid="resource-patterns" />
      </fileset>
      <fileset dir="${target.antlr.generated.dir}" >
        <patternset refid="resource-patterns" />
      </fileset>
      <fileset dir="${configuration.main.dir}" >
        <patternset refid="resource-patterns" />
      </fileset>
      <fileset dir="${source.style.default.dir}" >
        <patternset refid="resource-patterns" />
      </fileset>
    </copy>

  </target>


  <target name="compile-tests" 
          depends="run-java-generator, run-unicodenames-generator, compile-main"
  >
    
    <mkdir dir="${target.testclasses.dir}" />    

    <javac
        destdir="${target.testclasses.dir}"
        srcdir="${source.test.java.dir}"
        source="${compiler.source}"
        encoding="${source.encoding}"
        target="${compiler.target}"
    >
      <classpath>
        <path refid="deploy-libs" />
        <path refid="build-libs" />
        <pathelement path="${target.mainclasses.dir}" />
      </classpath>
    </javac>

    <copy todir="${target.testclasses.dir}" >
      <fileset dir="${source.test.java.dir}" >
        <patternset refid="resource-patterns" />
      </fileset>
      <fileset dir="${configuration.test.dir}" >
        <patternset refid="resource-patterns" />
      </fileset>
    </copy>
    
  </target>
  
  
  <target name="define-novelang-task" depends="compile-main" >
    <taskdef name="novelang" classname="${build.novelangtask.name}" >
      <classpath>
        <path refid="deploy-libs" />
        <pathelement location="${target.mainclasses.dir}" />
        <pathelement location="${configuration.main.dir}" />
        <pathelement location="${configuration.test.dir}" /> <!-- for logback-test.xml -->
      </classpath>
    </taskdef>
  </target>


  
  <!--
    ====
    Test
    ====  
  -->  

  <target name="run-tests" depends="init, create-target-dir" unless="project.test.skip" >

    <delete dir="${target.test.reports.dir}" />
    <delete dir="${target.test.scratchfiles.dir}" />
    <mkdir dir="${target.test.reports.dir}" />

    <junit
        printsummary="yes"
        haltonfailure="no"
        haltonerror="no"
        failureproperty="junit.broken"
        errorproperty="junit.broken"
    >
      <jvmarg value="-Dnovelang.test.scratch.dir=${target.test.scratchfiles.dir}"/>
      <jvmarg value="-Dnovelang.test.scratch.delete=no"/>
      <classpath>
        <path refid="build-libs" />
        <path refid="deploy-libs" />
        <pathelement location="${target.mainclasses.dir}" />
        <pathelement location="${target.testclasses.dir}" />
        <pathelement location="${source.main.resources.dir}" />
        <pathelement location="${source.test.resources.dir}" />
      </classpath>
      <batchtest fork="yes" todir="${target.test.reports.dir}" >
        <fileset
            dir="${target.testclasses.dir}" 
            includes="**/*Test.class"
            excludes="**/Abstract*Test.class"
        />
      </batchtest>
      <formatter type="plain"/>
    </junit>

    <!--<fail if="junit.broken" >There were errors/failures.</fail>-->
  </target>

  <target
      name="clean-compile-runtests"
      depends="clean, compile-tests, run-tests"
      description="Compile deployable stuff and run tests."
  /> 
  

  <!--
    ===================
    Start / stop server
    ===================
  -->

  <target name="start-httpd" depends="init" >
    
    <java
        classname="novelang.daemon.HttpDaemon"
        failonerror="true"
        fork="true"
    >
      <classpath>
        <path refid="deploy-libs" />
        <pathelement location="${target.mainclasses.dir}" />
        <pathelement location="${configuration.main.dir}" />
        <pathelement location="${source.style.default.dir}" />
      </classpath>
      <jvmarg value="-Duser.dir=${user.dir}" /> <!-- Override Ant's basedir -->
      <jvmarg value="-Dfile.encoding=${novelang.sources.charset}" />
      <jvmarg value="-Dnovelang.log.dir=${user.dir}" />
      <jvmarg value="-Djava.awt.headless=true" />
      <jvmarg value="-Xmx512M" />
    </java>

  </target>



  <!--
    =============
    Documentation
    =============
  -->

  <target name="javadoc" depends="init, create-target-dir" >

    <javadoc
        sourcepath="${source.main.java.dir}"
        destdir="${target.javadoc.dir}"
        use="true"
        author="true"
    >
    </javadoc>

    <zip
        destfile="${target.javadoc.zip}"
        basedir="${target.javadoc.dir}"
    />

  </target>



  <target name="generate-documentation" depends="init" >

    <copy todir="${target.manual.tweaked.dir}" >
      <fileset dir="${source.manual.dir}" />
    </copy>
    
    <replace dir="${target.manual.tweaked.dir}" value="${project.version}" >
      <replacetoken>@SNAPSHOT@</replacetoken>
    </replace>
    

    <!--
      No need to delete / create ${target.documentation.site.dir}
      as the batch generation does it automatically.
    -->

    <property name="logdestination" location="${target.manual.dir}" />
    <property name="absolutetarget" location="${target.manual.site.dir}" />

    <echo>absolutetarget=${absolutetarget}</echo>
    <echo>target.manual.tweaked.dir=${target.manual.tweaked.dir}</echo>

    <!-- Need to create this one before the batch generation starts! -->    
    <mkdir dir="${logdestination}" />

    <java
        classname="${documentation.sourcecharacterstable.class}"
        failonerror="true"
        fork="true"
        dir="${target.manual.tweaked.dir}"
    >
      <classpath>
        <path refid="deploy-libs" />
        <pathelement location="${target.mainclasses.dir}" />
        <pathelement location="${configuration.main.dir}" />
      </classpath>
      <jvmarg value="-Xmx512M" />
      <jvmarg value="-Djava.awt.headless=true" />
      <arg value="${documentation.sourcecharacterstable.nlp}" />
    </java>

    <java
        classname="${launcher.mainclass}"
        failonerror="true"
        fork="true"
        dir="${target.manual.tweaked.dir}"
    >
      <classpath>
        <path refid="deploy-libs" />
        <pathelement location="${target.mainclasses.dir}" />
        <pathelement location="${configuration.main.dir}" />
      </classpath>
      <jvmarg value="-Xmx512M" />
      <jvmarg value="-Djava.awt.headless=true" />
      <arg value="${launcher.batch.command}" />
      <arg value="--log-dir=${logdestination}" />
      <arg value="--font-dirs" />
      <arg value="${documentation.fonts.dir}" />
      <arg value="--output-dir" />
      <arg value="${absolutetarget}" />
      <arg value="${target.manual.htmldocument}" />
      <arg value="${target.manual.pdfdocument}" />
    </java>

    <move
        file="${absolutetarget}/${target.manual.page}"
        tofile="${absolutetarget}/index.html"
    />

    <!-- TODO remove this once supported by batch generation -->
    <copy
        file="${source.manual.dir}/style/screen.css"
        todir="${target.manual.site.dir}"
    />

  </target>


  
  
  
  <!--
    =======
    Publish
    =======
  -->

  <target
      name="ask-user-for-remote-site"
      unless="publish.remote.user"
      >
    <input message="User on remote site" addproperty="publish.remote.user" />
  </target>

  <target
      name="ask-project-for-remote-site"
      unless="publish.remote.project"
      >
    <input message="Project on remote site" addproperty="publish.remote.project" />
  </target>

  <target
      name="ask-password-for-remote-site"
      unless="publish.remote.password"
  >
    <input 
        message="Password for ${publish.remote.user} / ${publish.remote.project}" 
        addproperty="publish.remote.password" 
    />
  </target>

  <target
      name="login-on-remote-site"
      depends="init, ask-user-for-remote-site, ask-project-for-remote-site, ask-password-for-remote-site"
      description="Set properties for user name, project name and password if not already done"
  />

  <target
      name="ask-user-for-announcer"
      unless="announcement.user.name"
      >
    <input message="Announcer SMTP password" addproperty="announcement.user.name" />
  </target>

  <target
      name="ask-password-for-announcer"
      unless="announcement.user.password"
  >
    <input
        message="Password for ${announcement.user.name} posting on ${announcement.blog.address}"
        addproperty="announcement.user.password"
    />
  </target>

  <target
      name="login-as-announcer"
      depends="init, ask-user-for-announcer, ask-password-for-announcer"
      description="Set properties for announcer name, mail server password and blog address if not already done"
  />

  <target
      name="publish-distrib" 
      depends="login-on-remote-site"
      description="Copy documentation (except Javadoc) to SourceForge. Files must have been generated first!"
  >
    <!--
        See documentation on
        https://sourceforge.net/apps/trac/sourceforge/wiki/Release%20files%20for%20download
    -->

    <property
        name="scp-destination"
        value="${publish.remote.user},${publish.remote.project.name}:${publish.remote.password}@${publish.remote.host}:${publish.remote.release.dir}"
    />
    <property
        name="scp-file"
        value="${target.distrib.path}"
    />

    <echo >
      scp-destination=${scp-destination}
      scp-file=${scp-file}
    </echo>

    <scp
        remotetodir="${scp-destination}"
        verbose="true"
        sftp="true"
        file="${scp-file}" 
    >
    </scp>
    <echo>
      Now wait a few minutes and go to SourceForge project page
      to check that uploaded release appears as expected.
    </echo>

  </target>




  <target 
      name="publish-documentation" 
      depends="login-on-remote-site"
      description="Copy documentation (except Javadoc) to SourceForge. Files must have been generated first!"
  >
    <!--
      There has been a strange bug: the input task for the password never 
      executing with a dependency to the generate-documentation target.
      Finally, experience shows it's better to launch publishing apart.
    -->
    <scp
        todir="${publish.remote.user},${publish.remote.project}:${publish.remote.password}@${publish.remote.host}:${publish.remote.doc.dir}"
        verbose="true"
        sftp="true"
    >
      <fileset dir="${target.manual.site.dir}" />
    </scp>

  </target>

  <target name="publish-release-announcement"
      depends="init, define-novelang-task, login-as-announcer, verify-release-notes-exist"
  >

    <novelang
        contentRoot="src/doc"
        styleDirectory="src/doc/style"
        documentRequest="/versions/${project.version}.html?stylesheet=announcement-html.xsl"
        contentProperty="html"
        />
    <echo>About to send:
${html}
    </echo>

    <mail
        mailhost="${publish.mailhost}"
        mailport="${publish.mailport}"
        subject="${project.versionedname} released!"
        user="${announcement.user.email}"
        password="${announcement.user.password}"
        messagemimetype="text/html"
        ssl="yes"
        charset="utf-8"
    >
      <from address="${announcement.user.email}" />
      <to address="${announcement.blog.secretpostingaddress}" />

      <message>
        Download ${project.versionedname} &lt;a href="${announcement.download.url}">here&lt;/a> !
        ${html}
        &lt;p>
      </message>
    </mail>


    <novelang
        contentRoot="src/doc"
        styleDirectory="src/doc/style"
        documentRequest="/versions/${project.version}.nlp?stylesheet=announcement-plaintext.xsl"
        contentProperty="plaintext"
    />
    <echo>About to send:
${plaintext}
    </echo>

    <mail
        mailhost="${publish.mailhost}"
        mailport="${publish.mailport}"
        subject="${project.versionedname} released!"
        user="${announcement.user.email}"
        password="${announcement.user.password}"
        messagemimetype="text/plain"
        ssl="yes"
        charset="utf-8"
    >
      <from address="${announcement.user.email}" />
      <to address="${announcement.mailinglist.1}" />
      <to address="${announcement.mailinglist.2}" />
      <message>
Dear Novelang user,

A new release of Novelang is available from download. Get it "here"
${announcement.download.url}
now!

These are the outstanding changes in `${project.versionedname}`:
${plaintext}


Enjoy!


The Novelang team

${announcement.project.homepage}
${announcement.project.blog}

This mail is written in Novelang.
      </message>
    </mail>
  </target>







  <target
      name="publish-everything"
      depends="login-on-remote-site, login-as-announcer, publish-distrib, publish-documentation, publish-release-announcement"
  />



  <!--
    =============
    Distribution.
    =============
  -->

  <target name="create-jar" depends="init" >


    <mkdir dir="${target.timestamped.dir}" />

    <copy todir="${target.timestamped.dir}" >
      <fileset dir="${source.main.java.dir}" >
        <include name="**/Version.java" />
      </fileset>
    </copy>

    <replace dir="${target.timestamped.dir}" value="${project.version}" >
      <replacetoken>@SNAPSHOT@</replacetoken>
    </replace>

    <javac
        destdir="${target.mainclasses.dir}"
        source="${compiler.source}"
        encoding="${source.encoding}"
        target="${compiler.target}"
        debug="on"
        debuglevel="lines,vars,source"
    >
      <src path="${target.timestamped.dir}" />
    </javac>



    <pathconvert
        refid="deploy-libs"
        property="deploylibs"
        dirsep="/"
        pathsep=" "
    >
      <map from="${basedir.fullpath}/" to="" />
    </pathconvert>

    <echo>deploylibs=${deploylibs}</echo>

    <delete file="${target.jar.path}" />
    <jar
        destfile="${target.jar.path}"
        basedir="${target.mainclasses.dir}"
    >
      <manifest>
        <attribute name="Class-Path" value="${deploylibs}" />
        <attribute name="Implementation-Version" value="${project.version}" />
        <attribute name="Main-Class" value="${launcher.mainclass}" />
        <attribute name="Creation-Date" value="${timestamp}" />
        <attribute name="Created-By" value="${project.name} build system" />
      </manifest>
    </jar>


    <!--
      Copying lib just for running the .jar from target directory,
      because of the relative classpath in the manifest.
    -->
    <delete file="${target.dir}/${lib.deploy.dir}" />
    <copy todir="${target.dir}/${lib.deploy.dir}" >
      <path refid="deploy-libs" />
    </copy>

  </target>

  <target
      name="recreate-jar"
      depends="init, compile-main, create-jar"
      description="Recompiles production classes and recreates the .jar"
  />


  <target name="package-distribution" depends="init" >

    <zip destfile="${target.distrib.path}" >
      <zipfileset file="${target.jar.path}" fullpath="${target.jar.name}" />
      <fileset dir="${basedir}" >
        <patternset>
          <include name="build.*" />
          <include name="${legal.dir}/*" />
          <include name="${lib.deploy.dir}/**" />
          <include name="${source.dir}/**" />
          <include name="${configuration.dir}/**" />
        </patternset>
      </fileset>

      <zipfileset dir="${target.manual.site.dir}" prefix="documentation" />
      <!--<zipfileset dir="${target.javadoc.dir}" prefix="javadoc" />-->

    </zip>

  </target>

  <target name="build-distribution"
      depends="clean-compile-runtests, generate-documentation, create-jar, package-distribution"
  />

  <target  name="deploy-locally"
      depends="init"
  >
    <unzip src="${target.distrib.path}" dest="${distrib.dir}/${project.versionedname}" />
  </target>



  <!--
    ======================
    Play with NovelangTask
    ======================
  -->

  <target  name="ant-task-demo" depends="init, define-novelang-task" >
    <novelang
        contentRoot="src/doc"
        styleDirectory="src/doc/style"
        documentRequest="/versions/${project.version}.html?stylesheet=announcement-html.xsl"
        contentProperty="html"
        />
    <echo>html=${html}</echo>
  </target>


    <!--
      ========================================================
      Generate Unicode names (hex code -> human-readable name)
      ========================================================
    -->

    <target name="probe-proxy" depends="init" >
      <condition property="proxy.enabled" >
        <and>
          <isset property="proxy.host" />
          <isreachable host="${proxy.host}" />
        </and>
      </condition>
    </target>

    <target name="proxy" depends="probe-proxy" if="proxy.enabled">
      <property name="proxy.port" value="80"/>
      <property name="proxy.user" value=""/>
      <property name="proxy.pass" value=""/>
      <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"
        proxyuser="${proxy.user}" proxypassword="${proxy.pass}"/>
    </target>


  <target  name="generate-unicode-names" depends="proxy" >

    <get src="${unicode.url}" dest="${unicode.names}" />


  </target>

<!--
  ==========
  Nhovestone
  ==========
-->
         
  
  <target name="nhovestone" depends="init" >

    <java
        classname="${documentation.nhovestone.class}"
        failonerror="true"
        fork="true"
    >
      <classpath>
        <path refid="build-libs" />
        <path refid="deploy-libs" />
        <pathelement location="${target.mainclasses.dir}" />
        <pathelement location="${target.testclasses.dir}" />
        <pathelement location="${configuration.main.dir}" />
      </classpath>
      <jvmarg value="-Xmx512M" />
      <jvmarg value="-Djava.awt.headless=true" />
      <arg value="${target.nhovestone.dir}" />
      <arg value="${distrib.dir}" />
      <arg value="${documentation.nhovestone.versions}" />
    </java>

    <!-- Copy after running Nhovestone, which re-creates fresh target directory. -->
    <copy todir="${target.nhovestone.dir}" >
      <fileset dir="${source.nhovestone.dir}" >
        <include name="*.nlp" />
        <include name="*.nlb" />
        <include name="**/*.xsl" />
      </fileset>
    </copy>
       
    <java
        classname="${launcher.mainclass}"
        failonerror="true"
        fork="true"
        dir="${target.nhovestone.dir}"
    >
      <classpath>
        <path refid="deploy-libs" />
        <pathelement location="${target.mainclasses.dir}" />
        <pathelement location="${configuration.main.dir}" />
      </classpath>
      <jvmarg value="-Xmx512M" />
      <jvmarg value="-Djava.awt.headless=true" />
      <arg value="${launcher.batch.command}" />
      <arg value="--log-dir=${target.nhovestone.dir}" />
      <arg value="--output-dir" />
      <arg value="report" />
      <arg value="${target.nhovestone.pdfdocument}" />
    </java>
    
  </target>
  
</project>