<?xml version="1.0"?>

<project basedir="." name="Novelang build file" default="clean-run-tests" >

  <description>
    Build system for Novelang.

    Novelang is a lightweight authoring tool for writing novels.
    
    Ant-1.7.0 required. Use other version at your own risk!
    
    ------------------------------------

    Copyright (C) 2008 Laurent Caillette

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation, either
    version 3 of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see http://www.gnu.org/licenses/

  </description>
  
  <target name="init" >
  
    <pathconvert property="basedir.fullpath" dirsep="/" >      
      <path>
        <pathelement location="${basedir}" />
      </path>
    </pathconvert>
    <echo>basedir.fullpath = ${basedir.fullpath}</echo>
    
    <tstamp>
      <format property="timestamp" pattern="yyyy-MM-dd_HH.mm" />
    </tstamp>

    <!-- Overrides any other property. -->
    <property file="${user.dir}/novelang.properties" />

    <property file="build.properties" />

    <echo>novelang.style.dir = ${novelang.style.dir}</echo>

    <patternset id="resource-patterns" >
      <include name="**/*.properties" />
      <include name="**/*.xml" />
      <include name="**/*.png" />
      <include name="**/*.jpeg" />
      <include name="**/*.jpg" />
      <include name="**/*.gif" />
      <include name="**/*.css" />      
      <include name="**/*.html" />
      <include name="**/*.xhtml" />
      <include name="**/*.dtd" />
      <include name="**/*.txt" />
      <include name="**/*.bin" />
      <include name="**/*.st" />
    </patternset>

    <path id="deploy-libs" >
      <fileset dir="${lib.deploy.dir}" includes="*.jar" />
    </path>

    <path id="build-libs" >
      <fileset dir="${lib.build.dir}" includes="*.jar" />
    </path>

    <path id="antlr-grammars" >
      <fileset dir="${source.main.antlr.dir}" includes="*.g"/>
    </path>

  </target>

  
  <target name="target-dir" depends="init" >
    <mkdir dir="${target.dir}" />
    <mkdir dir="${target.mainclasses.dir}" />
  </target>


  <target name="clean" depends="init" >
    <delete dir="${target.dir}" />  
  </target>
  
  
  <!--
    =======
    Compile
    =======  
  -->

  <target name="antlr-generate" depends="init, target-dir" >

    <pathconvert
        refid="antlr-grammars"
        property="antlr-main-sources"
        dirsep="/"
        pathsep=" "
    >
      <map from="${basedir.fullpath}/" to="" /> <!-- Needed, really? -->
    </pathconvert>

    <echo>antlrsources='${antlr-main-sources}'</echo>

    <java
        classname="org.antlr.Tool"
        failonerror="true"
    >
      <classpath refid="build-libs" />
      <arg line="-fo ${target.antlr.generated.main.dir} ${antlr-main-sources}" />
    </java>

  </target>




  <target name="main-compile" depends="init, target-dir" >

    <javac 
        destdir="${target.mainclasses.dir}"
        source="${compiler.source}"
        target="${compiler.target}"
        debug="on"
        debuglevel="lines,vars,source"
    >
      <classpath>
        <path refid="deploy-libs" />
      </classpath>
      <src path="${source.main.java.dir}" />
      <src path="${target.antlr.generated.main.dir}" />
    </javac>
    
    <copy todir="${target.mainclasses.dir}" >
      <fileset dir="${source.main.java.dir}" >
        <patternset refid="resource-patterns" />
      </fileset>
      <fileset dir="${configuration.main.dir}" >
        <patternset refid="resource-patterns" />
      </fileset>
    </copy>
    
  </target>


  <target name="test-compile" depends="antlr-generate, main-compile" >
    
    <mkdir dir="${target.testclasses.dir}" />    

    <javac
        destdir="${target.testclasses.dir}"
        srcdir="${source.test.java.dir}"
        source="${compiler.source}"
        target="${compiler.target}"
    >
      <classpath>
        <path refid="deploy-libs" />
        <path refid="build-libs" />
        <pathelement path="${target.mainclasses.dir}" />
      </classpath>
    </javac>

    <copy todir="${target.testclasses.dir}" >
      <fileset dir="${source.test.java.dir}" >
        <patternset refid="resource-patterns" />
      </fileset>
      <fileset dir="${configuration.test.dir}" >
        <patternset refid="resource-patterns" />
      </fileset>
    </copy>
    
  </target>
  
  
  
  <!--
    ====
    Test
    ====  
  -->  

  <target name="test" depends="init, target-dir" >

    <delete dir="${target.testreports.dir}" />
    <mkdir dir="${target.testreports.dir}" />    

    <junit printsummary="yes" haltonfailure="no" >
      <classpath>
        <path refid="build-libs" />
        <path refid="deploy-libs" />
        <pathelement location="${target.mainclasses.dir}" />
        <pathelement location="${target.testclasses.dir}" />
        <pathelement location="${source.samples.dir}" />
      </classpath>
      <batchtest fork="yes" todir="${target.testreports.dir}" >
        <fileset 
            dir="${target.testclasses.dir}" 
            includes="**/*Test.class"
            excludes="**/Abstract*Test.class"
        />
      </batchtest>
      <formatter type="plain"/>
    </junit>
  </target>

  <target
      name="clean-run-tests"
      depends="clean, test-compile, test"
      description="Run this one to run tests from clean"
  /> 
  

  <!--
    ===================
    Start / stop server
    ===================
  -->

  <target name="start-httpd" depends="init" >
    
    <java
        classname="novelang.jetty.HttpDaemon"
        failonerror="true"
        fork="true"
    >
      <classpath>
        <path refid="deploy-libs" />
        <pathelement location="${target.mainclasses.dir}" />
        <pathelement location="${configuration.main.dir}" />
        <pathelement location="${source.style.default.dir}" />
      </classpath>
      <jvmarg value="-Duser.dir=${user.dir}" /> <!-- Override Ant's basedir -->
      <jvmarg value="-Dfile.encoding=${novelang.encoding}" />
      <jvmarg value="-Dnovelang.styles.dir=${novelang.style.dir}" />
      <jvmarg value="-Djava.awt.headless=true" />
      <jvmarg value="-Xmx512M" />
    </java>

  </target>


  <!--
    Generate documentation.
  -->

  <target name="generate-documentation" depends="init" >

    <!--
      No need to delete / create ${target.documentation.site.dir}
      as the batch generation does this automatically.
    -->

    <property name="logdestination" location="${target.documentation.dir}" />
    <property name="absolutetarget" location="${target.documentation.site.dir}" />

    <java
        classname="novelang.batch.Main"
        failonerror="true"
        fork="true"
        dir="${source.documentation.dir}"
    >
      <classpath>
        <path refid="deploy-libs" />
        <pathelement location="${target.mainclasses.dir}" />
        <pathelement location="${configuration.main.dir}" />
      </classpath>
      <jvmarg value="-Dfile.encoding=${novelang.encoding}" />
      <jvmarg value="-Djava.awt.headless=true" />
      <jvmarg value="-Dnovelang.log.dir=${logdestination}" />
      <jvmarg value="-Xmx512M" />
      <arg value="${target.documentation.page}" />
      <arg value="-targetDirectory" />
      <arg value="${absolutetarget}" />
    </java>

  </target>

</project>