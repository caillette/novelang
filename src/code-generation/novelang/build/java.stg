group java ;

javadoc( generatorName, generationTimestamp ) ::= <<
/**
 * Don't modify this class manually nor check it in the VCS.
 * Instead, run code generation which create Java source code from ANTLR grammar.
 *
 * Generated on <generationTimestamp>
 * @author <generatorName>
 */
>>

enumItem( item ) ::= <<
<item.name>( <item.punctuationSign>, <item.tagBehavior> )
>>

enum( package, name, items, generatorName, generationTimestamp ) ::= <<
package <package> ;

import java.util.Collections ;
import java.util.Set ;
import com.google.common.collect.Sets ;
import novelang.common.SyntacticTree ;
import novelang.common.TagBehavior;
import static novelang.common.TagBehavior.* ;

<javadoc()>
public enum <name> {
  <items : { item | <enumItem( item )>} ; separator = ", \n" > ;

  private final boolean punctuationSign ;
  private final TagBehavior tagBehavior ;

  <name>( boolean punctuationSign, TagBehavior tagBehavior ) {
    this.punctuationSign = punctuationSign ;
    this.tagBehavior = tagBehavior ;
  }

  public boolean isPunctuationSign() {
    return punctuationSign ;
  }

  public TagBehavior getTagBehavior() {
    return tagBehavior ;
  }

  private static final Set\< String > NAMES ;
  static {
    final Set\< String > names = Sets.newHashSet() ;
    for( NodeKind nodeKind : NodeKind.values() ) {
      names.add( nodeKind.name() ) ;
    }
    NAMES = Collections.unmodifiableSet( names ) ;
  }

  public static Set\< String > getNames() {
    return NAMES ;
  }

  /**
   * Returns if a given {@code Tree} is of expected kind.
   * @param tree may be null.
   */
  public boolean isRoot( SyntacticTree tree ) {
    if( null == tree ) {
      return false ;
    }
    final String text = tree.getText();
    return
        NAMES.contains( text ) &&
        name().equals( text )
    ;
  }

}
>>  


htmlEntityName( name ) ::= "<if( name )>, \"<name>\"<endif>"

endOfLineComment( text ) ::= "<if( text )>// <text><endif>"

lexemeAddition( lexeme ) ::= <<
add( map, '<lexeme.asJavaCharacter>', "<lexeme.unicodeName>"<htmlEntityName( lexeme.htmlEntityName )> ) ; <endOfLineComment( lexeme.asJavaComment )>
>>


lexemesClass( package, name, lexemes, generatorName, generationTimestamp ) ::= <<
package <package> ;

import java.util.Set ;
import java.util.Map ;
import com.google.common.collect.ImmutableMap ;
import com.google.common.collect.Maps ;
import novelang.parser.shared.Lexeme ;

<javadoc()>
public class <name> {

  private static final Map\< Character, Lexeme > LEXEMES ;

  static {
    final Map\< Character, Lexeme > map = Maps.newHashMap() ;
    
    <lexemes : { lexeme | <lexemeAddition( lexeme )>} ; separator = "\n" >
    LEXEMES = ImmutableMap.copyOf( map ) ;
  }

  public static Set\< Character > getCharacters() {
    return LEXEMES.keySet() ;
  }

  public static Map\< Character, Lexeme > getLexemes() {
    return LEXEMES ;
  }

  private static void add(
      Map\< Character, Lexeme > map,
      Character character,
      String unicodeName
  ) {
    add( map, character, unicodeName, null ) ;
  }

  private static void add(
      Map\< Character, Lexeme > map,
      Character character,
      String unicodeName,
      String htmlEntityName
  ) {
    final Lexeme lexeme = new Lexeme( unicodeName, character, htmlEntityName ) ;
    map.put( lexeme.getCharacter(), lexeme ) ;
  }



}
>>