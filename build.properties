
project.name=Novelang

# Launch the build in command-line mode setting the property.
# Never check the file in the VCS with another value than SNAPSHOT.
project.version=SNAPSHOT

project.versionedname=${project.name}-${project.version}

antlr.generatedpackage.dir=novelang/parser/antlr

idea.antlr.generated.dir=idea/generated/antlr

target.dir=target

target.antlr.generated.package=novelang.parser.antlr
target.antlr.generated.dir=${target.dir}/antlr
target.antlr.generated.dirwithpackage=${target.antlr.generated.dir}/${antlr.generatedpackage.dir}


target.buildclasses.dir=${target.dir}/build-classes
target.buildclasses.presencecondition=novelang.build.JavaGenerator

target.mainclasses.dir=${target.dir}/main-classes
target.testclasses.dir=${target.dir}/test-classes/java

target.timestamped.dir=${target.dir}/timestamped

target.documentation.dir=${target.dir}/documentation
target.documentation.tweaked.dir=${target.dir}/documentation/src2
target.documentation.site.dir=${target.documentation.dir}/site
target.documentation.page=novelang.html
target.documentation.pdf=novelang.pdf
target.documentation.htmldocument=/${target.documentation.page}
target.documentation.pdfdocument=/${target.documentation.pdf}

target.test.reports.dir=${target.dir}/test-reports
target.test.scratchfiles.dir=${target.dir}/test-scratchfiles

target.javadoc.dir=${target.dir}/javadoc
target.javadoc.zipfilename=javadoc.zip
target.javadoc.zip=${target.dir}/javadoc.zip

target.jar.name=${project.versionedname}.jar
target.jar.path=${target.dir}/${target.jar.name}

target.distrib.name=${project.versionedname}.zip
target.distrib.path=${target.dir}/${target.distrib.name}

build.novelangtask.name=novelang.batch.NovelangTask
build.skiptests=false

lib.deploy.dir=lib
lib.build.dir=lib/build

legal.dir=legal


source.dir=src
source.main.java.dir=${source.dir}/main
source.main.antlr.dir=${source.dir}/antlr
source.main.antlr.maingrammar=Novelang.g
source.main.resources.dir=${source.dir}/main-resources
source.style.default.dir=${source.main.resources.dir}

source.codegeneration.java.dir=${source.dir}/code-generation

source.test.java.dir=${source.dir}/test
source.test.resources.dir=${source.dir}/test-resources

#source.samples.dir=samples
source.documentation.dir=${source.dir}/doc
source.documentation.version.dir=${source.documentation.dir}/versions

#relative to ${target.documentation.tweaked.dir}
documentation.fonts.dir=../../../src/main-resources/fonts/LinuxLibertine-4.1.8

documentation.sourcecharacterstable.class=novelang.parser.documentation.SourceCharactersTable
documentation.sourcecharacterstable.nlp=source-characters.nlp


configuration.dir=configuration
configuration.main.dir=${configuration.dir}/main
configuration.test.dir=${configuration.dir}/test

compiler.source=1.5
compiler.target=1.5

launcher.mainclass=novelang.launcher.Main
launcher.httpd.command=httpdaemon
launcher.batch.command=generate

# Made a Ant property because Ant doesn't take command line parameters
# as to be passed to HttpDaemon in the forked VM.
novelang.style.dir=${basedir}/src/resource/style


distrib.dir=distrib

publish.remote.host=frs.sourceforge.net
publish.remote.project.name=novelang
publish.remote.dir=n/no/novelang
publish.remote.doc.dir=/home/groups/${publish.remote.dir}/htdocs
publish.remote.release.dir=/home/frs/project/${publish.remote.dir}

announcement.download.url=https://sourceforge.net/projects/novelang/files
announcement.mailinglist.1=novelang-users@googlegroups.com
announcement.mailinglist.2=novelang-developers@googlegroups.com

announcement.project.homepage=http://novelang.sourceforge.net
announcement.project.blog=http://novelang.blogspot.com
