<?xml version="1.0"?>

<project basedir="." name="Novelang build file" default="clean-compile-runtests" >

  <description>
    Build system for Novelang.

    Novelang is a lightweight authoring tool.
    
    Ant-1.7.0 required. Use other version at your own risk!
    
    ------------------------------------

    Copyright (C) 2008 Laurent Caillette

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation, either
    version 3 of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see http://www.gnu.org/licenses/

  </description>
  
  <target name="init" >
  
    <pathconvert property="basedir.fullpath" dirsep="/" >      
      <path>
        <pathelement location="${basedir}" />
      </path>
    </pathconvert>
    <echo>basedir.fullpath = ${basedir.fullpath}</echo>
    
    <tstamp>
      <format property="timestamp" pattern="yyyy-MM-dd_HH.mm" />
    </tstamp>

    <!-- Overrides any other property. -->
    <property file="${user.dir}/novelang.properties" />

    <property file="build.properties" />

    <!--<echo>novelang.style.dir = ${novelang.style.dir}</echo>-->

    <patternset id="resource-patterns" >
      <include name="**/*.properties" />
      <include name="**/*.xml" />
      <include name="**/*.xsl" />
      <include name="**/*.pen" />
      <include name="**/*.png" />
      <include name="**/*.jpeg" />
      <include name="**/*.jpg" />
      <include name="**/*.gif" />
      <include name="**/*.css" />      
      <include name="**/*.html" />
      <include name="**/*.xhtml" />
      <include name="**/*.dtd" />
      <include name="**/*.txt" />
      <include name="**/*.bin" />
      <include name="**/*.st" />
    </patternset>

    <path id="deploy-libs" >
      <fileset dir="${lib.deploy.dir}" includes="*.jar" />
    </path>

    <path id="build-libs" >
      <fileset dir="${lib.build.dir}" includes="*.jar" />
    </path>

    <path id="antlr-grammars" >
      <fileset dir="${source.main.antlr.dir}" includes="*.g"/>
    </path>

  </target>

  <target name="create-target-dir" depends="init" >
    <mkdir dir="${target.dir}" />
    <mkdir dir="${target.mainclasses.dir}" />
  </target>


  <target name="clean" depends="init" >
    <delete dir="${target.dir}" />  
  </target>
  
  
  <!--
    =======
    Compile
    =======  
  -->

  <target name="generate-antlr" depends="init, create-target-dir" >

    <pathconvert
        refid="antlr-grammars"
        property="antlr-main-sources"
        dirsep="/"
        pathsep=" "
    >
      <map from="${basedir.fullpath}/" to="" /> <!-- Needed, really? -->
    </pathconvert>

    <echo>antlrsources='${antlr-main-sources}'</echo>

    <java
        classname="org.antlr.Tool"
        failonerror="true"
    >
      <classpath refid="build-libs" />
      <arg line="-fo ${target.antlr.generated.dir} ${antlr-main-sources}" />
    </java>

  </target>




  <target name="compile-main" depends="init, create-target-dir" >

    <javac
        destdir="${target.mainclasses.dir}"
        source="${compiler.source}"
        target="${compiler.target}"
        debug="on"
        debuglevel="lines,vars,source"
    >
      <classpath>
        <path refid="deploy-libs" />
      </classpath>
      <src path="${source.main.java.dir}" />
      <src path="${target.antlr.generated.dir}" />
    </javac>

    <copy todir="${target.mainclasses.dir}" >
      <fileset dir="${source.main.java.dir}" >
        <patternset refid="resource-patterns" />
      </fileset>
      <fileset dir="${configuration.main.dir}" >
        <patternset refid="resource-patterns" />
      </fileset>
      <fileset dir="${source.style.default.dir}" >
        <patternset refid="resource-patterns" />
      </fileset>
    </copy>

  </target>


  <target name="compile-tests" depends="generate-antlr, compile-main" >
    
    <mkdir dir="${target.testclasses.dir}" />    

    <javac
        destdir="${target.testclasses.dir}"
        srcdir="${source.test.java.dir}"
        source="${compiler.source}"
        target="${compiler.target}"
    >
      <classpath>
        <path refid="deploy-libs" />
        <path refid="build-libs" />
        <pathelement path="${target.mainclasses.dir}" />
      </classpath>
    </javac>

    <copy todir="${target.testclasses.dir}" >
      <fileset dir="${source.test.java.dir}" >
        <patternset refid="resource-patterns" />
      </fileset>
      <fileset dir="${configuration.test.dir}" >
        <patternset refid="resource-patterns" />
      </fileset>
    </copy>
    
  </target>
  
  
  
  <!--
    ====
    Test
    ====  
  -->  

  <target name="run-tests" depends="init, create-target-dir" >

    <delete dir="${target.testreports.dir}" />
    <mkdir dir="${target.testreports.dir}" />    

    <junit printsummary="yes" haltonfailure="no" >
      <classpath>
        <path refid="build-libs" />
        <path refid="deploy-libs" />
        <pathelement location="${target.mainclasses.dir}" />
        <pathelement location="${target.testclasses.dir}" />
        <pathelement location="${source.samples.dir}" />
      </classpath>
      <batchtest fork="yes" todir="${target.testreports.dir}" >
        <fileset 
            dir="${target.testclasses.dir}" 
            includes="**/*Test.class"
            excludes="**/Abstract*Test.class"
        />
      </batchtest>
      <formatter type="plain"/>
    </junit>
  </target>

  <target
      name="clean-compile-runtests"
      depends="clean, compile-tests, run-tests"
      description="Run this one to run tests from clean"
  /> 
  

  <!--
    ===================
    Start / stop server
    ===================
  -->

  <target name="start-httpd" depends="init" >
    
    <java
        classname="novelang.daemon.HttpDaemon"
        failonerror="true"
        fork="true"
    >
      <classpath>
        <path refid="deploy-libs" />
        <pathelement location="${target.mainclasses.dir}" />
        <pathelement location="${configuration.main.dir}" />
        <pathelement location="${source.style.default.dir}" />
      </classpath>
      <jvmarg value="-Duser.dir=${user.dir}" /> <!-- Override Ant's basedir -->
      <jvmarg value="-Dfile.encoding=${novelang.encoding}" />
      <jvmarg value="-Dnovelang.log.dir=${user.dir}" />
      <jvmarg value="-Djava.awt.headless=true" />
      <jvmarg value="-Xmx512M" />
    </java>

  </target>



  <!--
    =============
    Documentation
    =============
  -->

  <target name="javadoc" depends="init, create-target-dir" >

    <javadoc
        sourcepath="${source.main.java.dir}"
        destdir="${target.javadoc.dir}"
        use="true"
        author="true"
    >
    </javadoc>

    <zip
        destfile="${target.javadoc.zip}"
        basedir="${target.javadoc.dir}"
    />

  </target>



  <target name="generate-documentation" depends="init" >

    <!--
      No need to delete / create ${target.documentation.site.dir}
      as the batch generation does it automatically.
    -->

    <property name="logdestination" location="${target.documentation.dir}" />
    <property name="absolutetarget" location="${target.documentation.site.dir}" />

    <java
        classname="novelang.batch.Main"
        failonerror="true"
        fork="true"
        dir="${source.documentation.dir}"
    >
      <classpath>
        <path refid="deploy-libs" />
        <pathelement location="${target.mainclasses.dir}" />
        <pathelement location="${configuration.main.dir}" />
      </classpath>
      <jvmarg value="-Dfile.encoding=${novelang.encoding}" />
      <jvmarg value="-Djava.awt.headless=true" />
      <jvmarg value="-Dnovelang.log.dir=${logdestination}" />
      <jvmarg value="-Xmx512M" />
      <arg value="${target.documentation.document}" />
      <arg value="-targetDirectory" />
      <arg value="${absolutetarget}" />
    </java>

    <move
        file="${absolutetarget}/${target.documentation.page}"
        tofile="${absolutetarget}/index.html"
    />

    <!-- TODO remove this once supported by batch generation -->
    <copy
        file="${source.documentation.dir}/style/screen.css"
        todir="${target.documentation.site.dir}"
    />

  </target>

  <target name="login-on-remote-site" >
    <input message="Login on remote site" addproperty="user" />
    <input message="Password on remote site" addproperty="password" />
  </target>

  <target name="publish-documentation" depends="login-on-remote-site" >

  <!--
      Strange bug: the input task for the password never executes if we
      set a dependency to the generate-documentation target.
      So it has to be run explicitely before this target.
    -->
    <scp todir="${user}:${password}@${publish.remote.host}:${publish.remote.dir}">
      <fileset dir="${target.documentation.site.dir}" />
    </scp>

  </target>


  <target name="publish-javadoc" depends="login-on-remote-site" >

    <scp
        todir="${user}:${password}@${publish.remote.host}:${publish.remote.dir}"
        file="${target.javadoc.zip}"
    />

    <property
        name="command"
        value="unzip -o -d ${publish.remote.dir}/javadoc ${publish.remote.dir}/${target.javadoc.zipfilename}" 
    />
    <echo>SSH command: ${command}</echo>

    <sshexec
        host="${publish.remote.host}"
        username="${user}"
        password="${password}"
        command="${command}"
        outputproperty="sshexecoutput"
    />

    <echo>SSH output: ${sshexecoutput}</echo>

  </target>

  <!--
    It's unelegant to prompt for login / password before lengthy and failure prone operations
    like generating documentation but otherwise there is some bug blocking password input.
  -->
  <target
      name="publish-everything"
      depends="login-on-remote-site, publish-documentation, publish-javadoc"
  />



  <!--
    =============
    Distribution.
    =============
  -->

  <target name="create-jar" depends="init" >


    <mkdir dir="${target.timestamped.dir}" />

    <copy todir="${target.timestamped.dir}" >
      <fileset dir="${source.main.java.dir}" >
        <include name="**/Version.java" />
      </fileset>
    </copy>

    <replace dir="${target.timestamped.dir}" value="${project.version}" >
      <replacetoken>@SNAPSHOT@</replacetoken>
    </replace>

    <javac
        destdir="${target.mainclasses.dir}"
        source="${compiler.source}"
        target="${compiler.target}"
        debug="on"
        debuglevel="lines,vars,source"
    >
      <src path="${target.timestamped.dir}" />
    </javac>



    <pathconvert
        refid="deploy-libs"
        property="deploylibs"
        dirsep="/"
        pathsep=" "
    >
      <map from="${basedir.fullpath}/" to="" />
    </pathconvert>

    <echo>deploylibs=${deploylibs}</echo>

    <delete file="${target.jar.path}" />
    <jar
        destfile="${target.jar.path}"
        basedir="${target.mainclasses.dir}"
    >
      <manifest>
        <attribute name="Class-Path" value="${deploylibs}" />
        <attribute name="Implementation-Version" value="${project.version}" />
        <attribute name="Main-Class" value="${httpd.mainclass}" />
        <attribute name="Creation-Date" value="${timestamp}" />
        <attribute name="Created-By" value="${project.name} build system" />
      </manifest>
    </jar>


    <!--
      Copying lib just for running the .jar from target directory,
      because of the relative classpath in the manifest.
    -->
    <delete file="${target.dir}/${lib.deploy.dir}" />
    <copy todir="${target.dir}/${lib.deploy.dir}" >
      <path refid="deploy-libs" />
    </copy>

  </target>

  <target name="package-distribution" depends="init" >

    <zip destfile="${target.distrib.path}" >
      <zipfileset file="${target.jar.path}" fullpath="${target.jar.name}" />
      <fileset dir="${basedir}" >
        <patternset>
          <include name="build.*" />
          <include name="${legal.dir}/*" />
          <include name="${lib.deploy.dir}/*" />
          <include name="${source.dir}/**" />
          <include name="${configuration.dir}/**" />
        </patternset>
      </fileset>

      <zipfileset dir="${target.documentation.site.dir}" prefix="documentation" />
      <zipfileset dir="${target.javadoc.dir}" prefix="javadoc" />

    </zip>

  </target>

  <target name="build-distribution"
      depends="clean-compile-runtests, generate-documentation, javadoc, create-jar, package-distribution"
  />

</project>