// $ANTLR 3.1.1 /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g 2010-05-02 12:32:35

package novelang.parser.antlr ;
import novelang.parser.antlr.ProblemDelegate ; // Keep first, used as a marker by code generator.
import novelang.parser.antlr.ParserDelegate ;
import novelang.parser.antlr.delimited.BlockDelimiter ;
import novelang.common.Location ;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class NovelangParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "PARAGRAPHS_INSIDE_ANGLED_BRACKET_PAIRS", "COMPOSIUM", "LEVEL_INTRODUCER_", "LEVEL_INTRODUCER_INDENT_", "LEVEL_TITLE", "EXTENDED_WORD_", "BLOCK_INSIDE_PARENTHESIS", "BLOCK_INSIDE_SQUARE_BRACKETS", "BLOCK_INSIDE_DOUBLE_QUOTES", "BLOCK_INSIDE_SOLIDUS_PAIRS", "BLOCK_INSIDE_HYPHEN_PAIRS", "BLOCK_INSIDE_TWO_HYPHENS_THEN_HYPHEN_LOW_LINE", "BLOCK_OF_LITERAL_INSIDE_GRAVE_ACCENTS", "BLOCK_OF_LITERAL_INSIDE_GRAVE_ACCENT_PAIRS", "BLOCK_AFTER_TILDE", "SUBBLOCK", "LINES_OF_LITERAL", "NOVELLA", "PARAGRAPH_REGULAR", "PARAGRAPH_AS_LIST_ITEM_WITH_TRIPLE_HYPHEN_", "WORD_AFTER_CIRCUMFLEX_ACCENT", "URL_LITERAL", "RASTER_IMAGE", "VECTOR_IMAGE", "RESOURCE_LOCATION", "EMBEDDED_LIST_ITEM_WITH_HYPHEN_", "CELL", "CELL_ROW", "CELL_ROWS_WITH_VERTICAL_LINE", "WORD_", "WHITESPACE_", "LINE_BREAK_", "TAG", "ABSOLUTE_IDENTIFIER", "RELATIVE_IDENTIFIER", "COMPOSITE_IDENTIFIER", "PUNCTUATION_SIGN", "APOSTROPHE_WORDMATE", "SIGN_COMMA", "SIGN_FULLSTOP", "SIGN_ELLIPSIS", "SIGN_QUESTIONMARK", "SIGN_EXCLAMATIONMARK", "SIGN_SEMICOLON", "SIGN_COLON", "COMMAND_INSERT_", "COMMAND_INSERT_CREATELEVEL_", "COMMAND_INSERT_NOHEAD_", "COMMAND_INSERT_LEVELABOVE_", "COMMAND_INSERT_RECURSE_", "COMMAND_INSERT_SORT_", "COMMAND_INSERT_STYLE_", "COMMAND_MAPSTYLESHEET_", "COMMAND_MAPSTYLESHEET_ASSIGNMENT_", "COMMERCIAL_AT", "REVERSE_SOLIDUS", "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", "DOUBLE_QUOTE", "SOLIDUS", "HYPHEN_MINUS", "LOW_LINE", "WHITESPACE", "SOFTBREAK", "VERTICAL_LINE", "LESS_THAN_SIGN", "GREATER_THAN_SIGN", "GRAVE_ACCENT", "FULL_STOP", "COMMA", "QUESTION_MARK", "EXCLAMATION_MARK", "SEMICOLON", "COLON", "APOSTROPHE", "LATIN_SMALL_LETTER_F", "LATIN_SMALL_LETTER_I", "LATIN_SMALL_LETTER_L", "LATIN_SMALL_LETTER_E", "LATIN_SMALL_LETTER_H", "LATIN_SMALL_LETTER_T", "LATIN_SMALL_LETTER_P", "LATIN_SMALL_LETTER_S", "NUMBER_SIGN", "AMPERSAND", "EQUALS_SIGN", "TILDE", "DOLLAR_SIGN", "PLUS_SIGN", "ASTERISK", "PERCENT_SIGN", "LATIN_SMALL_LETTER_N", "LATIN_SMALL_LETTER_G", "LATIN_SMALL_LETTER_J", "LATIN_SMALL_LETTER_V", "CIRCUMFLEX_ACCENT", "LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK", "RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK", "LATIN_SMALL_LETTER_R", "LATIN_SMALL_LETTER_C", "LATIN_SMALL_LETTER_U", "LATIN_SMALL_LETTER_O", "LATIN_SMALL_LETTER_A", "LATIN_SMALL_LETTER_D", "LATIN_SMALL_LETTER_B", "LATIN_SMALL_LETTER_Y", "LATIN_SMALL_LETTER_M", "COPYRIGHT_SIGN", "DEGREE_SIGN", "EURO_SIGN", "LEFT_CURLY_BRACKET", "LEFT_SINGLE_QUOTATION_MARK", "MULTIPLICATION_SIGN", "POUND_SIGN", "REGISTERED_SIGN", "RIGHT_CURLY_BRACKET", "RIGHT_SINGLE_QUOTATION_MARK", "SECTION_SIGN", "DIGIT_0", "DIGIT_1", "DIGIT_2", "DIGIT_3", "DIGIT_4", "DIGIT_5", "DIGIT_6", "DIGIT_7", "DIGIT_8", "DIGIT_9", "LATIN_CAPITAL_LETTER_A", "LATIN_CAPITAL_LETTER_B", "LATIN_CAPITAL_LETTER_C", "LATIN_CAPITAL_LETTER_D", "LATIN_CAPITAL_LETTER_E", "LATIN_CAPITAL_LETTER_F", "LATIN_SMALL_LETTER_K", "LATIN_SMALL_LETTER_Q", "LATIN_SMALL_LETTER_W", "LATIN_SMALL_LETTER_X", "LATIN_SMALL_LETTER_Z", "LATIN_CAPITAL_LETTER_G", "LATIN_CAPITAL_LETTER_H", "LATIN_CAPITAL_LETTER_I", "LATIN_CAPITAL_LETTER_J", "LATIN_CAPITAL_LETTER_K", "LATIN_CAPITAL_LETTER_L", "LATIN_CAPITAL_LETTER_M", "LATIN_CAPITAL_LETTER_N", "LATIN_CAPITAL_LETTER_O", "LATIN_CAPITAL_LETTER_P", "LATIN_CAPITAL_LETTER_Q", "LATIN_CAPITAL_LETTER_R", "LATIN_CAPITAL_LETTER_S", "LATIN_CAPITAL_LETTER_T", "LATIN_CAPITAL_LETTER_U", "LATIN_CAPITAL_LETTER_V", "LATIN_CAPITAL_LETTER_W", "LATIN_CAPITAL_LETTER_X", "LATIN_CAPITAL_LETTER_Y", "LATIN_CAPITAL_LETTER_Z", "LATIN_SMALL_LETTER_A_WITH_GRAVE", "LATIN_CAPITAL_LETTER_A_WITH_GRAVE", "LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX", "LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX", "LATIN_SMALL_LETTER_A_WITH_DIAERESIS", "LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS", "LATIN_SMALL_LETTER_A_WITH_ACUTE", "LATIN_CAPITAL_LETTER_A_WITH_ACUTE", "LATIN_SMALL_LETTER_AE", "LATIN_CAPITAL_LETTER_AE", "LATIN_SMALL_LETTER_C_WITH_CEDILLA", "LATIN_CAPITAL_LETTER_C_WITH_CEDILLA", "LATIN_SMALL_LETTER_E_WITH_GRAVE", "LATIN_CAPITAL_LETTER_E_WITH_GRAVE", "LATIN_SMALL_LETTER_E_WITH_ACUTE", "LATIN_CAPITAL_LETTER_E_WITH_ACUTE", "LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX", "LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX", "LATIN_SMALL_LETTER_E_WITH_DIAERESIS", "LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS", "LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX", "LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX", "LATIN_SMALL_LETTER_I_WITH_DIAERESIS", "LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS", "LATIN_SMALL_LETTER_I_WITH_ACUTE", "LATIN_CAPITAL_LETTER_I_WITH_ACUTE", "LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX", "LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX", "LATIN_SMALL_LETTER_O_WITH_DIAERESIS", "LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS", "LATIN_SMALL_LETTER_O_WITH_ACUTE", "LATIN_CAPITAL_LETTER_O_WITH_ACUTE", "LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE", "LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE", "LATIN_SMALL_LETTER_U_WITH_GRAVE", "LATIN_CAPITAL_LETTER_U_WITH_GRAVE", "LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX", "LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX", "LATIN_SMALL_LETTER_U_WITH_DIAERESIS", "LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS", "LATIN_SMALL_LETTER_U_WITH_ACUTE", "LATIN_CAPITAL_LETTER_U_WITH_ACUTE", "LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE", "LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE", "LATIN_SMALL_LIGATURE_OE", "LATIN_CAPITAL_LIGATURE_OE", "SINGLE_LEFT_POINTING_ANGLE_QUOTATION_MARK", "SINGLE_RIGHT_POINTING_ANGLE_QUOTATION_MARK", "BLOCK_COMMENT", "LINE_COMMENT"
    };
    public static final int COPYRIGHT_SIGN=113;
    public static final int SIGN_QUESTIONMARK=45;
    public static final int LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX=181;
    public static final int LATIN_CAPITAL_LETTER_U_WITH_ACUTE=206;
    public static final int SIGN_COLON=48;
    public static final int LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS=194;
    public static final int LATIN_SMALL_LETTER_E_WITH_ACUTE=179;
    public static final int BLOCK_OF_LITERAL_INSIDE_GRAVE_ACCENT_PAIRS=17;
    public static final int SIGN_EXCLAMATIONMARK=46;
    public static final int LATIN_SMALL_LETTER_AE=173;
    public static final int COMMERCIAL_AT=58;
    public static final int EOF=-1;
    public static final int MULTIPLICATION_SIGN=118;
    public static final int LEFT_CURLY_BRACKET=116;
    public static final int HYPHEN_MINUS=66;
    public static final int DIGIT_0=124;
    public static final int LATIN_CAPITAL_LETTER_A_WITH_GRAVE=166;
    public static final int DIGIT_1=125;
    public static final int PERCENT_SIGN=96;
    public static final int QUESTION_MARK=76;
    public static final int LATIN_CAPITAL_LETTER_C_WITH_CEDILLA=176;
    public static final int GRAVE_ACCENT=73;
    public static final int WORD_=33;
    public static final int COMMAND_INSERT_CREATELEVEL_=50;
    public static final int APOSTROPHE=80;
    public static final int RELATIVE_IDENTIFIER=38;
    public static final int LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS=170;
    public static final int SINGLE_LEFT_POINTING_ANGLE_QUOTATION_MARK=211;
    public static final int URL_LITERAL=25;
    public static final int LOW_LINE=67;
    public static final int COMMAND_INSERT_NOHEAD_=51;
    public static final int CIRCUMFLEX_ACCENT=101;
    public static final int RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK=103;
    public static final int LATIN_CAPITAL_LETTER_A_WITH_ACUTE=172;
    public static final int DEGREE_SIGN=114;
    public static final int FULL_STOP=74;
    public static final int DOLLAR_SIGN=93;
    public static final int SIGN_COMMA=42;
    public static final int WHITESPACE=68;
    public static final int SEMICOLON=78;
    public static final int LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS=188;
    public static final int PARAGRAPH_AS_LIST_ITEM_WITH_TRIPLE_HYPHEN_=23;
    public static final int RIGHT_CURLY_BRACKET=121;
    public static final int LEVEL_INTRODUCER_INDENT_=7;
    public static final int LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX=202;
    public static final int LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK=102;
    public static final int REVERSE_SOLIDUS=59;
    public static final int LEFT_SINGLE_QUOTATION_MARK=117;
    public static final int LEVEL_INTRODUCER_=6;
    public static final int SIGN_FULLSTOP=43;
    public static final int SECTION_SIGN=123;
    public static final int LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE=207;
    public static final int BLOCK_INSIDE_DOUBLE_QUOTES=12;
    public static final int LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX=168;
    public static final int PUNCTUATION_SIGN=40;
    public static final int LATIN_SMALL_LETTER_O_WITH_DIAERESIS=193;
    public static final int SUBBLOCK=19;
    public static final int LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE=198;
    public static final int ASTERISK=95;
    public static final int LATIN_SMALL_LETTER_A_WITH_GRAVE=165;
    public static final int GREATER_THAN_SIGN=72;
    public static final int REGISTERED_SIGN=120;
    public static final int LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX=191;
    public static final int LATIN_CAPITAL_LIGATURE_OE=210;
    public static final int APOSTROPHE_WORDMATE=41;
    public static final int LATIN_SMALL_LETTER_E_WITH_DIAERESIS=183;
    public static final int RIGHT_SINGLE_QUOTATION_MARK=122;
    public static final int COMPOSIUM=5;
    public static final int LATIN_CAPITAL_LETTER_E_WITH_GRAVE=178;
    public static final int LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX=192;
    public static final int AMPERSAND=90;
    public static final int DIGIT_2=126;
    public static final int SOLIDUS=65;
    public static final int DIGIT_3=127;
    public static final int POUND_SIGN=119;
    public static final int DIGIT_4=128;
    public static final int LESS_THAN_SIGN=71;
    public static final int DIGIT_5=129;
    public static final int DIGIT_6=130;
    public static final int LEFT_SQUARE_BRACKET=62;
    public static final int DIGIT_7=131;
    public static final int DIGIT_8=132;
    public static final int DIGIT_9=133;
    public static final int EQUALS_SIGN=91;
    public static final int COLON=79;
    public static final int NOVELLA=21;
    public static final int SOFTBREAK=69;
    public static final int LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS=184;
    public static final int LATIN_SMALL_LETTER_D=109;
    public static final int LATIN_SMALL_LETTER_E=84;
    public static final int LATIN_SMALL_LETTER_B=110;
    public static final int LATIN_SMALL_LETTER_E_WITH_GRAVE=177;
    public static final int LATIN_SMALL_LETTER_C=105;
    public static final int WORD_AFTER_CIRCUMFLEX_ACCENT=24;
    public static final int LATIN_SMALL_LETTER_A=108;
    public static final int CELL_ROWS_WITH_VERTICAL_LINE=32;
    public static final int DOUBLE_QUOTE=64;
    public static final int ABSOLUTE_IDENTIFIER=37;
    public static final int LATIN_SMALL_LETTER_I_WITH_ACUTE=189;
    public static final int SINGLE_RIGHT_POINTING_ANGLE_QUOTATION_MARK=212;
    public static final int WHITESPACE_=34;
    public static final int EXTENDED_WORD_=9;
    public static final int LEFT_PARENTHESIS=60;
    public static final int BLOCK_COMMENT=213;
    public static final int LATIN_CAPITAL_LETTER_U_WITH_GRAVE=200;
    public static final int VERTICAL_LINE=70;
    public static final int SIGN_ELLIPSIS=44;
    public static final int SIGN_SEMICOLON=47;
    public static final int PARAGRAPH_REGULAR=22;
    public static final int LINE_COMMENT=214;
    public static final int LATIN_SMALL_LETTER_U_WITH_GRAVE=199;
    public static final int LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX=186;
    public static final int BLOCK_OF_LITERAL_INSIDE_GRAVE_ACCENTS=16;
    public static final int COMMAND_INSERT_=49;
    public static final int COMMAND_MAPSTYLESHEET_ASSIGNMENT_=57;
    public static final int COMMAND_INSERT_STYLE_=55;
    public static final int LATIN_SMALL_LETTER_A_WITH_ACUTE=171;
    public static final int EURO_SIGN=115;
    public static final int COMMAND_INSERT_RECURSE_=53;
    public static final int BLOCK_INSIDE_PARENTHESIS=10;
    public static final int LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX=185;
    public static final int LATIN_CAPITAL_LETTER_AE=174;
    public static final int LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX=167;
    public static final int LATIN_CAPITAL_LETTER_I_WITH_ACUTE=190;
    public static final int LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE=208;
    public static final int LATIN_CAPITAL_LETTER_A=134;
    public static final int COMPOSITE_IDENTIFIER=39;
    public static final int LATIN_CAPITAL_LETTER_B=135;
    public static final int LATIN_CAPITAL_LETTER_C=136;
    public static final int LATIN_CAPITAL_LETTER_D=137;
    public static final int LATIN_SMALL_LIGATURE_OE=209;
    public static final int LATIN_CAPITAL_LETTER_E=138;
    public static final int LATIN_CAPITAL_LETTER_F=139;
    public static final int COMMAND_MAPSTYLESHEET_=56;
    public static final int LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE=197;
    public static final int EXCLAMATION_MARK=77;
    public static final int LATIN_CAPITAL_LETTER_M=151;
    public static final int LATIN_CAPITAL_LETTER_N=152;
    public static final int LATIN_CAPITAL_LETTER_K=149;
    public static final int LATIN_SMALL_LETTER_U_WITH_ACUTE=205;
    public static final int LATIN_CAPITAL_LETTER_L=150;
    public static final int LATIN_CAPITAL_LETTER_I=147;
    public static final int BLOCK_AFTER_TILDE=18;
    public static final int LATIN_CAPITAL_LETTER_J=148;
    public static final int LATIN_CAPITAL_LETTER_G=145;
    public static final int LATIN_CAPITAL_LETTER_H=146;
    public static final int RASTER_IMAGE=26;
    public static final int LATIN_CAPITAL_LETTER_U=159;
    public static final int LATIN_CAPITAL_LETTER_V=160;
    public static final int LATIN_CAPITAL_LETTER_S=157;
    public static final int LATIN_CAPITAL_LETTER_T=158;
    public static final int LATIN_CAPITAL_LETTER_Q=155;
    public static final int LATIN_CAPITAL_LETTER_R=156;
    public static final int LATIN_CAPITAL_LETTER_O=153;
    public static final int LATIN_CAPITAL_LETTER_P=154;
    public static final int LATIN_CAPITAL_LETTER_E_WITH_ACUTE=180;
    public static final int CELL=30;
    public static final int LATIN_CAPITAL_LETTER_Z=164;
    public static final int LATIN_SMALL_LETTER_A_WITH_DIAERESIS=169;
    public static final int LATIN_CAPITAL_LETTER_Y=163;
    public static final int LATIN_CAPITAL_LETTER_X=162;
    public static final int LATIN_CAPITAL_LETTER_W=161;
    public static final int COMMAND_INSERT_SORT_=54;
    public static final int LATIN_SMALL_LETTER_I_WITH_DIAERESIS=187;
    public static final int RIGHT_PARENTHESIS=61;
    public static final int LATIN_CAPITAL_LETTER_O_WITH_ACUTE=196;
    public static final int COMMA=75;
    public static final int LATIN_SMALL_LETTER_U_WITH_DIAERESIS=203;
    public static final int TILDE=92;
    public static final int PARAGRAPHS_INSIDE_ANGLED_BRACKET_PAIRS=4;
    public static final int CELL_ROW=31;
    public static final int LINES_OF_LITERAL=20;
    public static final int BLOCK_INSIDE_SQUARE_BRACKETS=11;
    public static final int PLUS_SIGN=94;
    public static final int BLOCK_INSIDE_TWO_HYPHENS_THEN_HYPHEN_LOW_LINE=15;
    public static final int COMMAND_INSERT_LEVELABOVE_=52;
    public static final int LEVEL_TITLE=8;
    public static final int LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS=204;
    public static final int RESOURCE_LOCATION=28;
    public static final int LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX=201;
    public static final int TAG=36;
    public static final int RIGHT_SQUARE_BRACKET=63;
    public static final int LATIN_SMALL_LETTER_W=142;
    public static final int LATIN_SMALL_LETTER_V=100;
    public static final int LATIN_SMALL_LETTER_Y=111;
    public static final int LATIN_SMALL_LETTER_X=143;
    public static final int BLOCK_INSIDE_SOLIDUS_PAIRS=13;
    public static final int LATIN_SMALL_LETTER_Z=144;
    public static final int LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX=182;
    public static final int LATIN_SMALL_LETTER_O_WITH_ACUTE=195;
    public static final int VECTOR_IMAGE=27;
    public static final int LATIN_SMALL_LETTER_F=81;
    public static final int LATIN_SMALL_LETTER_G=98;
    public static final int LATIN_SMALL_LETTER_H=85;
    public static final int NUMBER_SIGN=89;
    public static final int LATIN_SMALL_LETTER_I=82;
    public static final int LATIN_SMALL_LETTER_J=99;
    public static final int LATIN_SMALL_LETTER_K=140;
    public static final int LATIN_SMALL_LETTER_L=83;
    public static final int LATIN_SMALL_LETTER_M=112;
    public static final int LATIN_SMALL_LETTER_N=97;
    public static final int BLOCK_INSIDE_HYPHEN_PAIRS=14;
    public static final int LATIN_SMALL_LETTER_O=107;
    public static final int LATIN_SMALL_LETTER_C_WITH_CEDILLA=175;
    public static final int LATIN_SMALL_LETTER_P=87;
    public static final int EMBEDDED_LIST_ITEM_WITH_HYPHEN_=29;
    public static final int LINE_BREAK_=35;
    public static final int LATIN_SMALL_LETTER_Q=141;
    public static final int LATIN_SMALL_LETTER_R=104;
    public static final int LATIN_SMALL_LETTER_S=88;
    public static final int LATIN_SMALL_LETTER_T=86;
    public static final int LATIN_SMALL_LETTER_U=106;

    // delegates
    // delegators


        public NovelangParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public NovelangParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return NovelangParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g"; }


      private ParserDelegate delegate ;//= new GrammarDelegate() ;

      public void setParserDelegate( ParserDelegate delegate ) {
        this.delegate = delegate ;
      }

      @Override
      public void traceIn( String s, int ruleIndex ) {
        delegate.traceIn( s, ruleIndex ) ;
      }

      @Override
      public void traceOut( String s, int ruleIndex ) {
        delegate.traceOut( s, ruleIndex ) ;
      }

      @Override
      public void reportError(org.antlr.runtime.RecognitionException e ) {
        if( null == delegate ) {
          super.reportError( e ) ;
        } else {
          delegate.report( e ) ;
        }
      }
    /*
      @Override
      public java.lang.String getErrorMessage(
          org.antlr.runtime.RecognitionException recognitionException,
          java.lang.String[] strings
      ) {
        System.out.println( "getErrorMessage( " + recognitionException + "\n" + strings ) ;
        return super.getErrorMessage( recognitionException, strings ) ;
      }
    */  

    /* 
      @Override
      public void emitErrorMessage( String string ) {
        if( null == delegate ) {
          super.emitErrorMessage( string ) ;
        } else {
          delegate.report( string ) ;
        }
      }
    */


    public static class novella_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "novella"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:188:1: novella : (p+= mediumbreak | p+= largebreak )? (p+= levelIntroducer | p+= paragraph | p+= embeddableResource | p+= blockQuote | p+= literal | p+= bigDashedListItem | p+= cellRowSequence ) (p+= largebreak (p+= levelIntroducer | p+= paragraph | p+= embeddableResource | p+= blockQuote | p+= literal | p+= bigDashedListItem | p+= cellRowSequence ) )* ( mediumbreak | largebreak )? EOF ->;
    public final NovelangParser.novella_return novella() throws RecognitionException {
        NovelangParser.novella_return retval = new NovelangParser.novella_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EOF3=null;
        List list_p=null;
        NovelangParser.mediumbreak_return mediumbreak1 = null;

        NovelangParser.largebreak_return largebreak2 = null;

        RuleReturnScope p = null;
        Object EOF3_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_mediumbreak=new RewriteRuleSubtreeStream(adaptor,"rule mediumbreak");
        RewriteRuleSubtreeStream stream_paragraph=new RewriteRuleSubtreeStream(adaptor,"rule paragraph");
        RewriteRuleSubtreeStream stream_bigDashedListItem=new RewriteRuleSubtreeStream(adaptor,"rule bigDashedListItem");
        RewriteRuleSubtreeStream stream_levelIntroducer=new RewriteRuleSubtreeStream(adaptor,"rule levelIntroducer");
        RewriteRuleSubtreeStream stream_largebreak=new RewriteRuleSubtreeStream(adaptor,"rule largebreak");
        RewriteRuleSubtreeStream stream_blockQuote=new RewriteRuleSubtreeStream(adaptor,"rule blockQuote");
        RewriteRuleSubtreeStream stream_embeddableResource=new RewriteRuleSubtreeStream(adaptor,"rule embeddableResource");
        RewriteRuleSubtreeStream stream_cellRowSequence=new RewriteRuleSubtreeStream(adaptor,"rule cellRowSequence");
        RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
         final Location startLocation = delegate.createLocation( input.LT( 1 ) ) ; 
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:190:3: ( (p+= mediumbreak | p+= largebreak )? (p+= levelIntroducer | p+= paragraph | p+= embeddableResource | p+= blockQuote | p+= literal | p+= bigDashedListItem | p+= cellRowSequence ) (p+= largebreak (p+= levelIntroducer | p+= paragraph | p+= embeddableResource | p+= blockQuote | p+= literal | p+= bigDashedListItem | p+= cellRowSequence ) )* ( mediumbreak | largebreak )? EOF ->)
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:190:5: (p+= mediumbreak | p+= largebreak )? (p+= levelIntroducer | p+= paragraph | p+= embeddableResource | p+= blockQuote | p+= literal | p+= bigDashedListItem | p+= cellRowSequence ) (p+= largebreak (p+= levelIntroducer | p+= paragraph | p+= embeddableResource | p+= blockQuote | p+= literal | p+= bigDashedListItem | p+= cellRowSequence ) )* ( mediumbreak | largebreak )? EOF
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:190:5: (p+= mediumbreak | p+= largebreak )?
            int alt1=3;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==WHITESPACE) ) {
                int LA1_1 = input.LA(2);

                if ( (LA1_1==SOFTBREAK) ) {
                    switch ( input.LA(3) ) {
                        case WHITESPACE:
                            {
                            int LA1_5 = input.LA(4);

                            if ( (LA1_5==SOFTBREAK) ) {
                                alt1=2;
                            }
                            else if ( ((LA1_5>=COMMERCIAL_AT && LA1_5<=LEFT_PARENTHESIS)||LA1_5==LEFT_SQUARE_BRACKET||(LA1_5>=DOUBLE_QUOTE && LA1_5<=HYPHEN_MINUS)||(LA1_5>=VERTICAL_LINE && LA1_5<=LESS_THAN_SIGN)||(LA1_5>=GRAVE_ACCENT && LA1_5<=LATIN_SMALL_LETTER_S)||(LA1_5>=EQUALS_SIGN && LA1_5<=TILDE)||(LA1_5>=LATIN_SMALL_LETTER_N && LA1_5<=LATIN_SMALL_LETTER_V)||LA1_5==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA1_5>=LATIN_SMALL_LETTER_R && LA1_5<=LATIN_SMALL_LETTER_M)||(LA1_5>=DIGIT_0 && LA1_5<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt1=1;
                            }
                            }
                            break;
                        case COMMERCIAL_AT:
                        case REVERSE_SOLIDUS:
                        case LEFT_PARENTHESIS:
                        case LEFT_SQUARE_BRACKET:
                        case DOUBLE_QUOTE:
                        case SOLIDUS:
                        case HYPHEN_MINUS:
                        case VERTICAL_LINE:
                        case LESS_THAN_SIGN:
                        case GRAVE_ACCENT:
                        case FULL_STOP:
                        case COMMA:
                        case QUESTION_MARK:
                        case EXCLAMATION_MARK:
                        case SEMICOLON:
                        case COLON:
                        case APOSTROPHE:
                        case LATIN_SMALL_LETTER_F:
                        case LATIN_SMALL_LETTER_I:
                        case LATIN_SMALL_LETTER_L:
                        case LATIN_SMALL_LETTER_E:
                        case LATIN_SMALL_LETTER_H:
                        case LATIN_SMALL_LETTER_T:
                        case LATIN_SMALL_LETTER_P:
                        case LATIN_SMALL_LETTER_S:
                        case EQUALS_SIGN:
                        case TILDE:
                        case LATIN_SMALL_LETTER_N:
                        case LATIN_SMALL_LETTER_G:
                        case LATIN_SMALL_LETTER_J:
                        case LATIN_SMALL_LETTER_V:
                        case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
                        case LATIN_SMALL_LETTER_R:
                        case LATIN_SMALL_LETTER_C:
                        case LATIN_SMALL_LETTER_U:
                        case LATIN_SMALL_LETTER_O:
                        case LATIN_SMALL_LETTER_A:
                        case LATIN_SMALL_LETTER_D:
                        case LATIN_SMALL_LETTER_B:
                        case LATIN_SMALL_LETTER_Y:
                        case LATIN_SMALL_LETTER_M:
                        case DIGIT_0:
                        case DIGIT_1:
                        case DIGIT_2:
                        case DIGIT_3:
                        case DIGIT_4:
                        case DIGIT_5:
                        case DIGIT_6:
                        case DIGIT_7:
                        case DIGIT_8:
                        case DIGIT_9:
                        case LATIN_CAPITAL_LETTER_A:
                        case LATIN_CAPITAL_LETTER_B:
                        case LATIN_CAPITAL_LETTER_C:
                        case LATIN_CAPITAL_LETTER_D:
                        case LATIN_CAPITAL_LETTER_E:
                        case LATIN_CAPITAL_LETTER_F:
                        case LATIN_SMALL_LETTER_K:
                        case LATIN_SMALL_LETTER_Q:
                        case LATIN_SMALL_LETTER_W:
                        case LATIN_SMALL_LETTER_X:
                        case LATIN_SMALL_LETTER_Z:
                        case LATIN_CAPITAL_LETTER_G:
                        case LATIN_CAPITAL_LETTER_H:
                        case LATIN_CAPITAL_LETTER_I:
                        case LATIN_CAPITAL_LETTER_J:
                        case LATIN_CAPITAL_LETTER_K:
                        case LATIN_CAPITAL_LETTER_L:
                        case LATIN_CAPITAL_LETTER_M:
                        case LATIN_CAPITAL_LETTER_N:
                        case LATIN_CAPITAL_LETTER_O:
                        case LATIN_CAPITAL_LETTER_P:
                        case LATIN_CAPITAL_LETTER_Q:
                        case LATIN_CAPITAL_LETTER_R:
                        case LATIN_CAPITAL_LETTER_S:
                        case LATIN_CAPITAL_LETTER_T:
                        case LATIN_CAPITAL_LETTER_U:
                        case LATIN_CAPITAL_LETTER_V:
                        case LATIN_CAPITAL_LETTER_W:
                        case LATIN_CAPITAL_LETTER_X:
                        case LATIN_CAPITAL_LETTER_Y:
                        case LATIN_CAPITAL_LETTER_Z:
                        case LATIN_SMALL_LETTER_A_WITH_GRAVE:
                        case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
                        case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
                        case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
                        case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
                        case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
                        case LATIN_SMALL_LETTER_A_WITH_ACUTE:
                        case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
                        case LATIN_SMALL_LETTER_AE:
                        case LATIN_CAPITAL_LETTER_AE:
                        case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
                        case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
                        case LATIN_SMALL_LETTER_E_WITH_GRAVE:
                        case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
                        case LATIN_SMALL_LETTER_E_WITH_ACUTE:
                        case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
                        case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
                        case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
                        case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
                        case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
                        case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
                        case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
                        case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
                        case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
                        case LATIN_SMALL_LETTER_I_WITH_ACUTE:
                        case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
                        case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
                        case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
                        case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
                        case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
                        case LATIN_SMALL_LETTER_O_WITH_ACUTE:
                        case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
                        case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
                        case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
                        case LATIN_SMALL_LETTER_U_WITH_GRAVE:
                        case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
                        case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
                        case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
                        case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
                        case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
                        case LATIN_SMALL_LETTER_U_WITH_ACUTE:
                        case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
                        case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
                        case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
                        case LATIN_SMALL_LIGATURE_OE:
                        case LATIN_CAPITAL_LIGATURE_OE:
                            {
                            alt1=1;
                            }
                            break;
                        case SOFTBREAK:
                            {
                            alt1=2;
                            }
                            break;
                    }

                }
                else if ( ((LA1_1>=COMMERCIAL_AT && LA1_1<=LEFT_PARENTHESIS)||LA1_1==LEFT_SQUARE_BRACKET||(LA1_1>=DOUBLE_QUOTE && LA1_1<=HYPHEN_MINUS)||(LA1_1>=VERTICAL_LINE && LA1_1<=LESS_THAN_SIGN)||(LA1_1>=GRAVE_ACCENT && LA1_1<=LATIN_SMALL_LETTER_S)||(LA1_1>=EQUALS_SIGN && LA1_1<=TILDE)||(LA1_1>=LATIN_SMALL_LETTER_N && LA1_1<=LATIN_SMALL_LETTER_V)||LA1_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA1_1>=LATIN_SMALL_LETTER_R && LA1_1<=LATIN_SMALL_LETTER_M)||(LA1_1>=DIGIT_0 && LA1_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    alt1=1;
                }
            }
            else if ( (LA1_0==SOFTBREAK) ) {
                switch ( input.LA(2) ) {
                    case WHITESPACE:
                        {
                        int LA1_5 = input.LA(3);

                        if ( (LA1_5==SOFTBREAK) ) {
                            alt1=2;
                        }
                        else if ( ((LA1_5>=COMMERCIAL_AT && LA1_5<=LEFT_PARENTHESIS)||LA1_5==LEFT_SQUARE_BRACKET||(LA1_5>=DOUBLE_QUOTE && LA1_5<=HYPHEN_MINUS)||(LA1_5>=VERTICAL_LINE && LA1_5<=LESS_THAN_SIGN)||(LA1_5>=GRAVE_ACCENT && LA1_5<=LATIN_SMALL_LETTER_S)||(LA1_5>=EQUALS_SIGN && LA1_5<=TILDE)||(LA1_5>=LATIN_SMALL_LETTER_N && LA1_5<=LATIN_SMALL_LETTER_V)||LA1_5==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA1_5>=LATIN_SMALL_LETTER_R && LA1_5<=LATIN_SMALL_LETTER_M)||(LA1_5>=DIGIT_0 && LA1_5<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt1=1;
                        }
                        }
                        break;
                    case COMMERCIAL_AT:
                    case REVERSE_SOLIDUS:
                    case LEFT_PARENTHESIS:
                    case LEFT_SQUARE_BRACKET:
                    case DOUBLE_QUOTE:
                    case SOLIDUS:
                    case HYPHEN_MINUS:
                    case VERTICAL_LINE:
                    case LESS_THAN_SIGN:
                    case GRAVE_ACCENT:
                    case FULL_STOP:
                    case COMMA:
                    case QUESTION_MARK:
                    case EXCLAMATION_MARK:
                    case SEMICOLON:
                    case COLON:
                    case APOSTROPHE:
                    case LATIN_SMALL_LETTER_F:
                    case LATIN_SMALL_LETTER_I:
                    case LATIN_SMALL_LETTER_L:
                    case LATIN_SMALL_LETTER_E:
                    case LATIN_SMALL_LETTER_H:
                    case LATIN_SMALL_LETTER_T:
                    case LATIN_SMALL_LETTER_P:
                    case LATIN_SMALL_LETTER_S:
                    case EQUALS_SIGN:
                    case TILDE:
                    case LATIN_SMALL_LETTER_N:
                    case LATIN_SMALL_LETTER_G:
                    case LATIN_SMALL_LETTER_J:
                    case LATIN_SMALL_LETTER_V:
                    case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
                    case LATIN_SMALL_LETTER_R:
                    case LATIN_SMALL_LETTER_C:
                    case LATIN_SMALL_LETTER_U:
                    case LATIN_SMALL_LETTER_O:
                    case LATIN_SMALL_LETTER_A:
                    case LATIN_SMALL_LETTER_D:
                    case LATIN_SMALL_LETTER_B:
                    case LATIN_SMALL_LETTER_Y:
                    case LATIN_SMALL_LETTER_M:
                    case DIGIT_0:
                    case DIGIT_1:
                    case DIGIT_2:
                    case DIGIT_3:
                    case DIGIT_4:
                    case DIGIT_5:
                    case DIGIT_6:
                    case DIGIT_7:
                    case DIGIT_8:
                    case DIGIT_9:
                    case LATIN_CAPITAL_LETTER_A:
                    case LATIN_CAPITAL_LETTER_B:
                    case LATIN_CAPITAL_LETTER_C:
                    case LATIN_CAPITAL_LETTER_D:
                    case LATIN_CAPITAL_LETTER_E:
                    case LATIN_CAPITAL_LETTER_F:
                    case LATIN_SMALL_LETTER_K:
                    case LATIN_SMALL_LETTER_Q:
                    case LATIN_SMALL_LETTER_W:
                    case LATIN_SMALL_LETTER_X:
                    case LATIN_SMALL_LETTER_Z:
                    case LATIN_CAPITAL_LETTER_G:
                    case LATIN_CAPITAL_LETTER_H:
                    case LATIN_CAPITAL_LETTER_I:
                    case LATIN_CAPITAL_LETTER_J:
                    case LATIN_CAPITAL_LETTER_K:
                    case LATIN_CAPITAL_LETTER_L:
                    case LATIN_CAPITAL_LETTER_M:
                    case LATIN_CAPITAL_LETTER_N:
                    case LATIN_CAPITAL_LETTER_O:
                    case LATIN_CAPITAL_LETTER_P:
                    case LATIN_CAPITAL_LETTER_Q:
                    case LATIN_CAPITAL_LETTER_R:
                    case LATIN_CAPITAL_LETTER_S:
                    case LATIN_CAPITAL_LETTER_T:
                    case LATIN_CAPITAL_LETTER_U:
                    case LATIN_CAPITAL_LETTER_V:
                    case LATIN_CAPITAL_LETTER_W:
                    case LATIN_CAPITAL_LETTER_X:
                    case LATIN_CAPITAL_LETTER_Y:
                    case LATIN_CAPITAL_LETTER_Z:
                    case LATIN_SMALL_LETTER_A_WITH_GRAVE:
                    case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
                    case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
                    case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
                    case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
                    case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
                    case LATIN_SMALL_LETTER_A_WITH_ACUTE:
                    case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
                    case LATIN_SMALL_LETTER_AE:
                    case LATIN_CAPITAL_LETTER_AE:
                    case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
                    case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
                    case LATIN_SMALL_LETTER_E_WITH_GRAVE:
                    case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
                    case LATIN_SMALL_LETTER_E_WITH_ACUTE:
                    case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
                    case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
                    case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
                    case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
                    case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
                    case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
                    case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
                    case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
                    case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
                    case LATIN_SMALL_LETTER_I_WITH_ACUTE:
                    case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
                    case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
                    case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
                    case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
                    case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
                    case LATIN_SMALL_LETTER_O_WITH_ACUTE:
                    case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
                    case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
                    case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
                    case LATIN_SMALL_LETTER_U_WITH_GRAVE:
                    case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
                    case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
                    case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
                    case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
                    case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
                    case LATIN_SMALL_LETTER_U_WITH_ACUTE:
                    case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
                    case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
                    case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
                    case LATIN_SMALL_LIGATURE_OE:
                    case LATIN_CAPITAL_LIGATURE_OE:
                        {
                        alt1=1;
                        }
                        break;
                    case SOFTBREAK:
                        {
                        alt1=2;
                        }
                        break;
                }

            }
            switch (alt1) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:190:7: p+= mediumbreak
                    {
                    pushFollow(FOLLOW_mediumbreak_in_novella638);
                    p=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:190:26: p+= largebreak
                    {
                    pushFollow(FOLLOW_largebreak_in_novella646);
                    p=largebreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_largebreak.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:192:5: (p+= levelIntroducer | p+= paragraph | p+= embeddableResource | p+= blockQuote | p+= literal | p+= bigDashedListItem | p+= cellRowSequence )
            int alt2=7;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:192:9: p+= levelIntroducer
                    {
                    pushFollow(FOLLOW_levelIntroducer_in_novella666);
                    p=levelIntroducer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_levelIntroducer.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:193:9: p+= paragraph
                    {
                    pushFollow(FOLLOW_paragraph_in_novella680);
                    p=paragraph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_paragraph.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:194:9: p+= embeddableResource
                    {
                    pushFollow(FOLLOW_embeddableResource_in_novella695);
                    p=embeddableResource();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_embeddableResource.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;
                case 4 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:195:9: p+= blockQuote
                    {
                    pushFollow(FOLLOW_blockQuote_in_novella709);
                    p=blockQuote();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_blockQuote.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;
                case 5 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:196:9: p+= literal
                    {
                    pushFollow(FOLLOW_literal_in_novella724);
                    p=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_literal.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;
                case 6 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:197:9: p+= bigDashedListItem
                    {
                    pushFollow(FOLLOW_bigDashedListItem_in_novella738);
                    p=bigDashedListItem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bigDashedListItem.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;
                case 7 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:198:9: p+= cellRowSequence
                    {
                    pushFollow(FOLLOW_cellRowSequence_in_novella752);
                    p=cellRowSequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cellRowSequence.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:200:5: (p+= largebreak (p+= levelIntroducer | p+= paragraph | p+= embeddableResource | p+= blockQuote | p+= literal | p+= bigDashedListItem | p+= cellRowSequence ) )*
            loop4:
            do {
                int alt4=2;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:200:7: p+= largebreak (p+= levelIntroducer | p+= paragraph | p+= embeddableResource | p+= blockQuote | p+= literal | p+= bigDashedListItem | p+= cellRowSequence )
            	    {
            	    pushFollow(FOLLOW_largebreak_in_novella770);
            	    p=largebreak();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_largebreak.add(p.getTree());
            	    if (list_p==null) list_p=new ArrayList();
            	    list_p.add(p.getTree());

            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:200:23: (p+= levelIntroducer | p+= paragraph | p+= embeddableResource | p+= blockQuote | p+= literal | p+= bigDashedListItem | p+= cellRowSequence )
            	    int alt3=7;
            	    alt3 = dfa3.predict(input);
            	    switch (alt3) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:201:9: p+= levelIntroducer
            	            {
            	            pushFollow(FOLLOW_levelIntroducer_in_novella786);
            	            p=levelIntroducer();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_levelIntroducer.add(p.getTree());
            	            if (list_p==null) list_p=new ArrayList();
            	            list_p.add(p.getTree());


            	            }
            	            break;
            	        case 2 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:202:9: p+= paragraph
            	            {
            	            pushFollow(FOLLOW_paragraph_in_novella801);
            	            p=paragraph();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_paragraph.add(p.getTree());
            	            if (list_p==null) list_p=new ArrayList();
            	            list_p.add(p.getTree());


            	            }
            	            break;
            	        case 3 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:203:9: p+= embeddableResource
            	            {
            	            pushFollow(FOLLOW_embeddableResource_in_novella816);
            	            p=embeddableResource();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_embeddableResource.add(p.getTree());
            	            if (list_p==null) list_p=new ArrayList();
            	            list_p.add(p.getTree());


            	            }
            	            break;
            	        case 4 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:204:9: p+= blockQuote
            	            {
            	            pushFollow(FOLLOW_blockQuote_in_novella830);
            	            p=blockQuote();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_blockQuote.add(p.getTree());
            	            if (list_p==null) list_p=new ArrayList();
            	            list_p.add(p.getTree());


            	            }
            	            break;
            	        case 5 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:205:9: p+= literal
            	            {
            	            pushFollow(FOLLOW_literal_in_novella845);
            	            p=literal();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_literal.add(p.getTree());
            	            if (list_p==null) list_p=new ArrayList();
            	            list_p.add(p.getTree());


            	            }
            	            break;
            	        case 6 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:206:9: p+= bigDashedListItem
            	            {
            	            pushFollow(FOLLOW_bigDashedListItem_in_novella859);
            	            p=bigDashedListItem();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_bigDashedListItem.add(p.getTree());
            	            if (list_p==null) list_p=new ArrayList();
            	            list_p.add(p.getTree());


            	            }
            	            break;
            	        case 7 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:207:9: p+= cellRowSequence
            	            {
            	            pushFollow(FOLLOW_cellRowSequence_in_novella873);
            	            p=cellRowSequence();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_cellRowSequence.add(p.getTree());
            	            if (list_p==null) list_p=new ArrayList();
            	            list_p.add(p.getTree());


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:209:5: ( mediumbreak | largebreak )?
            int alt5=3;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==WHITESPACE) ) {
                int LA5_1 = input.LA(2);

                if ( (LA5_1==SOFTBREAK) ) {
                    switch ( input.LA(3) ) {
                        case WHITESPACE:
                            {
                            int LA5_5 = input.LA(4);

                            if ( (LA5_5==EOF) ) {
                                alt5=1;
                            }
                            else if ( (LA5_5==SOFTBREAK) ) {
                                alt5=2;
                            }
                            }
                            break;
                        case EOF:
                            {
                            alt5=1;
                            }
                            break;
                        case SOFTBREAK:
                            {
                            alt5=2;
                            }
                            break;
                    }

                }
                else if ( (LA5_1==EOF) ) {
                    alt5=1;
                }
            }
            else if ( (LA5_0==SOFTBREAK) ) {
                switch ( input.LA(2) ) {
                    case WHITESPACE:
                        {
                        int LA5_5 = input.LA(3);

                        if ( (LA5_5==EOF) ) {
                            alt5=1;
                        }
                        else if ( (LA5_5==SOFTBREAK) ) {
                            alt5=2;
                        }
                        }
                        break;
                    case EOF:
                        {
                        alt5=1;
                        }
                        break;
                    case SOFTBREAK:
                        {
                        alt5=2;
                        }
                        break;
                }

            }
            switch (alt5) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:209:7: mediumbreak
                    {
                    pushFollow(FOLLOW_mediumbreak_in_novella896);
                    mediumbreak1=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak1.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:209:21: largebreak
                    {
                    pushFollow(FOLLOW_largebreak_in_novella900);
                    largebreak2=largebreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_largebreak.add(largebreak2.getTree());

                    }
                    break;

            }

            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_novella910); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF3);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 214:5: ->
            {
                adaptor.addChild(root_0,   delegate.createTree( NOVELLA, startLocation, list_p ) );

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "novella"

    public static class levelIntroducer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "levelIntroducer"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:217:1: levelIntroducer : ( ( tags mediumbreak )? ( ( relativeIdentifier | absoluteIdentifier ) mediumbreak )? levelIntroducerIndent ( ( whitespace )? levelTitle )? ) ->;
    public final NovelangParser.levelIntroducer_return levelIntroducer() throws RecognitionException {
        NovelangParser.levelIntroducer_return retval = new NovelangParser.levelIntroducer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.tags_return tags4 = null;

        NovelangParser.mediumbreak_return mediumbreak5 = null;

        NovelangParser.relativeIdentifier_return relativeIdentifier6 = null;

        NovelangParser.absoluteIdentifier_return absoluteIdentifier7 = null;

        NovelangParser.mediumbreak_return mediumbreak8 = null;

        NovelangParser.levelIntroducerIndent_return levelIntroducerIndent9 = null;

        NovelangParser.whitespace_return whitespace10 = null;

        NovelangParser.levelTitle_return levelTitle11 = null;


        RewriteRuleSubtreeStream stream_tags=new RewriteRuleSubtreeStream(adaptor,"rule tags");
        RewriteRuleSubtreeStream stream_mediumbreak=new RewriteRuleSubtreeStream(adaptor,"rule mediumbreak");
        RewriteRuleSubtreeStream stream_levelIntroducerIndent=new RewriteRuleSubtreeStream(adaptor,"rule levelIntroducerIndent");
        RewriteRuleSubtreeStream stream_absoluteIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule absoluteIdentifier");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        RewriteRuleSubtreeStream stream_levelTitle=new RewriteRuleSubtreeStream(adaptor,"rule levelTitle");
        RewriteRuleSubtreeStream stream_relativeIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule relativeIdentifier");
         final Location startLocation = delegate.createLocation( input.LT( 1 ) ) ; 
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:219:3: ( ( ( tags mediumbreak )? ( ( relativeIdentifier | absoluteIdentifier ) mediumbreak )? levelIntroducerIndent ( ( whitespace )? levelTitle )? ) ->)
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:219:5: ( ( tags mediumbreak )? ( ( relativeIdentifier | absoluteIdentifier ) mediumbreak )? levelIntroducerIndent ( ( whitespace )? levelTitle )? )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:219:5: ( ( tags mediumbreak )? ( ( relativeIdentifier | absoluteIdentifier ) mediumbreak )? levelIntroducerIndent ( ( whitespace )? levelTitle )? )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:219:7: ( tags mediumbreak )? ( ( relativeIdentifier | absoluteIdentifier ) mediumbreak )? levelIntroducerIndent ( ( whitespace )? levelTitle )?
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:219:7: ( tags mediumbreak )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==COMMERCIAL_AT) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:219:9: tags mediumbreak
                    {
                    pushFollow(FOLLOW_tags_in_levelIntroducer956);
                    tags4=tags();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tags.add(tags4.getTree());
                    pushFollow(FOLLOW_mediumbreak_in_levelIntroducer958);
                    mediumbreak5=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak5.getTree());

                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:220:7: ( ( relativeIdentifier | absoluteIdentifier ) mediumbreak )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==REVERSE_SOLIDUS) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:220:9: ( relativeIdentifier | absoluteIdentifier ) mediumbreak
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:220:9: ( relativeIdentifier | absoluteIdentifier )
                    int alt7=2;
                    int LA7_0 = input.LA(1);

                    if ( (LA7_0==REVERSE_SOLIDUS) ) {
                        int LA7_1 = input.LA(2);

                        if ( (LA7_1==REVERSE_SOLIDUS) ) {
                            alt7=2;
                        }
                        else if ( ((LA7_1>=LATIN_SMALL_LETTER_F && LA7_1<=LATIN_SMALL_LETTER_S)||(LA7_1>=LATIN_SMALL_LETTER_N && LA7_1<=LATIN_SMALL_LETTER_V)||(LA7_1>=LATIN_SMALL_LETTER_R && LA7_1<=LATIN_SMALL_LETTER_M)||(LA7_1>=DIGIT_0 && LA7_1<=LATIN_CAPITAL_LETTER_Z)) ) {
                            alt7=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 7, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 7, 0, input);

                        throw nvae;
                    }
                    switch (alt7) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:220:11: relativeIdentifier
                            {
                            pushFollow(FOLLOW_relativeIdentifier_in_levelIntroducer973);
                            relativeIdentifier6=relativeIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relativeIdentifier.add(relativeIdentifier6.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:220:32: absoluteIdentifier
                            {
                            pushFollow(FOLLOW_absoluteIdentifier_in_levelIntroducer977);
                            absoluteIdentifier7=absoluteIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_absoluteIdentifier.add(absoluteIdentifier7.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_mediumbreak_in_levelIntroducer981);
                    mediumbreak8=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak8.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_levelIntroducerIndent_in_levelIntroducer992);
            levelIntroducerIndent9=levelIntroducerIndent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_levelIntroducerIndent.add(levelIntroducerIndent9.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:222:7: ( ( whitespace )? levelTitle )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==WHITESPACE) ) {
                int LA10_1 = input.LA(2);

                if ( (LA10_1==LEFT_PARENTHESIS||LA10_1==LEFT_SQUARE_BRACKET||(LA10_1>=DOUBLE_QUOTE && LA10_1<=HYPHEN_MINUS)||(LA10_1>=GRAVE_ACCENT && LA10_1<=LATIN_SMALL_LETTER_S)||LA10_1==TILDE||(LA10_1>=LATIN_SMALL_LETTER_N && LA10_1<=LATIN_SMALL_LETTER_V)||LA10_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA10_1>=LATIN_SMALL_LETTER_R && LA10_1<=LATIN_SMALL_LETTER_M)||(LA10_1>=DIGIT_0 && LA10_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    alt10=1;
                }
            }
            else if ( (LA10_0==LEFT_PARENTHESIS||LA10_0==LEFT_SQUARE_BRACKET||(LA10_0>=DOUBLE_QUOTE && LA10_0<=HYPHEN_MINUS)||(LA10_0>=GRAVE_ACCENT && LA10_0<=LATIN_SMALL_LETTER_S)||LA10_0==TILDE||(LA10_0>=LATIN_SMALL_LETTER_N && LA10_0<=LATIN_SMALL_LETTER_V)||LA10_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA10_0>=LATIN_SMALL_LETTER_R && LA10_0<=LATIN_SMALL_LETTER_M)||(LA10_0>=DIGIT_0 && LA10_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:222:9: ( whitespace )? levelTitle
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:222:9: ( whitespace )?
                    int alt9=2;
                    int LA9_0 = input.LA(1);

                    if ( (LA9_0==WHITESPACE) ) {
                        alt9=1;
                    }
                    switch (alt9) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:222:9: whitespace
                            {
                            pushFollow(FOLLOW_whitespace_in_levelIntroducer1002);
                            whitespace10=whitespace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whitespace.add(whitespace10.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_levelTitle_in_levelIntroducer1005);
                    levelTitle11=levelTitle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_levelTitle.add(levelTitle11.getTree());

                    }
                    break;

            }


            }



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 230:5: ->
            {
                adaptor.addChild(root_0,   delegate.createTree(
                              LEVEL_INTRODUCER_,
                              startLocation,
                              (levelIntroducerIndent9!=null?((Object)levelIntroducerIndent9.tree):null),
                              (levelTitle11!=null?((Object)levelTitle11.tree):null),
                              (tags4!=null?((Object)tags4.tree):null),
                              (relativeIdentifier6!=null?((Object)relativeIdentifier6.tree):null),
                              (absoluteIdentifier7!=null?((Object)absoluteIdentifier7.tree):null)
                       ) );

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "levelIntroducer"

    public static class tag_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tag"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:247:1: tag : ( COMMERCIAL_AT s= symbolicName ) ->;
    public final NovelangParser.tag_return tag() throws RecognitionException {
        NovelangParser.tag_return retval = new NovelangParser.tag_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMERCIAL_AT12=null;
        NovelangParser.symbolicName_return s = null;


        Object COMMERCIAL_AT12_tree=null;
        RewriteRuleTokenStream stream_COMMERCIAL_AT=new RewriteRuleTokenStream(adaptor,"token COMMERCIAL_AT");
        RewriteRuleSubtreeStream stream_symbolicName=new RewriteRuleSubtreeStream(adaptor,"rule symbolicName");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:248:3: ( ( COMMERCIAL_AT s= symbolicName ) ->)
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:248:5: ( COMMERCIAL_AT s= symbolicName )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:248:5: ( COMMERCIAL_AT s= symbolicName )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:248:7: COMMERCIAL_AT s= symbolicName
            {
            COMMERCIAL_AT12=(Token)match(input,COMMERCIAL_AT,FOLLOW_COMMERCIAL_AT_in_tag1065); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMERCIAL_AT.add(COMMERCIAL_AT12);

            pushFollow(FOLLOW_symbolicName_in_tag1071);
            s=symbolicName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_symbolicName.add(s.getTree());

            }



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 249:5: ->
            {
                adaptor.addChild(root_0,  delegate.createTree( TAG, (s!=null?input.toString(s.start,s.stop):null) ) );

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tag"

    public static class tags_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tags"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:253:1: tags : tag ( mediumbreak tag )* ;
    public final NovelangParser.tags_return tags() throws RecognitionException {
        NovelangParser.tags_return retval = new NovelangParser.tags_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.tag_return tag13 = null;

        NovelangParser.mediumbreak_return mediumbreak14 = null;

        NovelangParser.tag_return tag15 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:254:3: ( tag ( mediumbreak tag )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:254:5: tag ( mediumbreak tag )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_tag_in_tags1101);
            tag13=tag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tag13.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:254:9: ( mediumbreak tag )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==WHITESPACE) ) {
                    int LA11_1 = input.LA(2);

                    if ( (LA11_1==SOFTBREAK) ) {
                        int LA11_2 = input.LA(3);

                        if ( (LA11_2==WHITESPACE) ) {
                            int LA11_5 = input.LA(4);

                            if ( (LA11_5==COMMERCIAL_AT) ) {
                                alt11=1;
                            }


                        }
                        else if ( (LA11_2==COMMERCIAL_AT) ) {
                            alt11=1;
                        }


                    }
                    else if ( (LA11_1==COMMERCIAL_AT) ) {
                        alt11=1;
                    }


                }
                else if ( (LA11_0==SOFTBREAK) ) {
                    int LA11_2 = input.LA(2);

                    if ( (LA11_2==WHITESPACE) ) {
                        int LA11_5 = input.LA(3);

                        if ( (LA11_5==COMMERCIAL_AT) ) {
                            alt11=1;
                        }


                    }
                    else if ( (LA11_2==COMMERCIAL_AT) ) {
                        alt11=1;
                    }


                }


                switch (alt11) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:254:11: mediumbreak tag
            	    {
            	    pushFollow(FOLLOW_mediumbreak_in_tags1105);
            	    mediumbreak14=mediumbreak();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mediumbreak14.getTree());
            	    pushFollow(FOLLOW_tag_in_tags1107);
            	    tag15=tag();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, tag15.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tags"

    public static class compositeIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compositeIdentifier"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:263:1: compositeIdentifier : REVERSE_SOLIDUS ( REVERSE_SOLIDUS identifierSegment )+ -> ^( COMPOSITE_IDENTIFIER ( identifierSegment )+ ) ;
    public final NovelangParser.compositeIdentifier_return compositeIdentifier() throws RecognitionException {
        NovelangParser.compositeIdentifier_return retval = new NovelangParser.compositeIdentifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token REVERSE_SOLIDUS16=null;
        Token REVERSE_SOLIDUS17=null;
        NovelangParser.identifierSegment_return identifierSegment18 = null;


        Object REVERSE_SOLIDUS16_tree=null;
        Object REVERSE_SOLIDUS17_tree=null;
        RewriteRuleTokenStream stream_REVERSE_SOLIDUS=new RewriteRuleTokenStream(adaptor,"token REVERSE_SOLIDUS");
        RewriteRuleSubtreeStream stream_identifierSegment=new RewriteRuleSubtreeStream(adaptor,"rule identifierSegment");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:264:3: ( REVERSE_SOLIDUS ( REVERSE_SOLIDUS identifierSegment )+ -> ^( COMPOSITE_IDENTIFIER ( identifierSegment )+ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:264:5: REVERSE_SOLIDUS ( REVERSE_SOLIDUS identifierSegment )+
            {
            REVERSE_SOLIDUS16=(Token)match(input,REVERSE_SOLIDUS,FOLLOW_REVERSE_SOLIDUS_in_compositeIdentifier1129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REVERSE_SOLIDUS.add(REVERSE_SOLIDUS16);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:264:21: ( REVERSE_SOLIDUS identifierSegment )+
            int cnt12=0;
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==REVERSE_SOLIDUS) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:264:23: REVERSE_SOLIDUS identifierSegment
            	    {
            	    REVERSE_SOLIDUS17=(Token)match(input,REVERSE_SOLIDUS,FOLLOW_REVERSE_SOLIDUS_in_compositeIdentifier1133); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_REVERSE_SOLIDUS.add(REVERSE_SOLIDUS17);

            	    pushFollow(FOLLOW_identifierSegment_in_compositeIdentifier1135);
            	    identifierSegment18=identifierSegment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_identifierSegment.add(identifierSegment18.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);



            // AST REWRITE
            // elements: identifierSegment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 265:5: -> ^( COMPOSITE_IDENTIFIER ( identifierSegment )+ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:265:8: ^( COMPOSITE_IDENTIFIER ( identifierSegment )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(COMPOSITE_IDENTIFIER, "COMPOSITE_IDENTIFIER"), root_1);

                if ( !(stream_identifierSegment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_identifierSegment.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierSegment.nextTree());

                }
                stream_identifierSegment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "compositeIdentifier"

    public static class relativeIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relativeIdentifier"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:268:1: relativeIdentifier : ( REVERSE_SOLIDUS identifierSegment ) -> ^( RELATIVE_IDENTIFIER identifierSegment ) ;
    public final NovelangParser.relativeIdentifier_return relativeIdentifier() throws RecognitionException {
        NovelangParser.relativeIdentifier_return retval = new NovelangParser.relativeIdentifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token REVERSE_SOLIDUS19=null;
        NovelangParser.identifierSegment_return identifierSegment20 = null;


        Object REVERSE_SOLIDUS19_tree=null;
        RewriteRuleTokenStream stream_REVERSE_SOLIDUS=new RewriteRuleTokenStream(adaptor,"token REVERSE_SOLIDUS");
        RewriteRuleSubtreeStream stream_identifierSegment=new RewriteRuleSubtreeStream(adaptor,"rule identifierSegment");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:269:3: ( ( REVERSE_SOLIDUS identifierSegment ) -> ^( RELATIVE_IDENTIFIER identifierSegment ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:269:5: ( REVERSE_SOLIDUS identifierSegment )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:269:5: ( REVERSE_SOLIDUS identifierSegment )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:269:7: REVERSE_SOLIDUS identifierSegment
            {
            REVERSE_SOLIDUS19=(Token)match(input,REVERSE_SOLIDUS,FOLLOW_REVERSE_SOLIDUS_in_relativeIdentifier1171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REVERSE_SOLIDUS.add(REVERSE_SOLIDUS19);

            pushFollow(FOLLOW_identifierSegment_in_relativeIdentifier1173);
            identifierSegment20=identifierSegment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifierSegment.add(identifierSegment20.getTree());

            }



            // AST REWRITE
            // elements: identifierSegment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 270:5: -> ^( RELATIVE_IDENTIFIER identifierSegment )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:270:8: ^( RELATIVE_IDENTIFIER identifierSegment )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_IDENTIFIER, "RELATIVE_IDENTIFIER"), root_1);

                adaptor.addChild(root_1, stream_identifierSegment.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relativeIdentifier"

    public static class absoluteIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "absoluteIdentifier"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:273:1: absoluteIdentifier : REVERSE_SOLIDUS ( REVERSE_SOLIDUS identifierSegment ) -> ^( ABSOLUTE_IDENTIFIER identifierSegment ) ;
    public final NovelangParser.absoluteIdentifier_return absoluteIdentifier() throws RecognitionException {
        NovelangParser.absoluteIdentifier_return retval = new NovelangParser.absoluteIdentifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token REVERSE_SOLIDUS21=null;
        Token REVERSE_SOLIDUS22=null;
        NovelangParser.identifierSegment_return identifierSegment23 = null;


        Object REVERSE_SOLIDUS21_tree=null;
        Object REVERSE_SOLIDUS22_tree=null;
        RewriteRuleTokenStream stream_REVERSE_SOLIDUS=new RewriteRuleTokenStream(adaptor,"token REVERSE_SOLIDUS");
        RewriteRuleSubtreeStream stream_identifierSegment=new RewriteRuleSubtreeStream(adaptor,"rule identifierSegment");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:274:3: ( REVERSE_SOLIDUS ( REVERSE_SOLIDUS identifierSegment ) -> ^( ABSOLUTE_IDENTIFIER identifierSegment ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:274:5: REVERSE_SOLIDUS ( REVERSE_SOLIDUS identifierSegment )
            {
            REVERSE_SOLIDUS21=(Token)match(input,REVERSE_SOLIDUS,FOLLOW_REVERSE_SOLIDUS_in_absoluteIdentifier1204); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REVERSE_SOLIDUS.add(REVERSE_SOLIDUS21);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:274:21: ( REVERSE_SOLIDUS identifierSegment )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:274:23: REVERSE_SOLIDUS identifierSegment
            {
            REVERSE_SOLIDUS22=(Token)match(input,REVERSE_SOLIDUS,FOLLOW_REVERSE_SOLIDUS_in_absoluteIdentifier1208); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REVERSE_SOLIDUS.add(REVERSE_SOLIDUS22);

            pushFollow(FOLLOW_identifierSegment_in_absoluteIdentifier1210);
            identifierSegment23=identifierSegment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifierSegment.add(identifierSegment23.getTree());

            }



            // AST REWRITE
            // elements: identifierSegment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 275:5: -> ^( ABSOLUTE_IDENTIFIER identifierSegment )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:275:8: ^( ABSOLUTE_IDENTIFIER identifierSegment )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ABSOLUTE_IDENTIFIER, "ABSOLUTE_IDENTIFIER"), root_1);

                adaptor.addChild(root_1, stream_identifierSegment.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "absoluteIdentifier"

    public static class identifierSegment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierSegment"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:278:1: identifierSegment : symbolicName ->;
    public final NovelangParser.identifierSegment_return identifierSegment() throws RecognitionException {
        NovelangParser.identifierSegment_return retval = new NovelangParser.identifierSegment_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.symbolicName_return symbolicName24 = null;


        RewriteRuleSubtreeStream stream_symbolicName=new RewriteRuleSubtreeStream(adaptor,"rule symbolicName");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:279:3: ( symbolicName ->)
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:279:5: symbolicName
            {
            pushFollow(FOLLOW_symbolicName_in_identifierSegment1242);
            symbolicName24=symbolicName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_symbolicName.add(symbolicName24.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 280:5: ->
            {
                adaptor.addChild(root_0,  delegate.createTree( (symbolicName24!=null?input.toString(symbolicName24.start,symbolicName24.stop):null) ) );

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "identifierSegment"

    public static class levelTitle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "levelTitle"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:287:1: levelTitle : ( (t+= smallDashedListItem | (t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* ) ) ( (t+= whitespace )? t+= softbreak ( ( url )=>t+= url | ( smallDashedListItem )=>t+= smallDashedListItem | ( (t+= whitespace )? t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* ) ) )* ) -> ^( LEVEL_TITLE ( $t)+ ) ;
    public final NovelangParser.levelTitle_return levelTitle() throws RecognitionException {
        NovelangParser.levelTitle_return retval = new NovelangParser.levelTitle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        List list_t=null;
        RuleReturnScope t = null;
        RewriteRuleSubtreeStream stream_smallDashedListItem=new RewriteRuleSubtreeStream(adaptor,"rule smallDashedListItem");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        RewriteRuleSubtreeStream stream_mixedDelimitedSpreadBlock=new RewriteRuleSubtreeStream(adaptor,"rule mixedDelimitedSpreadBlock");
        RewriteRuleSubtreeStream stream_url=new RewriteRuleSubtreeStream(adaptor,"rule url");
        RewriteRuleSubtreeStream stream_softbreak=new RewriteRuleSubtreeStream(adaptor,"rule softbreak");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:292:3: ( ( (t+= smallDashedListItem | (t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* ) ) ( (t+= whitespace )? t+= softbreak ( ( url )=>t+= url | ( smallDashedListItem )=>t+= smallDashedListItem | ( (t+= whitespace )? t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* ) ) )* ) -> ^( LEVEL_TITLE ( $t)+ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:292:5: ( (t+= smallDashedListItem | (t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* ) ) ( (t+= whitespace )? t+= softbreak ( ( url )=>t+= url | ( smallDashedListItem )=>t+= smallDashedListItem | ( (t+= whitespace )? t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* ) ) )* )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:292:5: ( (t+= smallDashedListItem | (t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* ) ) ( (t+= whitespace )? t+= softbreak ( ( url )=>t+= url | ( smallDashedListItem )=>t+= smallDashedListItem | ( (t+= whitespace )? t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* ) ) )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:293:7: (t+= smallDashedListItem | (t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* ) ) ( (t+= whitespace )? t+= softbreak ( ( url )=>t+= url | ( smallDashedListItem )=>t+= smallDashedListItem | ( (t+= whitespace )? t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* ) ) )*
            {
            if ( state.backtracking==0 ) {
               delegate.enterBlockDelimiterBoundary( input.LT( 1 ) ) ; 
            }
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:294:7: (t+= smallDashedListItem | (t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==HYPHEN_MINUS) ) {
                int LA14_1 = input.LA(2);

                if ( (LA14_1==HYPHEN_MINUS) ) {
                    alt14=2;
                }
                else if ( (LA14_1==WHITESPACE) ) {
                    alt14=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA14_0==LEFT_PARENTHESIS||LA14_0==LEFT_SQUARE_BRACKET||(LA14_0>=DOUBLE_QUOTE && LA14_0<=SOLIDUS)||(LA14_0>=GRAVE_ACCENT && LA14_0<=LATIN_SMALL_LETTER_S)||LA14_0==TILDE||(LA14_0>=LATIN_SMALL_LETTER_N && LA14_0<=LATIN_SMALL_LETTER_V)||LA14_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA14_0>=LATIN_SMALL_LETTER_R && LA14_0<=LATIN_SMALL_LETTER_M)||(LA14_0>=DIGIT_0 && LA14_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:294:11: t+= smallDashedListItem
                    {
                    pushFollow(FOLLOW_smallDashedListItem_in_levelTitle1295);
                    t=smallDashedListItem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_smallDashedListItem.add(t.getTree());
                    if (list_t==null) list_t=new ArrayList();
                    list_t.add(t.getTree());


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:295:10: (t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:295:10: (t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:295:12: t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )*
                    {
                    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_levelTitle1312);
                    t=mixedDelimitedSpreadBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixedDelimitedSpreadBlock.add(t.getTree());
                    if (list_t==null) list_t=new ArrayList();
                    list_t.add(t.getTree());

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:296:12: (t+= whitespace t+= mixedDelimitedSpreadBlock )*
                    loop13:
                    do {
                        int alt13=2;
                        int LA13_0 = input.LA(1);

                        if ( (LA13_0==WHITESPACE) ) {
                            int LA13_1 = input.LA(2);

                            if ( (LA13_1==LEFT_PARENTHESIS||LA13_1==LEFT_SQUARE_BRACKET||(LA13_1>=DOUBLE_QUOTE && LA13_1<=HYPHEN_MINUS)||(LA13_1>=GRAVE_ACCENT && LA13_1<=LATIN_SMALL_LETTER_S)||LA13_1==TILDE||(LA13_1>=LATIN_SMALL_LETTER_N && LA13_1<=LATIN_SMALL_LETTER_V)||LA13_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA13_1>=LATIN_SMALL_LETTER_R && LA13_1<=LATIN_SMALL_LETTER_M)||(LA13_1>=DIGIT_0 && LA13_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt13=1;
                            }


                        }


                        switch (alt13) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:296:14: t+= whitespace t+= mixedDelimitedSpreadBlock
                    	    {
                    	    pushFollow(FOLLOW_whitespace_in_levelTitle1332);
                    	    t=whitespace();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whitespace.add(t.getTree());
                    	    if (list_t==null) list_t=new ArrayList();
                    	    list_t.add(t.getTree());

                    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_levelTitle1338);
                    	    t=mixedDelimitedSpreadBlock();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_mixedDelimitedSpreadBlock.add(t.getTree());
                    	    if (list_t==null) list_t=new ArrayList();
                    	    list_t.add(t.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop13;
                        }
                    } while (true);


                    }


                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:299:6: ( (t+= whitespace )? t+= softbreak ( ( url )=>t+= url | ( smallDashedListItem )=>t+= smallDashedListItem | ( (t+= whitespace )? t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* ) ) )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==WHITESPACE) ) {
                    int LA19_1 = input.LA(2);

                    if ( (LA19_1==SOFTBREAK) ) {
                        int LA19_2 = input.LA(3);

                        if ( (LA19_2==LEFT_PARENTHESIS||LA19_2==LEFT_SQUARE_BRACKET||(LA19_2>=DOUBLE_QUOTE && LA19_2<=HYPHEN_MINUS)||(LA19_2>=GRAVE_ACCENT && LA19_2<=LATIN_SMALL_LETTER_S)||LA19_2==TILDE||(LA19_2>=LATIN_SMALL_LETTER_N && LA19_2<=LATIN_SMALL_LETTER_V)||LA19_2==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA19_2>=LATIN_SMALL_LETTER_R && LA19_2<=LATIN_SMALL_LETTER_M)||(LA19_2>=DIGIT_0 && LA19_2<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt19=1;
                        }
                        else if ( (LA19_2==WHITESPACE) ) {
                            int LA19_5 = input.LA(4);

                            if ( (LA19_5==LEFT_PARENTHESIS||LA19_5==LEFT_SQUARE_BRACKET||(LA19_5>=DOUBLE_QUOTE && LA19_5<=HYPHEN_MINUS)||(LA19_5>=GRAVE_ACCENT && LA19_5<=LATIN_SMALL_LETTER_S)||LA19_5==TILDE||(LA19_5>=LATIN_SMALL_LETTER_N && LA19_5<=LATIN_SMALL_LETTER_V)||LA19_5==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA19_5>=LATIN_SMALL_LETTER_R && LA19_5<=LATIN_SMALL_LETTER_M)||(LA19_5>=DIGIT_0 && LA19_5<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt19=1;
                            }


                        }


                    }


                }
                else if ( (LA19_0==SOFTBREAK) ) {
                    int LA19_2 = input.LA(2);

                    if ( (LA19_2==LEFT_PARENTHESIS||LA19_2==LEFT_SQUARE_BRACKET||(LA19_2>=DOUBLE_QUOTE && LA19_2<=HYPHEN_MINUS)||(LA19_2>=GRAVE_ACCENT && LA19_2<=LATIN_SMALL_LETTER_S)||LA19_2==TILDE||(LA19_2>=LATIN_SMALL_LETTER_N && LA19_2<=LATIN_SMALL_LETTER_V)||LA19_2==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA19_2>=LATIN_SMALL_LETTER_R && LA19_2<=LATIN_SMALL_LETTER_M)||(LA19_2>=DIGIT_0 && LA19_2<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt19=1;
                    }
                    else if ( (LA19_2==WHITESPACE) ) {
                        int LA19_5 = input.LA(3);

                        if ( (LA19_5==LEFT_PARENTHESIS||LA19_5==LEFT_SQUARE_BRACKET||(LA19_5>=DOUBLE_QUOTE && LA19_5<=HYPHEN_MINUS)||(LA19_5>=GRAVE_ACCENT && LA19_5<=LATIN_SMALL_LETTER_S)||LA19_5==TILDE||(LA19_5>=LATIN_SMALL_LETTER_N && LA19_5<=LATIN_SMALL_LETTER_V)||LA19_5==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA19_5>=LATIN_SMALL_LETTER_R && LA19_5<=LATIN_SMALL_LETTER_M)||(LA19_5>=DIGIT_0 && LA19_5<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt19=1;
                        }


                    }


                }


                switch (alt19) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:299:8: (t+= whitespace )? t+= softbreak ( ( url )=>t+= url | ( smallDashedListItem )=>t+= smallDashedListItem | ( (t+= whitespace )? t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* ) )
            	    {
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:299:10: (t+= whitespace )?
            	    int alt15=2;
            	    int LA15_0 = input.LA(1);

            	    if ( (LA15_0==WHITESPACE) ) {
            	        alt15=1;
            	    }
            	    switch (alt15) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:299:10: t+= whitespace
            	            {
            	            pushFollow(FOLLOW_whitespace_in_levelTitle1373);
            	            t=whitespace();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_whitespace.add(t.getTree());
            	            if (list_t==null) list_t=new ArrayList();
            	            list_t.add(t.getTree());


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_softbreak_in_levelTitle1380);
            	    t=softbreak();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_softbreak.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());

            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:300:8: ( ( url )=>t+= url | ( smallDashedListItem )=>t+= smallDashedListItem | ( (t+= whitespace )? t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* ) )
            	    int alt18=3;
            	    alt18 = dfa18.predict(input);
            	    switch (alt18) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:300:12: ( url )=>t+= url
            	            {
            	            pushFollow(FOLLOW_url_in_levelTitle1406);
            	            t=url();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_url.add(t.getTree());
            	            if (list_t==null) list_t=new ArrayList();
            	            list_t.add(t.getTree());


            	            }
            	            break;
            	        case 2 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:301:12: ( smallDashedListItem )=>t+= smallDashedListItem
            	            {
            	            pushFollow(FOLLOW_smallDashedListItem_in_levelTitle1431);
            	            t=smallDashedListItem();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_smallDashedListItem.add(t.getTree());
            	            if (list_t==null) list_t=new ArrayList();
            	            list_t.add(t.getTree());


            	            }
            	            break;
            	        case 3 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:302:12: ( (t+= whitespace )? t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* )
            	            {
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:302:12: ( (t+= whitespace )? t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* )
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:302:14: (t+= whitespace )? t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )*
            	            {
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:302:16: (t+= whitespace )?
            	            int alt16=2;
            	            int LA16_0 = input.LA(1);

            	            if ( (LA16_0==WHITESPACE) ) {
            	                alt16=1;
            	            }
            	            switch (alt16) {
            	                case 1 :
            	                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:302:16: t+= whitespace
            	                    {
            	                    pushFollow(FOLLOW_whitespace_in_levelTitle1450);
            	                    t=whitespace();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_whitespace.add(t.getTree());
            	                    if (list_t==null) list_t=new ArrayList();
            	                    list_t.add(t.getTree());


            	                    }
            	                    break;

            	            }

            	            pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_levelTitle1457);
            	            t=mixedDelimitedSpreadBlock();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_mixedDelimitedSpreadBlock.add(t.getTree());
            	            if (list_t==null) list_t=new ArrayList();
            	            list_t.add(t.getTree());

            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:303:14: (t+= whitespace t+= mixedDelimitedSpreadBlock )*
            	            loop17:
            	            do {
            	                int alt17=2;
            	                int LA17_0 = input.LA(1);

            	                if ( (LA17_0==WHITESPACE) ) {
            	                    int LA17_1 = input.LA(2);

            	                    if ( (LA17_1==LEFT_PARENTHESIS||LA17_1==LEFT_SQUARE_BRACKET||(LA17_1>=DOUBLE_QUOTE && LA17_1<=HYPHEN_MINUS)||(LA17_1>=GRAVE_ACCENT && LA17_1<=LATIN_SMALL_LETTER_S)||LA17_1==TILDE||(LA17_1>=LATIN_SMALL_LETTER_N && LA17_1<=LATIN_SMALL_LETTER_V)||LA17_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA17_1>=LATIN_SMALL_LETTER_R && LA17_1<=LATIN_SMALL_LETTER_M)||(LA17_1>=DIGIT_0 && LA17_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
            	                        alt17=1;
            	                    }


            	                }


            	                switch (alt17) {
            	            	case 1 :
            	            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:303:16: t+= whitespace t+= mixedDelimitedSpreadBlock
            	            	    {
            	            	    pushFollow(FOLLOW_whitespace_in_levelTitle1479);
            	            	    t=whitespace();

            	            	    state._fsp--;
            	            	    if (state.failed) return retval;
            	            	    if ( state.backtracking==0 ) stream_whitespace.add(t.getTree());
            	            	    if (list_t==null) list_t=new ArrayList();
            	            	    list_t.add(t.getTree());

            	            	    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_levelTitle1485);
            	            	    t=mixedDelimitedSpreadBlock();

            	            	    state._fsp--;
            	            	    if (state.failed) return retval;
            	            	    if ( state.backtracking==0 ) stream_mixedDelimitedSpreadBlock.add(t.getTree());
            	            	    if (list_t==null) list_t=new ArrayList();
            	            	    list_t.add(t.getTree());


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop17;
            	                }
            	            } while (true);


            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               delegate.leaveBlockDelimiterBoundary() ; 
            }

            }



            // AST REWRITE
            // elements: t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 308:6: -> ^( LEVEL_TITLE ( $t)+ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:308:9: ^( LEVEL_TITLE ( $t)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LEVEL_TITLE, "LEVEL_TITLE"), root_1);

                if ( !(stream_t.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_1, stream_t.nextTree());

                }
                stream_t.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "levelTitle"

    public static class headerIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headerIdentifier"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:311:1: headerIdentifier : ;
    public final NovelangParser.headerIdentifier_return headerIdentifier() throws RecognitionException {
        NovelangParser.headerIdentifier_return retval = new NovelangParser.headerIdentifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:311:18: ()
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:311:20: 
            {
            root_0 = (Object)adaptor.nil();

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "headerIdentifier"

    public static class paragraph_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "paragraph"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:313:1: paragraph : ( (p+= tags mediumbreak )? ( ( url )=>p+= url | ( smallDashedListItem )=>p+= smallDashedListItem | (p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) ) ( (p+= whitespace )? p+= softbreak ( ( url )=>p+= url | ( ( whitespace )? smallDashedListItem )=> (p+= whitespace )? p+= smallDashedListItem | ( (p+= whitespace )? p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) ) )* ) ->;
    public final NovelangParser.paragraph_return paragraph() throws RecognitionException {
        NovelangParser.paragraph_return retval = new NovelangParser.paragraph_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        List list_p=null;
        NovelangParser.mediumbreak_return mediumbreak25 = null;

        RuleReturnScope p = null;
        RewriteRuleSubtreeStream stream_tags=new RewriteRuleSubtreeStream(adaptor,"rule tags");
        RewriteRuleSubtreeStream stream_mediumbreak=new RewriteRuleSubtreeStream(adaptor,"rule mediumbreak");
        RewriteRuleSubtreeStream stream_smallDashedListItem=new RewriteRuleSubtreeStream(adaptor,"rule smallDashedListItem");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        RewriteRuleSubtreeStream stream_mixedDelimitedSpreadBlock=new RewriteRuleSubtreeStream(adaptor,"rule mixedDelimitedSpreadBlock");
        RewriteRuleSubtreeStream stream_url=new RewriteRuleSubtreeStream(adaptor,"rule url");
        RewriteRuleSubtreeStream stream_softbreak=new RewriteRuleSubtreeStream(adaptor,"rule softbreak");
         final Location startLocation = delegate.createLocation( input.LT( 1 ) ) ; 
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:315:2: ( ( (p+= tags mediumbreak )? ( ( url )=>p+= url | ( smallDashedListItem )=>p+= smallDashedListItem | (p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) ) ( (p+= whitespace )? p+= softbreak ( ( url )=>p+= url | ( ( whitespace )? smallDashedListItem )=> (p+= whitespace )? p+= smallDashedListItem | ( (p+= whitespace )? p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) ) )* ) ->)
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:315:4: ( (p+= tags mediumbreak )? ( ( url )=>p+= url | ( smallDashedListItem )=>p+= smallDashedListItem | (p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) ) ( (p+= whitespace )? p+= softbreak ( ( url )=>p+= url | ( ( whitespace )? smallDashedListItem )=> (p+= whitespace )? p+= smallDashedListItem | ( (p+= whitespace )? p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) ) )* )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:315:4: ( (p+= tags mediumbreak )? ( ( url )=>p+= url | ( smallDashedListItem )=>p+= smallDashedListItem | (p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) ) ( (p+= whitespace )? p+= softbreak ( ( url )=>p+= url | ( ( whitespace )? smallDashedListItem )=> (p+= whitespace )? p+= smallDashedListItem | ( (p+= whitespace )? p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) ) )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:315:6: (p+= tags mediumbreak )? ( ( url )=>p+= url | ( smallDashedListItem )=>p+= smallDashedListItem | (p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) ) ( (p+= whitespace )? p+= softbreak ( ( url )=>p+= url | ( ( whitespace )? smallDashedListItem )=> (p+= whitespace )? p+= smallDashedListItem | ( (p+= whitespace )? p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) ) )*
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:315:6: (p+= tags mediumbreak )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==COMMERCIAL_AT) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:315:8: p+= tags mediumbreak
                    {
                    pushFollow(FOLLOW_tags_in_paragraph1593);
                    p=tags();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tags.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());

                    pushFollow(FOLLOW_mediumbreak_in_paragraph1595);
                    mediumbreak25=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak25.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               delegate.enterBlockDelimiterBoundary( input.LT( 1 ) ) ; 
            }
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:317:6: ( ( url )=>p+= url | ( smallDashedListItem )=>p+= smallDashedListItem | (p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) )
            int alt22=3;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:317:10: ( url )=>p+= url
                    {
                    pushFollow(FOLLOW_url_in_paragraph1629);
                    p=url();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_url.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:318:10: ( smallDashedListItem )=>p+= smallDashedListItem
                    {
                    pushFollow(FOLLOW_smallDashedListItem_in_paragraph1652);
                    p=smallDashedListItem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_smallDashedListItem.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:319:10: (p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:319:10: (p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:319:12: p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )*
                    {
                    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_paragraph1669);
                    p=mixedDelimitedSpreadBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixedDelimitedSpreadBlock.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:320:12: (p+= whitespace p+= mixedDelimitedSpreadBlock )*
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0==WHITESPACE) ) {
                            int LA21_1 = input.LA(2);

                            if ( (LA21_1==LEFT_PARENTHESIS||LA21_1==LEFT_SQUARE_BRACKET||(LA21_1>=DOUBLE_QUOTE && LA21_1<=HYPHEN_MINUS)||(LA21_1>=GRAVE_ACCENT && LA21_1<=LATIN_SMALL_LETTER_S)||LA21_1==TILDE||(LA21_1>=LATIN_SMALL_LETTER_N && LA21_1<=LATIN_SMALL_LETTER_V)||LA21_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA21_1>=LATIN_SMALL_LETTER_R && LA21_1<=LATIN_SMALL_LETTER_M)||(LA21_1>=DIGIT_0 && LA21_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt21=1;
                            }


                        }


                        switch (alt21) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:320:14: p+= whitespace p+= mixedDelimitedSpreadBlock
                    	    {
                    	    pushFollow(FOLLOW_whitespace_in_paragraph1689);
                    	    p=whitespace();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whitespace.add(p.getTree());
                    	    if (list_p==null) list_p=new ArrayList();
                    	    list_p.add(p.getTree());

                    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_paragraph1694);
                    	    p=mixedDelimitedSpreadBlock();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_mixedDelimitedSpreadBlock.add(p.getTree());
                    	    if (list_p==null) list_p=new ArrayList();
                    	    list_p.add(p.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop21;
                        }
                    } while (true);


                    }


                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:323:6: ( (p+= whitespace )? p+= softbreak ( ( url )=>p+= url | ( ( whitespace )? smallDashedListItem )=> (p+= whitespace )? p+= smallDashedListItem | ( (p+= whitespace )? p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) ) )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==WHITESPACE) ) {
                    int LA28_1 = input.LA(2);

                    if ( (LA28_1==SOFTBREAK) ) {
                        int LA28_2 = input.LA(3);

                        if ( (LA28_2==WHITESPACE) ) {
                            int LA28_4 = input.LA(4);

                            if ( (LA28_4==LEFT_PARENTHESIS||LA28_4==LEFT_SQUARE_BRACKET||(LA28_4>=DOUBLE_QUOTE && LA28_4<=HYPHEN_MINUS)||(LA28_4>=GRAVE_ACCENT && LA28_4<=LATIN_SMALL_LETTER_S)||LA28_4==TILDE||(LA28_4>=LATIN_SMALL_LETTER_N && LA28_4<=LATIN_SMALL_LETTER_V)||LA28_4==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA28_4>=LATIN_SMALL_LETTER_R && LA28_4<=LATIN_SMALL_LETTER_M)||(LA28_4>=DIGIT_0 && LA28_4<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt28=1;
                            }


                        }
                        else if ( (LA28_2==LEFT_PARENTHESIS||LA28_2==LEFT_SQUARE_BRACKET||(LA28_2>=DOUBLE_QUOTE && LA28_2<=HYPHEN_MINUS)||(LA28_2>=GRAVE_ACCENT && LA28_2<=LATIN_SMALL_LETTER_S)||LA28_2==TILDE||(LA28_2>=LATIN_SMALL_LETTER_N && LA28_2<=LATIN_SMALL_LETTER_V)||LA28_2==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA28_2>=LATIN_SMALL_LETTER_R && LA28_2<=LATIN_SMALL_LETTER_M)||(LA28_2>=DIGIT_0 && LA28_2<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt28=1;
                        }


                    }


                }
                else if ( (LA28_0==SOFTBREAK) ) {
                    int LA28_2 = input.LA(2);

                    if ( (LA28_2==WHITESPACE) ) {
                        int LA28_4 = input.LA(3);

                        if ( (LA28_4==LEFT_PARENTHESIS||LA28_4==LEFT_SQUARE_BRACKET||(LA28_4>=DOUBLE_QUOTE && LA28_4<=HYPHEN_MINUS)||(LA28_4>=GRAVE_ACCENT && LA28_4<=LATIN_SMALL_LETTER_S)||LA28_4==TILDE||(LA28_4>=LATIN_SMALL_LETTER_N && LA28_4<=LATIN_SMALL_LETTER_V)||LA28_4==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA28_4>=LATIN_SMALL_LETTER_R && LA28_4<=LATIN_SMALL_LETTER_M)||(LA28_4>=DIGIT_0 && LA28_4<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt28=1;
                        }


                    }
                    else if ( (LA28_2==LEFT_PARENTHESIS||LA28_2==LEFT_SQUARE_BRACKET||(LA28_2>=DOUBLE_QUOTE && LA28_2<=HYPHEN_MINUS)||(LA28_2>=GRAVE_ACCENT && LA28_2<=LATIN_SMALL_LETTER_S)||LA28_2==TILDE||(LA28_2>=LATIN_SMALL_LETTER_N && LA28_2<=LATIN_SMALL_LETTER_V)||LA28_2==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA28_2>=LATIN_SMALL_LETTER_R && LA28_2<=LATIN_SMALL_LETTER_M)||(LA28_2>=DIGIT_0 && LA28_2<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt28=1;
                    }


                }


                switch (alt28) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:323:8: (p+= whitespace )? p+= softbreak ( ( url )=>p+= url | ( ( whitespace )? smallDashedListItem )=> (p+= whitespace )? p+= smallDashedListItem | ( (p+= whitespace )? p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) )
            	    {
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:323:10: (p+= whitespace )?
            	    int alt23=2;
            	    int LA23_0 = input.LA(1);

            	    if ( (LA23_0==WHITESPACE) ) {
            	        alt23=1;
            	    }
            	    switch (alt23) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:323:10: p+= whitespace
            	            {
            	            pushFollow(FOLLOW_whitespace_in_paragraph1729);
            	            p=whitespace();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_whitespace.add(p.getTree());
            	            if (list_p==null) list_p=new ArrayList();
            	            list_p.add(p.getTree());


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_softbreak_in_paragraph1736);
            	    p=softbreak();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_softbreak.add(p.getTree());
            	    if (list_p==null) list_p=new ArrayList();
            	    list_p.add(p.getTree());

            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:324:8: ( ( url )=>p+= url | ( ( whitespace )? smallDashedListItem )=> (p+= whitespace )? p+= smallDashedListItem | ( (p+= whitespace )? p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) )
            	    int alt27=3;
            	    alt27 = dfa27.predict(input);
            	    switch (alt27) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:324:12: ( url )=>p+= url
            	            {
            	            pushFollow(FOLLOW_url_in_paragraph1762);
            	            p=url();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_url.add(p.getTree());
            	            if (list_p==null) list_p=new ArrayList();
            	            list_p.add(p.getTree());


            	            }
            	            break;
            	        case 2 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:325:12: ( ( whitespace )? smallDashedListItem )=> (p+= whitespace )? p+= smallDashedListItem
            	            {
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:325:53: (p+= whitespace )?
            	            int alt24=2;
            	            int LA24_0 = input.LA(1);

            	            if ( (LA24_0==WHITESPACE) ) {
            	                alt24=1;
            	            }
            	            switch (alt24) {
            	                case 1 :
            	                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:325:53: p+= whitespace
            	                    {
            	                    pushFollow(FOLLOW_whitespace_in_paragraph1790);
            	                    p=whitespace();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_whitespace.add(p.getTree());
            	                    if (list_p==null) list_p=new ArrayList();
            	                    list_p.add(p.getTree());


            	                    }
            	                    break;

            	            }

            	            pushFollow(FOLLOW_smallDashedListItem_in_paragraph1797);
            	            p=smallDashedListItem();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_smallDashedListItem.add(p.getTree());
            	            if (list_p==null) list_p=new ArrayList();
            	            list_p.add(p.getTree());


            	            }
            	            break;
            	        case 3 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:326:12: ( (p+= whitespace )? p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* )
            	            {
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:326:12: ( (p+= whitespace )? p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* )
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:326:14: (p+= whitespace )? p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )*
            	            {
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:326:16: (p+= whitespace )?
            	            int alt25=2;
            	            int LA25_0 = input.LA(1);

            	            if ( (LA25_0==WHITESPACE) ) {
            	                alt25=1;
            	            }
            	            switch (alt25) {
            	                case 1 :
            	                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:326:16: p+= whitespace
            	                    {
            	                    pushFollow(FOLLOW_whitespace_in_paragraph1816);
            	                    p=whitespace();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_whitespace.add(p.getTree());
            	                    if (list_p==null) list_p=new ArrayList();
            	                    list_p.add(p.getTree());


            	                    }
            	                    break;

            	            }

            	            pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_paragraph1823);
            	            p=mixedDelimitedSpreadBlock();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_mixedDelimitedSpreadBlock.add(p.getTree());
            	            if (list_p==null) list_p=new ArrayList();
            	            list_p.add(p.getTree());

            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:327:14: (p+= whitespace p+= mixedDelimitedSpreadBlock )*
            	            loop26:
            	            do {
            	                int alt26=2;
            	                int LA26_0 = input.LA(1);

            	                if ( (LA26_0==WHITESPACE) ) {
            	                    int LA26_1 = input.LA(2);

            	                    if ( (LA26_1==LEFT_PARENTHESIS||LA26_1==LEFT_SQUARE_BRACKET||(LA26_1>=DOUBLE_QUOTE && LA26_1<=HYPHEN_MINUS)||(LA26_1>=GRAVE_ACCENT && LA26_1<=LATIN_SMALL_LETTER_S)||LA26_1==TILDE||(LA26_1>=LATIN_SMALL_LETTER_N && LA26_1<=LATIN_SMALL_LETTER_V)||LA26_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA26_1>=LATIN_SMALL_LETTER_R && LA26_1<=LATIN_SMALL_LETTER_M)||(LA26_1>=DIGIT_0 && LA26_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
            	                        alt26=1;
            	                    }


            	                }


            	                switch (alt26) {
            	            	case 1 :
            	            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:327:16: p+= whitespace p+= mixedDelimitedSpreadBlock
            	            	    {
            	            	    pushFollow(FOLLOW_whitespace_in_paragraph1845);
            	            	    p=whitespace();

            	            	    state._fsp--;
            	            	    if (state.failed) return retval;
            	            	    if ( state.backtracking==0 ) stream_whitespace.add(p.getTree());
            	            	    if (list_p==null) list_p=new ArrayList();
            	            	    list_p.add(p.getTree());

            	            	    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_paragraph1850);
            	            	    p=mixedDelimitedSpreadBlock();

            	            	    state._fsp--;
            	            	    if (state.failed) return retval;
            	            	    if ( state.backtracking==0 ) stream_mixedDelimitedSpreadBlock.add(p.getTree());
            	            	    if (list_p==null) list_p=new ArrayList();
            	            	    list_p.add(p.getTree());


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop26;
            	                }
            	            } while (true);


            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               delegate.leaveBlockDelimiterBoundary() ; 
            }

            }



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 336:9: ->
            {
                adaptor.addChild(root_0,   delegate.createTree(
                                  PARAGRAPH_REGULAR,
                                  startLocation,
                                  list_p
                              )
                        );

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "paragraph"

    public static class delimitedSpreadblock_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delimitedSpreadblock"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:350:1: delimitedSpreadblock : ( parenthesizedSpreadblock | squarebracketsSpreadblock | doubleQuotedSpreadBlock | emphasizedSpreadBlock | hyphenPairSpreadBlock );
    public final NovelangParser.delimitedSpreadblock_return delimitedSpreadblock() throws RecognitionException {
        NovelangParser.delimitedSpreadblock_return retval = new NovelangParser.delimitedSpreadblock_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.parenthesizedSpreadblock_return parenthesizedSpreadblock26 = null;

        NovelangParser.squarebracketsSpreadblock_return squarebracketsSpreadblock27 = null;

        NovelangParser.doubleQuotedSpreadBlock_return doubleQuotedSpreadBlock28 = null;

        NovelangParser.emphasizedSpreadBlock_return emphasizedSpreadBlock29 = null;

        NovelangParser.hyphenPairSpreadBlock_return hyphenPairSpreadBlock30 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:351:3: ( parenthesizedSpreadblock | squarebracketsSpreadblock | doubleQuotedSpreadBlock | emphasizedSpreadBlock | hyphenPairSpreadBlock )
            int alt29=5;
            switch ( input.LA(1) ) {
            case LEFT_PARENTHESIS:
                {
                alt29=1;
                }
                break;
            case LEFT_SQUARE_BRACKET:
                {
                alt29=2;
                }
                break;
            case DOUBLE_QUOTE:
                {
                alt29=3;
                }
                break;
            case SOLIDUS:
                {
                alt29=4;
                }
                break;
            case HYPHEN_MINUS:
                {
                alt29=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }

            switch (alt29) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:351:5: parenthesizedSpreadblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedSpreadblock_in_delimitedSpreadblock1936);
                    parenthesizedSpreadblock26=parenthesizedSpreadblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedSpreadblock26.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:352:5: squarebracketsSpreadblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squarebracketsSpreadblock_in_delimitedSpreadblock1942);
                    squarebracketsSpreadblock27=squarebracketsSpreadblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squarebracketsSpreadblock27.getTree());

                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:353:5: doubleQuotedSpreadBlock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_doubleQuotedSpreadBlock_in_delimitedSpreadblock1948);
                    doubleQuotedSpreadBlock28=doubleQuotedSpreadBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, doubleQuotedSpreadBlock28.getTree());

                    }
                    break;
                case 4 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:354:5: emphasizedSpreadBlock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_emphasizedSpreadBlock_in_delimitedSpreadblock1954);
                    emphasizedSpreadBlock29=emphasizedSpreadBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, emphasizedSpreadBlock29.getTree());

                    }
                    break;
                case 5 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:355:5: hyphenPairSpreadBlock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_hyphenPairSpreadBlock_in_delimitedSpreadblock1960);
                    hyphenPairSpreadBlock30=hyphenPairSpreadBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hyphenPairSpreadBlock30.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "delimitedSpreadblock"

    public static class delimitedMonoblock_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delimitedMonoblock"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:358:1: delimitedMonoblock : ( parenthesizedMonoblock | squarebracketsMonoblock | doubleQuotedMonoblock | emphasizedMonoblock | hyphenPairMonoblock );
    public final NovelangParser.delimitedMonoblock_return delimitedMonoblock() throws RecognitionException {
        NovelangParser.delimitedMonoblock_return retval = new NovelangParser.delimitedMonoblock_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.parenthesizedMonoblock_return parenthesizedMonoblock31 = null;

        NovelangParser.squarebracketsMonoblock_return squarebracketsMonoblock32 = null;

        NovelangParser.doubleQuotedMonoblock_return doubleQuotedMonoblock33 = null;

        NovelangParser.emphasizedMonoblock_return emphasizedMonoblock34 = null;

        NovelangParser.hyphenPairMonoblock_return hyphenPairMonoblock35 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:359:3: ( parenthesizedMonoblock | squarebracketsMonoblock | doubleQuotedMonoblock | emphasizedMonoblock | hyphenPairMonoblock )
            int alt30=5;
            switch ( input.LA(1) ) {
            case LEFT_PARENTHESIS:
                {
                alt30=1;
                }
                break;
            case LEFT_SQUARE_BRACKET:
                {
                alt30=2;
                }
                break;
            case DOUBLE_QUOTE:
                {
                alt30=3;
                }
                break;
            case SOLIDUS:
                {
                alt30=4;
                }
                break;
            case HYPHEN_MINUS:
                {
                alt30=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }

            switch (alt30) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:359:5: parenthesizedMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedMonoblock_in_delimitedMonoblock1973);
                    parenthesizedMonoblock31=parenthesizedMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedMonoblock31.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:360:5: squarebracketsMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squarebracketsMonoblock_in_delimitedMonoblock1979);
                    squarebracketsMonoblock32=squarebracketsMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squarebracketsMonoblock32.getTree());

                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:361:5: doubleQuotedMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_doubleQuotedMonoblock_in_delimitedMonoblock1985);
                    doubleQuotedMonoblock33=doubleQuotedMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, doubleQuotedMonoblock33.getTree());

                    }
                    break;
                case 4 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:362:5: emphasizedMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_emphasizedMonoblock_in_delimitedMonoblock1991);
                    emphasizedMonoblock34=emphasizedMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, emphasizedMonoblock34.getTree());

                    }
                    break;
                case 5 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:363:5: hyphenPairMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_hyphenPairMonoblock_in_delimitedMonoblock1997);
                    hyphenPairMonoblock35=hyphenPairMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hyphenPairMonoblock35.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "delimitedMonoblock"

    public static class delimitedMonoblockNoSeparator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delimitedMonoblockNoSeparator"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:366:1: delimitedMonoblockNoSeparator : ( parenthesizedMonoblockNoSeparator | emphasizedMonoblockNoSeparator );
    public final NovelangParser.delimitedMonoblockNoSeparator_return delimitedMonoblockNoSeparator() throws RecognitionException {
        NovelangParser.delimitedMonoblockNoSeparator_return retval = new NovelangParser.delimitedMonoblockNoSeparator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.parenthesizedMonoblockNoSeparator_return parenthesizedMonoblockNoSeparator36 = null;

        NovelangParser.emphasizedMonoblockNoSeparator_return emphasizedMonoblockNoSeparator37 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:367:3: ( parenthesizedMonoblockNoSeparator | emphasizedMonoblockNoSeparator )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==LEFT_PARENTHESIS) ) {
                alt31=1;
            }
            else if ( (LA31_0==SOLIDUS) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:367:5: parenthesizedMonoblockNoSeparator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedMonoblockNoSeparator_in_delimitedMonoblockNoSeparator2010);
                    parenthesizedMonoblockNoSeparator36=parenthesizedMonoblockNoSeparator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedMonoblockNoSeparator36.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:368:5: emphasizedMonoblockNoSeparator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_emphasizedMonoblockNoSeparator_in_delimitedMonoblockNoSeparator2016);
                    emphasizedMonoblockNoSeparator37=emphasizedMonoblockNoSeparator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, emphasizedMonoblockNoSeparator37.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "delimitedMonoblockNoSeparator"

    public static class mixedDelimitedSpreadBlock_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixedDelimitedSpreadBlock"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:371:1: mixedDelimitedSpreadBlock : ( ( word ( ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) | blockAfterTilde );
    public final NovelangParser.mixedDelimitedSpreadBlock_return mixedDelimitedSpreadBlock() throws RecognitionException {
        NovelangParser.mixedDelimitedSpreadBlock_return retval = new NovelangParser.mixedDelimitedSpreadBlock_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.word_return word38 = null;

        NovelangParser.punctuationSign_return punctuationSign39 = null;

        NovelangParser.delimitedSpreadblock_return delimitedSpreadblock40 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral41 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral42 = null;

        NovelangParser.word_return word43 = null;

        NovelangParser.punctuationSign_return punctuationSign44 = null;

        NovelangParser.delimitedSpreadblock_return delimitedSpreadblock45 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral46 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral47 = null;

        NovelangParser.word_return word48 = null;

        NovelangParser.punctuationSign_return punctuationSign49 = null;

        NovelangParser.delimitedSpreadblock_return delimitedSpreadblock50 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral51 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral52 = null;

        NovelangParser.word_return word53 = null;

        NovelangParser.blockAfterTilde_return blockAfterTilde54 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:372:3: ( ( word ( ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) | blockAfterTilde )
            int alt40=3;
            switch ( input.LA(1) ) {
            case LATIN_SMALL_LETTER_F:
            case LATIN_SMALL_LETTER_I:
            case LATIN_SMALL_LETTER_L:
            case LATIN_SMALL_LETTER_E:
            case LATIN_SMALL_LETTER_H:
            case LATIN_SMALL_LETTER_T:
            case LATIN_SMALL_LETTER_P:
            case LATIN_SMALL_LETTER_S:
            case LATIN_SMALL_LETTER_N:
            case LATIN_SMALL_LETTER_G:
            case LATIN_SMALL_LETTER_J:
            case LATIN_SMALL_LETTER_V:
            case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
            case LATIN_SMALL_LETTER_R:
            case LATIN_SMALL_LETTER_C:
            case LATIN_SMALL_LETTER_U:
            case LATIN_SMALL_LETTER_O:
            case LATIN_SMALL_LETTER_A:
            case LATIN_SMALL_LETTER_D:
            case LATIN_SMALL_LETTER_B:
            case LATIN_SMALL_LETTER_Y:
            case LATIN_SMALL_LETTER_M:
            case DIGIT_0:
            case DIGIT_1:
            case DIGIT_2:
            case DIGIT_3:
            case DIGIT_4:
            case DIGIT_5:
            case DIGIT_6:
            case DIGIT_7:
            case DIGIT_8:
            case DIGIT_9:
            case LATIN_CAPITAL_LETTER_A:
            case LATIN_CAPITAL_LETTER_B:
            case LATIN_CAPITAL_LETTER_C:
            case LATIN_CAPITAL_LETTER_D:
            case LATIN_CAPITAL_LETTER_E:
            case LATIN_CAPITAL_LETTER_F:
            case LATIN_SMALL_LETTER_K:
            case LATIN_SMALL_LETTER_Q:
            case LATIN_SMALL_LETTER_W:
            case LATIN_SMALL_LETTER_X:
            case LATIN_SMALL_LETTER_Z:
            case LATIN_CAPITAL_LETTER_G:
            case LATIN_CAPITAL_LETTER_H:
            case LATIN_CAPITAL_LETTER_I:
            case LATIN_CAPITAL_LETTER_J:
            case LATIN_CAPITAL_LETTER_K:
            case LATIN_CAPITAL_LETTER_L:
            case LATIN_CAPITAL_LETTER_M:
            case LATIN_CAPITAL_LETTER_N:
            case LATIN_CAPITAL_LETTER_O:
            case LATIN_CAPITAL_LETTER_P:
            case LATIN_CAPITAL_LETTER_Q:
            case LATIN_CAPITAL_LETTER_R:
            case LATIN_CAPITAL_LETTER_S:
            case LATIN_CAPITAL_LETTER_T:
            case LATIN_CAPITAL_LETTER_U:
            case LATIN_CAPITAL_LETTER_V:
            case LATIN_CAPITAL_LETTER_W:
            case LATIN_CAPITAL_LETTER_X:
            case LATIN_CAPITAL_LETTER_Y:
            case LATIN_CAPITAL_LETTER_Z:
            case LATIN_SMALL_LETTER_A_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
            case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_A_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
            case LATIN_SMALL_LETTER_AE:
            case LATIN_CAPITAL_LETTER_AE:
            case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
            case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
            case LATIN_SMALL_LETTER_E_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
            case LATIN_SMALL_LETTER_E_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
            case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_I_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
            case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_O_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
            case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
            case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
            case LATIN_SMALL_LETTER_U_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
            case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_U_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
            case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
            case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
            case LATIN_SMALL_LIGATURE_OE:
            case LATIN_CAPITAL_LIGATURE_OE:
                {
                alt40=1;
                }
                break;
            case LEFT_PARENTHESIS:
            case LEFT_SQUARE_BRACKET:
            case DOUBLE_QUOTE:
            case SOLIDUS:
            case HYPHEN_MINUS:
            case GRAVE_ACCENT:
            case FULL_STOP:
            case COMMA:
            case QUESTION_MARK:
            case EXCLAMATION_MARK:
            case SEMICOLON:
            case COLON:
            case APOSTROPHE:
                {
                alt40=2;
                }
                break;
            case TILDE:
                {
                alt40=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }

            switch (alt40) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:372:5: ( word ( ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:372:5: ( word ( ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:372:7: word ( ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    {
                    pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlock2033);
                    word38=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, word38.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:373:7: ( ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    loop34:
                    do {
                        int alt34=2;
                        int LA34_0 = input.LA(1);

                        if ( (LA34_0==LEFT_PARENTHESIS||LA34_0==LEFT_SQUARE_BRACKET||(LA34_0>=DOUBLE_QUOTE && LA34_0<=HYPHEN_MINUS)||(LA34_0>=GRAVE_ACCENT && LA34_0<=APOSTROPHE)) ) {
                            alt34=1;
                        }


                        switch (alt34) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:373:9: ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( word )?
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:373:9: ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral )
                    	    int alt32=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt32=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case DOUBLE_QUOTE:
                    	    case SOLIDUS:
                    	    case HYPHEN_MINUS:
                    	        {
                    	        alt32=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA32_3 = input.LA(2);

                    	        if ( (LA32_3==GRAVE_ACCENT) ) {
                    	            alt32=4;
                    	        }
                    	        else if ( ((LA32_3>=COMMERCIAL_AT && LA32_3<=WHITESPACE)||(LA32_3>=VERTICAL_LINE && LA32_3<=GREATER_THAN_SIGN)||(LA32_3>=FULL_STOP && LA32_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA32_3>=LATIN_SMALL_LETTER_R && LA32_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt32=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 32, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 32, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt32) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:373:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlock2048);
                    	            punctuationSign39=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign39.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:374:13: delimitedSpreadblock
                    	            {
                    	            pushFollow(FOLLOW_delimitedSpreadblock_in_mixedDelimitedSpreadBlock2063);
                    	            delimitedSpreadblock40=delimitedSpreadblock();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedSpreadblock40.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:375:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlock2078);
                    	            softInlineLiteral41=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral41.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:376:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlock2093);
                    	            hardInlineLiteral42=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral42.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:377:9: ( word )?
                    	    int alt33=2;
                    	    int LA33_0 = input.LA(1);

                    	    if ( ((LA33_0>=LATIN_SMALL_LETTER_F && LA33_0<=LATIN_SMALL_LETTER_S)||(LA33_0>=LATIN_SMALL_LETTER_N && LA33_0<=LATIN_SMALL_LETTER_V)||LA33_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA33_0>=LATIN_SMALL_LETTER_R && LA33_0<=LATIN_SMALL_LETTER_M)||(LA33_0>=DIGIT_0 && LA33_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt33=1;
                    	    }
                    	    switch (alt33) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:377:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlock2104);
                    	            word43=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word43.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop34;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:379:5: ( ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:379:5: ( ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:379:7: ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) )* ( word )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:379:7: ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral )
                    int alt35=4;
                    switch ( input.LA(1) ) {
                    case FULL_STOP:
                    case COMMA:
                    case QUESTION_MARK:
                    case EXCLAMATION_MARK:
                    case SEMICOLON:
                    case COLON:
                    case APOSTROPHE:
                        {
                        alt35=1;
                        }
                        break;
                    case LEFT_PARENTHESIS:
                    case LEFT_SQUARE_BRACKET:
                    case DOUBLE_QUOTE:
                    case SOLIDUS:
                    case HYPHEN_MINUS:
                        {
                        alt35=2;
                        }
                        break;
                    case GRAVE_ACCENT:
                        {
                        int LA35_3 = input.LA(2);

                        if ( (LA35_3==GRAVE_ACCENT) ) {
                            alt35=4;
                        }
                        else if ( ((LA35_3>=COMMERCIAL_AT && LA35_3<=WHITESPACE)||(LA35_3>=VERTICAL_LINE && LA35_3<=GREATER_THAN_SIGN)||(LA35_3>=FULL_STOP && LA35_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA35_3>=LATIN_SMALL_LETTER_R && LA35_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt35=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 35, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 35, 0, input);

                        throw nvae;
                    }

                    switch (alt35) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:379:11: punctuationSign
                            {
                            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlock2126);
                            punctuationSign44=punctuationSign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign44.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:380:11: delimitedSpreadblock
                            {
                            pushFollow(FOLLOW_delimitedSpreadblock_in_mixedDelimitedSpreadBlock2139);
                            delimitedSpreadblock45=delimitedSpreadblock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedSpreadblock45.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:381:11: softInlineLiteral
                            {
                            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlock2152);
                            softInlineLiteral46=softInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral46.getTree());

                            }
                            break;
                        case 4 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:382:11: hardInlineLiteral
                            {
                            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlock2165);
                            hardInlineLiteral47=hardInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral47.getTree());

                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:384:7: ( ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) )*
                    loop38:
                    do {
                        int alt38=2;
                        alt38 = dfa38.predict(input);
                        switch (alt38) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:384:9: ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:384:9: ( word )?
                    	    int alt36=2;
                    	    int LA36_0 = input.LA(1);

                    	    if ( ((LA36_0>=LATIN_SMALL_LETTER_F && LA36_0<=LATIN_SMALL_LETTER_S)||(LA36_0>=LATIN_SMALL_LETTER_N && LA36_0<=LATIN_SMALL_LETTER_V)||LA36_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA36_0>=LATIN_SMALL_LETTER_R && LA36_0<=LATIN_SMALL_LETTER_M)||(LA36_0>=DIGIT_0 && LA36_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt36=1;
                    	    }
                    	    switch (alt36) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:384:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlock2184);
                    	            word48=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word48.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:385:9: ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral )
                    	    int alt37=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt37=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case DOUBLE_QUOTE:
                    	    case SOLIDUS:
                    	    case HYPHEN_MINUS:
                    	        {
                    	        alt37=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA37_3 = input.LA(2);

                    	        if ( (LA37_3==GRAVE_ACCENT) ) {
                    	            alt37=4;
                    	        }
                    	        else if ( ((LA37_3>=COMMERCIAL_AT && LA37_3<=WHITESPACE)||(LA37_3>=VERTICAL_LINE && LA37_3<=GREATER_THAN_SIGN)||(LA37_3>=FULL_STOP && LA37_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA37_3>=LATIN_SMALL_LETTER_R && LA37_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt37=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 37, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 37, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt37) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:385:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlock2200);
                    	            punctuationSign49=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign49.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:386:13: delimitedSpreadblock
                    	            {
                    	            pushFollow(FOLLOW_delimitedSpreadblock_in_mixedDelimitedSpreadBlock2215);
                    	            delimitedSpreadblock50=delimitedSpreadblock();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedSpreadblock50.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:387:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlock2230);
                    	            softInlineLiteral51=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral51.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:388:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlock2245);
                    	            hardInlineLiteral52=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral52.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:391:7: ( word )?
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( ((LA39_0>=LATIN_SMALL_LETTER_F && LA39_0<=LATIN_SMALL_LETTER_S)||(LA39_0>=LATIN_SMALL_LETTER_N && LA39_0<=LATIN_SMALL_LETTER_V)||LA39_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA39_0>=LATIN_SMALL_LETTER_R && LA39_0<=LATIN_SMALL_LETTER_M)||(LA39_0>=DIGIT_0 && LA39_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt39=1;
                    }
                    switch (alt39) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:391:7: word
                            {
                            pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlock2287);
                            word53=word();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, word53.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:393:5: blockAfterTilde
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_blockAfterTilde_in_mixedDelimitedSpreadBlock2301);
                    blockAfterTilde54=blockAfterTilde();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockAfterTilde54.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixedDelimitedSpreadBlock"

    public static class spreadBlockBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "spreadBlockBody"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:396:1: spreadBlockBody : ( ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )? ) ) | ( mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )? )? ) );
    public final NovelangParser.spreadBlockBody_return spreadBlockBody() throws RecognitionException {
        NovelangParser.spreadBlockBody_return retval = new NovelangParser.spreadBlockBody_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.softbreak_return softbreak55 = null;

        NovelangParser.url_return url56 = null;

        NovelangParser.softbreak_return softbreak57 = null;

        NovelangParser.whitespace_return whitespace58 = null;

        NovelangParser.smallDashedListItem_return smallDashedListItem59 = null;

        NovelangParser.whitespace_return whitespace60 = null;

        NovelangParser.softbreak_return softbreak61 = null;

        NovelangParser.url_return url62 = null;

        NovelangParser.whitespace_return whitespace63 = null;

        NovelangParser.softbreak_return softbreak64 = null;

        NovelangParser.whitespace_return whitespace65 = null;

        NovelangParser.smallDashedListItem_return smallDashedListItem66 = null;

        NovelangParser.whitespace_return whitespace67 = null;

        NovelangParser.softbreak_return softbreak68 = null;

        NovelangParser.whitespace_return whitespace69 = null;

        NovelangParser.mixedDelimitedSpreadBlock_return mixedDelimitedSpreadBlock70 = null;

        NovelangParser.whitespace_return whitespace71 = null;

        NovelangParser.mixedDelimitedSpreadBlock_return mixedDelimitedSpreadBlock72 = null;

        NovelangParser.whitespace_return whitespace73 = null;

        NovelangParser.softbreak_return softbreak74 = null;

        NovelangParser.whitespace_return whitespace75 = null;

        NovelangParser.mixedDelimitedSpreadBlock_return mixedDelimitedSpreadBlock76 = null;

        NovelangParser.whitespace_return whitespace77 = null;

        NovelangParser.mixedDelimitedSpreadBlock_return mixedDelimitedSpreadBlock78 = null;

        NovelangParser.mixedDelimitedSpreadBlock_return mixedDelimitedSpreadBlock79 = null;

        NovelangParser.whitespace_return whitespace80 = null;

        NovelangParser.mixedDelimitedSpreadBlock_return mixedDelimitedSpreadBlock81 = null;

        NovelangParser.whitespace_return whitespace82 = null;

        NovelangParser.softbreak_return softbreak83 = null;

        NovelangParser.url_return url84 = null;

        NovelangParser.whitespace_return whitespace85 = null;

        NovelangParser.softbreak_return softbreak86 = null;

        NovelangParser.whitespace_return whitespace87 = null;

        NovelangParser.smallDashedListItem_return smallDashedListItem88 = null;

        NovelangParser.whitespace_return whitespace89 = null;

        NovelangParser.softbreak_return softbreak90 = null;

        NovelangParser.whitespace_return whitespace91 = null;

        NovelangParser.mixedDelimitedSpreadBlock_return mixedDelimitedSpreadBlock92 = null;

        NovelangParser.whitespace_return whitespace93 = null;

        NovelangParser.mixedDelimitedSpreadBlock_return mixedDelimitedSpreadBlock94 = null;

        NovelangParser.whitespace_return whitespace95 = null;

        NovelangParser.softbreak_return softbreak96 = null;

        NovelangParser.whitespace_return whitespace97 = null;

        NovelangParser.mixedDelimitedSpreadBlock_return mixedDelimitedSpreadBlock98 = null;

        NovelangParser.whitespace_return whitespace99 = null;

        NovelangParser.mixedDelimitedSpreadBlock_return mixedDelimitedSpreadBlock100 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:400:3: ( ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )? ) ) | ( mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )? )? ) )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==SOFTBREAK) ) {
                alt67=1;
            }
            else if ( (LA67_0==LEFT_PARENTHESIS||LA67_0==LEFT_SQUARE_BRACKET||(LA67_0>=DOUBLE_QUOTE && LA67_0<=HYPHEN_MINUS)||(LA67_0>=GRAVE_ACCENT && LA67_0<=LATIN_SMALL_LETTER_S)||LA67_0==TILDE||(LA67_0>=LATIN_SMALL_LETTER_N && LA67_0<=LATIN_SMALL_LETTER_V)||LA67_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA67_0>=LATIN_SMALL_LETTER_R && LA67_0<=LATIN_SMALL_LETTER_M)||(LA67_0>=DIGIT_0 && LA67_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:401:5: ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )? ) )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:401:5: ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )? ) )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:402:7: ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )? )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:402:7: ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) )
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==SOFTBREAK) ) {
                        int LA42_1 = input.LA(2);

                        if ( (LA42_1==LATIN_SMALL_LETTER_H) && (synpred7_Novelang())) {
                            alt42=1;
                        }
                        else if ( (LA42_1==LATIN_SMALL_LETTER_F) && (synpred7_Novelang())) {
                            alt42=1;
                        }
                        else if ( (LA42_1==WHITESPACE) && (synpred8_Novelang())) {
                            alt42=2;
                        }
                        else if ( (LA42_1==HYPHEN_MINUS) && (synpred8_Novelang())) {
                            alt42=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 42, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 42, 0, input);

                        throw nvae;
                    }
                    switch (alt42) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:403:11: ( ( softbreak url )=> ( softbreak url ) )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:403:11: ( ( softbreak url )=> ( softbreak url ) )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:403:13: ( softbreak url )=> ( softbreak url )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:403:34: ( softbreak url )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:403:36: softbreak url
                            {
                            pushFollow(FOLLOW_softbreak_in_spreadBlockBody2375);
                            softbreak55=softbreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak55.getTree());
                            pushFollow(FOLLOW_url_in_spreadBlockBody2377);
                            url56=url();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, url56.getTree());

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:405:11: ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:405:11: ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:405:13: ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:406:19: ( softbreak ( whitespace )? smallDashedListItem )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:406:21: softbreak ( whitespace )? smallDashedListItem
                            {
                            pushFollow(FOLLOW_softbreak_in_spreadBlockBody2441);
                            softbreak57=softbreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak57.getTree());
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:406:31: ( whitespace )?
                            int alt41=2;
                            int LA41_0 = input.LA(1);

                            if ( (LA41_0==WHITESPACE) ) {
                                alt41=1;
                            }
                            switch (alt41) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:406:31: whitespace
                                    {
                                    pushFollow(FOLLOW_whitespace_in_spreadBlockBody2443);
                                    whitespace58=whitespace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace58.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_smallDashedListItem_in_spreadBlockBody2446);
                            smallDashedListItem59=smallDashedListItem();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, smallDashedListItem59.getTree());

                            }


                            }


                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:410:7: ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:410:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:410:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:410:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:410:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )*
                    loop49:
                    do {
                        int alt49=4;
                        int LA49_0 = input.LA(1);

                        if ( (LA49_0==WHITESPACE) ) {
                            int LA49_1 = input.LA(2);

                            if ( (synpred9_Novelang()) ) {
                                alt49=1;
                            }
                            else if ( (synpred10_Novelang()) ) {
                                alt49=2;
                            }
                            else if ( (synpred11_Novelang()) ) {
                                alt49=3;
                            }


                        }
                        else if ( (LA49_0==SOFTBREAK) ) {
                            int LA49_2 = input.LA(2);

                            if ( (synpred9_Novelang()) ) {
                                alt49=1;
                            }
                            else if ( (synpred10_Novelang()) ) {
                                alt49=2;
                            }
                            else if ( (synpred11_Novelang()) ) {
                                alt49=3;
                            }


                        }


                        switch (alt49) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:411:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:411:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:411:15: ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:411:48: ( ( whitespace )? softbreak url )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:411:50: ( whitespace )? softbreak url
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:411:50: ( whitespace )?
                    	    int alt43=2;
                    	    int LA43_0 = input.LA(1);

                    	    if ( (LA43_0==WHITESPACE) ) {
                    	        alt43=1;
                    	    }
                    	    switch (alt43) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:411:50: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBody2517);
                    	            whitespace60=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace60.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_softbreak_in_spreadBlockBody2520);
                    	    softbreak61=softbreak();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak61.getTree());
                    	    pushFollow(FOLLOW_url_in_spreadBlockBody2522);
                    	    url62=url();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, url62.getTree());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:413:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:413:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:413:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:414:19: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:414:21: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:414:21: ( whitespace )?
                    	    int alt44=2;
                    	    int LA44_0 = input.LA(1);

                    	    if ( (LA44_0==WHITESPACE) ) {
                    	        alt44=1;
                    	    }
                    	    switch (alt44) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:414:21: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBody2590);
                    	            whitespace63=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace63.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_softbreak_in_spreadBlockBody2593);
                    	    softbreak64=softbreak();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak64.getTree());
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:414:43: ( whitespace )?
                    	    int alt45=2;
                    	    int LA45_0 = input.LA(1);

                    	    if ( (LA45_0==WHITESPACE) ) {
                    	        alt45=1;
                    	    }
                    	    switch (alt45) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:414:43: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBody2595);
                    	            whitespace65=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace65.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_smallDashedListItem_in_spreadBlockBody2598);
                    	    smallDashedListItem66=smallDashedListItem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, smallDashedListItem66.getTree());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:416:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:416:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:417:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:422:19: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:423:19: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )*
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:423:19: ( whitespace )?
                    	    int alt46=2;
                    	    int LA46_0 = input.LA(1);

                    	    if ( (LA46_0==WHITESPACE) ) {
                    	        alt46=1;
                    	    }
                    	    switch (alt46) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:423:19: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBody2778);
                    	            whitespace67=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace67.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_softbreak_in_spreadBlockBody2781);
                    	    softbreak68=softbreak();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak68.getTree());
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:423:41: ( whitespace )?
                    	    int alt47=2;
                    	    int LA47_0 = input.LA(1);

                    	    if ( (LA47_0==WHITESPACE) ) {
                    	        alt47=1;
                    	    }
                    	    switch (alt47) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:423:41: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBody2783);
                    	            whitespace69=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace69.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody2786);
                    	    mixedDelimitedSpreadBlock70=mixedDelimitedSpreadBlock();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlock70.getTree());
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:424:19: ( whitespace mixedDelimitedSpreadBlock )*
                    	    loop48:
                    	    do {
                    	        int alt48=2;
                    	        int LA48_0 = input.LA(1);

                    	        if ( (LA48_0==WHITESPACE) ) {
                    	            int LA48_1 = input.LA(2);

                    	            if ( (LA48_1==LEFT_PARENTHESIS||LA48_1==LEFT_SQUARE_BRACKET||(LA48_1>=DOUBLE_QUOTE && LA48_1<=HYPHEN_MINUS)||(LA48_1>=GRAVE_ACCENT && LA48_1<=LATIN_SMALL_LETTER_S)||LA48_1==TILDE||(LA48_1>=LATIN_SMALL_LETTER_N && LA48_1<=LATIN_SMALL_LETTER_V)||LA48_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA48_1>=LATIN_SMALL_LETTER_R && LA48_1<=LATIN_SMALL_LETTER_M)||(LA48_1>=DIGIT_0 && LA48_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	                alt48=1;
                    	            }


                    	        }


                    	        switch (alt48) {
                    	    	case 1 :
                    	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:424:21: whitespace mixedDelimitedSpreadBlock
                    	    	    {
                    	    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBody2809);
                    	    	    whitespace71=whitespace();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace71.getTree());
                    	    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody2811);
                    	    	    mixedDelimitedSpreadBlock72=mixedDelimitedSpreadBlock();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlock72.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop48;
                    	        }
                    	    } while (true);


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop49;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:428:10: ( whitespace )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==WHITESPACE) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:428:10: whitespace
                            {
                            pushFollow(FOLLOW_whitespace_in_spreadBlockBody2890);
                            whitespace73=whitespace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace73.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_softbreak_in_spreadBlockBody2893);
                    softbreak74=softbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak74.getTree());

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:431:5: ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )?
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==WHITESPACE) ) {
                        int LA53_1 = input.LA(2);

                        if ( (LA53_1==LEFT_PARENTHESIS||LA53_1==LEFT_SQUARE_BRACKET||(LA53_1>=DOUBLE_QUOTE && LA53_1<=HYPHEN_MINUS)||(LA53_1>=GRAVE_ACCENT && LA53_1<=LATIN_SMALL_LETTER_S)||LA53_1==TILDE||(LA53_1>=LATIN_SMALL_LETTER_N && LA53_1<=LATIN_SMALL_LETTER_V)||LA53_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA53_1>=LATIN_SMALL_LETTER_R && LA53_1<=LATIN_SMALL_LETTER_M)||(LA53_1>=DIGIT_0 && LA53_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt53=1;
                        }
                    }
                    else if ( (LA53_0==LEFT_PARENTHESIS||LA53_0==LEFT_SQUARE_BRACKET||(LA53_0>=DOUBLE_QUOTE && LA53_0<=HYPHEN_MINUS)||(LA53_0>=GRAVE_ACCENT && LA53_0<=LATIN_SMALL_LETTER_S)||LA53_0==TILDE||(LA53_0>=LATIN_SMALL_LETTER_N && LA53_0<=LATIN_SMALL_LETTER_V)||LA53_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA53_0>=LATIN_SMALL_LETTER_R && LA53_0<=LATIN_SMALL_LETTER_M)||(LA53_0>=DIGIT_0 && LA53_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:431:7: ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )*
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:431:7: ( whitespace )?
                            int alt51=2;
                            int LA51_0 = input.LA(1);

                            if ( (LA51_0==WHITESPACE) ) {
                                alt51=1;
                            }
                            switch (alt51) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:431:7: whitespace
                                    {
                                    pushFollow(FOLLOW_whitespace_in_spreadBlockBody2921);
                                    whitespace75=whitespace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace75.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody2924);
                            mixedDelimitedSpreadBlock76=mixedDelimitedSpreadBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlock76.getTree());
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:432:7: ( whitespace mixedDelimitedSpreadBlock )*
                            loop52:
                            do {
                                int alt52=2;
                                int LA52_0 = input.LA(1);

                                if ( (LA52_0==WHITESPACE) ) {
                                    int LA52_1 = input.LA(2);

                                    if ( (LA52_1==LEFT_PARENTHESIS||LA52_1==LEFT_SQUARE_BRACKET||(LA52_1>=DOUBLE_QUOTE && LA52_1<=HYPHEN_MINUS)||(LA52_1>=GRAVE_ACCENT && LA52_1<=LATIN_SMALL_LETTER_S)||LA52_1==TILDE||(LA52_1>=LATIN_SMALL_LETTER_N && LA52_1<=LATIN_SMALL_LETTER_V)||LA52_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA52_1>=LATIN_SMALL_LETTER_R && LA52_1<=LATIN_SMALL_LETTER_M)||(LA52_1>=DIGIT_0 && LA52_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                        alt52=1;
                                    }


                                }


                                switch (alt52) {
                            	case 1 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:432:9: whitespace mixedDelimitedSpreadBlock
                            	    {
                            	    pushFollow(FOLLOW_whitespace_in_spreadBlockBody2935);
                            	    whitespace77=whitespace();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace77.getTree());
                            	    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody2937);
                            	    mixedDelimitedSpreadBlock78=mixedDelimitedSpreadBlock();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlock78.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop52;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:437:5: ( mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )? )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:437:5: ( mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )? )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:439:7: mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )? )?
                    {
                    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody2995);
                    mixedDelimitedSpreadBlock79=mixedDelimitedSpreadBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlock79.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:440:7: ( whitespace mixedDelimitedSpreadBlock )*
                    loop54:
                    do {
                        int alt54=2;
                        int LA54_0 = input.LA(1);

                        if ( (LA54_0==WHITESPACE) ) {
                            int LA54_1 = input.LA(2);

                            if ( (LA54_1==LEFT_PARENTHESIS||LA54_1==LEFT_SQUARE_BRACKET||(LA54_1>=DOUBLE_QUOTE && LA54_1<=HYPHEN_MINUS)||(LA54_1>=GRAVE_ACCENT && LA54_1<=LATIN_SMALL_LETTER_S)||LA54_1==TILDE||(LA54_1>=LATIN_SMALL_LETTER_N && LA54_1<=LATIN_SMALL_LETTER_V)||LA54_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA54_1>=LATIN_SMALL_LETTER_R && LA54_1<=LATIN_SMALL_LETTER_M)||(LA54_1>=DIGIT_0 && LA54_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt54=1;
                            }


                        }


                        switch (alt54) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:440:9: whitespace mixedDelimitedSpreadBlock
                    	    {
                    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBody3006);
                    	    whitespace80=whitespace();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace80.getTree());
                    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody3008);
                    	    mixedDelimitedSpreadBlock81=mixedDelimitedSpreadBlock();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlock81.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop54;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:442:7: ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )? )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==WHITESPACE) ) {
                        int LA66_1 = input.LA(2);

                        if ( (LA66_1==SOFTBREAK) ) {
                            alt66=1;
                        }
                    }
                    else if ( (LA66_0==SOFTBREAK) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:442:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )?
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:442:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:442:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )* ( whitespace )? softbreak
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:442:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) ) )*
                            loop61:
                            do {
                                int alt61=4;
                                int LA61_0 = input.LA(1);

                                if ( (LA61_0==WHITESPACE) ) {
                                    int LA61_1 = input.LA(2);

                                    if ( (synpred12_Novelang()) ) {
                                        alt61=1;
                                    }
                                    else if ( (synpred13_Novelang()) ) {
                                        alt61=2;
                                    }
                                    else if ( (synpred14_Novelang()) ) {
                                        alt61=3;
                                    }


                                }
                                else if ( (LA61_0==SOFTBREAK) ) {
                                    int LA61_2 = input.LA(2);

                                    if ( (synpred12_Novelang()) ) {
                                        alt61=1;
                                    }
                                    else if ( (synpred13_Novelang()) ) {
                                        alt61=2;
                                    }
                                    else if ( (synpred14_Novelang()) ) {
                                        alt61=3;
                                    }


                                }


                                switch (alt61) {
                            	case 1 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:443:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:443:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:443:15: ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:443:48: ( ( whitespace )? softbreak url )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:443:50: ( whitespace )? softbreak url
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:443:50: ( whitespace )?
                            	    int alt55=2;
                            	    int LA55_0 = input.LA(1);

                            	    if ( (LA55_0==WHITESPACE) ) {
                            	        alt55=1;
                            	    }
                            	    switch (alt55) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:443:50: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBody3061);
                            	            whitespace82=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace82.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_softbreak_in_spreadBlockBody3064);
                            	    softbreak83=softbreak();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak83.getTree());
                            	    pushFollow(FOLLOW_url_in_spreadBlockBody3066);
                            	    url84=url();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, url84.getTree());

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:445:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:445:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:445:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:446:19: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:446:21: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:446:21: ( whitespace )?
                            	    int alt56=2;
                            	    int LA56_0 = input.LA(1);

                            	    if ( (LA56_0==WHITESPACE) ) {
                            	        alt56=1;
                            	    }
                            	    switch (alt56) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:446:21: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBody3134);
                            	            whitespace85=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace85.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_softbreak_in_spreadBlockBody3137);
                            	    softbreak86=softbreak();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak86.getTree());
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:446:43: ( whitespace )?
                            	    int alt57=2;
                            	    int LA57_0 = input.LA(1);

                            	    if ( (LA57_0==WHITESPACE) ) {
                            	        alt57=1;
                            	    }
                            	    switch (alt57) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:446:43: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBody3139);
                            	            whitespace87=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace87.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_smallDashedListItem_in_spreadBlockBody3142);
                            	    smallDashedListItem88=smallDashedListItem();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, smallDashedListItem88.getTree());

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:448:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:448:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ) )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:449:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:454:19: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:455:19: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )*
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:455:19: ( whitespace )?
                            	    int alt58=2;
                            	    int LA58_0 = input.LA(1);

                            	    if ( (LA58_0==WHITESPACE) ) {
                            	        alt58=1;
                            	    }
                            	    switch (alt58) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:455:19: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBody3322);
                            	            whitespace89=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace89.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_softbreak_in_spreadBlockBody3325);
                            	    softbreak90=softbreak();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak90.getTree());
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:455:41: ( whitespace )?
                            	    int alt59=2;
                            	    int LA59_0 = input.LA(1);

                            	    if ( (LA59_0==WHITESPACE) ) {
                            	        alt59=1;
                            	    }
                            	    switch (alt59) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:455:41: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBody3327);
                            	            whitespace91=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace91.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody3330);
                            	    mixedDelimitedSpreadBlock92=mixedDelimitedSpreadBlock();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlock92.getTree());
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:456:19: ( whitespace mixedDelimitedSpreadBlock )*
                            	    loop60:
                            	    do {
                            	        int alt60=2;
                            	        int LA60_0 = input.LA(1);

                            	        if ( (LA60_0==WHITESPACE) ) {
                            	            int LA60_1 = input.LA(2);

                            	            if ( (LA60_1==LEFT_PARENTHESIS||LA60_1==LEFT_SQUARE_BRACKET||(LA60_1>=DOUBLE_QUOTE && LA60_1<=HYPHEN_MINUS)||(LA60_1>=GRAVE_ACCENT && LA60_1<=LATIN_SMALL_LETTER_S)||LA60_1==TILDE||(LA60_1>=LATIN_SMALL_LETTER_N && LA60_1<=LATIN_SMALL_LETTER_V)||LA60_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA60_1>=LATIN_SMALL_LETTER_R && LA60_1<=LATIN_SMALL_LETTER_M)||(LA60_1>=DIGIT_0 && LA60_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            	                alt60=1;
                            	            }


                            	        }


                            	        switch (alt60) {
                            	    	case 1 :
                            	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:456:21: whitespace mixedDelimitedSpreadBlock
                            	    	    {
                            	    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBody3353);
                            	    	    whitespace93=whitespace();

                            	    	    state._fsp--;
                            	    	    if (state.failed) return retval;
                            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace93.getTree());
                            	    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody3355);
                            	    	    mixedDelimitedSpreadBlock94=mixedDelimitedSpreadBlock();

                            	    	    state._fsp--;
                            	    	    if (state.failed) return retval;
                            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlock94.getTree());

                            	    	    }
                            	    	    break;

                            	    	default :
                            	    	    break loop60;
                            	        }
                            	    } while (true);


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop61;
                                }
                            } while (true);

                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:460:10: ( whitespace )?
                            int alt62=2;
                            int LA62_0 = input.LA(1);

                            if ( (LA62_0==WHITESPACE) ) {
                                alt62=1;
                            }
                            switch (alt62) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:460:10: whitespace
                                    {
                                    pushFollow(FOLLOW_whitespace_in_spreadBlockBody3434);
                                    whitespace95=whitespace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace95.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_softbreak_in_spreadBlockBody3437);
                            softbreak96=softbreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak96.getTree());

                            }

                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:463:5: ( ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* )?
                            int alt65=2;
                            int LA65_0 = input.LA(1);

                            if ( (LA65_0==WHITESPACE) ) {
                                int LA65_1 = input.LA(2);

                                if ( (LA65_1==LEFT_PARENTHESIS||LA65_1==LEFT_SQUARE_BRACKET||(LA65_1>=DOUBLE_QUOTE && LA65_1<=HYPHEN_MINUS)||(LA65_1>=GRAVE_ACCENT && LA65_1<=LATIN_SMALL_LETTER_S)||LA65_1==TILDE||(LA65_1>=LATIN_SMALL_LETTER_N && LA65_1<=LATIN_SMALL_LETTER_V)||LA65_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA65_1>=LATIN_SMALL_LETTER_R && LA65_1<=LATIN_SMALL_LETTER_M)||(LA65_1>=DIGIT_0 && LA65_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                    alt65=1;
                                }
                            }
                            else if ( (LA65_0==LEFT_PARENTHESIS||LA65_0==LEFT_SQUARE_BRACKET||(LA65_0>=DOUBLE_QUOTE && LA65_0<=HYPHEN_MINUS)||(LA65_0>=GRAVE_ACCENT && LA65_0<=LATIN_SMALL_LETTER_S)||LA65_0==TILDE||(LA65_0>=LATIN_SMALL_LETTER_N && LA65_0<=LATIN_SMALL_LETTER_V)||LA65_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA65_0>=LATIN_SMALL_LETTER_R && LA65_0<=LATIN_SMALL_LETTER_M)||(LA65_0>=DIGIT_0 && LA65_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt65=1;
                            }
                            switch (alt65) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:463:7: ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )*
                                    {
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:463:7: ( whitespace )?
                                    int alt63=2;
                                    int LA63_0 = input.LA(1);

                                    if ( (LA63_0==WHITESPACE) ) {
                                        alt63=1;
                                    }
                                    switch (alt63) {
                                        case 1 :
                                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:463:7: whitespace
                                            {
                                            pushFollow(FOLLOW_whitespace_in_spreadBlockBody3465);
                                            whitespace97=whitespace();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace97.getTree());

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody3468);
                                    mixedDelimitedSpreadBlock98=mixedDelimitedSpreadBlock();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlock98.getTree());
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:464:7: ( whitespace mixedDelimitedSpreadBlock )*
                                    loop64:
                                    do {
                                        int alt64=2;
                                        int LA64_0 = input.LA(1);

                                        if ( (LA64_0==WHITESPACE) ) {
                                            int LA64_1 = input.LA(2);

                                            if ( (LA64_1==LEFT_PARENTHESIS||LA64_1==LEFT_SQUARE_BRACKET||(LA64_1>=DOUBLE_QUOTE && LA64_1<=HYPHEN_MINUS)||(LA64_1>=GRAVE_ACCENT && LA64_1<=LATIN_SMALL_LETTER_S)||LA64_1==TILDE||(LA64_1>=LATIN_SMALL_LETTER_N && LA64_1<=LATIN_SMALL_LETTER_V)||LA64_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA64_1>=LATIN_SMALL_LETTER_R && LA64_1<=LATIN_SMALL_LETTER_M)||(LA64_1>=DIGIT_0 && LA64_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                                alt64=1;
                                            }


                                        }


                                        switch (alt64) {
                                    	case 1 :
                                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:464:9: whitespace mixedDelimitedSpreadBlock
                                    	    {
                                    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBody3479);
                                    	    whitespace99=whitespace();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace99.getTree());
                                    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody3481);
                                    	    mixedDelimitedSpreadBlock100=mixedDelimitedSpreadBlock();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlock100.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop64;
                                        }
                                    } while (true);


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "spreadBlockBody"

    public static class monoblockBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "monoblockBody"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:473:1: monoblockBody : mixedDelimitedMonoblock ( whitespace mixedDelimitedMonoblock )* ;
    public final NovelangParser.monoblockBody_return monoblockBody() throws RecognitionException {
        NovelangParser.monoblockBody_return retval = new NovelangParser.monoblockBody_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.mixedDelimitedMonoblock_return mixedDelimitedMonoblock101 = null;

        NovelangParser.whitespace_return whitespace102 = null;

        NovelangParser.mixedDelimitedMonoblock_return mixedDelimitedMonoblock103 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:474:3: ( mixedDelimitedMonoblock ( whitespace mixedDelimitedMonoblock )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:474:5: mixedDelimitedMonoblock ( whitespace mixedDelimitedMonoblock )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_mixedDelimitedMonoblock_in_monoblockBody3532);
            mixedDelimitedMonoblock101=mixedDelimitedMonoblock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedMonoblock101.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:475:5: ( whitespace mixedDelimitedMonoblock )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==WHITESPACE) ) {
                    int LA68_1 = input.LA(2);

                    if ( (LA68_1==LEFT_PARENTHESIS||LA68_1==LEFT_SQUARE_BRACKET||(LA68_1>=DOUBLE_QUOTE && LA68_1<=HYPHEN_MINUS)||(LA68_1>=GRAVE_ACCENT && LA68_1<=LATIN_SMALL_LETTER_S)||LA68_1==TILDE||(LA68_1>=LATIN_SMALL_LETTER_N && LA68_1<=LATIN_SMALL_LETTER_V)||LA68_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA68_1>=LATIN_SMALL_LETTER_R && LA68_1<=LATIN_SMALL_LETTER_M)||(LA68_1>=DIGIT_0 && LA68_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt68=1;
                    }


                }


                switch (alt68) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:475:7: whitespace mixedDelimitedMonoblock
            	    {
            	    pushFollow(FOLLOW_whitespace_in_monoblockBody3540);
            	    whitespace102=whitespace();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace102.getTree());
            	    pushFollow(FOLLOW_mixedDelimitedMonoblock_in_monoblockBody3542);
            	    mixedDelimitedMonoblock103=mixedDelimitedMonoblock();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedMonoblock103.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "monoblockBody"

    public static class monoblockBodyNoSeparator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "monoblockBodyNoSeparator"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:478:1: monoblockBodyNoSeparator : ( ( word ( ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) );
    public final NovelangParser.monoblockBodyNoSeparator_return monoblockBodyNoSeparator() throws RecognitionException {
        NovelangParser.monoblockBodyNoSeparator_return retval = new NovelangParser.monoblockBodyNoSeparator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.word_return word104 = null;

        NovelangParser.punctuationSign_return punctuationSign105 = null;

        NovelangParser.delimitedMonoblockNoSeparator_return delimitedMonoblockNoSeparator106 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral107 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral108 = null;

        NovelangParser.word_return word109 = null;

        NovelangParser.punctuationSign_return punctuationSign110 = null;

        NovelangParser.delimitedMonoblockNoSeparator_return delimitedMonoblockNoSeparator111 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral112 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral113 = null;

        NovelangParser.word_return word114 = null;

        NovelangParser.punctuationSign_return punctuationSign115 = null;

        NovelangParser.delimitedMonoblockNoSeparator_return delimitedMonoblockNoSeparator116 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral117 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral118 = null;

        NovelangParser.word_return word119 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:479:3: ( ( word ( ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) )
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( ((LA77_0>=LATIN_SMALL_LETTER_F && LA77_0<=LATIN_SMALL_LETTER_S)||(LA77_0>=LATIN_SMALL_LETTER_N && LA77_0<=LATIN_SMALL_LETTER_V)||LA77_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA77_0>=LATIN_SMALL_LETTER_R && LA77_0<=LATIN_SMALL_LETTER_M)||(LA77_0>=DIGIT_0 && LA77_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt77=1;
            }
            else if ( (LA77_0==LEFT_PARENTHESIS||LA77_0==SOLIDUS||(LA77_0>=GRAVE_ACCENT && LA77_0<=APOSTROPHE)) ) {
                alt77=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }
            switch (alt77) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:480:5: ( word ( ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:480:5: ( word ( ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:480:7: word ( ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    {
                    pushFollow(FOLLOW_word_in_monoblockBodyNoSeparator3567);
                    word104=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, word104.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:481:7: ( ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    loop71:
                    do {
                        int alt71=2;
                        int LA71_0 = input.LA(1);

                        if ( (LA71_0==LEFT_PARENTHESIS||LA71_0==SOLIDUS||(LA71_0>=GRAVE_ACCENT && LA71_0<=APOSTROPHE)) ) {
                            alt71=1;
                        }


                        switch (alt71) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:481:9: ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) ( word )?
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:481:9: ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral )
                    	    int alt69=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt69=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case SOLIDUS:
                    	        {
                    	        alt69=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA69_3 = input.LA(2);

                    	        if ( (LA69_3==GRAVE_ACCENT) ) {
                    	            alt69=4;
                    	        }
                    	        else if ( ((LA69_3>=COMMERCIAL_AT && LA69_3<=WHITESPACE)||(LA69_3>=VERTICAL_LINE && LA69_3<=GREATER_THAN_SIGN)||(LA69_3>=FULL_STOP && LA69_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA69_3>=LATIN_SMALL_LETTER_R && LA69_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt69=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 69, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 69, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt69) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:481:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_monoblockBodyNoSeparator3582);
                    	            punctuationSign105=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign105.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:482:13: delimitedMonoblockNoSeparator
                    	            {
                    	            pushFollow(FOLLOW_delimitedMonoblockNoSeparator_in_monoblockBodyNoSeparator3597);
                    	            delimitedMonoblockNoSeparator106=delimitedMonoblockNoSeparator();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblockNoSeparator106.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:483:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_monoblockBodyNoSeparator3612);
                    	            softInlineLiteral107=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral107.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:484:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_monoblockBodyNoSeparator3627);
                    	            hardInlineLiteral108=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral108.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:485:9: ( word )?
                    	    int alt70=2;
                    	    int LA70_0 = input.LA(1);

                    	    if ( ((LA70_0>=LATIN_SMALL_LETTER_F && LA70_0<=LATIN_SMALL_LETTER_S)||(LA70_0>=LATIN_SMALL_LETTER_N && LA70_0<=LATIN_SMALL_LETTER_V)||LA70_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA70_0>=LATIN_SMALL_LETTER_R && LA70_0<=LATIN_SMALL_LETTER_M)||(LA70_0>=DIGIT_0 && LA70_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt70=1;
                    	    }
                    	    switch (alt70) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:485:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_monoblockBodyNoSeparator3638);
                    	            word109=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word109.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop71;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:489:5: ( ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:489:5: ( ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:489:7: ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) )* ( word )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:489:7: ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral )
                    int alt72=4;
                    switch ( input.LA(1) ) {
                    case FULL_STOP:
                    case COMMA:
                    case QUESTION_MARK:
                    case EXCLAMATION_MARK:
                    case SEMICOLON:
                    case COLON:
                    case APOSTROPHE:
                        {
                        alt72=1;
                        }
                        break;
                    case LEFT_PARENTHESIS:
                    case SOLIDUS:
                        {
                        alt72=2;
                        }
                        break;
                    case GRAVE_ACCENT:
                        {
                        int LA72_3 = input.LA(2);

                        if ( (LA72_3==GRAVE_ACCENT) ) {
                            alt72=4;
                        }
                        else if ( ((LA72_3>=COMMERCIAL_AT && LA72_3<=WHITESPACE)||(LA72_3>=VERTICAL_LINE && LA72_3<=GREATER_THAN_SIGN)||(LA72_3>=FULL_STOP && LA72_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA72_3>=LATIN_SMALL_LETTER_R && LA72_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt72=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 72, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 72, 0, input);

                        throw nvae;
                    }

                    switch (alt72) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:489:11: punctuationSign
                            {
                            pushFollow(FOLLOW_punctuationSign_in_monoblockBodyNoSeparator3668);
                            punctuationSign110=punctuationSign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign110.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:490:11: delimitedMonoblockNoSeparator
                            {
                            pushFollow(FOLLOW_delimitedMonoblockNoSeparator_in_monoblockBodyNoSeparator3681);
                            delimitedMonoblockNoSeparator111=delimitedMonoblockNoSeparator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblockNoSeparator111.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:491:11: softInlineLiteral
                            {
                            pushFollow(FOLLOW_softInlineLiteral_in_monoblockBodyNoSeparator3693);
                            softInlineLiteral112=softInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral112.getTree());

                            }
                            break;
                        case 4 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:492:11: hardInlineLiteral
                            {
                            pushFollow(FOLLOW_hardInlineLiteral_in_monoblockBodyNoSeparator3706);
                            hardInlineLiteral113=hardInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral113.getTree());

                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:494:7: ( ( word )? ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) )*
                    loop75:
                    do {
                        int alt75=2;
                        alt75 = dfa75.predict(input);
                        switch (alt75) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:494:9: ( word )? ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:494:9: ( word )?
                    	    int alt73=2;
                    	    int LA73_0 = input.LA(1);

                    	    if ( ((LA73_0>=LATIN_SMALL_LETTER_F && LA73_0<=LATIN_SMALL_LETTER_S)||(LA73_0>=LATIN_SMALL_LETTER_N && LA73_0<=LATIN_SMALL_LETTER_V)||LA73_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA73_0>=LATIN_SMALL_LETTER_R && LA73_0<=LATIN_SMALL_LETTER_M)||(LA73_0>=DIGIT_0 && LA73_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt73=1;
                    	    }
                    	    switch (alt73) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:494:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_monoblockBodyNoSeparator3725);
                    	            word114=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word114.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:495:9: ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral )
                    	    int alt74=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt74=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case SOLIDUS:
                    	        {
                    	        alt74=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA74_3 = input.LA(2);

                    	        if ( (LA74_3==GRAVE_ACCENT) ) {
                    	            alt74=4;
                    	        }
                    	        else if ( ((LA74_3>=COMMERCIAL_AT && LA74_3<=WHITESPACE)||(LA74_3>=VERTICAL_LINE && LA74_3<=GREATER_THAN_SIGN)||(LA74_3>=FULL_STOP && LA74_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA74_3>=LATIN_SMALL_LETTER_R && LA74_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt74=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 74, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 74, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt74) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:495:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_monoblockBodyNoSeparator3741);
                    	            punctuationSign115=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign115.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:496:13: delimitedMonoblockNoSeparator
                    	            {
                    	            pushFollow(FOLLOW_delimitedMonoblockNoSeparator_in_monoblockBodyNoSeparator3756);
                    	            delimitedMonoblockNoSeparator116=delimitedMonoblockNoSeparator();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblockNoSeparator116.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:497:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_monoblockBodyNoSeparator3770);
                    	            softInlineLiteral117=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral117.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:498:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_monoblockBodyNoSeparator3785);
                    	            hardInlineLiteral118=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral118.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop75;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:501:7: ( word )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( ((LA76_0>=LATIN_SMALL_LETTER_F && LA76_0<=LATIN_SMALL_LETTER_S)||(LA76_0>=LATIN_SMALL_LETTER_N && LA76_0<=LATIN_SMALL_LETTER_V)||LA76_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA76_0>=LATIN_SMALL_LETTER_R && LA76_0<=LATIN_SMALL_LETTER_M)||(LA76_0>=DIGIT_0 && LA76_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:501:7: word
                            {
                            pushFollow(FOLLOW_word_in_monoblockBodyNoSeparator3827);
                            word119=word();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, word119.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "monoblockBodyNoSeparator"

    public static class mixedDelimitedMonoblock_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixedDelimitedMonoblock"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:506:1: mixedDelimitedMonoblock : ( ( word ( ( punctuationSign | delimitedMonoblock | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) | embeddableResource | blockAfterTilde );
    public final NovelangParser.mixedDelimitedMonoblock_return mixedDelimitedMonoblock() throws RecognitionException {
        NovelangParser.mixedDelimitedMonoblock_return retval = new NovelangParser.mixedDelimitedMonoblock_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.word_return word120 = null;

        NovelangParser.punctuationSign_return punctuationSign121 = null;

        NovelangParser.delimitedMonoblock_return delimitedMonoblock122 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral123 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral124 = null;

        NovelangParser.word_return word125 = null;

        NovelangParser.punctuationSign_return punctuationSign126 = null;

        NovelangParser.delimitedSpreadblock_return delimitedSpreadblock127 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral128 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral129 = null;

        NovelangParser.word_return word130 = null;

        NovelangParser.punctuationSign_return punctuationSign131 = null;

        NovelangParser.delimitedSpreadblock_return delimitedSpreadblock132 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral133 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral134 = null;

        NovelangParser.word_return word135 = null;

        NovelangParser.embeddableResource_return embeddableResource136 = null;

        NovelangParser.blockAfterTilde_return blockAfterTilde137 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:507:3: ( ( word ( ( punctuationSign | delimitedMonoblock | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) | embeddableResource | blockAfterTilde )
            int alt86=4;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:508:5: ( word ( ( punctuationSign | delimitedMonoblock | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:508:5: ( word ( ( punctuationSign | delimitedMonoblock | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:508:7: word ( ( punctuationSign | delimitedMonoblock | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    {
                    pushFollow(FOLLOW_word_in_mixedDelimitedMonoblock3863);
                    word120=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, word120.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:509:7: ( ( punctuationSign | delimitedMonoblock | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    loop80:
                    do {
                        int alt80=2;
                        int LA80_0 = input.LA(1);

                        if ( (LA80_0==LEFT_PARENTHESIS||LA80_0==LEFT_SQUARE_BRACKET||(LA80_0>=DOUBLE_QUOTE && LA80_0<=HYPHEN_MINUS)||(LA80_0>=GRAVE_ACCENT && LA80_0<=APOSTROPHE)) ) {
                            alt80=1;
                        }


                        switch (alt80) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:509:9: ( punctuationSign | delimitedMonoblock | softInlineLiteral | hardInlineLiteral ) ( word )?
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:509:9: ( punctuationSign | delimitedMonoblock | softInlineLiteral | hardInlineLiteral )
                    	    int alt78=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt78=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case DOUBLE_QUOTE:
                    	    case SOLIDUS:
                    	    case HYPHEN_MINUS:
                    	        {
                    	        alt78=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA78_3 = input.LA(2);

                    	        if ( (LA78_3==GRAVE_ACCENT) ) {
                    	            alt78=4;
                    	        }
                    	        else if ( ((LA78_3>=COMMERCIAL_AT && LA78_3<=WHITESPACE)||(LA78_3>=VERTICAL_LINE && LA78_3<=GREATER_THAN_SIGN)||(LA78_3>=FULL_STOP && LA78_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA78_3>=LATIN_SMALL_LETTER_R && LA78_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt78=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 78, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 78, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt78) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:509:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedMonoblock3878);
                    	            punctuationSign121=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign121.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:510:13: delimitedMonoblock
                    	            {
                    	            pushFollow(FOLLOW_delimitedMonoblock_in_mixedDelimitedMonoblock3893);
                    	            delimitedMonoblock122=delimitedMonoblock();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblock122.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:511:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblock3908);
                    	            softInlineLiteral123=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral123.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:512:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblock3923);
                    	            hardInlineLiteral124=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral124.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:513:9: ( word )?
                    	    int alt79=2;
                    	    int LA79_0 = input.LA(1);

                    	    if ( ((LA79_0>=LATIN_SMALL_LETTER_F && LA79_0<=LATIN_SMALL_LETTER_S)||(LA79_0>=LATIN_SMALL_LETTER_N && LA79_0<=LATIN_SMALL_LETTER_V)||LA79_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA79_0>=LATIN_SMALL_LETTER_R && LA79_0<=LATIN_SMALL_LETTER_M)||(LA79_0>=DIGIT_0 && LA79_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt79=1;
                    	    }
                    	    switch (alt79) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:513:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedMonoblock3934);
                    	            word125=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word125.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop80;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:517:5: ( ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:517:5: ( ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:517:7: ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) )* ( word )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:517:7: ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral )
                    int alt81=4;
                    switch ( input.LA(1) ) {
                    case FULL_STOP:
                    case COMMA:
                    case QUESTION_MARK:
                    case EXCLAMATION_MARK:
                    case SEMICOLON:
                    case COLON:
                    case APOSTROPHE:
                        {
                        alt81=1;
                        }
                        break;
                    case LEFT_PARENTHESIS:
                    case LEFT_SQUARE_BRACKET:
                    case DOUBLE_QUOTE:
                    case SOLIDUS:
                    case HYPHEN_MINUS:
                        {
                        alt81=2;
                        }
                        break;
                    case GRAVE_ACCENT:
                        {
                        int LA81_3 = input.LA(2);

                        if ( (LA81_3==GRAVE_ACCENT) ) {
                            alt81=4;
                        }
                        else if ( ((LA81_3>=COMMERCIAL_AT && LA81_3<=WHITESPACE)||(LA81_3>=VERTICAL_LINE && LA81_3<=GREATER_THAN_SIGN)||(LA81_3>=FULL_STOP && LA81_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA81_3>=LATIN_SMALL_LETTER_R && LA81_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt81=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 81, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 81, 0, input);

                        throw nvae;
                    }

                    switch (alt81) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:517:11: punctuationSign
                            {
                            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedMonoblock3964);
                            punctuationSign126=punctuationSign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign126.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:518:11: delimitedSpreadblock
                            {
                            pushFollow(FOLLOW_delimitedSpreadblock_in_mixedDelimitedMonoblock3977);
                            delimitedSpreadblock127=delimitedSpreadblock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedSpreadblock127.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:519:11: softInlineLiteral
                            {
                            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblock3990);
                            softInlineLiteral128=softInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral128.getTree());

                            }
                            break;
                        case 4 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:520:11: hardInlineLiteral
                            {
                            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblock4003);
                            hardInlineLiteral129=hardInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral129.getTree());

                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:522:7: ( ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) )*
                    loop84:
                    do {
                        int alt84=2;
                        alt84 = dfa84.predict(input);
                        switch (alt84) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:522:9: ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:522:9: ( word )?
                    	    int alt82=2;
                    	    int LA82_0 = input.LA(1);

                    	    if ( ((LA82_0>=LATIN_SMALL_LETTER_F && LA82_0<=LATIN_SMALL_LETTER_S)||(LA82_0>=LATIN_SMALL_LETTER_N && LA82_0<=LATIN_SMALL_LETTER_V)||LA82_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA82_0>=LATIN_SMALL_LETTER_R && LA82_0<=LATIN_SMALL_LETTER_M)||(LA82_0>=DIGIT_0 && LA82_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt82=1;
                    	    }
                    	    switch (alt82) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:522:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedMonoblock4022);
                    	            word130=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word130.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:523:9: ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral )
                    	    int alt83=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt83=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case DOUBLE_QUOTE:
                    	    case SOLIDUS:
                    	    case HYPHEN_MINUS:
                    	        {
                    	        alt83=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA83_3 = input.LA(2);

                    	        if ( (LA83_3==GRAVE_ACCENT) ) {
                    	            alt83=4;
                    	        }
                    	        else if ( ((LA83_3>=COMMERCIAL_AT && LA83_3<=WHITESPACE)||(LA83_3>=VERTICAL_LINE && LA83_3<=GREATER_THAN_SIGN)||(LA83_3>=FULL_STOP && LA83_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA83_3>=LATIN_SMALL_LETTER_R && LA83_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt83=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 83, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 83, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt83) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:523:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedMonoblock4038);
                    	            punctuationSign131=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign131.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:524:13: delimitedSpreadblock
                    	            {
                    	            pushFollow(FOLLOW_delimitedSpreadblock_in_mixedDelimitedMonoblock4053);
                    	            delimitedSpreadblock132=delimitedSpreadblock();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedSpreadblock132.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:525:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblock4068);
                    	            softInlineLiteral133=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral133.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:526:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblock4083);
                    	            hardInlineLiteral134=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral134.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop84;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:529:7: ( word )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( ((LA85_0>=LATIN_SMALL_LETTER_F && LA85_0<=LATIN_SMALL_LETTER_S)||(LA85_0>=LATIN_SMALL_LETTER_N && LA85_0<=LATIN_SMALL_LETTER_V)||LA85_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA85_0>=LATIN_SMALL_LETTER_R && LA85_0<=LATIN_SMALL_LETTER_M)||(LA85_0>=DIGIT_0 && LA85_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:529:7: word
                            {
                            pushFollow(FOLLOW_word_in_mixedDelimitedMonoblock4125);
                            word135=word();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, word135.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:531:5: embeddableResource
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_embeddableResource_in_mixedDelimitedMonoblock4140);
                    embeddableResource136=embeddableResource();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, embeddableResource136.getTree());

                    }
                    break;
                case 4 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:532:5: blockAfterTilde
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_blockAfterTilde_in_mixedDelimitedMonoblock4146);
                    blockAfterTilde137=blockAfterTilde();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockAfterTilde137.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixedDelimitedMonoblock"

    public static class parenthesizedSpreadblock_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parenthesizedSpreadblock"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:540:1: parenthesizedSpreadblock : ( LEFT_PARENTHESIS ( whitespace )? ( spreadBlockBody ( whitespace )? ) RIGHT_PARENTHESIS ) -> ^( BLOCK_INSIDE_PARENTHESIS spreadBlockBody ) ;
    public final NovelangParser.parenthesizedSpreadblock_return parenthesizedSpreadblock() throws RecognitionException {
        NovelangParser.parenthesizedSpreadblock_return retval = new NovelangParser.parenthesizedSpreadblock_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PARENTHESIS138=null;
        Token RIGHT_PARENTHESIS142=null;
        NovelangParser.whitespace_return whitespace139 = null;

        NovelangParser.spreadBlockBody_return spreadBlockBody140 = null;

        NovelangParser.whitespace_return whitespace141 = null;


        Object LEFT_PARENTHESIS138_tree=null;
        Object RIGHT_PARENTHESIS142_tree=null;
        RewriteRuleTokenStream stream_RIGHT_PARENTHESIS=new RewriteRuleTokenStream(adaptor,"token RIGHT_PARENTHESIS");
        RewriteRuleTokenStream stream_LEFT_PARENTHESIS=new RewriteRuleTokenStream(adaptor,"token LEFT_PARENTHESIS");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        RewriteRuleSubtreeStream stream_spreadBlockBody=new RewriteRuleSubtreeStream(adaptor,"rule spreadBlockBody");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:541:3: ( ( LEFT_PARENTHESIS ( whitespace )? ( spreadBlockBody ( whitespace )? ) RIGHT_PARENTHESIS ) -> ^( BLOCK_INSIDE_PARENTHESIS spreadBlockBody ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:541:5: ( LEFT_PARENTHESIS ( whitespace )? ( spreadBlockBody ( whitespace )? ) RIGHT_PARENTHESIS )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:541:5: ( LEFT_PARENTHESIS ( whitespace )? ( spreadBlockBody ( whitespace )? ) RIGHT_PARENTHESIS )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:542:7: LEFT_PARENTHESIS ( whitespace )? ( spreadBlockBody ( whitespace )? ) RIGHT_PARENTHESIS
            {
            if ( state.backtracking==0 ) {
               delegate.startDelimitedText( BlockDelimiter.PARENTHESIS, input.LT( 1 ) ) ; 
            }
            LEFT_PARENTHESIS138=(Token)match(input,LEFT_PARENTHESIS,FOLLOW_LEFT_PARENTHESIS_in_parenthesizedSpreadblock4202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PARENTHESIS.add(LEFT_PARENTHESIS138);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:543:24: ( whitespace )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==WHITESPACE) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:543:24: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_parenthesizedSpreadblock4204);
                    whitespace139=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whitespace.add(whitespace139.getTree());

                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:544:7: ( spreadBlockBody ( whitespace )? )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:544:9: spreadBlockBody ( whitespace )?
            {
            pushFollow(FOLLOW_spreadBlockBody_in_parenthesizedSpreadblock4215);
            spreadBlockBody140=spreadBlockBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_spreadBlockBody.add(spreadBlockBody140.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:545:9: ( whitespace )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==WHITESPACE) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:545:9: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_parenthesizedSpreadblock4226);
                    whitespace141=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whitespace.add(whitespace141.getTree());

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               delegate.reachEndDelimiter( BlockDelimiter.PARENTHESIS ) ; 
            }
            RIGHT_PARENTHESIS142=(Token)match(input,RIGHT_PARENTHESIS,FOLLOW_RIGHT_PARENTHESIS_in_parenthesizedSpreadblock4252); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PARENTHESIS.add(RIGHT_PARENTHESIS142);

            if ( state.backtracking==0 ) {
               delegate.endDelimitedText( BlockDelimiter.PARENTHESIS ) ; 
            }

            }



            // AST REWRITE
            // elements: spreadBlockBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 550:7: -> ^( BLOCK_INSIDE_PARENTHESIS spreadBlockBody )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:550:10: ^( BLOCK_INSIDE_PARENTHESIS spreadBlockBody )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK_INSIDE_PARENTHESIS, "BLOCK_INSIDE_PARENTHESIS"), root_1);

                adaptor.addChild(root_1, stream_spreadBlockBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( MismatchedTokenException mte ) {

                  delegate.reportMissingDelimiter( BlockDelimiter.PARENTHESIS, mte ) ; 
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parenthesizedSpreadblock"

    public static class parenthesizedMonoblock_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parenthesizedMonoblock"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:555:1: parenthesizedMonoblock : ( LEFT_PARENTHESIS ( whitespace )? ( monoblockBody ( whitespace )? ) RIGHT_PARENTHESIS ) -> ^( BLOCK_INSIDE_PARENTHESIS monoblockBody ) ;
    public final NovelangParser.parenthesizedMonoblock_return parenthesizedMonoblock() throws RecognitionException {
        NovelangParser.parenthesizedMonoblock_return retval = new NovelangParser.parenthesizedMonoblock_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PARENTHESIS143=null;
        Token RIGHT_PARENTHESIS147=null;
        NovelangParser.whitespace_return whitespace144 = null;

        NovelangParser.monoblockBody_return monoblockBody145 = null;

        NovelangParser.whitespace_return whitespace146 = null;


        Object LEFT_PARENTHESIS143_tree=null;
        Object RIGHT_PARENTHESIS147_tree=null;
        RewriteRuleTokenStream stream_RIGHT_PARENTHESIS=new RewriteRuleTokenStream(adaptor,"token RIGHT_PARENTHESIS");
        RewriteRuleTokenStream stream_LEFT_PARENTHESIS=new RewriteRuleTokenStream(adaptor,"token LEFT_PARENTHESIS");
        RewriteRuleSubtreeStream stream_monoblockBody=new RewriteRuleSubtreeStream(adaptor,"rule monoblockBody");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:556:3: ( ( LEFT_PARENTHESIS ( whitespace )? ( monoblockBody ( whitespace )? ) RIGHT_PARENTHESIS ) -> ^( BLOCK_INSIDE_PARENTHESIS monoblockBody ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:556:5: ( LEFT_PARENTHESIS ( whitespace )? ( monoblockBody ( whitespace )? ) RIGHT_PARENTHESIS )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:556:5: ( LEFT_PARENTHESIS ( whitespace )? ( monoblockBody ( whitespace )? ) RIGHT_PARENTHESIS )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:557:7: LEFT_PARENTHESIS ( whitespace )? ( monoblockBody ( whitespace )? ) RIGHT_PARENTHESIS
            {
            if ( state.backtracking==0 ) {
               delegate.startDelimitedText( BlockDelimiter.PARENTHESIS, input.LT( 1 ) ) ; 
            }
            LEFT_PARENTHESIS143=(Token)match(input,LEFT_PARENTHESIS,FOLLOW_LEFT_PARENTHESIS_in_parenthesizedMonoblock4313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PARENTHESIS.add(LEFT_PARENTHESIS143);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:558:24: ( whitespace )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==WHITESPACE) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:558:24: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_parenthesizedMonoblock4315);
                    whitespace144=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whitespace.add(whitespace144.getTree());

                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:559:7: ( monoblockBody ( whitespace )? )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:559:9: monoblockBody ( whitespace )?
            {
            pushFollow(FOLLOW_monoblockBody_in_parenthesizedMonoblock4326);
            monoblockBody145=monoblockBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_monoblockBody.add(monoblockBody145.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:560:9: ( whitespace )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==WHITESPACE) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:560:9: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_parenthesizedMonoblock4337);
                    whitespace146=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whitespace.add(whitespace146.getTree());

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               delegate.reachEndDelimiter( BlockDelimiter.PARENTHESIS ) ; 
            }
            RIGHT_PARENTHESIS147=(Token)match(input,RIGHT_PARENTHESIS,FOLLOW_RIGHT_PARENTHESIS_in_parenthesizedMonoblock4363); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PARENTHESIS.add(RIGHT_PARENTHESIS147);

            if ( state.backtracking==0 ) {
               delegate.endDelimitedText( BlockDelimiter.PARENTHESIS ) ; 
            }

            }



            // AST REWRITE
            // elements: monoblockBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 565:7: -> ^( BLOCK_INSIDE_PARENTHESIS monoblockBody )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:565:10: ^( BLOCK_INSIDE_PARENTHESIS monoblockBody )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK_INSIDE_PARENTHESIS, "BLOCK_INSIDE_PARENTHESIS"), root_1);

                adaptor.addChild(root_1, stream_monoblockBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( MismatchedTokenException mte ) {

                  delegate.reportMissingDelimiter( BlockDelimiter.PARENTHESIS, mte ) ; 
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parenthesizedMonoblock"

    public static class parenthesizedMonoblockNoSeparator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parenthesizedMonoblockNoSeparator"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:570:1: parenthesizedMonoblockNoSeparator : ( LEFT_PARENTHESIS monoblockBodyNoSeparator RIGHT_PARENTHESIS ) -> ^( BLOCK_INSIDE_PARENTHESIS monoblockBodyNoSeparator ) ;
    public final NovelangParser.parenthesizedMonoblockNoSeparator_return parenthesizedMonoblockNoSeparator() throws RecognitionException {
        NovelangParser.parenthesizedMonoblockNoSeparator_return retval = new NovelangParser.parenthesizedMonoblockNoSeparator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PARENTHESIS148=null;
        Token RIGHT_PARENTHESIS150=null;
        NovelangParser.monoblockBodyNoSeparator_return monoblockBodyNoSeparator149 = null;


        Object LEFT_PARENTHESIS148_tree=null;
        Object RIGHT_PARENTHESIS150_tree=null;
        RewriteRuleTokenStream stream_RIGHT_PARENTHESIS=new RewriteRuleTokenStream(adaptor,"token RIGHT_PARENTHESIS");
        RewriteRuleTokenStream stream_LEFT_PARENTHESIS=new RewriteRuleTokenStream(adaptor,"token LEFT_PARENTHESIS");
        RewriteRuleSubtreeStream stream_monoblockBodyNoSeparator=new RewriteRuleSubtreeStream(adaptor,"rule monoblockBodyNoSeparator");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:571:3: ( ( LEFT_PARENTHESIS monoblockBodyNoSeparator RIGHT_PARENTHESIS ) -> ^( BLOCK_INSIDE_PARENTHESIS monoblockBodyNoSeparator ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:571:5: ( LEFT_PARENTHESIS monoblockBodyNoSeparator RIGHT_PARENTHESIS )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:571:5: ( LEFT_PARENTHESIS monoblockBodyNoSeparator RIGHT_PARENTHESIS )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:572:7: LEFT_PARENTHESIS monoblockBodyNoSeparator RIGHT_PARENTHESIS
            {
            if ( state.backtracking==0 ) {
               delegate.startDelimitedText( BlockDelimiter.PARENTHESIS, input.LT( 1 ) ) ; 
            }
            LEFT_PARENTHESIS148=(Token)match(input,LEFT_PARENTHESIS,FOLLOW_LEFT_PARENTHESIS_in_parenthesizedMonoblockNoSeparator4424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PARENTHESIS.add(LEFT_PARENTHESIS148);

            pushFollow(FOLLOW_monoblockBodyNoSeparator_in_parenthesizedMonoblockNoSeparator4426);
            monoblockBodyNoSeparator149=monoblockBodyNoSeparator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_monoblockBodyNoSeparator.add(monoblockBodyNoSeparator149.getTree());
            if ( state.backtracking==0 ) {
               delegate.reachEndDelimiter( BlockDelimiter.PARENTHESIS ) ; 
            }
            RIGHT_PARENTHESIS150=(Token)match(input,RIGHT_PARENTHESIS,FOLLOW_RIGHT_PARENTHESIS_in_parenthesizedMonoblockNoSeparator4442); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PARENTHESIS.add(RIGHT_PARENTHESIS150);

            if ( state.backtracking==0 ) {
               delegate.endDelimitedText( BlockDelimiter.PARENTHESIS ) ; 
            }

            }



            // AST REWRITE
            // elements: monoblockBodyNoSeparator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 577:7: -> ^( BLOCK_INSIDE_PARENTHESIS monoblockBodyNoSeparator )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:577:10: ^( BLOCK_INSIDE_PARENTHESIS monoblockBodyNoSeparator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK_INSIDE_PARENTHESIS, "BLOCK_INSIDE_PARENTHESIS"), root_1);

                adaptor.addChild(root_1, stream_monoblockBodyNoSeparator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( MismatchedTokenException mte ) {

                  delegate.reportMissingDelimiter( BlockDelimiter.PARENTHESIS, mte ) ; 
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parenthesizedMonoblockNoSeparator"

    public static class squarebracketsSpreadblock_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "squarebracketsSpreadblock"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:586:1: squarebracketsSpreadblock : ( LEFT_SQUARE_BRACKET ( whitespace )? ( spreadBlockBody ( whitespace )? ) RIGHT_SQUARE_BRACKET ) -> ^( BLOCK_INSIDE_SQUARE_BRACKETS spreadBlockBody ) ;
    public final NovelangParser.squarebracketsSpreadblock_return squarebracketsSpreadblock() throws RecognitionException {
        NovelangParser.squarebracketsSpreadblock_return retval = new NovelangParser.squarebracketsSpreadblock_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE_BRACKET151=null;
        Token RIGHT_SQUARE_BRACKET155=null;
        NovelangParser.whitespace_return whitespace152 = null;

        NovelangParser.spreadBlockBody_return spreadBlockBody153 = null;

        NovelangParser.whitespace_return whitespace154 = null;


        Object LEFT_SQUARE_BRACKET151_tree=null;
        Object RIGHT_SQUARE_BRACKET155_tree=null;
        RewriteRuleTokenStream stream_LEFT_SQUARE_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_SQUARE_BRACKET");
        RewriteRuleTokenStream stream_RIGHT_SQUARE_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_SQUARE_BRACKET");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        RewriteRuleSubtreeStream stream_spreadBlockBody=new RewriteRuleSubtreeStream(adaptor,"rule spreadBlockBody");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:587:3: ( ( LEFT_SQUARE_BRACKET ( whitespace )? ( spreadBlockBody ( whitespace )? ) RIGHT_SQUARE_BRACKET ) -> ^( BLOCK_INSIDE_SQUARE_BRACKETS spreadBlockBody ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:587:5: ( LEFT_SQUARE_BRACKET ( whitespace )? ( spreadBlockBody ( whitespace )? ) RIGHT_SQUARE_BRACKET )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:587:5: ( LEFT_SQUARE_BRACKET ( whitespace )? ( spreadBlockBody ( whitespace )? ) RIGHT_SQUARE_BRACKET )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:588:7: LEFT_SQUARE_BRACKET ( whitespace )? ( spreadBlockBody ( whitespace )? ) RIGHT_SQUARE_BRACKET
            {
            if ( state.backtracking==0 ) {
               delegate.startDelimitedText( BlockDelimiter.SQUARE_BRACKETS, input.LT( 1 ) ) ; 
            }
            LEFT_SQUARE_BRACKET151=(Token)match(input,LEFT_SQUARE_BRACKET,FOLLOW_LEFT_SQUARE_BRACKET_in_squarebracketsSpreadblock4509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_SQUARE_BRACKET.add(LEFT_SQUARE_BRACKET151);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:589:27: ( whitespace )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==WHITESPACE) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:589:27: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_squarebracketsSpreadblock4511);
                    whitespace152=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whitespace.add(whitespace152.getTree());

                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:590:7: ( spreadBlockBody ( whitespace )? )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:590:9: spreadBlockBody ( whitespace )?
            {
            pushFollow(FOLLOW_spreadBlockBody_in_squarebracketsSpreadblock4522);
            spreadBlockBody153=spreadBlockBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_spreadBlockBody.add(spreadBlockBody153.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:591:9: ( whitespace )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==WHITESPACE) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:591:9: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_squarebracketsSpreadblock4533);
                    whitespace154=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whitespace.add(whitespace154.getTree());

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               delegate.reachEndDelimiter( BlockDelimiter.SQUARE_BRACKETS ) ; 
            }
            RIGHT_SQUARE_BRACKET155=(Token)match(input,RIGHT_SQUARE_BRACKET,FOLLOW_RIGHT_SQUARE_BRACKET_in_squarebracketsSpreadblock4559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_SQUARE_BRACKET.add(RIGHT_SQUARE_BRACKET155);

            if ( state.backtracking==0 ) {
               delegate.endDelimitedText( BlockDelimiter.SQUARE_BRACKETS ) ; 
            }

            }



            // AST REWRITE
            // elements: spreadBlockBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 596:7: -> ^( BLOCK_INSIDE_SQUARE_BRACKETS spreadBlockBody )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:596:10: ^( BLOCK_INSIDE_SQUARE_BRACKETS spreadBlockBody )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK_INSIDE_SQUARE_BRACKETS, "BLOCK_INSIDE_SQUARE_BRACKETS"), root_1);

                adaptor.addChild(root_1, stream_spreadBlockBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( MismatchedTokenException mte ) {

                  delegate.reportMissingDelimiter( BlockDelimiter.SQUARE_BRACKETS, mte ) ; 
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "squarebracketsSpreadblock"

    public static class squarebracketsMonoblock_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "squarebracketsMonoblock"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:601:1: squarebracketsMonoblock : ( LEFT_SQUARE_BRACKET ( whitespace )? ( monoblockBody ( whitespace )? ) RIGHT_SQUARE_BRACKET ) -> ^( BLOCK_INSIDE_SQUARE_BRACKETS monoblockBody ) ;
    public final NovelangParser.squarebracketsMonoblock_return squarebracketsMonoblock() throws RecognitionException {
        NovelangParser.squarebracketsMonoblock_return retval = new NovelangParser.squarebracketsMonoblock_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE_BRACKET156=null;
        Token RIGHT_SQUARE_BRACKET160=null;
        NovelangParser.whitespace_return whitespace157 = null;

        NovelangParser.monoblockBody_return monoblockBody158 = null;

        NovelangParser.whitespace_return whitespace159 = null;


        Object LEFT_SQUARE_BRACKET156_tree=null;
        Object RIGHT_SQUARE_BRACKET160_tree=null;
        RewriteRuleTokenStream stream_LEFT_SQUARE_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_SQUARE_BRACKET");
        RewriteRuleTokenStream stream_RIGHT_SQUARE_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_SQUARE_BRACKET");
        RewriteRuleSubtreeStream stream_monoblockBody=new RewriteRuleSubtreeStream(adaptor,"rule monoblockBody");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:602:3: ( ( LEFT_SQUARE_BRACKET ( whitespace )? ( monoblockBody ( whitespace )? ) RIGHT_SQUARE_BRACKET ) -> ^( BLOCK_INSIDE_SQUARE_BRACKETS monoblockBody ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:602:5: ( LEFT_SQUARE_BRACKET ( whitespace )? ( monoblockBody ( whitespace )? ) RIGHT_SQUARE_BRACKET )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:602:5: ( LEFT_SQUARE_BRACKET ( whitespace )? ( monoblockBody ( whitespace )? ) RIGHT_SQUARE_BRACKET )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:603:7: LEFT_SQUARE_BRACKET ( whitespace )? ( monoblockBody ( whitespace )? ) RIGHT_SQUARE_BRACKET
            {
            if ( state.backtracking==0 ) {
               delegate.startDelimitedText( BlockDelimiter.SQUARE_BRACKETS, input.LT( 1 ) ) ; 
            }
            LEFT_SQUARE_BRACKET156=(Token)match(input,LEFT_SQUARE_BRACKET,FOLLOW_LEFT_SQUARE_BRACKET_in_squarebracketsMonoblock4620); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_SQUARE_BRACKET.add(LEFT_SQUARE_BRACKET156);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:604:27: ( whitespace )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==WHITESPACE) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:604:27: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_squarebracketsMonoblock4622);
                    whitespace157=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whitespace.add(whitespace157.getTree());

                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:605:7: ( monoblockBody ( whitespace )? )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:605:9: monoblockBody ( whitespace )?
            {
            pushFollow(FOLLOW_monoblockBody_in_squarebracketsMonoblock4633);
            monoblockBody158=monoblockBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_monoblockBody.add(monoblockBody158.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:606:9: ( whitespace )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==WHITESPACE) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:606:9: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_squarebracketsMonoblock4644);
                    whitespace159=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whitespace.add(whitespace159.getTree());

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               delegate.reachEndDelimiter( BlockDelimiter.SQUARE_BRACKETS ) ; 
            }
            RIGHT_SQUARE_BRACKET160=(Token)match(input,RIGHT_SQUARE_BRACKET,FOLLOW_RIGHT_SQUARE_BRACKET_in_squarebracketsMonoblock4670); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_SQUARE_BRACKET.add(RIGHT_SQUARE_BRACKET160);

            if ( state.backtracking==0 ) {
               delegate.endDelimitedText( BlockDelimiter.SQUARE_BRACKETS ) ; 
            }

            }



            // AST REWRITE
            // elements: monoblockBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 611:7: -> ^( BLOCK_INSIDE_SQUARE_BRACKETS monoblockBody )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:611:10: ^( BLOCK_INSIDE_SQUARE_BRACKETS monoblockBody )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK_INSIDE_SQUARE_BRACKETS, "BLOCK_INSIDE_SQUARE_BRACKETS"), root_1);

                adaptor.addChild(root_1, stream_monoblockBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( MismatchedTokenException mte ) {

                  delegate.reportMissingDelimiter( BlockDelimiter.SQUARE_BRACKETS, mte ) ; 
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "squarebracketsMonoblock"

    public static class doubleQuotedSpreadBlock_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doubleQuotedSpreadBlock"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:621:1: doubleQuotedSpreadBlock : ( DOUBLE_QUOTE ( whitespace )? (b+= spreadBlockBodyNoDoubleQuotes ( whitespace )? )? DOUBLE_QUOTE ) -> ^( BLOCK_INSIDE_DOUBLE_QUOTES ( $b)+ ) ;
    public final NovelangParser.doubleQuotedSpreadBlock_return doubleQuotedSpreadBlock() throws RecognitionException {
        NovelangParser.doubleQuotedSpreadBlock_return retval = new NovelangParser.doubleQuotedSpreadBlock_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_QUOTE161=null;
        Token DOUBLE_QUOTE164=null;
        List list_b=null;
        NovelangParser.whitespace_return whitespace162 = null;

        NovelangParser.whitespace_return whitespace163 = null;

        RuleReturnScope b = null;
        Object DOUBLE_QUOTE161_tree=null;
        Object DOUBLE_QUOTE164_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_QUOTE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_QUOTE");
        RewriteRuleSubtreeStream stream_spreadBlockBodyNoDoubleQuotes=new RewriteRuleSubtreeStream(adaptor,"rule spreadBlockBodyNoDoubleQuotes");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:622:2: ( ( DOUBLE_QUOTE ( whitespace )? (b+= spreadBlockBodyNoDoubleQuotes ( whitespace )? )? DOUBLE_QUOTE ) -> ^( BLOCK_INSIDE_DOUBLE_QUOTES ( $b)+ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:622:4: ( DOUBLE_QUOTE ( whitespace )? (b+= spreadBlockBodyNoDoubleQuotes ( whitespace )? )? DOUBLE_QUOTE )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:622:4: ( DOUBLE_QUOTE ( whitespace )? (b+= spreadBlockBodyNoDoubleQuotes ( whitespace )? )? DOUBLE_QUOTE )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:623:7: DOUBLE_QUOTE ( whitespace )? (b+= spreadBlockBodyNoDoubleQuotes ( whitespace )? )? DOUBLE_QUOTE
            {
            if ( state.backtracking==0 ) {
               delegate.startDelimitedText( BlockDelimiter.DOUBLE_QUOTES, input.LT( 1 ) ) ; 
            }
            DOUBLE_QUOTE161=(Token)match(input,DOUBLE_QUOTE,FOLLOW_DOUBLE_QUOTE_in_doubleQuotedSpreadBlock4735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOUBLE_QUOTE.add(DOUBLE_QUOTE161);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:624:20: ( whitespace )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==WHITESPACE) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:624:20: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_doubleQuotedSpreadBlock4737);
                    whitespace162=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whitespace.add(whitespace162.getTree());

                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:625:6: (b+= spreadBlockBodyNoDoubleQuotes ( whitespace )? )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==LEFT_PARENTHESIS||LA97_0==LEFT_SQUARE_BRACKET||(LA97_0>=SOLIDUS && LA97_0<=HYPHEN_MINUS)||LA97_0==SOFTBREAK||(LA97_0>=GRAVE_ACCENT && LA97_0<=LATIN_SMALL_LETTER_S)||LA97_0==TILDE||(LA97_0>=LATIN_SMALL_LETTER_N && LA97_0<=LATIN_SMALL_LETTER_V)||LA97_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA97_0>=LATIN_SMALL_LETTER_R && LA97_0<=LATIN_SMALL_LETTER_M)||(LA97_0>=DIGIT_0 && LA97_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:625:8: b+= spreadBlockBodyNoDoubleQuotes ( whitespace )?
                    {
                    pushFollow(FOLLOW_spreadBlockBodyNoDoubleQuotes_in_doubleQuotedSpreadBlock4751);
                    b=spreadBlockBodyNoDoubleQuotes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spreadBlockBodyNoDoubleQuotes.add(b.getTree());
                    if (list_b==null) list_b=new ArrayList();
                    list_b.add(b.getTree());

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:626:8: ( whitespace )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==WHITESPACE) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:626:8: whitespace
                            {
                            pushFollow(FOLLOW_whitespace_in_doubleQuotedSpreadBlock4761);
                            whitespace163=whitespace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whitespace.add(whitespace163.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               delegate.reachEndDelimiter( BlockDelimiter.DOUBLE_QUOTES ) ; 
            }
            DOUBLE_QUOTE164=(Token)match(input,DOUBLE_QUOTE,FOLLOW_DOUBLE_QUOTE_in_doubleQuotedSpreadBlock4785); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOUBLE_QUOTE.add(DOUBLE_QUOTE164);

            if ( state.backtracking==0 ) {
               delegate.endDelimitedText( BlockDelimiter.DOUBLE_QUOTES ) ; 
            }

            }



            // AST REWRITE
            // elements: b
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: b
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (Object)adaptor.nil();
            // 631:6: -> ^( BLOCK_INSIDE_DOUBLE_QUOTES ( $b)+ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:631:9: ^( BLOCK_INSIDE_DOUBLE_QUOTES ( $b)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK_INSIDE_DOUBLE_QUOTES, "BLOCK_INSIDE_DOUBLE_QUOTES"), root_1);

                if ( !(stream_b.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( MismatchedTokenException mte ) {

                  delegate.reportMissingDelimiter( BlockDelimiter.DOUBLE_QUOTES, mte ) ; 
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "doubleQuotedSpreadBlock"

    public static class delimitedSpreadblockNoDoubleQuotes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delimitedSpreadblockNoDoubleQuotes"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:636:1: delimitedSpreadblockNoDoubleQuotes : ( parenthesizedSpreadblock | squarebracketsSpreadblock | emphasizedSpreadBlock | hyphenPairSpreadBlock );
    public final NovelangParser.delimitedSpreadblockNoDoubleQuotes_return delimitedSpreadblockNoDoubleQuotes() throws RecognitionException {
        NovelangParser.delimitedSpreadblockNoDoubleQuotes_return retval = new NovelangParser.delimitedSpreadblockNoDoubleQuotes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.parenthesizedSpreadblock_return parenthesizedSpreadblock165 = null;

        NovelangParser.squarebracketsSpreadblock_return squarebracketsSpreadblock166 = null;

        NovelangParser.emphasizedSpreadBlock_return emphasizedSpreadBlock167 = null;

        NovelangParser.hyphenPairSpreadBlock_return hyphenPairSpreadBlock168 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:637:3: ( parenthesizedSpreadblock | squarebracketsSpreadblock | emphasizedSpreadBlock | hyphenPairSpreadBlock )
            int alt98=4;
            switch ( input.LA(1) ) {
            case LEFT_PARENTHESIS:
                {
                alt98=1;
                }
                break;
            case LEFT_SQUARE_BRACKET:
                {
                alt98=2;
                }
                break;
            case SOLIDUS:
                {
                alt98=3;
                }
                break;
            case HYPHEN_MINUS:
                {
                alt98=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }

            switch (alt98) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:637:5: parenthesizedSpreadblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedSpreadblock_in_delimitedSpreadblockNoDoubleQuotes4831);
                    parenthesizedSpreadblock165=parenthesizedSpreadblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedSpreadblock165.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:638:5: squarebracketsSpreadblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squarebracketsSpreadblock_in_delimitedSpreadblockNoDoubleQuotes4837);
                    squarebracketsSpreadblock166=squarebracketsSpreadblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squarebracketsSpreadblock166.getTree());

                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:639:5: emphasizedSpreadBlock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_emphasizedSpreadBlock_in_delimitedSpreadblockNoDoubleQuotes4843);
                    emphasizedSpreadBlock167=emphasizedSpreadBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, emphasizedSpreadBlock167.getTree());

                    }
                    break;
                case 4 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:640:5: hyphenPairSpreadBlock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_hyphenPairSpreadBlock_in_delimitedSpreadblockNoDoubleQuotes4849);
                    hyphenPairSpreadBlock168=hyphenPairSpreadBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hyphenPairSpreadBlock168.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "delimitedSpreadblockNoDoubleQuotes"

    public static class spreadBlockBodyNoDoubleQuotes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "spreadBlockBodyNoDoubleQuotes"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:644:1: spreadBlockBodyNoDoubleQuotes : ( ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )? ) ) | ( mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )? )? ) );
    public final NovelangParser.spreadBlockBodyNoDoubleQuotes_return spreadBlockBodyNoDoubleQuotes() throws RecognitionException {
        NovelangParser.spreadBlockBodyNoDoubleQuotes_return retval = new NovelangParser.spreadBlockBodyNoDoubleQuotes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.softbreak_return softbreak169 = null;

        NovelangParser.url_return url170 = null;

        NovelangParser.softbreak_return softbreak171 = null;

        NovelangParser.whitespace_return whitespace172 = null;

        NovelangParser.smallDashedListItem_return smallDashedListItem173 = null;

        NovelangParser.whitespace_return whitespace174 = null;

        NovelangParser.softbreak_return softbreak175 = null;

        NovelangParser.url_return url176 = null;

        NovelangParser.whitespace_return whitespace177 = null;

        NovelangParser.softbreak_return softbreak178 = null;

        NovelangParser.whitespace_return whitespace179 = null;

        NovelangParser.smallDashedListItem_return smallDashedListItem180 = null;

        NovelangParser.whitespace_return whitespace181 = null;

        NovelangParser.softbreak_return softbreak182 = null;

        NovelangParser.whitespace_return whitespace183 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoDoubleQuotes_return mixedDelimitedSpreadBlockNoDoubleQuotes184 = null;

        NovelangParser.whitespace_return whitespace185 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoDoubleQuotes_return mixedDelimitedSpreadBlockNoDoubleQuotes186 = null;

        NovelangParser.whitespace_return whitespace187 = null;

        NovelangParser.softbreak_return softbreak188 = null;

        NovelangParser.whitespace_return whitespace189 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoDoubleQuotes_return mixedDelimitedSpreadBlockNoDoubleQuotes190 = null;

        NovelangParser.whitespace_return whitespace191 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoDoubleQuotes_return mixedDelimitedSpreadBlockNoDoubleQuotes192 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoDoubleQuotes_return mixedDelimitedSpreadBlockNoDoubleQuotes193 = null;

        NovelangParser.whitespace_return whitespace194 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoDoubleQuotes_return mixedDelimitedSpreadBlockNoDoubleQuotes195 = null;

        NovelangParser.whitespace_return whitespace196 = null;

        NovelangParser.softbreak_return softbreak197 = null;

        NovelangParser.url_return url198 = null;

        NovelangParser.whitespace_return whitespace199 = null;

        NovelangParser.softbreak_return softbreak200 = null;

        NovelangParser.whitespace_return whitespace201 = null;

        NovelangParser.smallDashedListItem_return smallDashedListItem202 = null;

        NovelangParser.whitespace_return whitespace203 = null;

        NovelangParser.softbreak_return softbreak204 = null;

        NovelangParser.whitespace_return whitespace205 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoDoubleQuotes_return mixedDelimitedSpreadBlockNoDoubleQuotes206 = null;

        NovelangParser.whitespace_return whitespace207 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoDoubleQuotes_return mixedDelimitedSpreadBlockNoDoubleQuotes208 = null;

        NovelangParser.whitespace_return whitespace209 = null;

        NovelangParser.softbreak_return softbreak210 = null;

        NovelangParser.whitespace_return whitespace211 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoDoubleQuotes_return mixedDelimitedSpreadBlockNoDoubleQuotes212 = null;

        NovelangParser.whitespace_return whitespace213 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoDoubleQuotes_return mixedDelimitedSpreadBlockNoDoubleQuotes214 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:645:3: ( ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )? ) ) | ( mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )? )? ) )
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==SOFTBREAK) ) {
                alt125=1;
            }
            else if ( (LA125_0==LEFT_PARENTHESIS||LA125_0==LEFT_SQUARE_BRACKET||(LA125_0>=SOLIDUS && LA125_0<=HYPHEN_MINUS)||(LA125_0>=GRAVE_ACCENT && LA125_0<=LATIN_SMALL_LETTER_S)||LA125_0==TILDE||(LA125_0>=LATIN_SMALL_LETTER_N && LA125_0<=LATIN_SMALL_LETTER_V)||LA125_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA125_0>=LATIN_SMALL_LETTER_R && LA125_0<=LATIN_SMALL_LETTER_M)||(LA125_0>=DIGIT_0 && LA125_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt125=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;
            }
            switch (alt125) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:646:5: ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )? ) )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:646:5: ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )? ) )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:647:7: ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )? )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:647:7: ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) )
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==SOFTBREAK) ) {
                        int LA100_1 = input.LA(2);

                        if ( (LA100_1==LATIN_SMALL_LETTER_H) && (synpred15_Novelang())) {
                            alt100=1;
                        }
                        else if ( (LA100_1==LATIN_SMALL_LETTER_F) && (synpred15_Novelang())) {
                            alt100=1;
                        }
                        else if ( (LA100_1==WHITESPACE) && (synpred16_Novelang())) {
                            alt100=2;
                        }
                        else if ( (LA100_1==HYPHEN_MINUS) && (synpred16_Novelang())) {
                            alt100=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 100, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 100, 0, input);

                        throw nvae;
                    }
                    switch (alt100) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:648:11: ( ( softbreak url )=> ( softbreak url ) )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:648:11: ( ( softbreak url )=> ( softbreak url ) )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:648:13: ( softbreak url )=> ( softbreak url )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:648:34: ( softbreak url )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:648:36: softbreak url
                            {
                            pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes4906);
                            softbreak169=softbreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak169.getTree());
                            pushFollow(FOLLOW_url_in_spreadBlockBodyNoDoubleQuotes4908);
                            url170=url();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, url170.getTree());

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:650:11: ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:650:11: ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:650:13: ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:651:19: ( softbreak ( whitespace )? smallDashedListItem )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:651:21: softbreak ( whitespace )? smallDashedListItem
                            {
                            pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes4972);
                            softbreak171=softbreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak171.getTree());
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:651:31: ( whitespace )?
                            int alt99=2;
                            int LA99_0 = input.LA(1);

                            if ( (LA99_0==WHITESPACE) ) {
                                alt99=1;
                            }
                            switch (alt99) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:651:31: whitespace
                                    {
                                    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes4974);
                                    whitespace172=whitespace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace172.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_smallDashedListItem_in_spreadBlockBodyNoDoubleQuotes4977);
                            smallDashedListItem173=smallDashedListItem();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, smallDashedListItem173.getTree());

                            }


                            }


                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:655:7: ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:655:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:655:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:655:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:655:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )*
                    loop107:
                    do {
                        int alt107=4;
                        int LA107_0 = input.LA(1);

                        if ( (LA107_0==WHITESPACE) ) {
                            int LA107_1 = input.LA(2);

                            if ( (synpred17_Novelang()) ) {
                                alt107=1;
                            }
                            else if ( (synpred18_Novelang()) ) {
                                alt107=2;
                            }
                            else if ( (synpred19_Novelang()) ) {
                                alt107=3;
                            }


                        }
                        else if ( (LA107_0==SOFTBREAK) ) {
                            int LA107_2 = input.LA(2);

                            if ( (synpred17_Novelang()) ) {
                                alt107=1;
                            }
                            else if ( (synpred18_Novelang()) ) {
                                alt107=2;
                            }
                            else if ( (synpred19_Novelang()) ) {
                                alt107=3;
                            }


                        }


                        switch (alt107) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:656:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:656:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:656:15: ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:656:48: ( ( whitespace )? softbreak url )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:656:50: ( whitespace )? softbreak url
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:656:50: ( whitespace )?
                    	    int alt101=2;
                    	    int LA101_0 = input.LA(1);

                    	    if ( (LA101_0==WHITESPACE) ) {
                    	        alt101=1;
                    	    }
                    	    switch (alt101) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:656:50: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5048);
                    	            whitespace174=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace174.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5051);
                    	    softbreak175=softbreak();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak175.getTree());
                    	    pushFollow(FOLLOW_url_in_spreadBlockBodyNoDoubleQuotes5053);
                    	    url176=url();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, url176.getTree());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:658:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:658:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:658:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:659:19: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:659:21: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:659:21: ( whitespace )?
                    	    int alt102=2;
                    	    int LA102_0 = input.LA(1);

                    	    if ( (LA102_0==WHITESPACE) ) {
                    	        alt102=1;
                    	    }
                    	    switch (alt102) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:659:21: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5121);
                    	            whitespace177=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace177.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5124);
                    	    softbreak178=softbreak();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak178.getTree());
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:659:43: ( whitespace )?
                    	    int alt103=2;
                    	    int LA103_0 = input.LA(1);

                    	    if ( (LA103_0==WHITESPACE) ) {
                    	        alt103=1;
                    	    }
                    	    switch (alt103) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:659:43: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5126);
                    	            whitespace179=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace179.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_smallDashedListItem_in_spreadBlockBodyNoDoubleQuotes5129);
                    	    smallDashedListItem180=smallDashedListItem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, smallDashedListItem180.getTree());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:661:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:661:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:662:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:667:19: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:668:19: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )*
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:668:19: ( whitespace )?
                    	    int alt104=2;
                    	    int LA104_0 = input.LA(1);

                    	    if ( (LA104_0==WHITESPACE) ) {
                    	        alt104=1;
                    	    }
                    	    switch (alt104) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:668:19: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5309);
                    	            whitespace181=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace181.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5312);
                    	    softbreak182=softbreak();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak182.getTree());
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:668:41: ( whitespace )?
                    	    int alt105=2;
                    	    int LA105_0 = input.LA(1);

                    	    if ( (LA105_0==WHITESPACE) ) {
                    	        alt105=1;
                    	    }
                    	    switch (alt105) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:668:41: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5314);
                    	            whitespace183=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace183.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5317);
                    	    mixedDelimitedSpreadBlockNoDoubleQuotes184=mixedDelimitedSpreadBlockNoDoubleQuotes();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoDoubleQuotes184.getTree());
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:669:19: ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )*
                    	    loop106:
                    	    do {
                    	        int alt106=2;
                    	        int LA106_0 = input.LA(1);

                    	        if ( (LA106_0==WHITESPACE) ) {
                    	            int LA106_1 = input.LA(2);

                    	            if ( (LA106_1==LEFT_PARENTHESIS||LA106_1==LEFT_SQUARE_BRACKET||(LA106_1>=SOLIDUS && LA106_1<=HYPHEN_MINUS)||(LA106_1>=GRAVE_ACCENT && LA106_1<=LATIN_SMALL_LETTER_S)||LA106_1==TILDE||(LA106_1>=LATIN_SMALL_LETTER_N && LA106_1<=LATIN_SMALL_LETTER_V)||LA106_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA106_1>=LATIN_SMALL_LETTER_R && LA106_1<=LATIN_SMALL_LETTER_M)||(LA106_1>=DIGIT_0 && LA106_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	                alt106=1;
                    	            }


                    	        }


                    	        switch (alt106) {
                    	    	case 1 :
                    	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:669:21: whitespace mixedDelimitedSpreadBlockNoDoubleQuotes
                    	    	    {
                    	    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5340);
                    	    	    whitespace185=whitespace();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace185.getTree());
                    	    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5342);
                    	    	    mixedDelimitedSpreadBlockNoDoubleQuotes186=mixedDelimitedSpreadBlockNoDoubleQuotes();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoDoubleQuotes186.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop106;
                    	        }
                    	    } while (true);


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop107;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:673:10: ( whitespace )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==WHITESPACE) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:673:10: whitespace
                            {
                            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5421);
                            whitespace187=whitespace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace187.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5424);
                    softbreak188=softbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak188.getTree());

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:676:5: ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )?
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==WHITESPACE) ) {
                        int LA111_1 = input.LA(2);

                        if ( (LA111_1==LEFT_PARENTHESIS||LA111_1==LEFT_SQUARE_BRACKET||(LA111_1>=SOLIDUS && LA111_1<=HYPHEN_MINUS)||(LA111_1>=GRAVE_ACCENT && LA111_1<=LATIN_SMALL_LETTER_S)||LA111_1==TILDE||(LA111_1>=LATIN_SMALL_LETTER_N && LA111_1<=LATIN_SMALL_LETTER_V)||LA111_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA111_1>=LATIN_SMALL_LETTER_R && LA111_1<=LATIN_SMALL_LETTER_M)||(LA111_1>=DIGIT_0 && LA111_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt111=1;
                        }
                    }
                    else if ( (LA111_0==LEFT_PARENTHESIS||LA111_0==LEFT_SQUARE_BRACKET||(LA111_0>=SOLIDUS && LA111_0<=HYPHEN_MINUS)||(LA111_0>=GRAVE_ACCENT && LA111_0<=LATIN_SMALL_LETTER_S)||LA111_0==TILDE||(LA111_0>=LATIN_SMALL_LETTER_N && LA111_0<=LATIN_SMALL_LETTER_V)||LA111_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA111_0>=LATIN_SMALL_LETTER_R && LA111_0<=LATIN_SMALL_LETTER_M)||(LA111_0>=DIGIT_0 && LA111_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:676:7: ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )*
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:676:7: ( whitespace )?
                            int alt109=2;
                            int LA109_0 = input.LA(1);

                            if ( (LA109_0==WHITESPACE) ) {
                                alt109=1;
                            }
                            switch (alt109) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:676:7: whitespace
                                    {
                                    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5452);
                                    whitespace189=whitespace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace189.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5455);
                            mixedDelimitedSpreadBlockNoDoubleQuotes190=mixedDelimitedSpreadBlockNoDoubleQuotes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoDoubleQuotes190.getTree());
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:677:7: ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )*
                            loop110:
                            do {
                                int alt110=2;
                                int LA110_0 = input.LA(1);

                                if ( (LA110_0==WHITESPACE) ) {
                                    int LA110_1 = input.LA(2);

                                    if ( (LA110_1==LEFT_PARENTHESIS||LA110_1==LEFT_SQUARE_BRACKET||(LA110_1>=SOLIDUS && LA110_1<=HYPHEN_MINUS)||(LA110_1>=GRAVE_ACCENT && LA110_1<=LATIN_SMALL_LETTER_S)||LA110_1==TILDE||(LA110_1>=LATIN_SMALL_LETTER_N && LA110_1<=LATIN_SMALL_LETTER_V)||LA110_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA110_1>=LATIN_SMALL_LETTER_R && LA110_1<=LATIN_SMALL_LETTER_M)||(LA110_1>=DIGIT_0 && LA110_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                        alt110=1;
                                    }


                                }


                                switch (alt110) {
                            	case 1 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:677:9: whitespace mixedDelimitedSpreadBlockNoDoubleQuotes
                            	    {
                            	    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5466);
                            	    whitespace191=whitespace();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace191.getTree());
                            	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5468);
                            	    mixedDelimitedSpreadBlockNoDoubleQuotes192=mixedDelimitedSpreadBlockNoDoubleQuotes();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoDoubleQuotes192.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop110;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:682:5: ( mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )? )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:682:5: ( mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )? )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:684:7: mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )? )?
                    {
                    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5526);
                    mixedDelimitedSpreadBlockNoDoubleQuotes193=mixedDelimitedSpreadBlockNoDoubleQuotes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoDoubleQuotes193.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:685:7: ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )*
                    loop112:
                    do {
                        int alt112=2;
                        int LA112_0 = input.LA(1);

                        if ( (LA112_0==WHITESPACE) ) {
                            int LA112_1 = input.LA(2);

                            if ( (LA112_1==LEFT_PARENTHESIS||LA112_1==LEFT_SQUARE_BRACKET||(LA112_1>=SOLIDUS && LA112_1<=HYPHEN_MINUS)||(LA112_1>=GRAVE_ACCENT && LA112_1<=LATIN_SMALL_LETTER_S)||LA112_1==TILDE||(LA112_1>=LATIN_SMALL_LETTER_N && LA112_1<=LATIN_SMALL_LETTER_V)||LA112_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA112_1>=LATIN_SMALL_LETTER_R && LA112_1<=LATIN_SMALL_LETTER_M)||(LA112_1>=DIGIT_0 && LA112_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt112=1;
                            }


                        }


                        switch (alt112) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:685:9: whitespace mixedDelimitedSpreadBlockNoDoubleQuotes
                    	    {
                    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5537);
                    	    whitespace194=whitespace();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace194.getTree());
                    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5539);
                    	    mixedDelimitedSpreadBlockNoDoubleQuotes195=mixedDelimitedSpreadBlockNoDoubleQuotes();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoDoubleQuotes195.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop112;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:687:7: ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )? )?
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==WHITESPACE) ) {
                        int LA124_1 = input.LA(2);

                        if ( (LA124_1==SOFTBREAK) ) {
                            alt124=1;
                        }
                    }
                    else if ( (LA124_0==SOFTBREAK) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:687:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )?
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:687:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:687:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )* ( whitespace )? softbreak
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:687:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) ) )*
                            loop119:
                            do {
                                int alt119=4;
                                int LA119_0 = input.LA(1);

                                if ( (LA119_0==WHITESPACE) ) {
                                    int LA119_1 = input.LA(2);

                                    if ( (synpred20_Novelang()) ) {
                                        alt119=1;
                                    }
                                    else if ( (synpred21_Novelang()) ) {
                                        alt119=2;
                                    }
                                    else if ( (synpred22_Novelang()) ) {
                                        alt119=3;
                                    }


                                }
                                else if ( (LA119_0==SOFTBREAK) ) {
                                    int LA119_2 = input.LA(2);

                                    if ( (synpred20_Novelang()) ) {
                                        alt119=1;
                                    }
                                    else if ( (synpred21_Novelang()) ) {
                                        alt119=2;
                                    }
                                    else if ( (synpred22_Novelang()) ) {
                                        alt119=3;
                                    }


                                }


                                switch (alt119) {
                            	case 1 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:688:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:688:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:688:15: ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:688:48: ( ( whitespace )? softbreak url )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:688:50: ( whitespace )? softbreak url
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:688:50: ( whitespace )?
                            	    int alt113=2;
                            	    int LA113_0 = input.LA(1);

                            	    if ( (LA113_0==WHITESPACE) ) {
                            	        alt113=1;
                            	    }
                            	    switch (alt113) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:688:50: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5592);
                            	            whitespace196=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace196.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5595);
                            	    softbreak197=softbreak();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak197.getTree());
                            	    pushFollow(FOLLOW_url_in_spreadBlockBodyNoDoubleQuotes5597);
                            	    url198=url();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, url198.getTree());

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:690:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:690:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:690:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:691:19: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:691:21: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:691:21: ( whitespace )?
                            	    int alt114=2;
                            	    int LA114_0 = input.LA(1);

                            	    if ( (LA114_0==WHITESPACE) ) {
                            	        alt114=1;
                            	    }
                            	    switch (alt114) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:691:21: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5665);
                            	            whitespace199=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace199.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5668);
                            	    softbreak200=softbreak();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak200.getTree());
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:691:43: ( whitespace )?
                            	    int alt115=2;
                            	    int LA115_0 = input.LA(1);

                            	    if ( (LA115_0==WHITESPACE) ) {
                            	        alt115=1;
                            	    }
                            	    switch (alt115) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:691:43: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5670);
                            	            whitespace201=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace201.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_smallDashedListItem_in_spreadBlockBodyNoDoubleQuotes5673);
                            	    smallDashedListItem202=smallDashedListItem();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, smallDashedListItem202.getTree());

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:693:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:693:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ) )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:694:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:699:19: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:700:19: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )*
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:700:19: ( whitespace )?
                            	    int alt116=2;
                            	    int LA116_0 = input.LA(1);

                            	    if ( (LA116_0==WHITESPACE) ) {
                            	        alt116=1;
                            	    }
                            	    switch (alt116) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:700:19: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5853);
                            	            whitespace203=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace203.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5856);
                            	    softbreak204=softbreak();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak204.getTree());
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:700:41: ( whitespace )?
                            	    int alt117=2;
                            	    int LA117_0 = input.LA(1);

                            	    if ( (LA117_0==WHITESPACE) ) {
                            	        alt117=1;
                            	    }
                            	    switch (alt117) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:700:41: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5858);
                            	            whitespace205=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace205.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5861);
                            	    mixedDelimitedSpreadBlockNoDoubleQuotes206=mixedDelimitedSpreadBlockNoDoubleQuotes();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoDoubleQuotes206.getTree());
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:701:19: ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )*
                            	    loop118:
                            	    do {
                            	        int alt118=2;
                            	        int LA118_0 = input.LA(1);

                            	        if ( (LA118_0==WHITESPACE) ) {
                            	            int LA118_1 = input.LA(2);

                            	            if ( (LA118_1==LEFT_PARENTHESIS||LA118_1==LEFT_SQUARE_BRACKET||(LA118_1>=SOLIDUS && LA118_1<=HYPHEN_MINUS)||(LA118_1>=GRAVE_ACCENT && LA118_1<=LATIN_SMALL_LETTER_S)||LA118_1==TILDE||(LA118_1>=LATIN_SMALL_LETTER_N && LA118_1<=LATIN_SMALL_LETTER_V)||LA118_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA118_1>=LATIN_SMALL_LETTER_R && LA118_1<=LATIN_SMALL_LETTER_M)||(LA118_1>=DIGIT_0 && LA118_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            	                alt118=1;
                            	            }


                            	        }


                            	        switch (alt118) {
                            	    	case 1 :
                            	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:701:21: whitespace mixedDelimitedSpreadBlockNoDoubleQuotes
                            	    	    {
                            	    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5884);
                            	    	    whitespace207=whitespace();

                            	    	    state._fsp--;
                            	    	    if (state.failed) return retval;
                            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace207.getTree());
                            	    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5886);
                            	    	    mixedDelimitedSpreadBlockNoDoubleQuotes208=mixedDelimitedSpreadBlockNoDoubleQuotes();

                            	    	    state._fsp--;
                            	    	    if (state.failed) return retval;
                            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoDoubleQuotes208.getTree());

                            	    	    }
                            	    	    break;

                            	    	default :
                            	    	    break loop118;
                            	        }
                            	    } while (true);


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop119;
                                }
                            } while (true);

                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:705:10: ( whitespace )?
                            int alt120=2;
                            int LA120_0 = input.LA(1);

                            if ( (LA120_0==WHITESPACE) ) {
                                alt120=1;
                            }
                            switch (alt120) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:705:10: whitespace
                                    {
                                    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5965);
                                    whitespace209=whitespace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace209.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5968);
                            softbreak210=softbreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak210.getTree());

                            }

                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:708:5: ( ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* )?
                            int alt123=2;
                            int LA123_0 = input.LA(1);

                            if ( (LA123_0==WHITESPACE) ) {
                                int LA123_1 = input.LA(2);

                                if ( (LA123_1==LEFT_PARENTHESIS||LA123_1==LEFT_SQUARE_BRACKET||(LA123_1>=SOLIDUS && LA123_1<=HYPHEN_MINUS)||(LA123_1>=GRAVE_ACCENT && LA123_1<=LATIN_SMALL_LETTER_S)||LA123_1==TILDE||(LA123_1>=LATIN_SMALL_LETTER_N && LA123_1<=LATIN_SMALL_LETTER_V)||LA123_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA123_1>=LATIN_SMALL_LETTER_R && LA123_1<=LATIN_SMALL_LETTER_M)||(LA123_1>=DIGIT_0 && LA123_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                    alt123=1;
                                }
                            }
                            else if ( (LA123_0==LEFT_PARENTHESIS||LA123_0==LEFT_SQUARE_BRACKET||(LA123_0>=SOLIDUS && LA123_0<=HYPHEN_MINUS)||(LA123_0>=GRAVE_ACCENT && LA123_0<=LATIN_SMALL_LETTER_S)||LA123_0==TILDE||(LA123_0>=LATIN_SMALL_LETTER_N && LA123_0<=LATIN_SMALL_LETTER_V)||LA123_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA123_0>=LATIN_SMALL_LETTER_R && LA123_0<=LATIN_SMALL_LETTER_M)||(LA123_0>=DIGIT_0 && LA123_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt123=1;
                            }
                            switch (alt123) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:708:7: ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )*
                                    {
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:708:7: ( whitespace )?
                                    int alt121=2;
                                    int LA121_0 = input.LA(1);

                                    if ( (LA121_0==WHITESPACE) ) {
                                        alt121=1;
                                    }
                                    switch (alt121) {
                                        case 1 :
                                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:708:7: whitespace
                                            {
                                            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5996);
                                            whitespace211=whitespace();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace211.getTree());

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5999);
                                    mixedDelimitedSpreadBlockNoDoubleQuotes212=mixedDelimitedSpreadBlockNoDoubleQuotes();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoDoubleQuotes212.getTree());
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:709:7: ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )*
                                    loop122:
                                    do {
                                        int alt122=2;
                                        int LA122_0 = input.LA(1);

                                        if ( (LA122_0==WHITESPACE) ) {
                                            int LA122_1 = input.LA(2);

                                            if ( (LA122_1==LEFT_PARENTHESIS||LA122_1==LEFT_SQUARE_BRACKET||(LA122_1>=SOLIDUS && LA122_1<=HYPHEN_MINUS)||(LA122_1>=GRAVE_ACCENT && LA122_1<=LATIN_SMALL_LETTER_S)||LA122_1==TILDE||(LA122_1>=LATIN_SMALL_LETTER_N && LA122_1<=LATIN_SMALL_LETTER_V)||LA122_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA122_1>=LATIN_SMALL_LETTER_R && LA122_1<=LATIN_SMALL_LETTER_M)||(LA122_1>=DIGIT_0 && LA122_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                                alt122=1;
                                            }


                                        }


                                        switch (alt122) {
                                    	case 1 :
                                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:709:9: whitespace mixedDelimitedSpreadBlockNoDoubleQuotes
                                    	    {
                                    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes6010);
                                    	    whitespace213=whitespace();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace213.getTree());
                                    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes6012);
                                    	    mixedDelimitedSpreadBlockNoDoubleQuotes214=mixedDelimitedSpreadBlockNoDoubleQuotes();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoDoubleQuotes214.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop122;
                                        }
                                    } while (true);


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "spreadBlockBodyNoDoubleQuotes"

    public static class mixedDelimitedSpreadBlockNoDoubleQuotes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixedDelimitedSpreadBlockNoDoubleQuotes"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:717:1: mixedDelimitedSpreadBlockNoDoubleQuotes : ( ( word ( ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) | blockAfterTilde );
    public final NovelangParser.mixedDelimitedSpreadBlockNoDoubleQuotes_return mixedDelimitedSpreadBlockNoDoubleQuotes() throws RecognitionException {
        NovelangParser.mixedDelimitedSpreadBlockNoDoubleQuotes_return retval = new NovelangParser.mixedDelimitedSpreadBlockNoDoubleQuotes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.word_return word215 = null;

        NovelangParser.punctuationSign_return punctuationSign216 = null;

        NovelangParser.delimitedSpreadblockNoDoubleQuotes_return delimitedSpreadblockNoDoubleQuotes217 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral218 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral219 = null;

        NovelangParser.word_return word220 = null;

        NovelangParser.punctuationSign_return punctuationSign221 = null;

        NovelangParser.delimitedSpreadblockNoDoubleQuotes_return delimitedSpreadblockNoDoubleQuotes222 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral223 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral224 = null;

        NovelangParser.word_return word225 = null;

        NovelangParser.punctuationSign_return punctuationSign226 = null;

        NovelangParser.delimitedSpreadblockNoDoubleQuotes_return delimitedSpreadblockNoDoubleQuotes227 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral228 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral229 = null;

        NovelangParser.word_return word230 = null;

        NovelangParser.blockAfterTilde_return blockAfterTilde231 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:718:3: ( ( word ( ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) | blockAfterTilde )
            int alt134=3;
            switch ( input.LA(1) ) {
            case LATIN_SMALL_LETTER_F:
            case LATIN_SMALL_LETTER_I:
            case LATIN_SMALL_LETTER_L:
            case LATIN_SMALL_LETTER_E:
            case LATIN_SMALL_LETTER_H:
            case LATIN_SMALL_LETTER_T:
            case LATIN_SMALL_LETTER_P:
            case LATIN_SMALL_LETTER_S:
            case LATIN_SMALL_LETTER_N:
            case LATIN_SMALL_LETTER_G:
            case LATIN_SMALL_LETTER_J:
            case LATIN_SMALL_LETTER_V:
            case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
            case LATIN_SMALL_LETTER_R:
            case LATIN_SMALL_LETTER_C:
            case LATIN_SMALL_LETTER_U:
            case LATIN_SMALL_LETTER_O:
            case LATIN_SMALL_LETTER_A:
            case LATIN_SMALL_LETTER_D:
            case LATIN_SMALL_LETTER_B:
            case LATIN_SMALL_LETTER_Y:
            case LATIN_SMALL_LETTER_M:
            case DIGIT_0:
            case DIGIT_1:
            case DIGIT_2:
            case DIGIT_3:
            case DIGIT_4:
            case DIGIT_5:
            case DIGIT_6:
            case DIGIT_7:
            case DIGIT_8:
            case DIGIT_9:
            case LATIN_CAPITAL_LETTER_A:
            case LATIN_CAPITAL_LETTER_B:
            case LATIN_CAPITAL_LETTER_C:
            case LATIN_CAPITAL_LETTER_D:
            case LATIN_CAPITAL_LETTER_E:
            case LATIN_CAPITAL_LETTER_F:
            case LATIN_SMALL_LETTER_K:
            case LATIN_SMALL_LETTER_Q:
            case LATIN_SMALL_LETTER_W:
            case LATIN_SMALL_LETTER_X:
            case LATIN_SMALL_LETTER_Z:
            case LATIN_CAPITAL_LETTER_G:
            case LATIN_CAPITAL_LETTER_H:
            case LATIN_CAPITAL_LETTER_I:
            case LATIN_CAPITAL_LETTER_J:
            case LATIN_CAPITAL_LETTER_K:
            case LATIN_CAPITAL_LETTER_L:
            case LATIN_CAPITAL_LETTER_M:
            case LATIN_CAPITAL_LETTER_N:
            case LATIN_CAPITAL_LETTER_O:
            case LATIN_CAPITAL_LETTER_P:
            case LATIN_CAPITAL_LETTER_Q:
            case LATIN_CAPITAL_LETTER_R:
            case LATIN_CAPITAL_LETTER_S:
            case LATIN_CAPITAL_LETTER_T:
            case LATIN_CAPITAL_LETTER_U:
            case LATIN_CAPITAL_LETTER_V:
            case LATIN_CAPITAL_LETTER_W:
            case LATIN_CAPITAL_LETTER_X:
            case LATIN_CAPITAL_LETTER_Y:
            case LATIN_CAPITAL_LETTER_Z:
            case LATIN_SMALL_LETTER_A_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
            case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_A_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
            case LATIN_SMALL_LETTER_AE:
            case LATIN_CAPITAL_LETTER_AE:
            case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
            case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
            case LATIN_SMALL_LETTER_E_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
            case LATIN_SMALL_LETTER_E_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
            case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_I_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
            case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_O_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
            case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
            case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
            case LATIN_SMALL_LETTER_U_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
            case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_U_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
            case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
            case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
            case LATIN_SMALL_LIGATURE_OE:
            case LATIN_CAPITAL_LIGATURE_OE:
                {
                alt134=1;
                }
                break;
            case LEFT_PARENTHESIS:
            case LEFT_SQUARE_BRACKET:
            case SOLIDUS:
            case HYPHEN_MINUS:
            case GRAVE_ACCENT:
            case FULL_STOP:
            case COMMA:
            case QUESTION_MARK:
            case EXCLAMATION_MARK:
            case SEMICOLON:
            case COLON:
            case APOSTROPHE:
                {
                alt134=2;
                }
                break;
            case TILDE:
                {
                alt134=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;
            }

            switch (alt134) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:718:5: ( word ( ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:718:5: ( word ( ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:718:7: word ( ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    {
                    pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlockNoDoubleQuotes6064);
                    word215=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, word215.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:719:7: ( ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    loop128:
                    do {
                        int alt128=2;
                        int LA128_0 = input.LA(1);

                        if ( (LA128_0==LEFT_PARENTHESIS||LA128_0==LEFT_SQUARE_BRACKET||(LA128_0>=SOLIDUS && LA128_0<=HYPHEN_MINUS)||(LA128_0>=GRAVE_ACCENT && LA128_0<=APOSTROPHE)) ) {
                            alt128=1;
                        }


                        switch (alt128) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:719:9: ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( word )?
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:719:9: ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral )
                    	    int alt126=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt126=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case SOLIDUS:
                    	    case HYPHEN_MINUS:
                    	        {
                    	        alt126=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA126_3 = input.LA(2);

                    	        if ( (LA126_3==GRAVE_ACCENT) ) {
                    	            alt126=4;
                    	        }
                    	        else if ( ((LA126_3>=COMMERCIAL_AT && LA126_3<=WHITESPACE)||(LA126_3>=VERTICAL_LINE && LA126_3<=GREATER_THAN_SIGN)||(LA126_3>=FULL_STOP && LA126_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA126_3>=LATIN_SMALL_LETTER_R && LA126_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt126=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 126, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 126, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt126) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:719:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoDoubleQuotes6079);
                    	            punctuationSign216=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign216.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:720:13: delimitedSpreadblockNoDoubleQuotes
                    	            {
                    	            pushFollow(FOLLOW_delimitedSpreadblockNoDoubleQuotes_in_mixedDelimitedSpreadBlockNoDoubleQuotes6094);
                    	            delimitedSpreadblockNoDoubleQuotes217=delimitedSpreadblockNoDoubleQuotes();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedSpreadblockNoDoubleQuotes217.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:721:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoDoubleQuotes6109);
                    	            softInlineLiteral218=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral218.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:722:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoDoubleQuotes6124);
                    	            hardInlineLiteral219=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral219.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:723:9: ( word )?
                    	    int alt127=2;
                    	    int LA127_0 = input.LA(1);

                    	    if ( ((LA127_0>=LATIN_SMALL_LETTER_F && LA127_0<=LATIN_SMALL_LETTER_S)||(LA127_0>=LATIN_SMALL_LETTER_N && LA127_0<=LATIN_SMALL_LETTER_V)||LA127_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA127_0>=LATIN_SMALL_LETTER_R && LA127_0<=LATIN_SMALL_LETTER_M)||(LA127_0>=DIGIT_0 && LA127_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt127=1;
                    	    }
                    	    switch (alt127) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:723:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlockNoDoubleQuotes6135);
                    	            word220=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word220.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop128;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:725:5: ( ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:725:5: ( ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:725:7: ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) )* ( word )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:725:7: ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral )
                    int alt129=4;
                    switch ( input.LA(1) ) {
                    case FULL_STOP:
                    case COMMA:
                    case QUESTION_MARK:
                    case EXCLAMATION_MARK:
                    case SEMICOLON:
                    case COLON:
                    case APOSTROPHE:
                        {
                        alt129=1;
                        }
                        break;
                    case LEFT_PARENTHESIS:
                    case LEFT_SQUARE_BRACKET:
                    case SOLIDUS:
                    case HYPHEN_MINUS:
                        {
                        alt129=2;
                        }
                        break;
                    case GRAVE_ACCENT:
                        {
                        int LA129_3 = input.LA(2);

                        if ( (LA129_3==GRAVE_ACCENT) ) {
                            alt129=4;
                        }
                        else if ( ((LA129_3>=COMMERCIAL_AT && LA129_3<=WHITESPACE)||(LA129_3>=VERTICAL_LINE && LA129_3<=GREATER_THAN_SIGN)||(LA129_3>=FULL_STOP && LA129_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA129_3>=LATIN_SMALL_LETTER_R && LA129_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt129=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 129, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 129, 0, input);

                        throw nvae;
                    }

                    switch (alt129) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:725:11: punctuationSign
                            {
                            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoDoubleQuotes6157);
                            punctuationSign221=punctuationSign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign221.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:726:11: delimitedSpreadblockNoDoubleQuotes
                            {
                            pushFollow(FOLLOW_delimitedSpreadblockNoDoubleQuotes_in_mixedDelimitedSpreadBlockNoDoubleQuotes6170);
                            delimitedSpreadblockNoDoubleQuotes222=delimitedSpreadblockNoDoubleQuotes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedSpreadblockNoDoubleQuotes222.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:727:11: softInlineLiteral
                            {
                            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoDoubleQuotes6183);
                            softInlineLiteral223=softInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral223.getTree());

                            }
                            break;
                        case 4 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:728:11: hardInlineLiteral
                            {
                            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoDoubleQuotes6196);
                            hardInlineLiteral224=hardInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral224.getTree());

                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:730:7: ( ( word )? ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) )*
                    loop132:
                    do {
                        int alt132=2;
                        alt132 = dfa132.predict(input);
                        switch (alt132) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:730:9: ( word )? ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:730:9: ( word )?
                    	    int alt130=2;
                    	    int LA130_0 = input.LA(1);

                    	    if ( ((LA130_0>=LATIN_SMALL_LETTER_F && LA130_0<=LATIN_SMALL_LETTER_S)||(LA130_0>=LATIN_SMALL_LETTER_N && LA130_0<=LATIN_SMALL_LETTER_V)||LA130_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA130_0>=LATIN_SMALL_LETTER_R && LA130_0<=LATIN_SMALL_LETTER_M)||(LA130_0>=DIGIT_0 && LA130_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt130=1;
                    	    }
                    	    switch (alt130) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:730:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlockNoDoubleQuotes6215);
                    	            word225=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word225.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:731:9: ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral )
                    	    int alt131=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt131=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case SOLIDUS:
                    	    case HYPHEN_MINUS:
                    	        {
                    	        alt131=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA131_3 = input.LA(2);

                    	        if ( (LA131_3==GRAVE_ACCENT) ) {
                    	            alt131=4;
                    	        }
                    	        else if ( ((LA131_3>=COMMERCIAL_AT && LA131_3<=WHITESPACE)||(LA131_3>=VERTICAL_LINE && LA131_3<=GREATER_THAN_SIGN)||(LA131_3>=FULL_STOP && LA131_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA131_3>=LATIN_SMALL_LETTER_R && LA131_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt131=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 131, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 131, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt131) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:731:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoDoubleQuotes6231);
                    	            punctuationSign226=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign226.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:732:13: delimitedSpreadblockNoDoubleQuotes
                    	            {
                    	            pushFollow(FOLLOW_delimitedSpreadblockNoDoubleQuotes_in_mixedDelimitedSpreadBlockNoDoubleQuotes6246);
                    	            delimitedSpreadblockNoDoubleQuotes227=delimitedSpreadblockNoDoubleQuotes();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedSpreadblockNoDoubleQuotes227.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:733:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoDoubleQuotes6261);
                    	            softInlineLiteral228=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral228.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:734:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoDoubleQuotes6276);
                    	            hardInlineLiteral229=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral229.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop132;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:737:7: ( word )?
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( ((LA133_0>=LATIN_SMALL_LETTER_F && LA133_0<=LATIN_SMALL_LETTER_S)||(LA133_0>=LATIN_SMALL_LETTER_N && LA133_0<=LATIN_SMALL_LETTER_V)||LA133_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA133_0>=LATIN_SMALL_LETTER_R && LA133_0<=LATIN_SMALL_LETTER_M)||(LA133_0>=DIGIT_0 && LA133_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:737:7: word
                            {
                            pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlockNoDoubleQuotes6318);
                            word230=word();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, word230.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:739:5: blockAfterTilde
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_blockAfterTilde_in_mixedDelimitedSpreadBlockNoDoubleQuotes6332);
                    blockAfterTilde231=blockAfterTilde();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockAfterTilde231.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixedDelimitedSpreadBlockNoDoubleQuotes"

    public static class doubleQuotedMonoblock_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doubleQuotedMonoblock"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:742:1: doubleQuotedMonoblock : ( DOUBLE_QUOTE ( whitespace )? (b+= monoblockBodyNoDoubleQuotes ( whitespace )? )? DOUBLE_QUOTE ) -> ^( BLOCK_INSIDE_DOUBLE_QUOTES ( $b)+ ) ;
    public final NovelangParser.doubleQuotedMonoblock_return doubleQuotedMonoblock() throws RecognitionException {
        NovelangParser.doubleQuotedMonoblock_return retval = new NovelangParser.doubleQuotedMonoblock_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_QUOTE232=null;
        Token DOUBLE_QUOTE235=null;
        List list_b=null;
        NovelangParser.whitespace_return whitespace233 = null;

        NovelangParser.whitespace_return whitespace234 = null;

        RuleReturnScope b = null;
        Object DOUBLE_QUOTE232_tree=null;
        Object DOUBLE_QUOTE235_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_QUOTE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_QUOTE");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        RewriteRuleSubtreeStream stream_monoblockBodyNoDoubleQuotes=new RewriteRuleSubtreeStream(adaptor,"rule monoblockBodyNoDoubleQuotes");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:743:2: ( ( DOUBLE_QUOTE ( whitespace )? (b+= monoblockBodyNoDoubleQuotes ( whitespace )? )? DOUBLE_QUOTE ) -> ^( BLOCK_INSIDE_DOUBLE_QUOTES ( $b)+ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:743:4: ( DOUBLE_QUOTE ( whitespace )? (b+= monoblockBodyNoDoubleQuotes ( whitespace )? )? DOUBLE_QUOTE )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:743:4: ( DOUBLE_QUOTE ( whitespace )? (b+= monoblockBodyNoDoubleQuotes ( whitespace )? )? DOUBLE_QUOTE )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:744:7: DOUBLE_QUOTE ( whitespace )? (b+= monoblockBodyNoDoubleQuotes ( whitespace )? )? DOUBLE_QUOTE
            {
            if ( state.backtracking==0 ) {
               delegate.startDelimitedText( BlockDelimiter.DOUBLE_QUOTES, input.LT( 1 ) ) ; 
            }
            DOUBLE_QUOTE232=(Token)match(input,DOUBLE_QUOTE,FOLLOW_DOUBLE_QUOTE_in_doubleQuotedMonoblock6365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOUBLE_QUOTE.add(DOUBLE_QUOTE232);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:745:20: ( whitespace )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==WHITESPACE) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:745:20: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_doubleQuotedMonoblock6367);
                    whitespace233=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whitespace.add(whitespace233.getTree());

                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:746:6: (b+= monoblockBodyNoDoubleQuotes ( whitespace )? )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==LEFT_PARENTHESIS||LA137_0==LEFT_SQUARE_BRACKET||LA137_0==SOLIDUS||(LA137_0>=GRAVE_ACCENT && LA137_0<=LATIN_SMALL_LETTER_S)||(LA137_0>=LATIN_SMALL_LETTER_N && LA137_0<=LATIN_SMALL_LETTER_V)||LA137_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA137_0>=LATIN_SMALL_LETTER_R && LA137_0<=LATIN_SMALL_LETTER_M)||(LA137_0>=DIGIT_0 && LA137_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:746:8: b+= monoblockBodyNoDoubleQuotes ( whitespace )?
                    {
                    pushFollow(FOLLOW_monoblockBodyNoDoubleQuotes_in_doubleQuotedMonoblock6381);
                    b=monoblockBodyNoDoubleQuotes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monoblockBodyNoDoubleQuotes.add(b.getTree());
                    if (list_b==null) list_b=new ArrayList();
                    list_b.add(b.getTree());

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:747:8: ( whitespace )?
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==WHITESPACE) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:747:8: whitespace
                            {
                            pushFollow(FOLLOW_whitespace_in_doubleQuotedMonoblock6391);
                            whitespace234=whitespace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whitespace.add(whitespace234.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               delegate.reachEndDelimiter( BlockDelimiter.DOUBLE_QUOTES ) ; 
            }
            DOUBLE_QUOTE235=(Token)match(input,DOUBLE_QUOTE,FOLLOW_DOUBLE_QUOTE_in_doubleQuotedMonoblock6415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOUBLE_QUOTE.add(DOUBLE_QUOTE235);

            if ( state.backtracking==0 ) {
               delegate.endDelimitedText( BlockDelimiter.DOUBLE_QUOTES ) ; 
            }

            }



            // AST REWRITE
            // elements: b
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: b
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (Object)adaptor.nil();
            // 752:6: -> ^( BLOCK_INSIDE_DOUBLE_QUOTES ( $b)+ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:752:9: ^( BLOCK_INSIDE_DOUBLE_QUOTES ( $b)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK_INSIDE_DOUBLE_QUOTES, "BLOCK_INSIDE_DOUBLE_QUOTES"), root_1);

                if ( !(stream_b.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( MismatchedTokenException mte ) {

                  delegate.reportMissingDelimiter( BlockDelimiter.DOUBLE_QUOTES, mte ) ; 
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "doubleQuotedMonoblock"

    public static class delimitedMonoblockNoDoubleQuotes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delimitedMonoblockNoDoubleQuotes"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:758:1: delimitedMonoblockNoDoubleQuotes : ( parenthesizedMonoblock | squarebracketsMonoblock | emphasizedMonoblock );
    public final NovelangParser.delimitedMonoblockNoDoubleQuotes_return delimitedMonoblockNoDoubleQuotes() throws RecognitionException {
        NovelangParser.delimitedMonoblockNoDoubleQuotes_return retval = new NovelangParser.delimitedMonoblockNoDoubleQuotes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.parenthesizedMonoblock_return parenthesizedMonoblock236 = null;

        NovelangParser.squarebracketsMonoblock_return squarebracketsMonoblock237 = null;

        NovelangParser.emphasizedMonoblock_return emphasizedMonoblock238 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:759:3: ( parenthesizedMonoblock | squarebracketsMonoblock | emphasizedMonoblock )
            int alt138=3;
            switch ( input.LA(1) ) {
            case LEFT_PARENTHESIS:
                {
                alt138=1;
                }
                break;
            case LEFT_SQUARE_BRACKET:
                {
                alt138=2;
                }
                break;
            case SOLIDUS:
                {
                alt138=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }

            switch (alt138) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:759:5: parenthesizedMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedMonoblock_in_delimitedMonoblockNoDoubleQuotes6463);
                    parenthesizedMonoblock236=parenthesizedMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedMonoblock236.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:760:5: squarebracketsMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squarebracketsMonoblock_in_delimitedMonoblockNoDoubleQuotes6469);
                    squarebracketsMonoblock237=squarebracketsMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squarebracketsMonoblock237.getTree());

                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:761:5: emphasizedMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_emphasizedMonoblock_in_delimitedMonoblockNoDoubleQuotes6475);
                    emphasizedMonoblock238=emphasizedMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, emphasizedMonoblock238.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "delimitedMonoblockNoDoubleQuotes"

    public static class monoblockBodyNoDoubleQuotes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "monoblockBodyNoDoubleQuotes"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:764:1: monoblockBodyNoDoubleQuotes : ( mixedDelimitedMonoblockNoDoubleQuotes ( whitespace mixedDelimitedMonoblockNoDoubleQuotes )* ) ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedMonoblockNoDoubleQuotes ( whitespace mixedDelimitedMonoblockNoDoubleQuotes )* )* ;
    public final NovelangParser.monoblockBodyNoDoubleQuotes_return monoblockBodyNoDoubleQuotes() throws RecognitionException {
        NovelangParser.monoblockBodyNoDoubleQuotes_return retval = new NovelangParser.monoblockBodyNoDoubleQuotes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.mixedDelimitedMonoblockNoDoubleQuotes_return mixedDelimitedMonoblockNoDoubleQuotes239 = null;

        NovelangParser.whitespace_return whitespace240 = null;

        NovelangParser.mixedDelimitedMonoblockNoDoubleQuotes_return mixedDelimitedMonoblockNoDoubleQuotes241 = null;

        NovelangParser.whitespace_return whitespace242 = null;

        NovelangParser.softbreak_return softbreak243 = null;

        NovelangParser.whitespace_return whitespace244 = null;

        NovelangParser.mixedDelimitedMonoblockNoDoubleQuotes_return mixedDelimitedMonoblockNoDoubleQuotes245 = null;

        NovelangParser.whitespace_return whitespace246 = null;

        NovelangParser.mixedDelimitedMonoblockNoDoubleQuotes_return mixedDelimitedMonoblockNoDoubleQuotes247 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:765:3: ( ( mixedDelimitedMonoblockNoDoubleQuotes ( whitespace mixedDelimitedMonoblockNoDoubleQuotes )* ) ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedMonoblockNoDoubleQuotes ( whitespace mixedDelimitedMonoblockNoDoubleQuotes )* )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:765:5: ( mixedDelimitedMonoblockNoDoubleQuotes ( whitespace mixedDelimitedMonoblockNoDoubleQuotes )* ) ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedMonoblockNoDoubleQuotes ( whitespace mixedDelimitedMonoblockNoDoubleQuotes )* )*
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:765:5: ( mixedDelimitedMonoblockNoDoubleQuotes ( whitespace mixedDelimitedMonoblockNoDoubleQuotes )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:765:7: mixedDelimitedMonoblockNoDoubleQuotes ( whitespace mixedDelimitedMonoblockNoDoubleQuotes )*
            {
            pushFollow(FOLLOW_mixedDelimitedMonoblockNoDoubleQuotes_in_monoblockBodyNoDoubleQuotes6490);
            mixedDelimitedMonoblockNoDoubleQuotes239=mixedDelimitedMonoblockNoDoubleQuotes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedMonoblockNoDoubleQuotes239.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:766:7: ( whitespace mixedDelimitedMonoblockNoDoubleQuotes )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==WHITESPACE) ) {
                    int LA139_1 = input.LA(2);

                    if ( (LA139_1==LEFT_PARENTHESIS||LA139_1==LEFT_SQUARE_BRACKET||LA139_1==SOLIDUS||(LA139_1>=GRAVE_ACCENT && LA139_1<=LATIN_SMALL_LETTER_S)||(LA139_1>=LATIN_SMALL_LETTER_N && LA139_1<=LATIN_SMALL_LETTER_V)||LA139_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA139_1>=LATIN_SMALL_LETTER_R && LA139_1<=LATIN_SMALL_LETTER_M)||(LA139_1>=DIGIT_0 && LA139_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt139=1;
                    }


                }


                switch (alt139) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:766:9: whitespace mixedDelimitedMonoblockNoDoubleQuotes
            	    {
            	    pushFollow(FOLLOW_whitespace_in_monoblockBodyNoDoubleQuotes6500);
            	    whitespace240=whitespace();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace240.getTree());
            	    pushFollow(FOLLOW_mixedDelimitedMonoblockNoDoubleQuotes_in_monoblockBodyNoDoubleQuotes6502);
            	    mixedDelimitedMonoblockNoDoubleQuotes241=mixedDelimitedMonoblockNoDoubleQuotes();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedMonoblockNoDoubleQuotes241.getTree());

            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);


            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:768:5: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedMonoblockNoDoubleQuotes ( whitespace mixedDelimitedMonoblockNoDoubleQuotes )* )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==WHITESPACE) ) {
                    int LA143_1 = input.LA(2);

                    if ( (LA143_1==SOFTBREAK) ) {
                        alt143=1;
                    }


                }
                else if ( (LA143_0==SOFTBREAK) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:768:7: ( whitespace )? softbreak ( whitespace )? mixedDelimitedMonoblockNoDoubleQuotes ( whitespace mixedDelimitedMonoblockNoDoubleQuotes )*
            	    {
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:768:7: ( whitespace )?
            	    int alt140=2;
            	    int LA140_0 = input.LA(1);

            	    if ( (LA140_0==WHITESPACE) ) {
            	        alt140=1;
            	    }
            	    switch (alt140) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:768:7: whitespace
            	            {
            	            pushFollow(FOLLOW_whitespace_in_monoblockBodyNoDoubleQuotes6519);
            	            whitespace242=whitespace();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace242.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_softbreak_in_monoblockBodyNoDoubleQuotes6522);
            	    softbreak243=softbreak();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak243.getTree());
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:768:29: ( whitespace )?
            	    int alt141=2;
            	    int LA141_0 = input.LA(1);

            	    if ( (LA141_0==WHITESPACE) ) {
            	        alt141=1;
            	    }
            	    switch (alt141) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:768:29: whitespace
            	            {
            	            pushFollow(FOLLOW_whitespace_in_monoblockBodyNoDoubleQuotes6524);
            	            whitespace244=whitespace();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace244.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_mixedDelimitedMonoblockNoDoubleQuotes_in_monoblockBodyNoDoubleQuotes6534);
            	    mixedDelimitedMonoblockNoDoubleQuotes245=mixedDelimitedMonoblockNoDoubleQuotes();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedMonoblockNoDoubleQuotes245.getTree());
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:770:7: ( whitespace mixedDelimitedMonoblockNoDoubleQuotes )*
            	    loop142:
            	    do {
            	        int alt142=2;
            	        int LA142_0 = input.LA(1);

            	        if ( (LA142_0==WHITESPACE) ) {
            	            int LA142_1 = input.LA(2);

            	            if ( (LA142_1==LEFT_PARENTHESIS||LA142_1==LEFT_SQUARE_BRACKET||LA142_1==SOLIDUS||(LA142_1>=GRAVE_ACCENT && LA142_1<=LATIN_SMALL_LETTER_S)||(LA142_1>=LATIN_SMALL_LETTER_N && LA142_1<=LATIN_SMALL_LETTER_V)||LA142_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA142_1>=LATIN_SMALL_LETTER_R && LA142_1<=LATIN_SMALL_LETTER_M)||(LA142_1>=DIGIT_0 && LA142_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
            	                alt142=1;
            	            }


            	        }


            	        switch (alt142) {
            	    	case 1 :
            	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:770:9: whitespace mixedDelimitedMonoblockNoDoubleQuotes
            	    	    {
            	    	    pushFollow(FOLLOW_whitespace_in_monoblockBodyNoDoubleQuotes6544);
            	    	    whitespace246=whitespace();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace246.getTree());
            	    	    pushFollow(FOLLOW_mixedDelimitedMonoblockNoDoubleQuotes_in_monoblockBodyNoDoubleQuotes6555);
            	    	    mixedDelimitedMonoblockNoDoubleQuotes247=mixedDelimitedMonoblockNoDoubleQuotes();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedMonoblockNoDoubleQuotes247.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop142;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "monoblockBodyNoDoubleQuotes"

    public static class mixedDelimitedMonoblockNoDoubleQuotes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixedDelimitedMonoblockNoDoubleQuotes"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:776:1: mixedDelimitedMonoblockNoDoubleQuotes : ( ( word ( ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) );
    public final NovelangParser.mixedDelimitedMonoblockNoDoubleQuotes_return mixedDelimitedMonoblockNoDoubleQuotes() throws RecognitionException {
        NovelangParser.mixedDelimitedMonoblockNoDoubleQuotes_return retval = new NovelangParser.mixedDelimitedMonoblockNoDoubleQuotes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.word_return word248 = null;

        NovelangParser.punctuationSign_return punctuationSign249 = null;

        NovelangParser.delimitedMonoblockNoDoubleQuotes_return delimitedMonoblockNoDoubleQuotes250 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral251 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral252 = null;

        NovelangParser.word_return word253 = null;

        NovelangParser.punctuationSign_return punctuationSign254 = null;

        NovelangParser.delimitedMonoblockNoDoubleQuotes_return delimitedMonoblockNoDoubleQuotes255 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral256 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral257 = null;

        NovelangParser.word_return word258 = null;

        NovelangParser.punctuationSign_return punctuationSign259 = null;

        NovelangParser.delimitedMonoblockNoDoubleQuotes_return delimitedMonoblockNoDoubleQuotes260 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral261 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral262 = null;

        NovelangParser.word_return word263 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:780:3: ( ( word ( ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) )
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( ((LA152_0>=LATIN_SMALL_LETTER_F && LA152_0<=LATIN_SMALL_LETTER_S)||(LA152_0>=LATIN_SMALL_LETTER_N && LA152_0<=LATIN_SMALL_LETTER_V)||LA152_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA152_0>=LATIN_SMALL_LETTER_R && LA152_0<=LATIN_SMALL_LETTER_M)||(LA152_0>=DIGIT_0 && LA152_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt152=1;
            }
            else if ( (LA152_0==LEFT_PARENTHESIS||LA152_0==LEFT_SQUARE_BRACKET||LA152_0==SOLIDUS||(LA152_0>=GRAVE_ACCENT && LA152_0<=APOSTROPHE)) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:780:5: ( word ( ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:780:5: ( word ( ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:780:7: word ( ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    {
                    pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoDoubleQuotes6611);
                    word248=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, word248.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:781:7: ( ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    loop146:
                    do {
                        int alt146=2;
                        int LA146_0 = input.LA(1);

                        if ( (LA146_0==LEFT_PARENTHESIS||LA146_0==LEFT_SQUARE_BRACKET||LA146_0==SOLIDUS||(LA146_0>=GRAVE_ACCENT && LA146_0<=APOSTROPHE)) ) {
                            alt146=1;
                        }


                        switch (alt146) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:781:9: ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( word )?
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:781:9: ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral )
                    	    int alt144=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt144=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case SOLIDUS:
                    	        {
                    	        alt144=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA144_3 = input.LA(2);

                    	        if ( (LA144_3==GRAVE_ACCENT) ) {
                    	            alt144=4;
                    	        }
                    	        else if ( ((LA144_3>=COMMERCIAL_AT && LA144_3<=WHITESPACE)||(LA144_3>=VERTICAL_LINE && LA144_3<=GREATER_THAN_SIGN)||(LA144_3>=FULL_STOP && LA144_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA144_3>=LATIN_SMALL_LETTER_R && LA144_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt144=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 144, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 144, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt144) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:781:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoDoubleQuotes6626);
                    	            punctuationSign249=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign249.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:782:13: delimitedMonoblockNoDoubleQuotes
                    	            {
                    	            pushFollow(FOLLOW_delimitedMonoblockNoDoubleQuotes_in_mixedDelimitedMonoblockNoDoubleQuotes6641);
                    	            delimitedMonoblockNoDoubleQuotes250=delimitedMonoblockNoDoubleQuotes();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblockNoDoubleQuotes250.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:783:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoDoubleQuotes6656);
                    	            softInlineLiteral251=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral251.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:784:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoDoubleQuotes6671);
                    	            hardInlineLiteral252=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral252.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:785:9: ( word )?
                    	    int alt145=2;
                    	    int LA145_0 = input.LA(1);

                    	    if ( ((LA145_0>=LATIN_SMALL_LETTER_F && LA145_0<=LATIN_SMALL_LETTER_S)||(LA145_0>=LATIN_SMALL_LETTER_N && LA145_0<=LATIN_SMALL_LETTER_V)||LA145_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA145_0>=LATIN_SMALL_LETTER_R && LA145_0<=LATIN_SMALL_LETTER_M)||(LA145_0>=DIGIT_0 && LA145_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt145=1;
                    	    }
                    	    switch (alt145) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:785:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoDoubleQuotes6682);
                    	            word253=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word253.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop146;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:787:5: ( ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:787:5: ( ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:787:7: ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) )* ( word )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:787:7: ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral )
                    int alt147=4;
                    switch ( input.LA(1) ) {
                    case FULL_STOP:
                    case COMMA:
                    case QUESTION_MARK:
                    case EXCLAMATION_MARK:
                    case SEMICOLON:
                    case COLON:
                    case APOSTROPHE:
                        {
                        alt147=1;
                        }
                        break;
                    case LEFT_PARENTHESIS:
                    case LEFT_SQUARE_BRACKET:
                    case SOLIDUS:
                        {
                        alt147=2;
                        }
                        break;
                    case GRAVE_ACCENT:
                        {
                        int LA147_3 = input.LA(2);

                        if ( (LA147_3==GRAVE_ACCENT) ) {
                            alt147=4;
                        }
                        else if ( ((LA147_3>=COMMERCIAL_AT && LA147_3<=WHITESPACE)||(LA147_3>=VERTICAL_LINE && LA147_3<=GREATER_THAN_SIGN)||(LA147_3>=FULL_STOP && LA147_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA147_3>=LATIN_SMALL_LETTER_R && LA147_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt147=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 147, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 147, 0, input);

                        throw nvae;
                    }

                    switch (alt147) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:787:11: punctuationSign
                            {
                            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoDoubleQuotes6704);
                            punctuationSign254=punctuationSign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign254.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:788:11: delimitedMonoblockNoDoubleQuotes
                            {
                            pushFollow(FOLLOW_delimitedMonoblockNoDoubleQuotes_in_mixedDelimitedMonoblockNoDoubleQuotes6717);
                            delimitedMonoblockNoDoubleQuotes255=delimitedMonoblockNoDoubleQuotes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblockNoDoubleQuotes255.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:789:11: softInlineLiteral
                            {
                            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoDoubleQuotes6730);
                            softInlineLiteral256=softInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral256.getTree());

                            }
                            break;
                        case 4 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:790:11: hardInlineLiteral
                            {
                            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoDoubleQuotes6743);
                            hardInlineLiteral257=hardInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral257.getTree());

                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:792:7: ( ( word )? ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) )*
                    loop150:
                    do {
                        int alt150=2;
                        alt150 = dfa150.predict(input);
                        switch (alt150) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:792:9: ( word )? ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:792:9: ( word )?
                    	    int alt148=2;
                    	    int LA148_0 = input.LA(1);

                    	    if ( ((LA148_0>=LATIN_SMALL_LETTER_F && LA148_0<=LATIN_SMALL_LETTER_S)||(LA148_0>=LATIN_SMALL_LETTER_N && LA148_0<=LATIN_SMALL_LETTER_V)||LA148_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA148_0>=LATIN_SMALL_LETTER_R && LA148_0<=LATIN_SMALL_LETTER_M)||(LA148_0>=DIGIT_0 && LA148_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt148=1;
                    	    }
                    	    switch (alt148) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:792:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoDoubleQuotes6762);
                    	            word258=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word258.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:793:9: ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral )
                    	    int alt149=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt149=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case SOLIDUS:
                    	        {
                    	        alt149=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA149_3 = input.LA(2);

                    	        if ( (LA149_3==GRAVE_ACCENT) ) {
                    	            alt149=4;
                    	        }
                    	        else if ( ((LA149_3>=COMMERCIAL_AT && LA149_3<=WHITESPACE)||(LA149_3>=VERTICAL_LINE && LA149_3<=GREATER_THAN_SIGN)||(LA149_3>=FULL_STOP && LA149_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA149_3>=LATIN_SMALL_LETTER_R && LA149_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt149=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 149, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 149, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt149) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:793:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoDoubleQuotes6778);
                    	            punctuationSign259=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign259.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:794:13: delimitedMonoblockNoDoubleQuotes
                    	            {
                    	            pushFollow(FOLLOW_delimitedMonoblockNoDoubleQuotes_in_mixedDelimitedMonoblockNoDoubleQuotes6793);
                    	            delimitedMonoblockNoDoubleQuotes260=delimitedMonoblockNoDoubleQuotes();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblockNoDoubleQuotes260.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:795:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoDoubleQuotes6808);
                    	            softInlineLiteral261=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral261.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:796:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoDoubleQuotes6823);
                    	            hardInlineLiteral262=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral262.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop150;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:799:7: ( word )?
                    int alt151=2;
                    int LA151_0 = input.LA(1);

                    if ( ((LA151_0>=LATIN_SMALL_LETTER_F && LA151_0<=LATIN_SMALL_LETTER_S)||(LA151_0>=LATIN_SMALL_LETTER_N && LA151_0<=LATIN_SMALL_LETTER_V)||LA151_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA151_0>=LATIN_SMALL_LETTER_R && LA151_0<=LATIN_SMALL_LETTER_M)||(LA151_0>=DIGIT_0 && LA151_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt151=1;
                    }
                    switch (alt151) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:799:7: word
                            {
                            pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoDoubleQuotes6865);
                            word263=word();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, word263.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixedDelimitedMonoblockNoDoubleQuotes"

    public static class emphasizedSpreadBlock_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "emphasizedSpreadBlock"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:810:1: emphasizedSpreadBlock : ( SOLIDUS SOLIDUS ( whitespace )? (b+= spreadBlockBodyNoEmphasis ( whitespace )? )? SOLIDUS SOLIDUS ) -> ^( BLOCK_INSIDE_SOLIDUS_PAIRS ( $b)+ ) ;
    public final NovelangParser.emphasizedSpreadBlock_return emphasizedSpreadBlock() throws RecognitionException {
        NovelangParser.emphasizedSpreadBlock_return retval = new NovelangParser.emphasizedSpreadBlock_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SOLIDUS264=null;
        Token SOLIDUS265=null;
        Token SOLIDUS268=null;
        Token SOLIDUS269=null;
        List list_b=null;
        NovelangParser.whitespace_return whitespace266 = null;

        NovelangParser.whitespace_return whitespace267 = null;

        RuleReturnScope b = null;
        Object SOLIDUS264_tree=null;
        Object SOLIDUS265_tree=null;
        Object SOLIDUS268_tree=null;
        Object SOLIDUS269_tree=null;
        RewriteRuleTokenStream stream_SOLIDUS=new RewriteRuleTokenStream(adaptor,"token SOLIDUS");
        RewriteRuleSubtreeStream stream_spreadBlockBodyNoEmphasis=new RewriteRuleSubtreeStream(adaptor,"rule spreadBlockBodyNoEmphasis");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:811:2: ( ( SOLIDUS SOLIDUS ( whitespace )? (b+= spreadBlockBodyNoEmphasis ( whitespace )? )? SOLIDUS SOLIDUS ) -> ^( BLOCK_INSIDE_SOLIDUS_PAIRS ( $b)+ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:811:4: ( SOLIDUS SOLIDUS ( whitespace )? (b+= spreadBlockBodyNoEmphasis ( whitespace )? )? SOLIDUS SOLIDUS )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:811:4: ( SOLIDUS SOLIDUS ( whitespace )? (b+= spreadBlockBodyNoEmphasis ( whitespace )? )? SOLIDUS SOLIDUS )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:812:7: SOLIDUS SOLIDUS ( whitespace )? (b+= spreadBlockBodyNoEmphasis ( whitespace )? )? SOLIDUS SOLIDUS
            {
            if ( state.backtracking==0 ) {
               delegate.startDelimitedText( BlockDelimiter.SOLIDUS_PAIRS, input.LT( 1 ) ) ; 
            }
            SOLIDUS264=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_emphasizedSpreadBlock6912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SOLIDUS.add(SOLIDUS264);

            SOLIDUS265=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_emphasizedSpreadBlock6914); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SOLIDUS.add(SOLIDUS265);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:813:22: ( whitespace )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==WHITESPACE) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:813:22: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_emphasizedSpreadBlock6916);
                    whitespace266=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whitespace.add(whitespace266.getTree());

                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:814:6: (b+= spreadBlockBodyNoEmphasis ( whitespace )? )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==LEFT_PARENTHESIS||LA155_0==LEFT_SQUARE_BRACKET||LA155_0==DOUBLE_QUOTE||LA155_0==HYPHEN_MINUS||LA155_0==SOFTBREAK||(LA155_0>=GRAVE_ACCENT && LA155_0<=LATIN_SMALL_LETTER_S)||LA155_0==TILDE||(LA155_0>=LATIN_SMALL_LETTER_N && LA155_0<=LATIN_SMALL_LETTER_V)||LA155_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA155_0>=LATIN_SMALL_LETTER_R && LA155_0<=LATIN_SMALL_LETTER_M)||(LA155_0>=DIGIT_0 && LA155_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:814:8: b+= spreadBlockBodyNoEmphasis ( whitespace )?
                    {
                    pushFollow(FOLLOW_spreadBlockBodyNoEmphasis_in_emphasizedSpreadBlock6930);
                    b=spreadBlockBodyNoEmphasis();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spreadBlockBodyNoEmphasis.add(b.getTree());
                    if (list_b==null) list_b=new ArrayList();
                    list_b.add(b.getTree());

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:815:8: ( whitespace )?
                    int alt154=2;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==WHITESPACE) ) {
                        alt154=1;
                    }
                    switch (alt154) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:815:8: whitespace
                            {
                            pushFollow(FOLLOW_whitespace_in_emphasizedSpreadBlock6940);
                            whitespace267=whitespace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whitespace.add(whitespace267.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               delegate.reachEndDelimiter( BlockDelimiter.SOLIDUS_PAIRS ) ; 
            }
            SOLIDUS268=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_emphasizedSpreadBlock6964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SOLIDUS.add(SOLIDUS268);

            SOLIDUS269=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_emphasizedSpreadBlock6966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SOLIDUS.add(SOLIDUS269);

            if ( state.backtracking==0 ) {
               delegate.endDelimitedText( BlockDelimiter.SOLIDUS_PAIRS ) ; 
            }

            }



            // AST REWRITE
            // elements: b
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: b
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (Object)adaptor.nil();
            // 820:6: -> ^( BLOCK_INSIDE_SOLIDUS_PAIRS ( $b)+ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:820:9: ^( BLOCK_INSIDE_SOLIDUS_PAIRS ( $b)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK_INSIDE_SOLIDUS_PAIRS, "BLOCK_INSIDE_SOLIDUS_PAIRS"), root_1);

                if ( !(stream_b.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( MismatchedTokenException mte ) {

                  delegate.reportMissingDelimiter( BlockDelimiter.SOLIDUS_PAIRS, mte ) ; 
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "emphasizedSpreadBlock"

    public static class delimitedSpreadblockNoEmphasis_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delimitedSpreadblockNoEmphasis"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:825:1: delimitedSpreadblockNoEmphasis : ( parenthesizedSpreadblock | squarebracketsSpreadblock | doubleQuotedSpreadBlock | hyphenPairSpreadBlock );
    public final NovelangParser.delimitedSpreadblockNoEmphasis_return delimitedSpreadblockNoEmphasis() throws RecognitionException {
        NovelangParser.delimitedSpreadblockNoEmphasis_return retval = new NovelangParser.delimitedSpreadblockNoEmphasis_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.parenthesizedSpreadblock_return parenthesizedSpreadblock270 = null;

        NovelangParser.squarebracketsSpreadblock_return squarebracketsSpreadblock271 = null;

        NovelangParser.doubleQuotedSpreadBlock_return doubleQuotedSpreadBlock272 = null;

        NovelangParser.hyphenPairSpreadBlock_return hyphenPairSpreadBlock273 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:826:3: ( parenthesizedSpreadblock | squarebracketsSpreadblock | doubleQuotedSpreadBlock | hyphenPairSpreadBlock )
            int alt156=4;
            switch ( input.LA(1) ) {
            case LEFT_PARENTHESIS:
                {
                alt156=1;
                }
                break;
            case LEFT_SQUARE_BRACKET:
                {
                alt156=2;
                }
                break;
            case DOUBLE_QUOTE:
                {
                alt156=3;
                }
                break;
            case HYPHEN_MINUS:
                {
                alt156=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:826:5: parenthesizedSpreadblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedSpreadblock_in_delimitedSpreadblockNoEmphasis7011);
                    parenthesizedSpreadblock270=parenthesizedSpreadblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedSpreadblock270.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:827:5: squarebracketsSpreadblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squarebracketsSpreadblock_in_delimitedSpreadblockNoEmphasis7017);
                    squarebracketsSpreadblock271=squarebracketsSpreadblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squarebracketsSpreadblock271.getTree());

                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:828:5: doubleQuotedSpreadBlock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_doubleQuotedSpreadBlock_in_delimitedSpreadblockNoEmphasis7023);
                    doubleQuotedSpreadBlock272=doubleQuotedSpreadBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, doubleQuotedSpreadBlock272.getTree());

                    }
                    break;
                case 4 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:829:5: hyphenPairSpreadBlock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_hyphenPairSpreadBlock_in_delimitedSpreadblockNoEmphasis7029);
                    hyphenPairSpreadBlock273=hyphenPairSpreadBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hyphenPairSpreadBlock273.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "delimitedSpreadblockNoEmphasis"

    public static class spreadBlockBodyNoEmphasis_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "spreadBlockBodyNoEmphasis"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:832:1: spreadBlockBodyNoEmphasis : ( ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )? ) ) | ( mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )? )? ) );
    public final NovelangParser.spreadBlockBodyNoEmphasis_return spreadBlockBodyNoEmphasis() throws RecognitionException {
        NovelangParser.spreadBlockBodyNoEmphasis_return retval = new NovelangParser.spreadBlockBodyNoEmphasis_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.softbreak_return softbreak274 = null;

        NovelangParser.url_return url275 = null;

        NovelangParser.softbreak_return softbreak276 = null;

        NovelangParser.whitespace_return whitespace277 = null;

        NovelangParser.smallDashedListItem_return smallDashedListItem278 = null;

        NovelangParser.whitespace_return whitespace279 = null;

        NovelangParser.softbreak_return softbreak280 = null;

        NovelangParser.url_return url281 = null;

        NovelangParser.whitespace_return whitespace282 = null;

        NovelangParser.softbreak_return softbreak283 = null;

        NovelangParser.whitespace_return whitespace284 = null;

        NovelangParser.smallDashedListItem_return smallDashedListItem285 = null;

        NovelangParser.whitespace_return whitespace286 = null;

        NovelangParser.softbreak_return softbreak287 = null;

        NovelangParser.whitespace_return whitespace288 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoEmphasis_return mixedDelimitedSpreadBlockNoEmphasis289 = null;

        NovelangParser.whitespace_return whitespace290 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoEmphasis_return mixedDelimitedSpreadBlockNoEmphasis291 = null;

        NovelangParser.whitespace_return whitespace292 = null;

        NovelangParser.softbreak_return softbreak293 = null;

        NovelangParser.whitespace_return whitespace294 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoEmphasis_return mixedDelimitedSpreadBlockNoEmphasis295 = null;

        NovelangParser.whitespace_return whitespace296 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoEmphasis_return mixedDelimitedSpreadBlockNoEmphasis297 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoEmphasis_return mixedDelimitedSpreadBlockNoEmphasis298 = null;

        NovelangParser.whitespace_return whitespace299 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoEmphasis_return mixedDelimitedSpreadBlockNoEmphasis300 = null;

        NovelangParser.whitespace_return whitespace301 = null;

        NovelangParser.softbreak_return softbreak302 = null;

        NovelangParser.url_return url303 = null;

        NovelangParser.whitespace_return whitespace304 = null;

        NovelangParser.softbreak_return softbreak305 = null;

        NovelangParser.whitespace_return whitespace306 = null;

        NovelangParser.smallDashedListItem_return smallDashedListItem307 = null;

        NovelangParser.whitespace_return whitespace308 = null;

        NovelangParser.softbreak_return softbreak309 = null;

        NovelangParser.whitespace_return whitespace310 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoEmphasis_return mixedDelimitedSpreadBlockNoEmphasis311 = null;

        NovelangParser.whitespace_return whitespace312 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoEmphasis_return mixedDelimitedSpreadBlockNoEmphasis313 = null;

        NovelangParser.whitespace_return whitespace314 = null;

        NovelangParser.softbreak_return softbreak315 = null;

        NovelangParser.whitespace_return whitespace316 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoEmphasis_return mixedDelimitedSpreadBlockNoEmphasis317 = null;

        NovelangParser.whitespace_return whitespace318 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoEmphasis_return mixedDelimitedSpreadBlockNoEmphasis319 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:833:3: ( ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )? ) ) | ( mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )? )? ) )
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==SOFTBREAK) ) {
                alt183=1;
            }
            else if ( (LA183_0==LEFT_PARENTHESIS||LA183_0==LEFT_SQUARE_BRACKET||LA183_0==DOUBLE_QUOTE||LA183_0==HYPHEN_MINUS||(LA183_0>=GRAVE_ACCENT && LA183_0<=LATIN_SMALL_LETTER_S)||LA183_0==TILDE||(LA183_0>=LATIN_SMALL_LETTER_N && LA183_0<=LATIN_SMALL_LETTER_V)||LA183_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA183_0>=LATIN_SMALL_LETTER_R && LA183_0<=LATIN_SMALL_LETTER_M)||(LA183_0>=DIGIT_0 && LA183_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt183=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;
            }
            switch (alt183) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:834:5: ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )? ) )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:834:5: ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )? ) )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:835:7: ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )? )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:835:7: ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) )
                    int alt158=2;
                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==SOFTBREAK) ) {
                        int LA158_1 = input.LA(2);

                        if ( (LA158_1==LATIN_SMALL_LETTER_H) && (synpred23_Novelang())) {
                            alt158=1;
                        }
                        else if ( (LA158_1==LATIN_SMALL_LETTER_F) && (synpred23_Novelang())) {
                            alt158=1;
                        }
                        else if ( (LA158_1==WHITESPACE) && (synpred24_Novelang())) {
                            alt158=2;
                        }
                        else if ( (LA158_1==HYPHEN_MINUS) && (synpred24_Novelang())) {
                            alt158=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 158, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 158, 0, input);

                        throw nvae;
                    }
                    switch (alt158) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:836:11: ( ( softbreak url )=> ( softbreak url ) )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:836:11: ( ( softbreak url )=> ( softbreak url ) )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:836:13: ( softbreak url )=> ( softbreak url )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:836:34: ( softbreak url )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:836:36: softbreak url
                            {
                            pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7089);
                            softbreak274=softbreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak274.getTree());
                            pushFollow(FOLLOW_url_in_spreadBlockBodyNoEmphasis7091);
                            url275=url();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, url275.getTree());

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:838:11: ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:838:11: ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:838:13: ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:839:19: ( softbreak ( whitespace )? smallDashedListItem )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:839:21: softbreak ( whitespace )? smallDashedListItem
                            {
                            pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7155);
                            softbreak276=softbreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak276.getTree());
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:839:31: ( whitespace )?
                            int alt157=2;
                            int LA157_0 = input.LA(1);

                            if ( (LA157_0==WHITESPACE) ) {
                                alt157=1;
                            }
                            switch (alt157) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:839:31: whitespace
                                    {
                                    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7157);
                                    whitespace277=whitespace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace277.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_smallDashedListItem_in_spreadBlockBodyNoEmphasis7160);
                            smallDashedListItem278=smallDashedListItem();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, smallDashedListItem278.getTree());

                            }


                            }


                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:843:7: ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:843:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:843:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:843:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:843:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )*
                    loop165:
                    do {
                        int alt165=4;
                        int LA165_0 = input.LA(1);

                        if ( (LA165_0==WHITESPACE) ) {
                            int LA165_1 = input.LA(2);

                            if ( (synpred25_Novelang()) ) {
                                alt165=1;
                            }
                            else if ( (synpred26_Novelang()) ) {
                                alt165=2;
                            }
                            else if ( (synpred27_Novelang()) ) {
                                alt165=3;
                            }


                        }
                        else if ( (LA165_0==SOFTBREAK) ) {
                            int LA165_2 = input.LA(2);

                            if ( (synpred25_Novelang()) ) {
                                alt165=1;
                            }
                            else if ( (synpred26_Novelang()) ) {
                                alt165=2;
                            }
                            else if ( (synpred27_Novelang()) ) {
                                alt165=3;
                            }


                        }


                        switch (alt165) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:844:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:844:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:844:15: ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:844:48: ( ( whitespace )? softbreak url )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:844:50: ( whitespace )? softbreak url
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:844:50: ( whitespace )?
                    	    int alt159=2;
                    	    int LA159_0 = input.LA(1);

                    	    if ( (LA159_0==WHITESPACE) ) {
                    	        alt159=1;
                    	    }
                    	    switch (alt159) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:844:50: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7231);
                    	            whitespace279=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace279.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7234);
                    	    softbreak280=softbreak();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak280.getTree());
                    	    pushFollow(FOLLOW_url_in_spreadBlockBodyNoEmphasis7236);
                    	    url281=url();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, url281.getTree());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:846:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:846:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:846:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:847:19: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:847:21: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:847:21: ( whitespace )?
                    	    int alt160=2;
                    	    int LA160_0 = input.LA(1);

                    	    if ( (LA160_0==WHITESPACE) ) {
                    	        alt160=1;
                    	    }
                    	    switch (alt160) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:847:21: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7304);
                    	            whitespace282=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace282.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7307);
                    	    softbreak283=softbreak();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak283.getTree());
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:847:43: ( whitespace )?
                    	    int alt161=2;
                    	    int LA161_0 = input.LA(1);

                    	    if ( (LA161_0==WHITESPACE) ) {
                    	        alt161=1;
                    	    }
                    	    switch (alt161) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:847:43: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7309);
                    	            whitespace284=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace284.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_smallDashedListItem_in_spreadBlockBodyNoEmphasis7312);
                    	    smallDashedListItem285=smallDashedListItem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, smallDashedListItem285.getTree());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:849:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:849:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:850:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:855:19: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:856:19: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )*
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:856:19: ( whitespace )?
                    	    int alt162=2;
                    	    int LA162_0 = input.LA(1);

                    	    if ( (LA162_0==WHITESPACE) ) {
                    	        alt162=1;
                    	    }
                    	    switch (alt162) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:856:19: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7492);
                    	            whitespace286=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace286.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7495);
                    	    softbreak287=softbreak();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak287.getTree());
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:856:41: ( whitespace )?
                    	    int alt163=2;
                    	    int LA163_0 = input.LA(1);

                    	    if ( (LA163_0==WHITESPACE) ) {
                    	        alt163=1;
                    	    }
                    	    switch (alt163) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:856:41: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7497);
                    	            whitespace288=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace288.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis7500);
                    	    mixedDelimitedSpreadBlockNoEmphasis289=mixedDelimitedSpreadBlockNoEmphasis();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoEmphasis289.getTree());
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:857:19: ( whitespace mixedDelimitedSpreadBlockNoEmphasis )*
                    	    loop164:
                    	    do {
                    	        int alt164=2;
                    	        int LA164_0 = input.LA(1);

                    	        if ( (LA164_0==WHITESPACE) ) {
                    	            int LA164_1 = input.LA(2);

                    	            if ( (LA164_1==LEFT_PARENTHESIS||LA164_1==LEFT_SQUARE_BRACKET||LA164_1==DOUBLE_QUOTE||LA164_1==HYPHEN_MINUS||(LA164_1>=GRAVE_ACCENT && LA164_1<=LATIN_SMALL_LETTER_S)||LA164_1==TILDE||(LA164_1>=LATIN_SMALL_LETTER_N && LA164_1<=LATIN_SMALL_LETTER_V)||LA164_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA164_1>=LATIN_SMALL_LETTER_R && LA164_1<=LATIN_SMALL_LETTER_M)||(LA164_1>=DIGIT_0 && LA164_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	                alt164=1;
                    	            }


                    	        }


                    	        switch (alt164) {
                    	    	case 1 :
                    	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:857:21: whitespace mixedDelimitedSpreadBlockNoEmphasis
                    	    	    {
                    	    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7523);
                    	    	    whitespace290=whitespace();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace290.getTree());
                    	    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis7525);
                    	    	    mixedDelimitedSpreadBlockNoEmphasis291=mixedDelimitedSpreadBlockNoEmphasis();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoEmphasis291.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop164;
                    	        }
                    	    } while (true);


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop165;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:861:10: ( whitespace )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==WHITESPACE) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:861:10: whitespace
                            {
                            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7604);
                            whitespace292=whitespace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace292.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7607);
                    softbreak293=softbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak293.getTree());

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:864:5: ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )?
                    int alt169=2;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==WHITESPACE) ) {
                        int LA169_1 = input.LA(2);

                        if ( (LA169_1==LEFT_PARENTHESIS||LA169_1==LEFT_SQUARE_BRACKET||LA169_1==DOUBLE_QUOTE||LA169_1==HYPHEN_MINUS||(LA169_1>=GRAVE_ACCENT && LA169_1<=LATIN_SMALL_LETTER_S)||LA169_1==TILDE||(LA169_1>=LATIN_SMALL_LETTER_N && LA169_1<=LATIN_SMALL_LETTER_V)||LA169_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA169_1>=LATIN_SMALL_LETTER_R && LA169_1<=LATIN_SMALL_LETTER_M)||(LA169_1>=DIGIT_0 && LA169_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt169=1;
                        }
                    }
                    else if ( (LA169_0==LEFT_PARENTHESIS||LA169_0==LEFT_SQUARE_BRACKET||LA169_0==DOUBLE_QUOTE||LA169_0==HYPHEN_MINUS||(LA169_0>=GRAVE_ACCENT && LA169_0<=LATIN_SMALL_LETTER_S)||LA169_0==TILDE||(LA169_0>=LATIN_SMALL_LETTER_N && LA169_0<=LATIN_SMALL_LETTER_V)||LA169_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA169_0>=LATIN_SMALL_LETTER_R && LA169_0<=LATIN_SMALL_LETTER_M)||(LA169_0>=DIGIT_0 && LA169_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt169=1;
                    }
                    switch (alt169) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:864:7: ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )*
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:864:7: ( whitespace )?
                            int alt167=2;
                            int LA167_0 = input.LA(1);

                            if ( (LA167_0==WHITESPACE) ) {
                                alt167=1;
                            }
                            switch (alt167) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:864:7: whitespace
                                    {
                                    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7635);
                                    whitespace294=whitespace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace294.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis7638);
                            mixedDelimitedSpreadBlockNoEmphasis295=mixedDelimitedSpreadBlockNoEmphasis();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoEmphasis295.getTree());
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:865:7: ( whitespace mixedDelimitedSpreadBlockNoEmphasis )*
                            loop168:
                            do {
                                int alt168=2;
                                int LA168_0 = input.LA(1);

                                if ( (LA168_0==WHITESPACE) ) {
                                    int LA168_1 = input.LA(2);

                                    if ( (LA168_1==LEFT_PARENTHESIS||LA168_1==LEFT_SQUARE_BRACKET||LA168_1==DOUBLE_QUOTE||LA168_1==HYPHEN_MINUS||(LA168_1>=GRAVE_ACCENT && LA168_1<=LATIN_SMALL_LETTER_S)||LA168_1==TILDE||(LA168_1>=LATIN_SMALL_LETTER_N && LA168_1<=LATIN_SMALL_LETTER_V)||LA168_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA168_1>=LATIN_SMALL_LETTER_R && LA168_1<=LATIN_SMALL_LETTER_M)||(LA168_1>=DIGIT_0 && LA168_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                        alt168=1;
                                    }


                                }


                                switch (alt168) {
                            	case 1 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:865:9: whitespace mixedDelimitedSpreadBlockNoEmphasis
                            	    {
                            	    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7649);
                            	    whitespace296=whitespace();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace296.getTree());
                            	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis7651);
                            	    mixedDelimitedSpreadBlockNoEmphasis297=mixedDelimitedSpreadBlockNoEmphasis();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoEmphasis297.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop168;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:870:5: ( mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )? )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:870:5: ( mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )? )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:872:7: mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )? )?
                    {
                    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis7709);
                    mixedDelimitedSpreadBlockNoEmphasis298=mixedDelimitedSpreadBlockNoEmphasis();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoEmphasis298.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:873:7: ( whitespace mixedDelimitedSpreadBlockNoEmphasis )*
                    loop170:
                    do {
                        int alt170=2;
                        int LA170_0 = input.LA(1);

                        if ( (LA170_0==WHITESPACE) ) {
                            int LA170_1 = input.LA(2);

                            if ( (LA170_1==LEFT_PARENTHESIS||LA170_1==LEFT_SQUARE_BRACKET||LA170_1==DOUBLE_QUOTE||LA170_1==HYPHEN_MINUS||(LA170_1>=GRAVE_ACCENT && LA170_1<=LATIN_SMALL_LETTER_S)||LA170_1==TILDE||(LA170_1>=LATIN_SMALL_LETTER_N && LA170_1<=LATIN_SMALL_LETTER_V)||LA170_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA170_1>=LATIN_SMALL_LETTER_R && LA170_1<=LATIN_SMALL_LETTER_M)||(LA170_1>=DIGIT_0 && LA170_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt170=1;
                            }


                        }


                        switch (alt170) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:873:9: whitespace mixedDelimitedSpreadBlockNoEmphasis
                    	    {
                    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7720);
                    	    whitespace299=whitespace();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace299.getTree());
                    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis7722);
                    	    mixedDelimitedSpreadBlockNoEmphasis300=mixedDelimitedSpreadBlockNoEmphasis();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoEmphasis300.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop170;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:875:7: ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )? )?
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==WHITESPACE) ) {
                        int LA182_1 = input.LA(2);

                        if ( (LA182_1==SOFTBREAK) ) {
                            alt182=1;
                        }
                    }
                    else if ( (LA182_0==SOFTBREAK) ) {
                        alt182=1;
                    }
                    switch (alt182) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:875:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )?
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:875:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:875:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )* ( whitespace )? softbreak
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:875:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) ) )*
                            loop177:
                            do {
                                int alt177=4;
                                int LA177_0 = input.LA(1);

                                if ( (LA177_0==WHITESPACE) ) {
                                    int LA177_1 = input.LA(2);

                                    if ( (synpred28_Novelang()) ) {
                                        alt177=1;
                                    }
                                    else if ( (synpred29_Novelang()) ) {
                                        alt177=2;
                                    }
                                    else if ( (synpred30_Novelang()) ) {
                                        alt177=3;
                                    }


                                }
                                else if ( (LA177_0==SOFTBREAK) ) {
                                    int LA177_2 = input.LA(2);

                                    if ( (synpred28_Novelang()) ) {
                                        alt177=1;
                                    }
                                    else if ( (synpred29_Novelang()) ) {
                                        alt177=2;
                                    }
                                    else if ( (synpred30_Novelang()) ) {
                                        alt177=3;
                                    }


                                }


                                switch (alt177) {
                            	case 1 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:876:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:876:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:876:15: ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:876:48: ( ( whitespace )? softbreak url )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:876:50: ( whitespace )? softbreak url
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:876:50: ( whitespace )?
                            	    int alt171=2;
                            	    int LA171_0 = input.LA(1);

                            	    if ( (LA171_0==WHITESPACE) ) {
                            	        alt171=1;
                            	    }
                            	    switch (alt171) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:876:50: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7775);
                            	            whitespace301=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace301.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7778);
                            	    softbreak302=softbreak();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak302.getTree());
                            	    pushFollow(FOLLOW_url_in_spreadBlockBodyNoEmphasis7780);
                            	    url303=url();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, url303.getTree());

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:878:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:878:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:878:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:879:19: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:879:21: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:879:21: ( whitespace )?
                            	    int alt172=2;
                            	    int LA172_0 = input.LA(1);

                            	    if ( (LA172_0==WHITESPACE) ) {
                            	        alt172=1;
                            	    }
                            	    switch (alt172) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:879:21: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7848);
                            	            whitespace304=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace304.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7851);
                            	    softbreak305=softbreak();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak305.getTree());
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:879:43: ( whitespace )?
                            	    int alt173=2;
                            	    int LA173_0 = input.LA(1);

                            	    if ( (LA173_0==WHITESPACE) ) {
                            	        alt173=1;
                            	    }
                            	    switch (alt173) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:879:43: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7853);
                            	            whitespace306=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace306.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_smallDashedListItem_in_spreadBlockBodyNoEmphasis7856);
                            	    smallDashedListItem307=smallDashedListItem();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, smallDashedListItem307.getTree());

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:881:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:881:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ) )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:882:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:887:19: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:888:19: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )*
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:888:19: ( whitespace )?
                            	    int alt174=2;
                            	    int LA174_0 = input.LA(1);

                            	    if ( (LA174_0==WHITESPACE) ) {
                            	        alt174=1;
                            	    }
                            	    switch (alt174) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:888:19: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis8036);
                            	            whitespace308=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace308.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis8039);
                            	    softbreak309=softbreak();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak309.getTree());
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:888:41: ( whitespace )?
                            	    int alt175=2;
                            	    int LA175_0 = input.LA(1);

                            	    if ( (LA175_0==WHITESPACE) ) {
                            	        alt175=1;
                            	    }
                            	    switch (alt175) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:888:41: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis8041);
                            	            whitespace310=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace310.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis8044);
                            	    mixedDelimitedSpreadBlockNoEmphasis311=mixedDelimitedSpreadBlockNoEmphasis();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoEmphasis311.getTree());
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:889:19: ( whitespace mixedDelimitedSpreadBlockNoEmphasis )*
                            	    loop176:
                            	    do {
                            	        int alt176=2;
                            	        int LA176_0 = input.LA(1);

                            	        if ( (LA176_0==WHITESPACE) ) {
                            	            int LA176_1 = input.LA(2);

                            	            if ( (LA176_1==LEFT_PARENTHESIS||LA176_1==LEFT_SQUARE_BRACKET||LA176_1==DOUBLE_QUOTE||LA176_1==HYPHEN_MINUS||(LA176_1>=GRAVE_ACCENT && LA176_1<=LATIN_SMALL_LETTER_S)||LA176_1==TILDE||(LA176_1>=LATIN_SMALL_LETTER_N && LA176_1<=LATIN_SMALL_LETTER_V)||LA176_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA176_1>=LATIN_SMALL_LETTER_R && LA176_1<=LATIN_SMALL_LETTER_M)||(LA176_1>=DIGIT_0 && LA176_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            	                alt176=1;
                            	            }


                            	        }


                            	        switch (alt176) {
                            	    	case 1 :
                            	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:889:21: whitespace mixedDelimitedSpreadBlockNoEmphasis
                            	    	    {
                            	    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis8067);
                            	    	    whitespace312=whitespace();

                            	    	    state._fsp--;
                            	    	    if (state.failed) return retval;
                            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace312.getTree());
                            	    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis8069);
                            	    	    mixedDelimitedSpreadBlockNoEmphasis313=mixedDelimitedSpreadBlockNoEmphasis();

                            	    	    state._fsp--;
                            	    	    if (state.failed) return retval;
                            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoEmphasis313.getTree());

                            	    	    }
                            	    	    break;

                            	    	default :
                            	    	    break loop176;
                            	        }
                            	    } while (true);


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop177;
                                }
                            } while (true);

                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:893:10: ( whitespace )?
                            int alt178=2;
                            int LA178_0 = input.LA(1);

                            if ( (LA178_0==WHITESPACE) ) {
                                alt178=1;
                            }
                            switch (alt178) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:893:10: whitespace
                                    {
                                    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis8148);
                                    whitespace314=whitespace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace314.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis8151);
                            softbreak315=softbreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak315.getTree());

                            }

                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:896:5: ( ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* )?
                            int alt181=2;
                            int LA181_0 = input.LA(1);

                            if ( (LA181_0==WHITESPACE) ) {
                                int LA181_1 = input.LA(2);

                                if ( (LA181_1==LEFT_PARENTHESIS||LA181_1==LEFT_SQUARE_BRACKET||LA181_1==DOUBLE_QUOTE||LA181_1==HYPHEN_MINUS||(LA181_1>=GRAVE_ACCENT && LA181_1<=LATIN_SMALL_LETTER_S)||LA181_1==TILDE||(LA181_1>=LATIN_SMALL_LETTER_N && LA181_1<=LATIN_SMALL_LETTER_V)||LA181_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA181_1>=LATIN_SMALL_LETTER_R && LA181_1<=LATIN_SMALL_LETTER_M)||(LA181_1>=DIGIT_0 && LA181_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                    alt181=1;
                                }
                            }
                            else if ( (LA181_0==LEFT_PARENTHESIS||LA181_0==LEFT_SQUARE_BRACKET||LA181_0==DOUBLE_QUOTE||LA181_0==HYPHEN_MINUS||(LA181_0>=GRAVE_ACCENT && LA181_0<=LATIN_SMALL_LETTER_S)||LA181_0==TILDE||(LA181_0>=LATIN_SMALL_LETTER_N && LA181_0<=LATIN_SMALL_LETTER_V)||LA181_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA181_0>=LATIN_SMALL_LETTER_R && LA181_0<=LATIN_SMALL_LETTER_M)||(LA181_0>=DIGIT_0 && LA181_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt181=1;
                            }
                            switch (alt181) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:896:7: ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )*
                                    {
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:896:7: ( whitespace )?
                                    int alt179=2;
                                    int LA179_0 = input.LA(1);

                                    if ( (LA179_0==WHITESPACE) ) {
                                        alt179=1;
                                    }
                                    switch (alt179) {
                                        case 1 :
                                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:896:7: whitespace
                                            {
                                            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis8179);
                                            whitespace316=whitespace();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace316.getTree());

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis8182);
                                    mixedDelimitedSpreadBlockNoEmphasis317=mixedDelimitedSpreadBlockNoEmphasis();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoEmphasis317.getTree());
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:897:7: ( whitespace mixedDelimitedSpreadBlockNoEmphasis )*
                                    loop180:
                                    do {
                                        int alt180=2;
                                        int LA180_0 = input.LA(1);

                                        if ( (LA180_0==WHITESPACE) ) {
                                            int LA180_1 = input.LA(2);

                                            if ( (LA180_1==LEFT_PARENTHESIS||LA180_1==LEFT_SQUARE_BRACKET||LA180_1==DOUBLE_QUOTE||LA180_1==HYPHEN_MINUS||(LA180_1>=GRAVE_ACCENT && LA180_1<=LATIN_SMALL_LETTER_S)||LA180_1==TILDE||(LA180_1>=LATIN_SMALL_LETTER_N && LA180_1<=LATIN_SMALL_LETTER_V)||LA180_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA180_1>=LATIN_SMALL_LETTER_R && LA180_1<=LATIN_SMALL_LETTER_M)||(LA180_1>=DIGIT_0 && LA180_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                                alt180=1;
                                            }


                                        }


                                        switch (alt180) {
                                    	case 1 :
                                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:897:9: whitespace mixedDelimitedSpreadBlockNoEmphasis
                                    	    {
                                    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis8193);
                                    	    whitespace318=whitespace();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace318.getTree());
                                    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis8195);
                                    	    mixedDelimitedSpreadBlockNoEmphasis319=mixedDelimitedSpreadBlockNoEmphasis();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoEmphasis319.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop180;
                                        }
                                    } while (true);


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "spreadBlockBodyNoEmphasis"

    public static class mixedDelimitedSpreadBlockNoEmphasis_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixedDelimitedSpreadBlockNoEmphasis"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:905:1: mixedDelimitedSpreadBlockNoEmphasis : ( ( word ( ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) | blockAfterTilde whitespace );
    public final NovelangParser.mixedDelimitedSpreadBlockNoEmphasis_return mixedDelimitedSpreadBlockNoEmphasis() throws RecognitionException {
        NovelangParser.mixedDelimitedSpreadBlockNoEmphasis_return retval = new NovelangParser.mixedDelimitedSpreadBlockNoEmphasis_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.word_return word320 = null;

        NovelangParser.punctuationSign_return punctuationSign321 = null;

        NovelangParser.delimitedSpreadblockNoEmphasis_return delimitedSpreadblockNoEmphasis322 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral323 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral324 = null;

        NovelangParser.word_return word325 = null;

        NovelangParser.punctuationSign_return punctuationSign326 = null;

        NovelangParser.delimitedSpreadblockNoEmphasis_return delimitedSpreadblockNoEmphasis327 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral328 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral329 = null;

        NovelangParser.word_return word330 = null;

        NovelangParser.punctuationSign_return punctuationSign331 = null;

        NovelangParser.delimitedSpreadblockNoEmphasis_return delimitedSpreadblockNoEmphasis332 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral333 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral334 = null;

        NovelangParser.word_return word335 = null;

        NovelangParser.blockAfterTilde_return blockAfterTilde336 = null;

        NovelangParser.whitespace_return whitespace337 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:909:3: ( ( word ( ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) | blockAfterTilde whitespace )
            int alt192=3;
            switch ( input.LA(1) ) {
            case LATIN_SMALL_LETTER_F:
            case LATIN_SMALL_LETTER_I:
            case LATIN_SMALL_LETTER_L:
            case LATIN_SMALL_LETTER_E:
            case LATIN_SMALL_LETTER_H:
            case LATIN_SMALL_LETTER_T:
            case LATIN_SMALL_LETTER_P:
            case LATIN_SMALL_LETTER_S:
            case LATIN_SMALL_LETTER_N:
            case LATIN_SMALL_LETTER_G:
            case LATIN_SMALL_LETTER_J:
            case LATIN_SMALL_LETTER_V:
            case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
            case LATIN_SMALL_LETTER_R:
            case LATIN_SMALL_LETTER_C:
            case LATIN_SMALL_LETTER_U:
            case LATIN_SMALL_LETTER_O:
            case LATIN_SMALL_LETTER_A:
            case LATIN_SMALL_LETTER_D:
            case LATIN_SMALL_LETTER_B:
            case LATIN_SMALL_LETTER_Y:
            case LATIN_SMALL_LETTER_M:
            case DIGIT_0:
            case DIGIT_1:
            case DIGIT_2:
            case DIGIT_3:
            case DIGIT_4:
            case DIGIT_5:
            case DIGIT_6:
            case DIGIT_7:
            case DIGIT_8:
            case DIGIT_9:
            case LATIN_CAPITAL_LETTER_A:
            case LATIN_CAPITAL_LETTER_B:
            case LATIN_CAPITAL_LETTER_C:
            case LATIN_CAPITAL_LETTER_D:
            case LATIN_CAPITAL_LETTER_E:
            case LATIN_CAPITAL_LETTER_F:
            case LATIN_SMALL_LETTER_K:
            case LATIN_SMALL_LETTER_Q:
            case LATIN_SMALL_LETTER_W:
            case LATIN_SMALL_LETTER_X:
            case LATIN_SMALL_LETTER_Z:
            case LATIN_CAPITAL_LETTER_G:
            case LATIN_CAPITAL_LETTER_H:
            case LATIN_CAPITAL_LETTER_I:
            case LATIN_CAPITAL_LETTER_J:
            case LATIN_CAPITAL_LETTER_K:
            case LATIN_CAPITAL_LETTER_L:
            case LATIN_CAPITAL_LETTER_M:
            case LATIN_CAPITAL_LETTER_N:
            case LATIN_CAPITAL_LETTER_O:
            case LATIN_CAPITAL_LETTER_P:
            case LATIN_CAPITAL_LETTER_Q:
            case LATIN_CAPITAL_LETTER_R:
            case LATIN_CAPITAL_LETTER_S:
            case LATIN_CAPITAL_LETTER_T:
            case LATIN_CAPITAL_LETTER_U:
            case LATIN_CAPITAL_LETTER_V:
            case LATIN_CAPITAL_LETTER_W:
            case LATIN_CAPITAL_LETTER_X:
            case LATIN_CAPITAL_LETTER_Y:
            case LATIN_CAPITAL_LETTER_Z:
            case LATIN_SMALL_LETTER_A_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
            case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_A_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
            case LATIN_SMALL_LETTER_AE:
            case LATIN_CAPITAL_LETTER_AE:
            case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
            case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
            case LATIN_SMALL_LETTER_E_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
            case LATIN_SMALL_LETTER_E_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
            case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_I_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
            case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_O_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
            case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
            case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
            case LATIN_SMALL_LETTER_U_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
            case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_U_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
            case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
            case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
            case LATIN_SMALL_LIGATURE_OE:
            case LATIN_CAPITAL_LIGATURE_OE:
                {
                alt192=1;
                }
                break;
            case LEFT_PARENTHESIS:
            case LEFT_SQUARE_BRACKET:
            case DOUBLE_QUOTE:
            case HYPHEN_MINUS:
            case GRAVE_ACCENT:
            case FULL_STOP:
            case COMMA:
            case QUESTION_MARK:
            case EXCLAMATION_MARK:
            case SEMICOLON:
            case COLON:
            case APOSTROPHE:
                {
                alt192=2;
                }
                break;
            case TILDE:
                {
                alt192=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;
            }

            switch (alt192) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:909:5: ( word ( ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:909:5: ( word ( ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:909:7: word ( ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    {
                    pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlockNoEmphasis8250);
                    word320=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, word320.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:910:7: ( ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    loop186:
                    do {
                        int alt186=2;
                        int LA186_0 = input.LA(1);

                        if ( (LA186_0==LEFT_PARENTHESIS||LA186_0==LEFT_SQUARE_BRACKET||LA186_0==DOUBLE_QUOTE||LA186_0==HYPHEN_MINUS||(LA186_0>=GRAVE_ACCENT && LA186_0<=APOSTROPHE)) ) {
                            alt186=1;
                        }


                        switch (alt186) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:910:9: ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( word )?
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:910:9: ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral )
                    	    int alt184=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt184=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case DOUBLE_QUOTE:
                    	    case HYPHEN_MINUS:
                    	        {
                    	        alt184=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA184_3 = input.LA(2);

                    	        if ( (LA184_3==GRAVE_ACCENT) ) {
                    	            alt184=4;
                    	        }
                    	        else if ( ((LA184_3>=COMMERCIAL_AT && LA184_3<=WHITESPACE)||(LA184_3>=VERTICAL_LINE && LA184_3<=GREATER_THAN_SIGN)||(LA184_3>=FULL_STOP && LA184_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA184_3>=LATIN_SMALL_LETTER_R && LA184_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt184=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 184, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 184, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt184) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:910:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoEmphasis8265);
                    	            punctuationSign321=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign321.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:911:13: delimitedSpreadblockNoEmphasis
                    	            {
                    	            pushFollow(FOLLOW_delimitedSpreadblockNoEmphasis_in_mixedDelimitedSpreadBlockNoEmphasis8280);
                    	            delimitedSpreadblockNoEmphasis322=delimitedSpreadblockNoEmphasis();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedSpreadblockNoEmphasis322.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:912:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoEmphasis8295);
                    	            softInlineLiteral323=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral323.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:913:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoEmphasis8310);
                    	            hardInlineLiteral324=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral324.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:914:9: ( word )?
                    	    int alt185=2;
                    	    int LA185_0 = input.LA(1);

                    	    if ( ((LA185_0>=LATIN_SMALL_LETTER_F && LA185_0<=LATIN_SMALL_LETTER_S)||(LA185_0>=LATIN_SMALL_LETTER_N && LA185_0<=LATIN_SMALL_LETTER_V)||LA185_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA185_0>=LATIN_SMALL_LETTER_R && LA185_0<=LATIN_SMALL_LETTER_M)||(LA185_0>=DIGIT_0 && LA185_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt185=1;
                    	    }
                    	    switch (alt185) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:914:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlockNoEmphasis8321);
                    	            word325=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word325.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop186;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:916:5: ( ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:916:5: ( ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:916:7: ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) )* ( word )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:916:7: ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral )
                    int alt187=4;
                    switch ( input.LA(1) ) {
                    case FULL_STOP:
                    case COMMA:
                    case QUESTION_MARK:
                    case EXCLAMATION_MARK:
                    case SEMICOLON:
                    case COLON:
                    case APOSTROPHE:
                        {
                        alt187=1;
                        }
                        break;
                    case LEFT_PARENTHESIS:
                    case LEFT_SQUARE_BRACKET:
                    case DOUBLE_QUOTE:
                    case HYPHEN_MINUS:
                        {
                        alt187=2;
                        }
                        break;
                    case GRAVE_ACCENT:
                        {
                        int LA187_3 = input.LA(2);

                        if ( (LA187_3==GRAVE_ACCENT) ) {
                            alt187=4;
                        }
                        else if ( ((LA187_3>=COMMERCIAL_AT && LA187_3<=WHITESPACE)||(LA187_3>=VERTICAL_LINE && LA187_3<=GREATER_THAN_SIGN)||(LA187_3>=FULL_STOP && LA187_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA187_3>=LATIN_SMALL_LETTER_R && LA187_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt187=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 187, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 187, 0, input);

                        throw nvae;
                    }

                    switch (alt187) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:916:11: punctuationSign
                            {
                            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoEmphasis8343);
                            punctuationSign326=punctuationSign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign326.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:917:11: delimitedSpreadblockNoEmphasis
                            {
                            pushFollow(FOLLOW_delimitedSpreadblockNoEmphasis_in_mixedDelimitedSpreadBlockNoEmphasis8356);
                            delimitedSpreadblockNoEmphasis327=delimitedSpreadblockNoEmphasis();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedSpreadblockNoEmphasis327.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:918:11: softInlineLiteral
                            {
                            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoEmphasis8369);
                            softInlineLiteral328=softInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral328.getTree());

                            }
                            break;
                        case 4 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:919:11: hardInlineLiteral
                            {
                            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoEmphasis8382);
                            hardInlineLiteral329=hardInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral329.getTree());

                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:921:7: ( ( word )? ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) )*
                    loop190:
                    do {
                        int alt190=2;
                        alt190 = dfa190.predict(input);
                        switch (alt190) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:921:9: ( word )? ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:921:9: ( word )?
                    	    int alt188=2;
                    	    int LA188_0 = input.LA(1);

                    	    if ( ((LA188_0>=LATIN_SMALL_LETTER_F && LA188_0<=LATIN_SMALL_LETTER_S)||(LA188_0>=LATIN_SMALL_LETTER_N && LA188_0<=LATIN_SMALL_LETTER_V)||LA188_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA188_0>=LATIN_SMALL_LETTER_R && LA188_0<=LATIN_SMALL_LETTER_M)||(LA188_0>=DIGIT_0 && LA188_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt188=1;
                    	    }
                    	    switch (alt188) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:921:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlockNoEmphasis8401);
                    	            word330=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word330.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:922:9: ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral )
                    	    int alt189=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt189=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case DOUBLE_QUOTE:
                    	    case HYPHEN_MINUS:
                    	        {
                    	        alt189=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA189_3 = input.LA(2);

                    	        if ( (LA189_3==GRAVE_ACCENT) ) {
                    	            alt189=4;
                    	        }
                    	        else if ( ((LA189_3>=COMMERCIAL_AT && LA189_3<=WHITESPACE)||(LA189_3>=VERTICAL_LINE && LA189_3<=GREATER_THAN_SIGN)||(LA189_3>=FULL_STOP && LA189_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA189_3>=LATIN_SMALL_LETTER_R && LA189_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt189=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 189, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 189, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt189) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:922:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoEmphasis8417);
                    	            punctuationSign331=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign331.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:923:13: delimitedSpreadblockNoEmphasis
                    	            {
                    	            pushFollow(FOLLOW_delimitedSpreadblockNoEmphasis_in_mixedDelimitedSpreadBlockNoEmphasis8432);
                    	            delimitedSpreadblockNoEmphasis332=delimitedSpreadblockNoEmphasis();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedSpreadblockNoEmphasis332.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:924:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoEmphasis8447);
                    	            softInlineLiteral333=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral333.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:925:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoEmphasis8462);
                    	            hardInlineLiteral334=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral334.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop190;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:928:7: ( word )?
                    int alt191=2;
                    int LA191_0 = input.LA(1);

                    if ( ((LA191_0>=LATIN_SMALL_LETTER_F && LA191_0<=LATIN_SMALL_LETTER_S)||(LA191_0>=LATIN_SMALL_LETTER_N && LA191_0<=LATIN_SMALL_LETTER_V)||LA191_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA191_0>=LATIN_SMALL_LETTER_R && LA191_0<=LATIN_SMALL_LETTER_M)||(LA191_0>=DIGIT_0 && LA191_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt191=1;
                    }
                    switch (alt191) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:928:7: word
                            {
                            pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlockNoEmphasis8504);
                            word335=word();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, word335.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:930:5: blockAfterTilde whitespace
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_blockAfterTilde_in_mixedDelimitedSpreadBlockNoEmphasis8517);
                    blockAfterTilde336=blockAfterTilde();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockAfterTilde336.getTree());
                    pushFollow(FOLLOW_whitespace_in_mixedDelimitedSpreadBlockNoEmphasis8520);
                    whitespace337=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace337.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixedDelimitedSpreadBlockNoEmphasis"

    public static class emphasizedMonoblock_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "emphasizedMonoblock"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:935:1: emphasizedMonoblock : ( SOLIDUS SOLIDUS ( whitespace )? (b+= monoblockBodyNoEmphasis ( whitespace )? )? SOLIDUS SOLIDUS ) -> ^( BLOCK_INSIDE_SOLIDUS_PAIRS ( $b)+ ) ;
    public final NovelangParser.emphasizedMonoblock_return emphasizedMonoblock() throws RecognitionException {
        NovelangParser.emphasizedMonoblock_return retval = new NovelangParser.emphasizedMonoblock_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SOLIDUS338=null;
        Token SOLIDUS339=null;
        Token SOLIDUS342=null;
        Token SOLIDUS343=null;
        List list_b=null;
        NovelangParser.whitespace_return whitespace340 = null;

        NovelangParser.whitespace_return whitespace341 = null;

        RuleReturnScope b = null;
        Object SOLIDUS338_tree=null;
        Object SOLIDUS339_tree=null;
        Object SOLIDUS342_tree=null;
        Object SOLIDUS343_tree=null;
        RewriteRuleTokenStream stream_SOLIDUS=new RewriteRuleTokenStream(adaptor,"token SOLIDUS");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        RewriteRuleSubtreeStream stream_monoblockBodyNoEmphasis=new RewriteRuleSubtreeStream(adaptor,"rule monoblockBodyNoEmphasis");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:936:2: ( ( SOLIDUS SOLIDUS ( whitespace )? (b+= monoblockBodyNoEmphasis ( whitespace )? )? SOLIDUS SOLIDUS ) -> ^( BLOCK_INSIDE_SOLIDUS_PAIRS ( $b)+ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:936:4: ( SOLIDUS SOLIDUS ( whitespace )? (b+= monoblockBodyNoEmphasis ( whitespace )? )? SOLIDUS SOLIDUS )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:936:4: ( SOLIDUS SOLIDUS ( whitespace )? (b+= monoblockBodyNoEmphasis ( whitespace )? )? SOLIDUS SOLIDUS )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:937:7: SOLIDUS SOLIDUS ( whitespace )? (b+= monoblockBodyNoEmphasis ( whitespace )? )? SOLIDUS SOLIDUS
            {
            if ( state.backtracking==0 ) {
               delegate.startDelimitedText( BlockDelimiter.SOLIDUS_PAIRS, input.LT( 1 ) ) ; 
            }
            SOLIDUS338=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_emphasizedMonoblock8552); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SOLIDUS.add(SOLIDUS338);

            SOLIDUS339=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_emphasizedMonoblock8554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SOLIDUS.add(SOLIDUS339);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:938:22: ( whitespace )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==WHITESPACE) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:938:22: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_emphasizedMonoblock8556);
                    whitespace340=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whitespace.add(whitespace340.getTree());

                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:939:6: (b+= monoblockBodyNoEmphasis ( whitespace )? )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==LEFT_PARENTHESIS||LA195_0==LEFT_SQUARE_BRACKET||LA195_0==DOUBLE_QUOTE||LA195_0==HYPHEN_MINUS||(LA195_0>=GRAVE_ACCENT && LA195_0<=LATIN_SMALL_LETTER_S)||(LA195_0>=LATIN_SMALL_LETTER_N && LA195_0<=LATIN_SMALL_LETTER_V)||LA195_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA195_0>=LATIN_SMALL_LETTER_R && LA195_0<=LATIN_SMALL_LETTER_M)||(LA195_0>=DIGIT_0 && LA195_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:939:8: b+= monoblockBodyNoEmphasis ( whitespace )?
                    {
                    pushFollow(FOLLOW_monoblockBodyNoEmphasis_in_emphasizedMonoblock8570);
                    b=monoblockBodyNoEmphasis();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monoblockBodyNoEmphasis.add(b.getTree());
                    if (list_b==null) list_b=new ArrayList();
                    list_b.add(b.getTree());

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:940:8: ( whitespace )?
                    int alt194=2;
                    int LA194_0 = input.LA(1);

                    if ( (LA194_0==WHITESPACE) ) {
                        alt194=1;
                    }
                    switch (alt194) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:940:8: whitespace
                            {
                            pushFollow(FOLLOW_whitespace_in_emphasizedMonoblock8580);
                            whitespace341=whitespace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whitespace.add(whitespace341.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               delegate.reachEndDelimiter( BlockDelimiter.SOLIDUS_PAIRS ) ; 
            }
            SOLIDUS342=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_emphasizedMonoblock8604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SOLIDUS.add(SOLIDUS342);

            SOLIDUS343=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_emphasizedMonoblock8606); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SOLIDUS.add(SOLIDUS343);

            if ( state.backtracking==0 ) {
               delegate.endDelimitedText( BlockDelimiter.SOLIDUS_PAIRS ) ; 
            }

            }



            // AST REWRITE
            // elements: b
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: b
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (Object)adaptor.nil();
            // 945:6: -> ^( BLOCK_INSIDE_SOLIDUS_PAIRS ( $b)+ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:945:9: ^( BLOCK_INSIDE_SOLIDUS_PAIRS ( $b)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK_INSIDE_SOLIDUS_PAIRS, "BLOCK_INSIDE_SOLIDUS_PAIRS"), root_1);

                if ( !(stream_b.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( MismatchedTokenException mte ) {

                  delegate.reportMissingDelimiter( BlockDelimiter.SOLIDUS_PAIRS, mte ) ; 
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "emphasizedMonoblock"

    public static class emphasizedMonoblockNoSeparator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "emphasizedMonoblockNoSeparator"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:951:1: emphasizedMonoblockNoSeparator : ( SOLIDUS SOLIDUS (b+= monoblockBodyNoEmphasisNoSeparator )? SOLIDUS SOLIDUS ) -> ^( BLOCK_INSIDE_SOLIDUS_PAIRS ( $b)+ ) ;
    public final NovelangParser.emphasizedMonoblockNoSeparator_return emphasizedMonoblockNoSeparator() throws RecognitionException {
        NovelangParser.emphasizedMonoblockNoSeparator_return retval = new NovelangParser.emphasizedMonoblockNoSeparator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SOLIDUS344=null;
        Token SOLIDUS345=null;
        Token SOLIDUS346=null;
        Token SOLIDUS347=null;
        List list_b=null;
        RuleReturnScope b = null;
        Object SOLIDUS344_tree=null;
        Object SOLIDUS345_tree=null;
        Object SOLIDUS346_tree=null;
        Object SOLIDUS347_tree=null;
        RewriteRuleTokenStream stream_SOLIDUS=new RewriteRuleTokenStream(adaptor,"token SOLIDUS");
        RewriteRuleSubtreeStream stream_monoblockBodyNoEmphasisNoSeparator=new RewriteRuleSubtreeStream(adaptor,"rule monoblockBodyNoEmphasisNoSeparator");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:952:2: ( ( SOLIDUS SOLIDUS (b+= monoblockBodyNoEmphasisNoSeparator )? SOLIDUS SOLIDUS ) -> ^( BLOCK_INSIDE_SOLIDUS_PAIRS ( $b)+ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:952:4: ( SOLIDUS SOLIDUS (b+= monoblockBodyNoEmphasisNoSeparator )? SOLIDUS SOLIDUS )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:952:4: ( SOLIDUS SOLIDUS (b+= monoblockBodyNoEmphasisNoSeparator )? SOLIDUS SOLIDUS )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:953:7: SOLIDUS SOLIDUS (b+= monoblockBodyNoEmphasisNoSeparator )? SOLIDUS SOLIDUS
            {
            if ( state.backtracking==0 ) {
               delegate.startDelimitedText( BlockDelimiter.SOLIDUS_PAIRS, input.LT( 1 ) ) ; 
            }
            SOLIDUS344=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_emphasizedMonoblockNoSeparator8669); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SOLIDUS.add(SOLIDUS344);

            SOLIDUS345=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_emphasizedMonoblockNoSeparator8671); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SOLIDUS.add(SOLIDUS345);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:955:6: (b+= monoblockBodyNoEmphasisNoSeparator )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==LEFT_PARENTHESIS||(LA196_0>=GRAVE_ACCENT && LA196_0<=LATIN_SMALL_LETTER_S)||(LA196_0>=LATIN_SMALL_LETTER_N && LA196_0<=LATIN_SMALL_LETTER_V)||LA196_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA196_0>=LATIN_SMALL_LETTER_R && LA196_0<=LATIN_SMALL_LETTER_M)||(LA196_0>=DIGIT_0 && LA196_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:955:8: b+= monoblockBodyNoEmphasisNoSeparator
                    {
                    pushFollow(FOLLOW_monoblockBodyNoEmphasisNoSeparator_in_emphasizedMonoblockNoSeparator8685);
                    b=monoblockBodyNoEmphasisNoSeparator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monoblockBodyNoEmphasisNoSeparator.add(b.getTree());
                    if (list_b==null) list_b=new ArrayList();
                    list_b.add(b.getTree());


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               delegate.reachEndDelimiter( BlockDelimiter.SOLIDUS_PAIRS ) ; 
            }
            SOLIDUS346=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_emphasizedMonoblockNoSeparator8702); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SOLIDUS.add(SOLIDUS346);

            SOLIDUS347=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_emphasizedMonoblockNoSeparator8704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SOLIDUS.add(SOLIDUS347);

            if ( state.backtracking==0 ) {
               delegate.endDelimitedText( BlockDelimiter.SOLIDUS_PAIRS ) ; 
            }

            }



            // AST REWRITE
            // elements: b
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: b
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (Object)adaptor.nil();
            // 959:6: -> ^( BLOCK_INSIDE_SOLIDUS_PAIRS ( $b)+ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:959:9: ^( BLOCK_INSIDE_SOLIDUS_PAIRS ( $b)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK_INSIDE_SOLIDUS_PAIRS, "BLOCK_INSIDE_SOLIDUS_PAIRS"), root_1);

                if ( !(stream_b.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( MismatchedTokenException mte ) {

                  delegate.reportMissingDelimiter( BlockDelimiter.SOLIDUS_PAIRS, mte ) ; 
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "emphasizedMonoblockNoSeparator"

    public static class delimitedMonoblockNoEmphasis_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delimitedMonoblockNoEmphasis"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:965:1: delimitedMonoblockNoEmphasis : ( parenthesizedMonoblock | squarebracketsMonoblock | doubleQuotedMonoblock | hyphenPairMonoblock );
    public final NovelangParser.delimitedMonoblockNoEmphasis_return delimitedMonoblockNoEmphasis() throws RecognitionException {
        NovelangParser.delimitedMonoblockNoEmphasis_return retval = new NovelangParser.delimitedMonoblockNoEmphasis_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.parenthesizedMonoblock_return parenthesizedMonoblock348 = null;

        NovelangParser.squarebracketsMonoblock_return squarebracketsMonoblock349 = null;

        NovelangParser.doubleQuotedMonoblock_return doubleQuotedMonoblock350 = null;

        NovelangParser.hyphenPairMonoblock_return hyphenPairMonoblock351 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:966:3: ( parenthesizedMonoblock | squarebracketsMonoblock | doubleQuotedMonoblock | hyphenPairMonoblock )
            int alt197=4;
            switch ( input.LA(1) ) {
            case LEFT_PARENTHESIS:
                {
                alt197=1;
                }
                break;
            case LEFT_SQUARE_BRACKET:
                {
                alt197=2;
                }
                break;
            case DOUBLE_QUOTE:
                {
                alt197=3;
                }
                break;
            case HYPHEN_MINUS:
                {
                alt197=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;
            }

            switch (alt197) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:966:5: parenthesizedMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedMonoblock_in_delimitedMonoblockNoEmphasis8752);
                    parenthesizedMonoblock348=parenthesizedMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedMonoblock348.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:967:5: squarebracketsMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squarebracketsMonoblock_in_delimitedMonoblockNoEmphasis8758);
                    squarebracketsMonoblock349=squarebracketsMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squarebracketsMonoblock349.getTree());

                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:968:5: doubleQuotedMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_doubleQuotedMonoblock_in_delimitedMonoblockNoEmphasis8764);
                    doubleQuotedMonoblock350=doubleQuotedMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, doubleQuotedMonoblock350.getTree());

                    }
                    break;
                case 4 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:969:5: hyphenPairMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_hyphenPairMonoblock_in_delimitedMonoblockNoEmphasis8770);
                    hyphenPairMonoblock351=hyphenPairMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hyphenPairMonoblock351.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "delimitedMonoblockNoEmphasis"

    public static class delimitedMonoblockNoEmphasisNoSeparator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delimitedMonoblockNoEmphasisNoSeparator"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:972:1: delimitedMonoblockNoEmphasisNoSeparator : parenthesizedMonoblockNoSeparator ;
    public final NovelangParser.delimitedMonoblockNoEmphasisNoSeparator_return delimitedMonoblockNoEmphasisNoSeparator() throws RecognitionException {
        NovelangParser.delimitedMonoblockNoEmphasisNoSeparator_return retval = new NovelangParser.delimitedMonoblockNoEmphasisNoSeparator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.parenthesizedMonoblockNoSeparator_return parenthesizedMonoblockNoSeparator352 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:973:3: ( parenthesizedMonoblockNoSeparator )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:973:5: parenthesizedMonoblockNoSeparator
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_parenthesizedMonoblockNoSeparator_in_delimitedMonoblockNoEmphasisNoSeparator8783);
            parenthesizedMonoblockNoSeparator352=parenthesizedMonoblockNoSeparator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedMonoblockNoSeparator352.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "delimitedMonoblockNoEmphasisNoSeparator"

    public static class monoblockBodyNoEmphasis_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "monoblockBodyNoEmphasis"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:976:1: monoblockBodyNoEmphasis : ( mixedDelimitedMonoblockNoEmphasis ( whitespace mixedDelimitedMonoblockNoEmphasis )* ) ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedMonoblockNoEmphasis ( whitespace mixedDelimitedMonoblockNoEmphasis )* )* ;
    public final NovelangParser.monoblockBodyNoEmphasis_return monoblockBodyNoEmphasis() throws RecognitionException {
        NovelangParser.monoblockBodyNoEmphasis_return retval = new NovelangParser.monoblockBodyNoEmphasis_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.mixedDelimitedMonoblockNoEmphasis_return mixedDelimitedMonoblockNoEmphasis353 = null;

        NovelangParser.whitespace_return whitespace354 = null;

        NovelangParser.mixedDelimitedMonoblockNoEmphasis_return mixedDelimitedMonoblockNoEmphasis355 = null;

        NovelangParser.whitespace_return whitespace356 = null;

        NovelangParser.softbreak_return softbreak357 = null;

        NovelangParser.whitespace_return whitespace358 = null;

        NovelangParser.mixedDelimitedMonoblockNoEmphasis_return mixedDelimitedMonoblockNoEmphasis359 = null;

        NovelangParser.whitespace_return whitespace360 = null;

        NovelangParser.mixedDelimitedMonoblockNoEmphasis_return mixedDelimitedMonoblockNoEmphasis361 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:977:3: ( ( mixedDelimitedMonoblockNoEmphasis ( whitespace mixedDelimitedMonoblockNoEmphasis )* ) ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedMonoblockNoEmphasis ( whitespace mixedDelimitedMonoblockNoEmphasis )* )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:977:5: ( mixedDelimitedMonoblockNoEmphasis ( whitespace mixedDelimitedMonoblockNoEmphasis )* ) ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedMonoblockNoEmphasis ( whitespace mixedDelimitedMonoblockNoEmphasis )* )*
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:977:5: ( mixedDelimitedMonoblockNoEmphasis ( whitespace mixedDelimitedMonoblockNoEmphasis )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:977:7: mixedDelimitedMonoblockNoEmphasis ( whitespace mixedDelimitedMonoblockNoEmphasis )*
            {
            pushFollow(FOLLOW_mixedDelimitedMonoblockNoEmphasis_in_monoblockBodyNoEmphasis8798);
            mixedDelimitedMonoblockNoEmphasis353=mixedDelimitedMonoblockNoEmphasis();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedMonoblockNoEmphasis353.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:978:7: ( whitespace mixedDelimitedMonoblockNoEmphasis )*
            loop198:
            do {
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==WHITESPACE) ) {
                    int LA198_1 = input.LA(2);

                    if ( (LA198_1==LEFT_PARENTHESIS||LA198_1==LEFT_SQUARE_BRACKET||LA198_1==DOUBLE_QUOTE||LA198_1==HYPHEN_MINUS||(LA198_1>=GRAVE_ACCENT && LA198_1<=LATIN_SMALL_LETTER_S)||(LA198_1>=LATIN_SMALL_LETTER_N && LA198_1<=LATIN_SMALL_LETTER_V)||LA198_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA198_1>=LATIN_SMALL_LETTER_R && LA198_1<=LATIN_SMALL_LETTER_M)||(LA198_1>=DIGIT_0 && LA198_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt198=1;
                    }


                }


                switch (alt198) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:978:9: whitespace mixedDelimitedMonoblockNoEmphasis
            	    {
            	    pushFollow(FOLLOW_whitespace_in_monoblockBodyNoEmphasis8808);
            	    whitespace354=whitespace();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace354.getTree());
            	    pushFollow(FOLLOW_mixedDelimitedMonoblockNoEmphasis_in_monoblockBodyNoEmphasis8810);
            	    mixedDelimitedMonoblockNoEmphasis355=mixedDelimitedMonoblockNoEmphasis();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedMonoblockNoEmphasis355.getTree());

            	    }
            	    break;

            	default :
            	    break loop198;
                }
            } while (true);


            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:980:5: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedMonoblockNoEmphasis ( whitespace mixedDelimitedMonoblockNoEmphasis )* )*
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==WHITESPACE) ) {
                    int LA202_1 = input.LA(2);

                    if ( (LA202_1==SOFTBREAK) ) {
                        alt202=1;
                    }


                }
                else if ( (LA202_0==SOFTBREAK) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:980:7: ( whitespace )? softbreak ( whitespace )? mixedDelimitedMonoblockNoEmphasis ( whitespace mixedDelimitedMonoblockNoEmphasis )*
            	    {
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:980:7: ( whitespace )?
            	    int alt199=2;
            	    int LA199_0 = input.LA(1);

            	    if ( (LA199_0==WHITESPACE) ) {
            	        alt199=1;
            	    }
            	    switch (alt199) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:980:7: whitespace
            	            {
            	            pushFollow(FOLLOW_whitespace_in_monoblockBodyNoEmphasis8827);
            	            whitespace356=whitespace();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace356.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_softbreak_in_monoblockBodyNoEmphasis8830);
            	    softbreak357=softbreak();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak357.getTree());
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:980:29: ( whitespace )?
            	    int alt200=2;
            	    int LA200_0 = input.LA(1);

            	    if ( (LA200_0==WHITESPACE) ) {
            	        alt200=1;
            	    }
            	    switch (alt200) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:980:29: whitespace
            	            {
            	            pushFollow(FOLLOW_whitespace_in_monoblockBodyNoEmphasis8832);
            	            whitespace358=whitespace();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace358.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_mixedDelimitedMonoblockNoEmphasis_in_monoblockBodyNoEmphasis8842);
            	    mixedDelimitedMonoblockNoEmphasis359=mixedDelimitedMonoblockNoEmphasis();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedMonoblockNoEmphasis359.getTree());
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:982:7: ( whitespace mixedDelimitedMonoblockNoEmphasis )*
            	    loop201:
            	    do {
            	        int alt201=2;
            	        int LA201_0 = input.LA(1);

            	        if ( (LA201_0==WHITESPACE) ) {
            	            int LA201_1 = input.LA(2);

            	            if ( (LA201_1==LEFT_PARENTHESIS||LA201_1==LEFT_SQUARE_BRACKET||LA201_1==DOUBLE_QUOTE||LA201_1==HYPHEN_MINUS||(LA201_1>=GRAVE_ACCENT && LA201_1<=LATIN_SMALL_LETTER_S)||(LA201_1>=LATIN_SMALL_LETTER_N && LA201_1<=LATIN_SMALL_LETTER_V)||LA201_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA201_1>=LATIN_SMALL_LETTER_R && LA201_1<=LATIN_SMALL_LETTER_M)||(LA201_1>=DIGIT_0 && LA201_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
            	                alt201=1;
            	            }


            	        }


            	        switch (alt201) {
            	    	case 1 :
            	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:982:9: whitespace mixedDelimitedMonoblockNoEmphasis
            	    	    {
            	    	    pushFollow(FOLLOW_whitespace_in_monoblockBodyNoEmphasis8852);
            	    	    whitespace360=whitespace();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace360.getTree());
            	    	    pushFollow(FOLLOW_mixedDelimitedMonoblockNoEmphasis_in_monoblockBodyNoEmphasis8863);
            	    	    mixedDelimitedMonoblockNoEmphasis361=mixedDelimitedMonoblockNoEmphasis();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedMonoblockNoEmphasis361.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop201;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop202;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "monoblockBodyNoEmphasis"

    public static class monoblockBodyNoEmphasisNoSeparator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "monoblockBodyNoEmphasisNoSeparator"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:988:1: monoblockBodyNoEmphasisNoSeparator : mixedDelimitedMonoblockNoEmphasisNoSeparator ;
    public final NovelangParser.monoblockBodyNoEmphasisNoSeparator_return monoblockBodyNoEmphasisNoSeparator() throws RecognitionException {
        NovelangParser.monoblockBodyNoEmphasisNoSeparator_return retval = new NovelangParser.monoblockBodyNoEmphasisNoSeparator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.mixedDelimitedMonoblockNoEmphasisNoSeparator_return mixedDelimitedMonoblockNoEmphasisNoSeparator362 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:989:3: ( mixedDelimitedMonoblockNoEmphasisNoSeparator )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:989:5: mixedDelimitedMonoblockNoEmphasisNoSeparator
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_mixedDelimitedMonoblockNoEmphasisNoSeparator_in_monoblockBodyNoEmphasisNoSeparator8914);
            mixedDelimitedMonoblockNoEmphasisNoSeparator362=mixedDelimitedMonoblockNoEmphasisNoSeparator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedMonoblockNoEmphasisNoSeparator362.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "monoblockBodyNoEmphasisNoSeparator"

    public static class mixedDelimitedMonoblockNoEmphasis_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixedDelimitedMonoblockNoEmphasis"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:992:1: mixedDelimitedMonoblockNoEmphasis : ( ( word ( ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) );
    public final NovelangParser.mixedDelimitedMonoblockNoEmphasis_return mixedDelimitedMonoblockNoEmphasis() throws RecognitionException {
        NovelangParser.mixedDelimitedMonoblockNoEmphasis_return retval = new NovelangParser.mixedDelimitedMonoblockNoEmphasis_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.word_return word363 = null;

        NovelangParser.punctuationSign_return punctuationSign364 = null;

        NovelangParser.delimitedMonoblockNoEmphasis_return delimitedMonoblockNoEmphasis365 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral366 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral367 = null;

        NovelangParser.word_return word368 = null;

        NovelangParser.punctuationSign_return punctuationSign369 = null;

        NovelangParser.delimitedMonoblockNoEmphasis_return delimitedMonoblockNoEmphasis370 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral371 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral372 = null;

        NovelangParser.word_return word373 = null;

        NovelangParser.punctuationSign_return punctuationSign374 = null;

        NovelangParser.delimitedMonoblockNoEmphasis_return delimitedMonoblockNoEmphasis375 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral376 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral377 = null;

        NovelangParser.word_return word378 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:996:3: ( ( word ( ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) )
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( ((LA211_0>=LATIN_SMALL_LETTER_F && LA211_0<=LATIN_SMALL_LETTER_S)||(LA211_0>=LATIN_SMALL_LETTER_N && LA211_0<=LATIN_SMALL_LETTER_V)||LA211_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA211_0>=LATIN_SMALL_LETTER_R && LA211_0<=LATIN_SMALL_LETTER_M)||(LA211_0>=DIGIT_0 && LA211_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt211=1;
            }
            else if ( (LA211_0==LEFT_PARENTHESIS||LA211_0==LEFT_SQUARE_BRACKET||LA211_0==DOUBLE_QUOTE||LA211_0==HYPHEN_MINUS||(LA211_0>=GRAVE_ACCENT && LA211_0<=APOSTROPHE)) ) {
                alt211=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;
            }
            switch (alt211) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:996:5: ( word ( ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:996:5: ( word ( ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:996:7: word ( ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    {
                    pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasis8934);
                    word363=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, word363.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:997:7: ( ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    loop205:
                    do {
                        int alt205=2;
                        int LA205_0 = input.LA(1);

                        if ( (LA205_0==LEFT_PARENTHESIS||LA205_0==LEFT_SQUARE_BRACKET||LA205_0==DOUBLE_QUOTE||LA205_0==HYPHEN_MINUS||(LA205_0>=GRAVE_ACCENT && LA205_0<=APOSTROPHE)) ) {
                            alt205=1;
                        }


                        switch (alt205) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:997:9: ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( word )?
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:997:9: ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral )
                    	    int alt203=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt203=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case DOUBLE_QUOTE:
                    	    case HYPHEN_MINUS:
                    	        {
                    	        alt203=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA203_3 = input.LA(2);

                    	        if ( (LA203_3==GRAVE_ACCENT) ) {
                    	            alt203=4;
                    	        }
                    	        else if ( ((LA203_3>=COMMERCIAL_AT && LA203_3<=WHITESPACE)||(LA203_3>=VERTICAL_LINE && LA203_3<=GREATER_THAN_SIGN)||(LA203_3>=FULL_STOP && LA203_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA203_3>=LATIN_SMALL_LETTER_R && LA203_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt203=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 203, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 203, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt203) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:997:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoEmphasis8949);
                    	            punctuationSign364=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign364.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:998:13: delimitedMonoblockNoEmphasis
                    	            {
                    	            pushFollow(FOLLOW_delimitedMonoblockNoEmphasis_in_mixedDelimitedMonoblockNoEmphasis8964);
                    	            delimitedMonoblockNoEmphasis365=delimitedMonoblockNoEmphasis();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblockNoEmphasis365.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:999:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoEmphasis8979);
                    	            softInlineLiteral366=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral366.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1000:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoEmphasis8994);
                    	            hardInlineLiteral367=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral367.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1001:9: ( word )?
                    	    int alt204=2;
                    	    int LA204_0 = input.LA(1);

                    	    if ( ((LA204_0>=LATIN_SMALL_LETTER_F && LA204_0<=LATIN_SMALL_LETTER_S)||(LA204_0>=LATIN_SMALL_LETTER_N && LA204_0<=LATIN_SMALL_LETTER_V)||LA204_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA204_0>=LATIN_SMALL_LETTER_R && LA204_0<=LATIN_SMALL_LETTER_M)||(LA204_0>=DIGIT_0 && LA204_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt204=1;
                    	    }
                    	    switch (alt204) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1001:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasis9005);
                    	            word368=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word368.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop205;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1003:5: ( ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1003:5: ( ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1003:7: ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) )* ( word )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1003:7: ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral )
                    int alt206=4;
                    switch ( input.LA(1) ) {
                    case FULL_STOP:
                    case COMMA:
                    case QUESTION_MARK:
                    case EXCLAMATION_MARK:
                    case SEMICOLON:
                    case COLON:
                    case APOSTROPHE:
                        {
                        alt206=1;
                        }
                        break;
                    case LEFT_PARENTHESIS:
                    case LEFT_SQUARE_BRACKET:
                    case DOUBLE_QUOTE:
                    case HYPHEN_MINUS:
                        {
                        alt206=2;
                        }
                        break;
                    case GRAVE_ACCENT:
                        {
                        int LA206_3 = input.LA(2);

                        if ( (LA206_3==GRAVE_ACCENT) ) {
                            alt206=4;
                        }
                        else if ( ((LA206_3>=COMMERCIAL_AT && LA206_3<=WHITESPACE)||(LA206_3>=VERTICAL_LINE && LA206_3<=GREATER_THAN_SIGN)||(LA206_3>=FULL_STOP && LA206_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA206_3>=LATIN_SMALL_LETTER_R && LA206_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt206=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 206, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 206, 0, input);

                        throw nvae;
                    }

                    switch (alt206) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1003:11: punctuationSign
                            {
                            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoEmphasis9027);
                            punctuationSign369=punctuationSign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign369.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1004:11: delimitedMonoblockNoEmphasis
                            {
                            pushFollow(FOLLOW_delimitedMonoblockNoEmphasis_in_mixedDelimitedMonoblockNoEmphasis9040);
                            delimitedMonoblockNoEmphasis370=delimitedMonoblockNoEmphasis();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblockNoEmphasis370.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1005:11: softInlineLiteral
                            {
                            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoEmphasis9053);
                            softInlineLiteral371=softInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral371.getTree());

                            }
                            break;
                        case 4 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1006:11: hardInlineLiteral
                            {
                            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoEmphasis9066);
                            hardInlineLiteral372=hardInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral372.getTree());

                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1008:7: ( ( word )? ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) )*
                    loop209:
                    do {
                        int alt209=2;
                        alt209 = dfa209.predict(input);
                        switch (alt209) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1008:9: ( word )? ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1008:9: ( word )?
                    	    int alt207=2;
                    	    int LA207_0 = input.LA(1);

                    	    if ( ((LA207_0>=LATIN_SMALL_LETTER_F && LA207_0<=LATIN_SMALL_LETTER_S)||(LA207_0>=LATIN_SMALL_LETTER_N && LA207_0<=LATIN_SMALL_LETTER_V)||LA207_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA207_0>=LATIN_SMALL_LETTER_R && LA207_0<=LATIN_SMALL_LETTER_M)||(LA207_0>=DIGIT_0 && LA207_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt207=1;
                    	    }
                    	    switch (alt207) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1008:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasis9085);
                    	            word373=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word373.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1009:9: ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral )
                    	    int alt208=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt208=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case DOUBLE_QUOTE:
                    	    case HYPHEN_MINUS:
                    	        {
                    	        alt208=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA208_3 = input.LA(2);

                    	        if ( (LA208_3==GRAVE_ACCENT) ) {
                    	            alt208=4;
                    	        }
                    	        else if ( ((LA208_3>=COMMERCIAL_AT && LA208_3<=WHITESPACE)||(LA208_3>=VERTICAL_LINE && LA208_3<=GREATER_THAN_SIGN)||(LA208_3>=FULL_STOP && LA208_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA208_3>=LATIN_SMALL_LETTER_R && LA208_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt208=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 208, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 208, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt208) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1009:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoEmphasis9101);
                    	            punctuationSign374=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign374.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1010:13: delimitedMonoblockNoEmphasis
                    	            {
                    	            pushFollow(FOLLOW_delimitedMonoblockNoEmphasis_in_mixedDelimitedMonoblockNoEmphasis9116);
                    	            delimitedMonoblockNoEmphasis375=delimitedMonoblockNoEmphasis();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblockNoEmphasis375.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1011:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoEmphasis9131);
                    	            softInlineLiteral376=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral376.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1012:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoEmphasis9146);
                    	            hardInlineLiteral377=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral377.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop209;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1015:7: ( word )?
                    int alt210=2;
                    int LA210_0 = input.LA(1);

                    if ( ((LA210_0>=LATIN_SMALL_LETTER_F && LA210_0<=LATIN_SMALL_LETTER_S)||(LA210_0>=LATIN_SMALL_LETTER_N && LA210_0<=LATIN_SMALL_LETTER_V)||LA210_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA210_0>=LATIN_SMALL_LETTER_R && LA210_0<=LATIN_SMALL_LETTER_M)||(LA210_0>=DIGIT_0 && LA210_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt210=1;
                    }
                    switch (alt210) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1015:7: word
                            {
                            pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasis9188);
                            word378=word();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, word378.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixedDelimitedMonoblockNoEmphasis"

    public static class mixedDelimitedMonoblockNoEmphasisNoSeparator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixedDelimitedMonoblockNoEmphasisNoSeparator"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1020:1: mixedDelimitedMonoblockNoEmphasisNoSeparator : ( ( word ( ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) );
    public final NovelangParser.mixedDelimitedMonoblockNoEmphasisNoSeparator_return mixedDelimitedMonoblockNoEmphasisNoSeparator() throws RecognitionException {
        NovelangParser.mixedDelimitedMonoblockNoEmphasisNoSeparator_return retval = new NovelangParser.mixedDelimitedMonoblockNoEmphasisNoSeparator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.word_return word379 = null;

        NovelangParser.punctuationSign_return punctuationSign380 = null;

        NovelangParser.delimitedMonoblockNoEmphasisNoSeparator_return delimitedMonoblockNoEmphasisNoSeparator381 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral382 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral383 = null;

        NovelangParser.word_return word384 = null;

        NovelangParser.punctuationSign_return punctuationSign385 = null;

        NovelangParser.delimitedMonoblockNoEmphasisNoSeparator_return delimitedMonoblockNoEmphasisNoSeparator386 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral387 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral388 = null;

        NovelangParser.word_return word389 = null;

        NovelangParser.punctuationSign_return punctuationSign390 = null;

        NovelangParser.delimitedMonoblockNoEmphasisNoSeparator_return delimitedMonoblockNoEmphasisNoSeparator391 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral392 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral393 = null;

        NovelangParser.word_return word394 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1021:3: ( ( word ( ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) )
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( ((LA220_0>=LATIN_SMALL_LETTER_F && LA220_0<=LATIN_SMALL_LETTER_S)||(LA220_0>=LATIN_SMALL_LETTER_N && LA220_0<=LATIN_SMALL_LETTER_V)||LA220_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA220_0>=LATIN_SMALL_LETTER_R && LA220_0<=LATIN_SMALL_LETTER_M)||(LA220_0>=DIGIT_0 && LA220_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt220=1;
            }
            else if ( (LA220_0==LEFT_PARENTHESIS||(LA220_0>=GRAVE_ACCENT && LA220_0<=APOSTROPHE)) ) {
                alt220=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);

                throw nvae;
            }
            switch (alt220) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1021:5: ( word ( ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1021:5: ( word ( ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1021:7: word ( ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    {
                    pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9212);
                    word379=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, word379.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1022:7: ( ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    loop214:
                    do {
                        int alt214=2;
                        int LA214_0 = input.LA(1);

                        if ( (LA214_0==LEFT_PARENTHESIS||(LA214_0>=GRAVE_ACCENT && LA214_0<=APOSTROPHE)) ) {
                            alt214=1;
                        }


                        switch (alt214) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1022:9: ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) ( word )?
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1022:9: ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral )
                    	    int alt212=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt212=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	        {
                    	        alt212=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA212_3 = input.LA(2);

                    	        if ( (LA212_3==GRAVE_ACCENT) ) {
                    	            alt212=4;
                    	        }
                    	        else if ( ((LA212_3>=COMMERCIAL_AT && LA212_3<=WHITESPACE)||(LA212_3>=VERTICAL_LINE && LA212_3<=GREATER_THAN_SIGN)||(LA212_3>=FULL_STOP && LA212_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA212_3>=LATIN_SMALL_LETTER_R && LA212_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt212=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 212, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 212, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt212) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1022:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9227);
                    	            punctuationSign380=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign380.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1023:13: delimitedMonoblockNoEmphasisNoSeparator
                    	            {
                    	            pushFollow(FOLLOW_delimitedMonoblockNoEmphasisNoSeparator_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9242);
                    	            delimitedMonoblockNoEmphasisNoSeparator381=delimitedMonoblockNoEmphasisNoSeparator();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblockNoEmphasisNoSeparator381.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1024:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9258);
                    	            softInlineLiteral382=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral382.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1025:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9273);
                    	            hardInlineLiteral383=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral383.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1026:9: ( word )?
                    	    int alt213=2;
                    	    int LA213_0 = input.LA(1);

                    	    if ( ((LA213_0>=LATIN_SMALL_LETTER_F && LA213_0<=LATIN_SMALL_LETTER_S)||(LA213_0>=LATIN_SMALL_LETTER_N && LA213_0<=LATIN_SMALL_LETTER_V)||LA213_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA213_0>=LATIN_SMALL_LETTER_R && LA213_0<=LATIN_SMALL_LETTER_M)||(LA213_0>=DIGIT_0 && LA213_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt213=1;
                    	    }
                    	    switch (alt213) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1026:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9284);
                    	            word384=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word384.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop214;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1028:5: ( ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1028:5: ( ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1028:7: ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) )* ( word )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1028:7: ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral )
                    int alt215=4;
                    switch ( input.LA(1) ) {
                    case FULL_STOP:
                    case COMMA:
                    case QUESTION_MARK:
                    case EXCLAMATION_MARK:
                    case SEMICOLON:
                    case COLON:
                    case APOSTROPHE:
                        {
                        alt215=1;
                        }
                        break;
                    case LEFT_PARENTHESIS:
                        {
                        alt215=2;
                        }
                        break;
                    case GRAVE_ACCENT:
                        {
                        int LA215_3 = input.LA(2);

                        if ( (LA215_3==GRAVE_ACCENT) ) {
                            alt215=4;
                        }
                        else if ( ((LA215_3>=COMMERCIAL_AT && LA215_3<=WHITESPACE)||(LA215_3>=VERTICAL_LINE && LA215_3<=GREATER_THAN_SIGN)||(LA215_3>=FULL_STOP && LA215_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA215_3>=LATIN_SMALL_LETTER_R && LA215_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt215=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 215, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 215, 0, input);

                        throw nvae;
                    }

                    switch (alt215) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1028:11: punctuationSign
                            {
                            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9306);
                            punctuationSign385=punctuationSign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign385.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1029:11: delimitedMonoblockNoEmphasisNoSeparator
                            {
                            pushFollow(FOLLOW_delimitedMonoblockNoEmphasisNoSeparator_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9319);
                            delimitedMonoblockNoEmphasisNoSeparator386=delimitedMonoblockNoEmphasisNoSeparator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblockNoEmphasisNoSeparator386.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1030:11: softInlineLiteral
                            {
                            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9331);
                            softInlineLiteral387=softInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral387.getTree());

                            }
                            break;
                        case 4 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1031:11: hardInlineLiteral
                            {
                            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9344);
                            hardInlineLiteral388=hardInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral388.getTree());

                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1033:7: ( ( word )? ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) )*
                    loop218:
                    do {
                        int alt218=2;
                        alt218 = dfa218.predict(input);
                        switch (alt218) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1033:9: ( word )? ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1033:9: ( word )?
                    	    int alt216=2;
                    	    int LA216_0 = input.LA(1);

                    	    if ( ((LA216_0>=LATIN_SMALL_LETTER_F && LA216_0<=LATIN_SMALL_LETTER_S)||(LA216_0>=LATIN_SMALL_LETTER_N && LA216_0<=LATIN_SMALL_LETTER_V)||LA216_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA216_0>=LATIN_SMALL_LETTER_R && LA216_0<=LATIN_SMALL_LETTER_M)||(LA216_0>=DIGIT_0 && LA216_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt216=1;
                    	    }
                    	    switch (alt216) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1033:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9363);
                    	            word389=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word389.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1034:9: ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral )
                    	    int alt217=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt217=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	        {
                    	        alt217=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA217_3 = input.LA(2);

                    	        if ( (LA217_3==GRAVE_ACCENT) ) {
                    	            alt217=4;
                    	        }
                    	        else if ( ((LA217_3>=COMMERCIAL_AT && LA217_3<=WHITESPACE)||(LA217_3>=VERTICAL_LINE && LA217_3<=GREATER_THAN_SIGN)||(LA217_3>=FULL_STOP && LA217_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA217_3>=LATIN_SMALL_LETTER_R && LA217_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt217=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 217, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 217, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt217) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1034:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9379);
                    	            punctuationSign390=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign390.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1035:13: delimitedMonoblockNoEmphasisNoSeparator
                    	            {
                    	            pushFollow(FOLLOW_delimitedMonoblockNoEmphasisNoSeparator_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9394);
                    	            delimitedMonoblockNoEmphasisNoSeparator391=delimitedMonoblockNoEmphasisNoSeparator();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblockNoEmphasisNoSeparator391.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1036:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9409);
                    	            softInlineLiteral392=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral392.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1037:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9424);
                    	            hardInlineLiteral393=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral393.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop218;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1040:7: ( word )?
                    int alt219=2;
                    int LA219_0 = input.LA(1);

                    if ( ((LA219_0>=LATIN_SMALL_LETTER_F && LA219_0<=LATIN_SMALL_LETTER_S)||(LA219_0>=LATIN_SMALL_LETTER_N && LA219_0<=LATIN_SMALL_LETTER_V)||LA219_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA219_0>=LATIN_SMALL_LETTER_R && LA219_0<=LATIN_SMALL_LETTER_M)||(LA219_0>=DIGIT_0 && LA219_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt219=1;
                    }
                    switch (alt219) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1040:7: word
                            {
                            pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9466);
                            word394=word();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, word394.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixedDelimitedMonoblockNoEmphasisNoSeparator"

    public static class hyphenPairSpreadBlock_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hyphenPairSpreadBlock"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1051:1: hyphenPairSpreadBlock : HYPHEN_MINUS HYPHEN_MINUS ( whitespace )? (b+= spreadBlockBodyNoHyphenPair ( whitespace )? )? HYPHEN_MINUS ( HYPHEN_MINUS -> ^( BLOCK_INSIDE_HYPHEN_PAIRS ( $b)+ ) | LOW_LINE -> ^( BLOCK_INSIDE_TWO_HYPHENS_THEN_HYPHEN_LOW_LINE ( $b)+ ) ) ;
    public final NovelangParser.hyphenPairSpreadBlock_return hyphenPairSpreadBlock() throws RecognitionException {
        NovelangParser.hyphenPairSpreadBlock_return retval = new NovelangParser.hyphenPairSpreadBlock_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token HYPHEN_MINUS395=null;
        Token HYPHEN_MINUS396=null;
        Token HYPHEN_MINUS399=null;
        Token HYPHEN_MINUS400=null;
        Token LOW_LINE401=null;
        List list_b=null;
        NovelangParser.whitespace_return whitespace397 = null;

        NovelangParser.whitespace_return whitespace398 = null;

        RuleReturnScope b = null;
        Object HYPHEN_MINUS395_tree=null;
        Object HYPHEN_MINUS396_tree=null;
        Object HYPHEN_MINUS399_tree=null;
        Object HYPHEN_MINUS400_tree=null;
        Object LOW_LINE401_tree=null;
        RewriteRuleTokenStream stream_HYPHEN_MINUS=new RewriteRuleTokenStream(adaptor,"token HYPHEN_MINUS");
        RewriteRuleTokenStream stream_LOW_LINE=new RewriteRuleTokenStream(adaptor,"token LOW_LINE");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        RewriteRuleSubtreeStream stream_spreadBlockBodyNoHyphenPair=new RewriteRuleSubtreeStream(adaptor,"rule spreadBlockBodyNoHyphenPair");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1052:2: ( HYPHEN_MINUS HYPHEN_MINUS ( whitespace )? (b+= spreadBlockBodyNoHyphenPair ( whitespace )? )? HYPHEN_MINUS ( HYPHEN_MINUS -> ^( BLOCK_INSIDE_HYPHEN_PAIRS ( $b)+ ) | LOW_LINE -> ^( BLOCK_INSIDE_TWO_HYPHENS_THEN_HYPHEN_LOW_LINE ( $b)+ ) ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1053:5: HYPHEN_MINUS HYPHEN_MINUS ( whitespace )? (b+= spreadBlockBodyNoHyphenPair ( whitespace )? )? HYPHEN_MINUS ( HYPHEN_MINUS -> ^( BLOCK_INSIDE_HYPHEN_PAIRS ( $b)+ ) | LOW_LINE -> ^( BLOCK_INSIDE_TWO_HYPHENS_THEN_HYPHEN_LOW_LINE ( $b)+ ) )
            {
            if ( state.backtracking==0 ) {
               delegate.startDelimitedText( BlockDelimiter.TWO_HYPHENS, input.LT( 1 ) ) ; 
            }
            HYPHEN_MINUS395=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_hyphenPairSpreadBlock9505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_HYPHEN_MINUS.add(HYPHEN_MINUS395);

            HYPHEN_MINUS396=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_hyphenPairSpreadBlock9507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_HYPHEN_MINUS.add(HYPHEN_MINUS396);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1054:30: ( whitespace )?
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==WHITESPACE) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1054:30: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_hyphenPairSpreadBlock9509);
                    whitespace397=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whitespace.add(whitespace397.getTree());

                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1055:5: (b+= spreadBlockBodyNoHyphenPair ( whitespace )? )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==LEFT_PARENTHESIS||LA223_0==LEFT_SQUARE_BRACKET||(LA223_0>=DOUBLE_QUOTE && LA223_0<=SOLIDUS)||LA223_0==SOFTBREAK||(LA223_0>=GRAVE_ACCENT && LA223_0<=LATIN_SMALL_LETTER_S)||LA223_0==TILDE||(LA223_0>=LATIN_SMALL_LETTER_N && LA223_0<=LATIN_SMALL_LETTER_V)||LA223_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA223_0>=LATIN_SMALL_LETTER_R && LA223_0<=LATIN_SMALL_LETTER_M)||(LA223_0>=DIGIT_0 && LA223_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1055:7: b+= spreadBlockBodyNoHyphenPair ( whitespace )?
                    {
                    pushFollow(FOLLOW_spreadBlockBodyNoHyphenPair_in_hyphenPairSpreadBlock9522);
                    b=spreadBlockBodyNoHyphenPair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spreadBlockBodyNoHyphenPair.add(b.getTree());
                    if (list_b==null) list_b=new ArrayList();
                    list_b.add(b.getTree());

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1056:7: ( whitespace )?
                    int alt222=2;
                    int LA222_0 = input.LA(1);

                    if ( (LA222_0==WHITESPACE) ) {
                        alt222=1;
                    }
                    switch (alt222) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1056:7: whitespace
                            {
                            pushFollow(FOLLOW_whitespace_in_hyphenPairSpreadBlock9530);
                            whitespace398=whitespace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whitespace.add(whitespace398.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               delegate.reachEndDelimiter( BlockDelimiter.TWO_HYPHENS ) ; 
            }
            HYPHEN_MINUS399=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_hyphenPairSpreadBlock9551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_HYPHEN_MINUS.add(HYPHEN_MINUS399);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1060:5: ( HYPHEN_MINUS -> ^( BLOCK_INSIDE_HYPHEN_PAIRS ( $b)+ ) | LOW_LINE -> ^( BLOCK_INSIDE_TWO_HYPHENS_THEN_HYPHEN_LOW_LINE ( $b)+ ) )
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==HYPHEN_MINUS) ) {
                alt224=1;
            }
            else if ( (LA224_0==LOW_LINE) ) {
                alt224=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;
            }
            switch (alt224) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1060:9: HYPHEN_MINUS
                    {
                    HYPHEN_MINUS400=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_hyphenPairSpreadBlock9562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HYPHEN_MINUS.add(HYPHEN_MINUS400);



                    // AST REWRITE
                    // elements: b
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: b
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
                    root_0 = (Object)adaptor.nil();
                    // 1060:22: -> ^( BLOCK_INSIDE_HYPHEN_PAIRS ( $b)+ )
                    {
                        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1060:25: ^( BLOCK_INSIDE_HYPHEN_PAIRS ( $b)+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK_INSIDE_HYPHEN_PAIRS, "BLOCK_INSIDE_HYPHEN_PAIRS"), root_1);

                        if ( !(stream_b.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_b.hasNext() ) {
                            adaptor.addChild(root_1, stream_b.nextTree());

                        }
                        stream_b.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1061:9: LOW_LINE
                    {
                    LOW_LINE401=(Token)match(input,LOW_LINE,FOLLOW_LOW_LINE_in_hyphenPairSpreadBlock9585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOW_LINE.add(LOW_LINE401);



                    // AST REWRITE
                    // elements: b
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: b
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
                    root_0 = (Object)adaptor.nil();
                    // 1061:18: -> ^( BLOCK_INSIDE_TWO_HYPHENS_THEN_HYPHEN_LOW_LINE ( $b)+ )
                    {
                        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1061:21: ^( BLOCK_INSIDE_TWO_HYPHENS_THEN_HYPHEN_LOW_LINE ( $b)+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK_INSIDE_TWO_HYPHENS_THEN_HYPHEN_LOW_LINE, "BLOCK_INSIDE_TWO_HYPHENS_THEN_HYPHEN_LOW_LINE"), root_1);

                        if ( !(stream_b.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_b.hasNext() ) {
                            adaptor.addChild(root_1, stream_b.nextTree());

                        }
                        stream_b.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               delegate.endDelimitedText( BlockDelimiter.TWO_HYPHENS ) ; 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( MismatchedTokenException mte ) {

                  delegate.reportMissingDelimiter( BlockDelimiter.TWO_HYPHENS, mte ) ; 
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hyphenPairSpreadBlock"

    public static class delimitedSpreadblockNoHyphenPair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delimitedSpreadblockNoHyphenPair"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1068:1: delimitedSpreadblockNoHyphenPair : ( parenthesizedSpreadblock | squarebracketsSpreadblock | emphasizedSpreadBlock | doubleQuotedSpreadBlock );
    public final NovelangParser.delimitedSpreadblockNoHyphenPair_return delimitedSpreadblockNoHyphenPair() throws RecognitionException {
        NovelangParser.delimitedSpreadblockNoHyphenPair_return retval = new NovelangParser.delimitedSpreadblockNoHyphenPair_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.parenthesizedSpreadblock_return parenthesizedSpreadblock402 = null;

        NovelangParser.squarebracketsSpreadblock_return squarebracketsSpreadblock403 = null;

        NovelangParser.emphasizedSpreadBlock_return emphasizedSpreadBlock404 = null;

        NovelangParser.doubleQuotedSpreadBlock_return doubleQuotedSpreadBlock405 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1069:3: ( parenthesizedSpreadblock | squarebracketsSpreadblock | emphasizedSpreadBlock | doubleQuotedSpreadBlock )
            int alt225=4;
            switch ( input.LA(1) ) {
            case LEFT_PARENTHESIS:
                {
                alt225=1;
                }
                break;
            case LEFT_SQUARE_BRACKET:
                {
                alt225=2;
                }
                break;
            case SOLIDUS:
                {
                alt225=3;
                }
                break;
            case DOUBLE_QUOTE:
                {
                alt225=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;
            }

            switch (alt225) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1069:5: parenthesizedSpreadblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedSpreadblock_in_delimitedSpreadblockNoHyphenPair9634);
                    parenthesizedSpreadblock402=parenthesizedSpreadblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedSpreadblock402.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1070:5: squarebracketsSpreadblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squarebracketsSpreadblock_in_delimitedSpreadblockNoHyphenPair9640);
                    squarebracketsSpreadblock403=squarebracketsSpreadblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squarebracketsSpreadblock403.getTree());

                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1071:5: emphasizedSpreadBlock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_emphasizedSpreadBlock_in_delimitedSpreadblockNoHyphenPair9647);
                    emphasizedSpreadBlock404=emphasizedSpreadBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, emphasizedSpreadBlock404.getTree());

                    }
                    break;
                case 4 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1072:5: doubleQuotedSpreadBlock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_doubleQuotedSpreadBlock_in_delimitedSpreadblockNoHyphenPair9653);
                    doubleQuotedSpreadBlock405=doubleQuotedSpreadBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, doubleQuotedSpreadBlock405.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "delimitedSpreadblockNoHyphenPair"

    public static class spreadBlockBodyNoHyphenPair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "spreadBlockBodyNoHyphenPair"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1075:1: spreadBlockBodyNoHyphenPair : ( ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )? ) ) | ( mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )? )? ) );
    public final NovelangParser.spreadBlockBodyNoHyphenPair_return spreadBlockBodyNoHyphenPair() throws RecognitionException {
        NovelangParser.spreadBlockBodyNoHyphenPair_return retval = new NovelangParser.spreadBlockBodyNoHyphenPair_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.softbreak_return softbreak406 = null;

        NovelangParser.url_return url407 = null;

        NovelangParser.softbreak_return softbreak408 = null;

        NovelangParser.whitespace_return whitespace409 = null;

        NovelangParser.smallDashedListItem_return smallDashedListItem410 = null;

        NovelangParser.whitespace_return whitespace411 = null;

        NovelangParser.softbreak_return softbreak412 = null;

        NovelangParser.url_return url413 = null;

        NovelangParser.whitespace_return whitespace414 = null;

        NovelangParser.softbreak_return softbreak415 = null;

        NovelangParser.whitespace_return whitespace416 = null;

        NovelangParser.smallDashedListItem_return smallDashedListItem417 = null;

        NovelangParser.whitespace_return whitespace418 = null;

        NovelangParser.softbreak_return softbreak419 = null;

        NovelangParser.whitespace_return whitespace420 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoHyphenPair_return mixedDelimitedSpreadBlockNoHyphenPair421 = null;

        NovelangParser.whitespace_return whitespace422 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoHyphenPair_return mixedDelimitedSpreadBlockNoHyphenPair423 = null;

        NovelangParser.whitespace_return whitespace424 = null;

        NovelangParser.softbreak_return softbreak425 = null;

        NovelangParser.whitespace_return whitespace426 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoHyphenPair_return mixedDelimitedSpreadBlockNoHyphenPair427 = null;

        NovelangParser.whitespace_return whitespace428 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoHyphenPair_return mixedDelimitedSpreadBlockNoHyphenPair429 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoHyphenPair_return mixedDelimitedSpreadBlockNoHyphenPair430 = null;

        NovelangParser.whitespace_return whitespace431 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoHyphenPair_return mixedDelimitedSpreadBlockNoHyphenPair432 = null;

        NovelangParser.whitespace_return whitespace433 = null;

        NovelangParser.softbreak_return softbreak434 = null;

        NovelangParser.url_return url435 = null;

        NovelangParser.whitespace_return whitespace436 = null;

        NovelangParser.softbreak_return softbreak437 = null;

        NovelangParser.whitespace_return whitespace438 = null;

        NovelangParser.smallDashedListItem_return smallDashedListItem439 = null;

        NovelangParser.whitespace_return whitespace440 = null;

        NovelangParser.softbreak_return softbreak441 = null;

        NovelangParser.whitespace_return whitespace442 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoHyphenPair_return mixedDelimitedSpreadBlockNoHyphenPair443 = null;

        NovelangParser.whitespace_return whitespace444 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoHyphenPair_return mixedDelimitedSpreadBlockNoHyphenPair445 = null;

        NovelangParser.whitespace_return whitespace446 = null;

        NovelangParser.softbreak_return softbreak447 = null;

        NovelangParser.whitespace_return whitespace448 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoHyphenPair_return mixedDelimitedSpreadBlockNoHyphenPair449 = null;

        NovelangParser.whitespace_return whitespace450 = null;

        NovelangParser.mixedDelimitedSpreadBlockNoHyphenPair_return mixedDelimitedSpreadBlockNoHyphenPair451 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1076:3: ( ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )? ) ) | ( mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )? )? ) )
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==SOFTBREAK) ) {
                alt252=1;
            }
            else if ( (LA252_0==LEFT_PARENTHESIS||LA252_0==LEFT_SQUARE_BRACKET||(LA252_0>=DOUBLE_QUOTE && LA252_0<=SOLIDUS)||(LA252_0>=GRAVE_ACCENT && LA252_0<=LATIN_SMALL_LETTER_S)||LA252_0==TILDE||(LA252_0>=LATIN_SMALL_LETTER_N && LA252_0<=LATIN_SMALL_LETTER_V)||LA252_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA252_0>=LATIN_SMALL_LETTER_R && LA252_0<=LATIN_SMALL_LETTER_M)||(LA252_0>=DIGIT_0 && LA252_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt252=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 252, 0, input);

                throw nvae;
            }
            switch (alt252) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1077:5: ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )? ) )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1077:5: ( ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )? ) )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1078:7: ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) ) ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )? )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1078:7: ( ( ( softbreak url )=> ( softbreak url ) ) | ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) ) )
                    int alt227=2;
                    int LA227_0 = input.LA(1);

                    if ( (LA227_0==SOFTBREAK) ) {
                        int LA227_1 = input.LA(2);

                        if ( (LA227_1==WHITESPACE) && (synpred32_Novelang())) {
                            alt227=2;
                        }
                        else if ( (LA227_1==HYPHEN_MINUS) && (synpred32_Novelang())) {
                            alt227=2;
                        }
                        else if ( (LA227_1==LATIN_SMALL_LETTER_H) && (synpred31_Novelang())) {
                            alt227=1;
                        }
                        else if ( (LA227_1==LATIN_SMALL_LETTER_F) && (synpred31_Novelang())) {
                            alt227=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 227, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 227, 0, input);

                        throw nvae;
                    }
                    switch (alt227) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1079:11: ( ( softbreak url )=> ( softbreak url ) )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1079:11: ( ( softbreak url )=> ( softbreak url ) )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1079:13: ( softbreak url )=> ( softbreak url )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1079:34: ( softbreak url )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1079:36: softbreak url
                            {
                            pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair9709);
                            softbreak406=softbreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak406.getTree());
                            pushFollow(FOLLOW_url_in_spreadBlockBodyNoHyphenPair9711);
                            url407=url();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, url407.getTree());

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1081:11: ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1081:11: ( ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem ) )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1081:13: ( softbreak ( whitespace )? smallDashedListItem )=> ( softbreak ( whitespace )? smallDashedListItem )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1082:19: ( softbreak ( whitespace )? smallDashedListItem )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1082:21: softbreak ( whitespace )? smallDashedListItem
                            {
                            pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair9775);
                            softbreak408=softbreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak408.getTree());
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1082:31: ( whitespace )?
                            int alt226=2;
                            int LA226_0 = input.LA(1);

                            if ( (LA226_0==WHITESPACE) ) {
                                alt226=1;
                            }
                            switch (alt226) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1082:31: whitespace
                                    {
                                    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair9777);
                                    whitespace409=whitespace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace409.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_smallDashedListItem_in_spreadBlockBodyNoHyphenPair9780);
                            smallDashedListItem410=smallDashedListItem();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, smallDashedListItem410.getTree());

                            }


                            }


                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1086:7: ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1086:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1086:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1086:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1086:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )*
                    loop234:
                    do {
                        int alt234=4;
                        int LA234_0 = input.LA(1);

                        if ( (LA234_0==WHITESPACE) ) {
                            int LA234_1 = input.LA(2);

                            if ( (synpred33_Novelang()) ) {
                                alt234=1;
                            }
                            else if ( (synpred34_Novelang()) ) {
                                alt234=2;
                            }
                            else if ( (synpred35_Novelang()) ) {
                                alt234=3;
                            }


                        }
                        else if ( (LA234_0==SOFTBREAK) ) {
                            int LA234_2 = input.LA(2);

                            if ( (synpred33_Novelang()) ) {
                                alt234=1;
                            }
                            else if ( (synpred34_Novelang()) ) {
                                alt234=2;
                            }
                            else if ( (synpred35_Novelang()) ) {
                                alt234=3;
                            }


                        }


                        switch (alt234) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1087:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1087:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1087:15: ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1087:48: ( ( whitespace )? softbreak url )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1087:50: ( whitespace )? softbreak url
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1087:50: ( whitespace )?
                    	    int alt228=2;
                    	    int LA228_0 = input.LA(1);

                    	    if ( (LA228_0==WHITESPACE) ) {
                    	        alt228=1;
                    	    }
                    	    switch (alt228) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1087:50: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair9851);
                    	            whitespace411=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace411.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair9854);
                    	    softbreak412=softbreak();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak412.getTree());
                    	    pushFollow(FOLLOW_url_in_spreadBlockBodyNoHyphenPair9856);
                    	    url413=url();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, url413.getTree());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1089:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1089:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1089:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1090:19: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1090:21: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1090:21: ( whitespace )?
                    	    int alt229=2;
                    	    int LA229_0 = input.LA(1);

                    	    if ( (LA229_0==WHITESPACE) ) {
                    	        alt229=1;
                    	    }
                    	    switch (alt229) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1090:21: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair9924);
                    	            whitespace414=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace414.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair9927);
                    	    softbreak415=softbreak();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak415.getTree());
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1090:43: ( whitespace )?
                    	    int alt230=2;
                    	    int LA230_0 = input.LA(1);

                    	    if ( (LA230_0==WHITESPACE) ) {
                    	        alt230=1;
                    	    }
                    	    switch (alt230) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1090:43: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair9929);
                    	            whitespace416=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace416.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_smallDashedListItem_in_spreadBlockBodyNoHyphenPair9932);
                    	    smallDashedListItem417=smallDashedListItem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, smallDashedListItem417.getTree());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1092:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1092:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1093:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1098:19: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1099:19: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )*
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1099:19: ( whitespace )?
                    	    int alt231=2;
                    	    int LA231_0 = input.LA(1);

                    	    if ( (LA231_0==WHITESPACE) ) {
                    	        alt231=1;
                    	    }
                    	    switch (alt231) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1099:19: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10112);
                    	            whitespace418=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace418.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair10115);
                    	    softbreak419=softbreak();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak419.getTree());
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1099:41: ( whitespace )?
                    	    int alt232=2;
                    	    int LA232_0 = input.LA(1);

                    	    if ( (LA232_0==WHITESPACE) ) {
                    	        alt232=1;
                    	    }
                    	    switch (alt232) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1099:41: whitespace
                    	            {
                    	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10117);
                    	            whitespace420=whitespace();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace420.getTree());

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10120);
                    	    mixedDelimitedSpreadBlockNoHyphenPair421=mixedDelimitedSpreadBlockNoHyphenPair();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoHyphenPair421.getTree());
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1100:19: ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )*
                    	    loop233:
                    	    do {
                    	        int alt233=2;
                    	        int LA233_0 = input.LA(1);

                    	        if ( (LA233_0==WHITESPACE) ) {
                    	            int LA233_1 = input.LA(2);

                    	            if ( (LA233_1==LEFT_PARENTHESIS||LA233_1==LEFT_SQUARE_BRACKET||(LA233_1>=DOUBLE_QUOTE && LA233_1<=SOLIDUS)||(LA233_1>=GRAVE_ACCENT && LA233_1<=LATIN_SMALL_LETTER_S)||LA233_1==TILDE||(LA233_1>=LATIN_SMALL_LETTER_N && LA233_1<=LATIN_SMALL_LETTER_V)||LA233_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA233_1>=LATIN_SMALL_LETTER_R && LA233_1<=LATIN_SMALL_LETTER_M)||(LA233_1>=DIGIT_0 && LA233_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	                alt233=1;
                    	            }


                    	        }


                    	        switch (alt233) {
                    	    	case 1 :
                    	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1100:21: whitespace mixedDelimitedSpreadBlockNoHyphenPair
                    	    	    {
                    	    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10143);
                    	    	    whitespace422=whitespace();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace422.getTree());
                    	    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10145);
                    	    	    mixedDelimitedSpreadBlockNoHyphenPair423=mixedDelimitedSpreadBlockNoHyphenPair();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoHyphenPair423.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop233;
                    	        }
                    	    } while (true);


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop234;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1104:10: ( whitespace )?
                    int alt235=2;
                    int LA235_0 = input.LA(1);

                    if ( (LA235_0==WHITESPACE) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1104:10: whitespace
                            {
                            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10224);
                            whitespace424=whitespace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace424.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair10227);
                    softbreak425=softbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak425.getTree());

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1107:5: ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )?
                    int alt238=2;
                    int LA238_0 = input.LA(1);

                    if ( (LA238_0==WHITESPACE) ) {
                        int LA238_1 = input.LA(2);

                        if ( (LA238_1==LEFT_PARENTHESIS||LA238_1==LEFT_SQUARE_BRACKET||(LA238_1>=DOUBLE_QUOTE && LA238_1<=SOLIDUS)||(LA238_1>=GRAVE_ACCENT && LA238_1<=LATIN_SMALL_LETTER_S)||LA238_1==TILDE||(LA238_1>=LATIN_SMALL_LETTER_N && LA238_1<=LATIN_SMALL_LETTER_V)||LA238_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA238_1>=LATIN_SMALL_LETTER_R && LA238_1<=LATIN_SMALL_LETTER_M)||(LA238_1>=DIGIT_0 && LA238_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt238=1;
                        }
                    }
                    else if ( (LA238_0==LEFT_PARENTHESIS||LA238_0==LEFT_SQUARE_BRACKET||(LA238_0>=DOUBLE_QUOTE && LA238_0<=SOLIDUS)||(LA238_0>=GRAVE_ACCENT && LA238_0<=LATIN_SMALL_LETTER_S)||LA238_0==TILDE||(LA238_0>=LATIN_SMALL_LETTER_N && LA238_0<=LATIN_SMALL_LETTER_V)||LA238_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA238_0>=LATIN_SMALL_LETTER_R && LA238_0<=LATIN_SMALL_LETTER_M)||(LA238_0>=DIGIT_0 && LA238_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt238=1;
                    }
                    switch (alt238) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1107:7: ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )*
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1107:7: ( whitespace )?
                            int alt236=2;
                            int LA236_0 = input.LA(1);

                            if ( (LA236_0==WHITESPACE) ) {
                                alt236=1;
                            }
                            switch (alt236) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1107:7: whitespace
                                    {
                                    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10255);
                                    whitespace426=whitespace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace426.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10258);
                            mixedDelimitedSpreadBlockNoHyphenPair427=mixedDelimitedSpreadBlockNoHyphenPair();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoHyphenPair427.getTree());
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1108:7: ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )*
                            loop237:
                            do {
                                int alt237=2;
                                int LA237_0 = input.LA(1);

                                if ( (LA237_0==WHITESPACE) ) {
                                    int LA237_1 = input.LA(2);

                                    if ( (LA237_1==LEFT_PARENTHESIS||LA237_1==LEFT_SQUARE_BRACKET||(LA237_1>=DOUBLE_QUOTE && LA237_1<=SOLIDUS)||(LA237_1>=GRAVE_ACCENT && LA237_1<=LATIN_SMALL_LETTER_S)||LA237_1==TILDE||(LA237_1>=LATIN_SMALL_LETTER_N && LA237_1<=LATIN_SMALL_LETTER_V)||LA237_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA237_1>=LATIN_SMALL_LETTER_R && LA237_1<=LATIN_SMALL_LETTER_M)||(LA237_1>=DIGIT_0 && LA237_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                        alt237=1;
                                    }


                                }


                                switch (alt237) {
                            	case 1 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1108:9: whitespace mixedDelimitedSpreadBlockNoHyphenPair
                            	    {
                            	    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10269);
                            	    whitespace428=whitespace();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace428.getTree());
                            	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10271);
                            	    mixedDelimitedSpreadBlockNoHyphenPair429=mixedDelimitedSpreadBlockNoHyphenPair();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoHyphenPair429.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop237;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1113:5: ( mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )? )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1113:5: ( mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )? )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1115:7: mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )? )?
                    {
                    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10329);
                    mixedDelimitedSpreadBlockNoHyphenPair430=mixedDelimitedSpreadBlockNoHyphenPair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoHyphenPair430.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1116:7: ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )*
                    loop239:
                    do {
                        int alt239=2;
                        int LA239_0 = input.LA(1);

                        if ( (LA239_0==WHITESPACE) ) {
                            int LA239_1 = input.LA(2);

                            if ( (LA239_1==LEFT_PARENTHESIS||LA239_1==LEFT_SQUARE_BRACKET||(LA239_1>=DOUBLE_QUOTE && LA239_1<=SOLIDUS)||(LA239_1>=GRAVE_ACCENT && LA239_1<=LATIN_SMALL_LETTER_S)||LA239_1==TILDE||(LA239_1>=LATIN_SMALL_LETTER_N && LA239_1<=LATIN_SMALL_LETTER_V)||LA239_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA239_1>=LATIN_SMALL_LETTER_R && LA239_1<=LATIN_SMALL_LETTER_M)||(LA239_1>=DIGIT_0 && LA239_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt239=1;
                            }


                        }


                        switch (alt239) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1116:9: whitespace mixedDelimitedSpreadBlockNoHyphenPair
                    	    {
                    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10340);
                    	    whitespace431=whitespace();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace431.getTree());
                    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10342);
                    	    mixedDelimitedSpreadBlockNoHyphenPair432=mixedDelimitedSpreadBlockNoHyphenPair();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoHyphenPair432.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop239;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1118:7: ( ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )? )?
                    int alt251=2;
                    int LA251_0 = input.LA(1);

                    if ( (LA251_0==WHITESPACE) ) {
                        int LA251_1 = input.LA(2);

                        if ( (LA251_1==SOFTBREAK) ) {
                            alt251=1;
                        }
                    }
                    else if ( (LA251_0==SOFTBREAK) ) {
                        alt251=1;
                    }
                    switch (alt251) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1118:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak ) ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )?
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1118:9: ( ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1118:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )* ( whitespace )? softbreak
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1118:11: ( ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) ) | ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) ) | ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) ) )*
                            loop246:
                            do {
                                int alt246=4;
                                int LA246_0 = input.LA(1);

                                if ( (LA246_0==WHITESPACE) ) {
                                    int LA246_1 = input.LA(2);

                                    if ( (synpred36_Novelang()) ) {
                                        alt246=1;
                                    }
                                    else if ( (synpred37_Novelang()) ) {
                                        alt246=2;
                                    }
                                    else if ( (synpred38_Novelang()) ) {
                                        alt246=3;
                                    }


                                }
                                else if ( (LA246_0==SOFTBREAK) ) {
                                    int LA246_2 = input.LA(2);

                                    if ( (synpred36_Novelang()) ) {
                                        alt246=1;
                                    }
                                    else if ( (synpred37_Novelang()) ) {
                                        alt246=2;
                                    }
                                    else if ( (synpred38_Novelang()) ) {
                                        alt246=3;
                                    }


                                }


                                switch (alt246) {
                            	case 1 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1119:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1119:13: ( ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url ) )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1119:15: ( ( whitespace )? softbreak url )=> ( ( whitespace )? softbreak url )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1119:48: ( ( whitespace )? softbreak url )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1119:50: ( whitespace )? softbreak url
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1119:50: ( whitespace )?
                            	    int alt240=2;
                            	    int LA240_0 = input.LA(1);

                            	    if ( (LA240_0==WHITESPACE) ) {
                            	        alt240=1;
                            	    }
                            	    switch (alt240) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1119:50: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10395);
                            	            whitespace433=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace433.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair10398);
                            	    softbreak434=softbreak();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak434.getTree());
                            	    pushFollow(FOLLOW_url_in_spreadBlockBodyNoHyphenPair10400);
                            	    url435=url();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, url435.getTree());

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1121:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1121:13: ( ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem ) )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1121:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )=> ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1122:19: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1122:21: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1122:21: ( whitespace )?
                            	    int alt241=2;
                            	    int LA241_0 = input.LA(1);

                            	    if ( (LA241_0==WHITESPACE) ) {
                            	        alt241=1;
                            	    }
                            	    switch (alt241) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1122:21: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10468);
                            	            whitespace436=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace436.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair10471);
                            	    softbreak437=softbreak();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak437.getTree());
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1122:43: ( whitespace )?
                            	    int alt242=2;
                            	    int LA242_0 = input.LA(1);

                            	    if ( (LA242_0==WHITESPACE) ) {
                            	        alt242=1;
                            	    }
                            	    switch (alt242) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1122:43: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10473);
                            	            whitespace438=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace438.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_smallDashedListItem_in_spreadBlockBodyNoHyphenPair10476);
                            	    smallDashedListItem439=smallDashedListItem();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, smallDashedListItem439.getTree());

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1124:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1124:13: ( ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ) )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1125:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )=> ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1130:19: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1131:19: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )*
                            	    {
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1131:19: ( whitespace )?
                            	    int alt243=2;
                            	    int LA243_0 = input.LA(1);

                            	    if ( (LA243_0==WHITESPACE) ) {
                            	        alt243=1;
                            	    }
                            	    switch (alt243) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1131:19: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10656);
                            	            whitespace440=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace440.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair10659);
                            	    softbreak441=softbreak();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak441.getTree());
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1131:41: ( whitespace )?
                            	    int alt244=2;
                            	    int LA244_0 = input.LA(1);

                            	    if ( (LA244_0==WHITESPACE) ) {
                            	        alt244=1;
                            	    }
                            	    switch (alt244) {
                            	        case 1 :
                            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1131:41: whitespace
                            	            {
                            	            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10661);
                            	            whitespace442=whitespace();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace442.getTree());

                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10664);
                            	    mixedDelimitedSpreadBlockNoHyphenPair443=mixedDelimitedSpreadBlockNoHyphenPair();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoHyphenPair443.getTree());
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1132:19: ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )*
                            	    loop245:
                            	    do {
                            	        int alt245=2;
                            	        int LA245_0 = input.LA(1);

                            	        if ( (LA245_0==WHITESPACE) ) {
                            	            int LA245_1 = input.LA(2);

                            	            if ( (LA245_1==LEFT_PARENTHESIS||LA245_1==LEFT_SQUARE_BRACKET||(LA245_1>=DOUBLE_QUOTE && LA245_1<=SOLIDUS)||(LA245_1>=GRAVE_ACCENT && LA245_1<=LATIN_SMALL_LETTER_S)||LA245_1==TILDE||(LA245_1>=LATIN_SMALL_LETTER_N && LA245_1<=LATIN_SMALL_LETTER_V)||LA245_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA245_1>=LATIN_SMALL_LETTER_R && LA245_1<=LATIN_SMALL_LETTER_M)||(LA245_1>=DIGIT_0 && LA245_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            	                alt245=1;
                            	            }


                            	        }


                            	        switch (alt245) {
                            	    	case 1 :
                            	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1132:21: whitespace mixedDelimitedSpreadBlockNoHyphenPair
                            	    	    {
                            	    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10687);
                            	    	    whitespace444=whitespace();

                            	    	    state._fsp--;
                            	    	    if (state.failed) return retval;
                            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace444.getTree());
                            	    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10689);
                            	    	    mixedDelimitedSpreadBlockNoHyphenPair445=mixedDelimitedSpreadBlockNoHyphenPair();

                            	    	    state._fsp--;
                            	    	    if (state.failed) return retval;
                            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoHyphenPair445.getTree());

                            	    	    }
                            	    	    break;

                            	    	default :
                            	    	    break loop245;
                            	        }
                            	    } while (true);


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop246;
                                }
                            } while (true);

                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1136:10: ( whitespace )?
                            int alt247=2;
                            int LA247_0 = input.LA(1);

                            if ( (LA247_0==WHITESPACE) ) {
                                alt247=1;
                            }
                            switch (alt247) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1136:10: whitespace
                                    {
                                    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10768);
                                    whitespace446=whitespace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace446.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair10771);
                            softbreak447=softbreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak447.getTree());

                            }

                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1139:5: ( ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* )?
                            int alt250=2;
                            int LA250_0 = input.LA(1);

                            if ( (LA250_0==WHITESPACE) ) {
                                int LA250_1 = input.LA(2);

                                if ( (LA250_1==LEFT_PARENTHESIS||LA250_1==LEFT_SQUARE_BRACKET||(LA250_1>=DOUBLE_QUOTE && LA250_1<=SOLIDUS)||(LA250_1>=GRAVE_ACCENT && LA250_1<=LATIN_SMALL_LETTER_S)||LA250_1==TILDE||(LA250_1>=LATIN_SMALL_LETTER_N && LA250_1<=LATIN_SMALL_LETTER_V)||LA250_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA250_1>=LATIN_SMALL_LETTER_R && LA250_1<=LATIN_SMALL_LETTER_M)||(LA250_1>=DIGIT_0 && LA250_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                    alt250=1;
                                }
                            }
                            else if ( (LA250_0==LEFT_PARENTHESIS||LA250_0==LEFT_SQUARE_BRACKET||(LA250_0>=DOUBLE_QUOTE && LA250_0<=SOLIDUS)||(LA250_0>=GRAVE_ACCENT && LA250_0<=LATIN_SMALL_LETTER_S)||LA250_0==TILDE||(LA250_0>=LATIN_SMALL_LETTER_N && LA250_0<=LATIN_SMALL_LETTER_V)||LA250_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA250_0>=LATIN_SMALL_LETTER_R && LA250_0<=LATIN_SMALL_LETTER_M)||(LA250_0>=DIGIT_0 && LA250_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt250=1;
                            }
                            switch (alt250) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1139:7: ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )*
                                    {
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1139:7: ( whitespace )?
                                    int alt248=2;
                                    int LA248_0 = input.LA(1);

                                    if ( (LA248_0==WHITESPACE) ) {
                                        alt248=1;
                                    }
                                    switch (alt248) {
                                        case 1 :
                                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1139:7: whitespace
                                            {
                                            pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10799);
                                            whitespace448=whitespace();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace448.getTree());

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10802);
                                    mixedDelimitedSpreadBlockNoHyphenPair449=mixedDelimitedSpreadBlockNoHyphenPair();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoHyphenPair449.getTree());
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1140:7: ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )*
                                    loop249:
                                    do {
                                        int alt249=2;
                                        int LA249_0 = input.LA(1);

                                        if ( (LA249_0==WHITESPACE) ) {
                                            int LA249_1 = input.LA(2);

                                            if ( (LA249_1==LEFT_PARENTHESIS||LA249_1==LEFT_SQUARE_BRACKET||(LA249_1>=DOUBLE_QUOTE && LA249_1<=SOLIDUS)||(LA249_1>=GRAVE_ACCENT && LA249_1<=LATIN_SMALL_LETTER_S)||LA249_1==TILDE||(LA249_1>=LATIN_SMALL_LETTER_N && LA249_1<=LATIN_SMALL_LETTER_V)||LA249_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA249_1>=LATIN_SMALL_LETTER_R && LA249_1<=LATIN_SMALL_LETTER_M)||(LA249_1>=DIGIT_0 && LA249_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                                alt249=1;
                                            }


                                        }


                                        switch (alt249) {
                                    	case 1 :
                                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1140:9: whitespace mixedDelimitedSpreadBlockNoHyphenPair
                                    	    {
                                    	    pushFollow(FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10813);
                                    	    whitespace450=whitespace();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace450.getTree());
                                    	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10815);
                                    	    mixedDelimitedSpreadBlockNoHyphenPair451=mixedDelimitedSpreadBlockNoHyphenPair();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedSpreadBlockNoHyphenPair451.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop249;
                                        }
                                    } while (true);


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "spreadBlockBodyNoHyphenPair"

    public static class mixedDelimitedSpreadBlockNoHyphenPair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixedDelimitedSpreadBlockNoHyphenPair"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1148:1: mixedDelimitedSpreadBlockNoHyphenPair : ( ( word ( ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) | blockAfterTilde );
    public final NovelangParser.mixedDelimitedSpreadBlockNoHyphenPair_return mixedDelimitedSpreadBlockNoHyphenPair() throws RecognitionException {
        NovelangParser.mixedDelimitedSpreadBlockNoHyphenPair_return retval = new NovelangParser.mixedDelimitedSpreadBlockNoHyphenPair_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.word_return word452 = null;

        NovelangParser.punctuationSign_return punctuationSign453 = null;

        NovelangParser.delimitedSpreadblockNoHyphenPair_return delimitedSpreadblockNoHyphenPair454 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral455 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral456 = null;

        NovelangParser.word_return word457 = null;

        NovelangParser.punctuationSign_return punctuationSign458 = null;

        NovelangParser.delimitedSpreadblockNoHyphenPair_return delimitedSpreadblockNoHyphenPair459 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral460 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral461 = null;

        NovelangParser.word_return word462 = null;

        NovelangParser.punctuationSign_return punctuationSign463 = null;

        NovelangParser.delimitedSpreadblockNoHyphenPair_return delimitedSpreadblockNoHyphenPair464 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral465 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral466 = null;

        NovelangParser.word_return word467 = null;

        NovelangParser.blockAfterTilde_return blockAfterTilde468 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1149:3: ( ( word ( ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) | blockAfterTilde )
            int alt261=3;
            switch ( input.LA(1) ) {
            case LATIN_SMALL_LETTER_F:
            case LATIN_SMALL_LETTER_I:
            case LATIN_SMALL_LETTER_L:
            case LATIN_SMALL_LETTER_E:
            case LATIN_SMALL_LETTER_H:
            case LATIN_SMALL_LETTER_T:
            case LATIN_SMALL_LETTER_P:
            case LATIN_SMALL_LETTER_S:
            case LATIN_SMALL_LETTER_N:
            case LATIN_SMALL_LETTER_G:
            case LATIN_SMALL_LETTER_J:
            case LATIN_SMALL_LETTER_V:
            case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
            case LATIN_SMALL_LETTER_R:
            case LATIN_SMALL_LETTER_C:
            case LATIN_SMALL_LETTER_U:
            case LATIN_SMALL_LETTER_O:
            case LATIN_SMALL_LETTER_A:
            case LATIN_SMALL_LETTER_D:
            case LATIN_SMALL_LETTER_B:
            case LATIN_SMALL_LETTER_Y:
            case LATIN_SMALL_LETTER_M:
            case DIGIT_0:
            case DIGIT_1:
            case DIGIT_2:
            case DIGIT_3:
            case DIGIT_4:
            case DIGIT_5:
            case DIGIT_6:
            case DIGIT_7:
            case DIGIT_8:
            case DIGIT_9:
            case LATIN_CAPITAL_LETTER_A:
            case LATIN_CAPITAL_LETTER_B:
            case LATIN_CAPITAL_LETTER_C:
            case LATIN_CAPITAL_LETTER_D:
            case LATIN_CAPITAL_LETTER_E:
            case LATIN_CAPITAL_LETTER_F:
            case LATIN_SMALL_LETTER_K:
            case LATIN_SMALL_LETTER_Q:
            case LATIN_SMALL_LETTER_W:
            case LATIN_SMALL_LETTER_X:
            case LATIN_SMALL_LETTER_Z:
            case LATIN_CAPITAL_LETTER_G:
            case LATIN_CAPITAL_LETTER_H:
            case LATIN_CAPITAL_LETTER_I:
            case LATIN_CAPITAL_LETTER_J:
            case LATIN_CAPITAL_LETTER_K:
            case LATIN_CAPITAL_LETTER_L:
            case LATIN_CAPITAL_LETTER_M:
            case LATIN_CAPITAL_LETTER_N:
            case LATIN_CAPITAL_LETTER_O:
            case LATIN_CAPITAL_LETTER_P:
            case LATIN_CAPITAL_LETTER_Q:
            case LATIN_CAPITAL_LETTER_R:
            case LATIN_CAPITAL_LETTER_S:
            case LATIN_CAPITAL_LETTER_T:
            case LATIN_CAPITAL_LETTER_U:
            case LATIN_CAPITAL_LETTER_V:
            case LATIN_CAPITAL_LETTER_W:
            case LATIN_CAPITAL_LETTER_X:
            case LATIN_CAPITAL_LETTER_Y:
            case LATIN_CAPITAL_LETTER_Z:
            case LATIN_SMALL_LETTER_A_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
            case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_A_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
            case LATIN_SMALL_LETTER_AE:
            case LATIN_CAPITAL_LETTER_AE:
            case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
            case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
            case LATIN_SMALL_LETTER_E_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
            case LATIN_SMALL_LETTER_E_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
            case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_I_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
            case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_O_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
            case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
            case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
            case LATIN_SMALL_LETTER_U_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
            case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_U_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
            case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
            case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
            case LATIN_SMALL_LIGATURE_OE:
            case LATIN_CAPITAL_LIGATURE_OE:
                {
                alt261=1;
                }
                break;
            case LEFT_PARENTHESIS:
            case LEFT_SQUARE_BRACKET:
            case DOUBLE_QUOTE:
            case SOLIDUS:
            case GRAVE_ACCENT:
            case FULL_STOP:
            case COMMA:
            case QUESTION_MARK:
            case EXCLAMATION_MARK:
            case SEMICOLON:
            case COLON:
            case APOSTROPHE:
                {
                alt261=2;
                }
                break;
            case TILDE:
                {
                alt261=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;
            }

            switch (alt261) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1149:5: ( word ( ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1149:5: ( word ( ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1149:7: word ( ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    {
                    pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlockNoHyphenPair10867);
                    word452=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, word452.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1150:7: ( ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    loop255:
                    do {
                        int alt255=2;
                        int LA255_0 = input.LA(1);

                        if ( (LA255_0==LEFT_PARENTHESIS||LA255_0==LEFT_SQUARE_BRACKET||(LA255_0>=DOUBLE_QUOTE && LA255_0<=SOLIDUS)||(LA255_0>=GRAVE_ACCENT && LA255_0<=APOSTROPHE)) ) {
                            alt255=1;
                        }


                        switch (alt255) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1150:9: ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( word )?
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1150:9: ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral )
                    	    int alt253=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt253=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case DOUBLE_QUOTE:
                    	    case SOLIDUS:
                    	        {
                    	        alt253=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA253_3 = input.LA(2);

                    	        if ( (LA253_3==GRAVE_ACCENT) ) {
                    	            alt253=4;
                    	        }
                    	        else if ( ((LA253_3>=COMMERCIAL_AT && LA253_3<=WHITESPACE)||(LA253_3>=VERTICAL_LINE && LA253_3<=GREATER_THAN_SIGN)||(LA253_3>=FULL_STOP && LA253_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA253_3>=LATIN_SMALL_LETTER_R && LA253_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt253=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 253, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 253, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt253) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1150:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoHyphenPair10882);
                    	            punctuationSign453=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign453.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1151:13: delimitedSpreadblockNoHyphenPair
                    	            {
                    	            pushFollow(FOLLOW_delimitedSpreadblockNoHyphenPair_in_mixedDelimitedSpreadBlockNoHyphenPair10897);
                    	            delimitedSpreadblockNoHyphenPair454=delimitedSpreadblockNoHyphenPair();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedSpreadblockNoHyphenPair454.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1152:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoHyphenPair10912);
                    	            softInlineLiteral455=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral455.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1153:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoHyphenPair10927);
                    	            hardInlineLiteral456=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral456.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1154:9: ( word )?
                    	    int alt254=2;
                    	    int LA254_0 = input.LA(1);

                    	    if ( ((LA254_0>=LATIN_SMALL_LETTER_F && LA254_0<=LATIN_SMALL_LETTER_S)||(LA254_0>=LATIN_SMALL_LETTER_N && LA254_0<=LATIN_SMALL_LETTER_V)||LA254_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA254_0>=LATIN_SMALL_LETTER_R && LA254_0<=LATIN_SMALL_LETTER_M)||(LA254_0>=DIGIT_0 && LA254_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt254=1;
                    	    }
                    	    switch (alt254) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1154:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlockNoHyphenPair10938);
                    	            word457=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word457.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop255;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1156:5: ( ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1156:5: ( ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1156:7: ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) )* ( word )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1156:7: ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral )
                    int alt256=4;
                    switch ( input.LA(1) ) {
                    case FULL_STOP:
                    case COMMA:
                    case QUESTION_MARK:
                    case EXCLAMATION_MARK:
                    case SEMICOLON:
                    case COLON:
                    case APOSTROPHE:
                        {
                        alt256=1;
                        }
                        break;
                    case LEFT_PARENTHESIS:
                    case LEFT_SQUARE_BRACKET:
                    case DOUBLE_QUOTE:
                    case SOLIDUS:
                        {
                        alt256=2;
                        }
                        break;
                    case GRAVE_ACCENT:
                        {
                        int LA256_3 = input.LA(2);

                        if ( (LA256_3==GRAVE_ACCENT) ) {
                            alt256=4;
                        }
                        else if ( ((LA256_3>=COMMERCIAL_AT && LA256_3<=WHITESPACE)||(LA256_3>=VERTICAL_LINE && LA256_3<=GREATER_THAN_SIGN)||(LA256_3>=FULL_STOP && LA256_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA256_3>=LATIN_SMALL_LETTER_R && LA256_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt256=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 256, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 256, 0, input);

                        throw nvae;
                    }

                    switch (alt256) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1156:11: punctuationSign
                            {
                            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoHyphenPair10960);
                            punctuationSign458=punctuationSign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign458.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1157:11: delimitedSpreadblockNoHyphenPair
                            {
                            pushFollow(FOLLOW_delimitedSpreadblockNoHyphenPair_in_mixedDelimitedSpreadBlockNoHyphenPair10973);
                            delimitedSpreadblockNoHyphenPair459=delimitedSpreadblockNoHyphenPair();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedSpreadblockNoHyphenPair459.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1158:11: softInlineLiteral
                            {
                            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoHyphenPair10986);
                            softInlineLiteral460=softInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral460.getTree());

                            }
                            break;
                        case 4 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1159:11: hardInlineLiteral
                            {
                            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoHyphenPair10999);
                            hardInlineLiteral461=hardInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral461.getTree());

                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1161:7: ( ( word )? ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) )*
                    loop259:
                    do {
                        int alt259=2;
                        alt259 = dfa259.predict(input);
                        switch (alt259) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1161:9: ( word )? ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1161:9: ( word )?
                    	    int alt257=2;
                    	    int LA257_0 = input.LA(1);

                    	    if ( ((LA257_0>=LATIN_SMALL_LETTER_F && LA257_0<=LATIN_SMALL_LETTER_S)||(LA257_0>=LATIN_SMALL_LETTER_N && LA257_0<=LATIN_SMALL_LETTER_V)||LA257_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA257_0>=LATIN_SMALL_LETTER_R && LA257_0<=LATIN_SMALL_LETTER_M)||(LA257_0>=DIGIT_0 && LA257_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt257=1;
                    	    }
                    	    switch (alt257) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1161:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlockNoHyphenPair11018);
                    	            word462=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word462.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1162:9: ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral )
                    	    int alt258=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt258=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case DOUBLE_QUOTE:
                    	    case SOLIDUS:
                    	        {
                    	        alt258=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA258_3 = input.LA(2);

                    	        if ( (LA258_3==GRAVE_ACCENT) ) {
                    	            alt258=4;
                    	        }
                    	        else if ( ((LA258_3>=COMMERCIAL_AT && LA258_3<=WHITESPACE)||(LA258_3>=VERTICAL_LINE && LA258_3<=GREATER_THAN_SIGN)||(LA258_3>=FULL_STOP && LA258_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA258_3>=LATIN_SMALL_LETTER_R && LA258_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt258=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 258, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 258, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt258) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1162:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoHyphenPair11034);
                    	            punctuationSign463=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign463.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1163:13: delimitedSpreadblockNoHyphenPair
                    	            {
                    	            pushFollow(FOLLOW_delimitedSpreadblockNoHyphenPair_in_mixedDelimitedSpreadBlockNoHyphenPair11049);
                    	            delimitedSpreadblockNoHyphenPair464=delimitedSpreadblockNoHyphenPair();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedSpreadblockNoHyphenPair464.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1164:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoHyphenPair11064);
                    	            softInlineLiteral465=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral465.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1165:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoHyphenPair11079);
                    	            hardInlineLiteral466=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral466.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop259;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1168:7: ( word )?
                    int alt260=2;
                    int LA260_0 = input.LA(1);

                    if ( ((LA260_0>=LATIN_SMALL_LETTER_F && LA260_0<=LATIN_SMALL_LETTER_S)||(LA260_0>=LATIN_SMALL_LETTER_N && LA260_0<=LATIN_SMALL_LETTER_V)||LA260_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA260_0>=LATIN_SMALL_LETTER_R && LA260_0<=LATIN_SMALL_LETTER_M)||(LA260_0>=DIGIT_0 && LA260_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt260=1;
                    }
                    switch (alt260) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1168:7: word
                            {
                            pushFollow(FOLLOW_word_in_mixedDelimitedSpreadBlockNoHyphenPair11121);
                            word467=word();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, word467.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1170:7: blockAfterTilde
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_blockAfterTilde_in_mixedDelimitedSpreadBlockNoHyphenPair11137);
                    blockAfterTilde468=blockAfterTilde();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockAfterTilde468.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixedDelimitedSpreadBlockNoHyphenPair"

    public static class hyphenPairMonoblock_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hyphenPairMonoblock"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1174:1: hyphenPairMonoblock : ( HYPHEN_MINUS HYPHEN_MINUS ( whitespace )? (b+= monoblockBodyNoHyphenPair ( whitespace )? )? HYPHEN_MINUS HYPHEN_MINUS ) -> ^( BLOCK_INSIDE_HYPHEN_PAIRS ( $b)+ ) ;
    public final NovelangParser.hyphenPairMonoblock_return hyphenPairMonoblock() throws RecognitionException {
        NovelangParser.hyphenPairMonoblock_return retval = new NovelangParser.hyphenPairMonoblock_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token HYPHEN_MINUS469=null;
        Token HYPHEN_MINUS470=null;
        Token HYPHEN_MINUS473=null;
        Token HYPHEN_MINUS474=null;
        List list_b=null;
        NovelangParser.whitespace_return whitespace471 = null;

        NovelangParser.whitespace_return whitespace472 = null;

        RuleReturnScope b = null;
        Object HYPHEN_MINUS469_tree=null;
        Object HYPHEN_MINUS470_tree=null;
        Object HYPHEN_MINUS473_tree=null;
        Object HYPHEN_MINUS474_tree=null;
        RewriteRuleTokenStream stream_HYPHEN_MINUS=new RewriteRuleTokenStream(adaptor,"token HYPHEN_MINUS");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        RewriteRuleSubtreeStream stream_monoblockBodyNoHyphenPair=new RewriteRuleSubtreeStream(adaptor,"rule monoblockBodyNoHyphenPair");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1175:2: ( ( HYPHEN_MINUS HYPHEN_MINUS ( whitespace )? (b+= monoblockBodyNoHyphenPair ( whitespace )? )? HYPHEN_MINUS HYPHEN_MINUS ) -> ^( BLOCK_INSIDE_HYPHEN_PAIRS ( $b)+ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1175:4: ( HYPHEN_MINUS HYPHEN_MINUS ( whitespace )? (b+= monoblockBodyNoHyphenPair ( whitespace )? )? HYPHEN_MINUS HYPHEN_MINUS )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1175:4: ( HYPHEN_MINUS HYPHEN_MINUS ( whitespace )? (b+= monoblockBodyNoHyphenPair ( whitespace )? )? HYPHEN_MINUS HYPHEN_MINUS )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1176:7: HYPHEN_MINUS HYPHEN_MINUS ( whitespace )? (b+= monoblockBodyNoHyphenPair ( whitespace )? )? HYPHEN_MINUS HYPHEN_MINUS
            {
            if ( state.backtracking==0 ) {
               delegate.startDelimitedText( BlockDelimiter.TWO_HYPHENS, input.LT( 1 ) ) ; 
            }
            HYPHEN_MINUS469=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_hyphenPairMonoblock11169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_HYPHEN_MINUS.add(HYPHEN_MINUS469);

            HYPHEN_MINUS470=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_hyphenPairMonoblock11171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_HYPHEN_MINUS.add(HYPHEN_MINUS470);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1177:33: ( whitespace )?
            int alt262=2;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==WHITESPACE) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1177:33: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_hyphenPairMonoblock11173);
                    whitespace471=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whitespace.add(whitespace471.getTree());

                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1178:6: (b+= monoblockBodyNoHyphenPair ( whitespace )? )?
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( (LA264_0==LEFT_PARENTHESIS||LA264_0==LEFT_SQUARE_BRACKET||(LA264_0>=DOUBLE_QUOTE && LA264_0<=SOLIDUS)||(LA264_0>=GRAVE_ACCENT && LA264_0<=LATIN_SMALL_LETTER_S)||(LA264_0>=LATIN_SMALL_LETTER_N && LA264_0<=LATIN_SMALL_LETTER_V)||LA264_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA264_0>=LATIN_SMALL_LETTER_R && LA264_0<=LATIN_SMALL_LETTER_M)||(LA264_0>=DIGIT_0 && LA264_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1178:8: b+= monoblockBodyNoHyphenPair ( whitespace )?
                    {
                    pushFollow(FOLLOW_monoblockBodyNoHyphenPair_in_hyphenPairMonoblock11187);
                    b=monoblockBodyNoHyphenPair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monoblockBodyNoHyphenPair.add(b.getTree());
                    if (list_b==null) list_b=new ArrayList();
                    list_b.add(b.getTree());

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1179:8: ( whitespace )?
                    int alt263=2;
                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==WHITESPACE) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1179:8: whitespace
                            {
                            pushFollow(FOLLOW_whitespace_in_hyphenPairMonoblock11196);
                            whitespace472=whitespace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whitespace.add(whitespace472.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               delegate.reachEndDelimiter( BlockDelimiter.TWO_HYPHENS ) ; 
            }
            HYPHEN_MINUS473=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_hyphenPairMonoblock11220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_HYPHEN_MINUS.add(HYPHEN_MINUS473);

            HYPHEN_MINUS474=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_hyphenPairMonoblock11222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_HYPHEN_MINUS.add(HYPHEN_MINUS474);

            if ( state.backtracking==0 ) {
               delegate.endDelimitedText( BlockDelimiter.TWO_HYPHENS ) ; 
            }

            }



            // AST REWRITE
            // elements: b
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: b
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (Object)adaptor.nil();
            // 1184:6: -> ^( BLOCK_INSIDE_HYPHEN_PAIRS ( $b)+ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1184:9: ^( BLOCK_INSIDE_HYPHEN_PAIRS ( $b)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK_INSIDE_HYPHEN_PAIRS, "BLOCK_INSIDE_HYPHEN_PAIRS"), root_1);

                if ( !(stream_b.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( MismatchedTokenException mte ) {

                  delegate.reportMissingDelimiter( BlockDelimiter.TWO_HYPHENS, mte ) ; 
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hyphenPairMonoblock"

    public static class delimitedMonoblockNoHyphenPair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delimitedMonoblockNoHyphenPair"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1190:1: delimitedMonoblockNoHyphenPair : ( parenthesizedMonoblock | squarebracketsMonoblock | emphasizedMonoblock | doubleQuotedMonoblock );
    public final NovelangParser.delimitedMonoblockNoHyphenPair_return delimitedMonoblockNoHyphenPair() throws RecognitionException {
        NovelangParser.delimitedMonoblockNoHyphenPair_return retval = new NovelangParser.delimitedMonoblockNoHyphenPair_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.parenthesizedMonoblock_return parenthesizedMonoblock475 = null;

        NovelangParser.squarebracketsMonoblock_return squarebracketsMonoblock476 = null;

        NovelangParser.emphasizedMonoblock_return emphasizedMonoblock477 = null;

        NovelangParser.doubleQuotedMonoblock_return doubleQuotedMonoblock478 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1191:3: ( parenthesizedMonoblock | squarebracketsMonoblock | emphasizedMonoblock | doubleQuotedMonoblock )
            int alt265=4;
            switch ( input.LA(1) ) {
            case LEFT_PARENTHESIS:
                {
                alt265=1;
                }
                break;
            case LEFT_SQUARE_BRACKET:
                {
                alt265=2;
                }
                break;
            case SOLIDUS:
                {
                alt265=3;
                }
                break;
            case DOUBLE_QUOTE:
                {
                alt265=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 265, 0, input);

                throw nvae;
            }

            switch (alt265) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1191:5: parenthesizedMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedMonoblock_in_delimitedMonoblockNoHyphenPair11270);
                    parenthesizedMonoblock475=parenthesizedMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedMonoblock475.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1192:5: squarebracketsMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squarebracketsMonoblock_in_delimitedMonoblockNoHyphenPair11276);
                    squarebracketsMonoblock476=squarebracketsMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squarebracketsMonoblock476.getTree());

                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1193:5: emphasizedMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_emphasizedMonoblock_in_delimitedMonoblockNoHyphenPair11282);
                    emphasizedMonoblock477=emphasizedMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, emphasizedMonoblock477.getTree());

                    }
                    break;
                case 4 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1194:5: doubleQuotedMonoblock
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_doubleQuotedMonoblock_in_delimitedMonoblockNoHyphenPair11288);
                    doubleQuotedMonoblock478=doubleQuotedMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, doubleQuotedMonoblock478.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "delimitedMonoblockNoHyphenPair"

    public static class monoblockBodyNoHyphenPair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "monoblockBodyNoHyphenPair"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1197:1: monoblockBodyNoHyphenPair : ( mixedDelimitedMonoblockNoHyphenPair ( whitespace mixedDelimitedMonoblockNoHyphenPair )* ) ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedMonoblockNoHyphenPair ( whitespace mixedDelimitedMonoblockNoHyphenPair )* )* ;
    public final NovelangParser.monoblockBodyNoHyphenPair_return monoblockBodyNoHyphenPair() throws RecognitionException {
        NovelangParser.monoblockBodyNoHyphenPair_return retval = new NovelangParser.monoblockBodyNoHyphenPair_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.mixedDelimitedMonoblockNoHyphenPair_return mixedDelimitedMonoblockNoHyphenPair479 = null;

        NovelangParser.whitespace_return whitespace480 = null;

        NovelangParser.mixedDelimitedMonoblockNoHyphenPair_return mixedDelimitedMonoblockNoHyphenPair481 = null;

        NovelangParser.whitespace_return whitespace482 = null;

        NovelangParser.softbreak_return softbreak483 = null;

        NovelangParser.whitespace_return whitespace484 = null;

        NovelangParser.mixedDelimitedMonoblockNoHyphenPair_return mixedDelimitedMonoblockNoHyphenPair485 = null;

        NovelangParser.whitespace_return whitespace486 = null;

        NovelangParser.mixedDelimitedMonoblockNoHyphenPair_return mixedDelimitedMonoblockNoHyphenPair487 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1198:3: ( ( mixedDelimitedMonoblockNoHyphenPair ( whitespace mixedDelimitedMonoblockNoHyphenPair )* ) ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedMonoblockNoHyphenPair ( whitespace mixedDelimitedMonoblockNoHyphenPair )* )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1198:5: ( mixedDelimitedMonoblockNoHyphenPair ( whitespace mixedDelimitedMonoblockNoHyphenPair )* ) ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedMonoblockNoHyphenPair ( whitespace mixedDelimitedMonoblockNoHyphenPair )* )*
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1198:5: ( mixedDelimitedMonoblockNoHyphenPair ( whitespace mixedDelimitedMonoblockNoHyphenPair )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1198:7: mixedDelimitedMonoblockNoHyphenPair ( whitespace mixedDelimitedMonoblockNoHyphenPair )*
            {
            pushFollow(FOLLOW_mixedDelimitedMonoblockNoHyphenPair_in_monoblockBodyNoHyphenPair11303);
            mixedDelimitedMonoblockNoHyphenPair479=mixedDelimitedMonoblockNoHyphenPair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedMonoblockNoHyphenPair479.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1199:7: ( whitespace mixedDelimitedMonoblockNoHyphenPair )*
            loop266:
            do {
                int alt266=2;
                int LA266_0 = input.LA(1);

                if ( (LA266_0==WHITESPACE) ) {
                    int LA266_1 = input.LA(2);

                    if ( (LA266_1==LEFT_PARENTHESIS||LA266_1==LEFT_SQUARE_BRACKET||(LA266_1>=DOUBLE_QUOTE && LA266_1<=SOLIDUS)||(LA266_1>=GRAVE_ACCENT && LA266_1<=LATIN_SMALL_LETTER_S)||(LA266_1>=LATIN_SMALL_LETTER_N && LA266_1<=LATIN_SMALL_LETTER_V)||LA266_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA266_1>=LATIN_SMALL_LETTER_R && LA266_1<=LATIN_SMALL_LETTER_M)||(LA266_1>=DIGIT_0 && LA266_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt266=1;
                    }


                }


                switch (alt266) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1199:9: whitespace mixedDelimitedMonoblockNoHyphenPair
            	    {
            	    pushFollow(FOLLOW_whitespace_in_monoblockBodyNoHyphenPair11313);
            	    whitespace480=whitespace();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace480.getTree());
            	    pushFollow(FOLLOW_mixedDelimitedMonoblockNoHyphenPair_in_monoblockBodyNoHyphenPair11315);
            	    mixedDelimitedMonoblockNoHyphenPair481=mixedDelimitedMonoblockNoHyphenPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedMonoblockNoHyphenPair481.getTree());

            	    }
            	    break;

            	default :
            	    break loop266;
                }
            } while (true);


            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1201:5: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedMonoblockNoHyphenPair ( whitespace mixedDelimitedMonoblockNoHyphenPair )* )*
            loop270:
            do {
                int alt270=2;
                int LA270_0 = input.LA(1);

                if ( (LA270_0==WHITESPACE) ) {
                    int LA270_1 = input.LA(2);

                    if ( (LA270_1==SOFTBREAK) ) {
                        alt270=1;
                    }


                }
                else if ( (LA270_0==SOFTBREAK) ) {
                    alt270=1;
                }


                switch (alt270) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1201:7: ( whitespace )? softbreak ( whitespace )? mixedDelimitedMonoblockNoHyphenPair ( whitespace mixedDelimitedMonoblockNoHyphenPair )*
            	    {
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1201:7: ( whitespace )?
            	    int alt267=2;
            	    int LA267_0 = input.LA(1);

            	    if ( (LA267_0==WHITESPACE) ) {
            	        alt267=1;
            	    }
            	    switch (alt267) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1201:7: whitespace
            	            {
            	            pushFollow(FOLLOW_whitespace_in_monoblockBodyNoHyphenPair11332);
            	            whitespace482=whitespace();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace482.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_softbreak_in_monoblockBodyNoHyphenPair11335);
            	    softbreak483=softbreak();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak483.getTree());
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1201:29: ( whitespace )?
            	    int alt268=2;
            	    int LA268_0 = input.LA(1);

            	    if ( (LA268_0==WHITESPACE) ) {
            	        alt268=1;
            	    }
            	    switch (alt268) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1201:29: whitespace
            	            {
            	            pushFollow(FOLLOW_whitespace_in_monoblockBodyNoHyphenPair11337);
            	            whitespace484=whitespace();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace484.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_mixedDelimitedMonoblockNoHyphenPair_in_monoblockBodyNoHyphenPair11347);
            	    mixedDelimitedMonoblockNoHyphenPair485=mixedDelimitedMonoblockNoHyphenPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedMonoblockNoHyphenPair485.getTree());
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1203:7: ( whitespace mixedDelimitedMonoblockNoHyphenPair )*
            	    loop269:
            	    do {
            	        int alt269=2;
            	        int LA269_0 = input.LA(1);

            	        if ( (LA269_0==WHITESPACE) ) {
            	            int LA269_1 = input.LA(2);

            	            if ( (LA269_1==LEFT_PARENTHESIS||LA269_1==LEFT_SQUARE_BRACKET||(LA269_1>=DOUBLE_QUOTE && LA269_1<=SOLIDUS)||(LA269_1>=GRAVE_ACCENT && LA269_1<=LATIN_SMALL_LETTER_S)||(LA269_1>=LATIN_SMALL_LETTER_N && LA269_1<=LATIN_SMALL_LETTER_V)||LA269_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA269_1>=LATIN_SMALL_LETTER_R && LA269_1<=LATIN_SMALL_LETTER_M)||(LA269_1>=DIGIT_0 && LA269_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
            	                alt269=1;
            	            }


            	        }


            	        switch (alt269) {
            	    	case 1 :
            	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1203:9: whitespace mixedDelimitedMonoblockNoHyphenPair
            	    	    {
            	    	    pushFollow(FOLLOW_whitespace_in_monoblockBodyNoHyphenPair11357);
            	    	    whitespace486=whitespace();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace486.getTree());
            	    	    pushFollow(FOLLOW_mixedDelimitedMonoblockNoHyphenPair_in_monoblockBodyNoHyphenPair11368);
            	    	    mixedDelimitedMonoblockNoHyphenPair487=mixedDelimitedMonoblockNoHyphenPair();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixedDelimitedMonoblockNoHyphenPair487.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop269;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop270;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "monoblockBodyNoHyphenPair"

    public static class mixedDelimitedMonoblockNoHyphenPair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixedDelimitedMonoblockNoHyphenPair"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1209:1: mixedDelimitedMonoblockNoHyphenPair : ( ( word ( ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) );
    public final NovelangParser.mixedDelimitedMonoblockNoHyphenPair_return mixedDelimitedMonoblockNoHyphenPair() throws RecognitionException {
        NovelangParser.mixedDelimitedMonoblockNoHyphenPair_return retval = new NovelangParser.mixedDelimitedMonoblockNoHyphenPair_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.word_return word488 = null;

        NovelangParser.punctuationSign_return punctuationSign489 = null;

        NovelangParser.delimitedMonoblockNoHyphenPair_return delimitedMonoblockNoHyphenPair490 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral491 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral492 = null;

        NovelangParser.word_return word493 = null;

        NovelangParser.punctuationSign_return punctuationSign494 = null;

        NovelangParser.delimitedMonoblockNoHyphenPair_return delimitedMonoblockNoHyphenPair495 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral496 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral497 = null;

        NovelangParser.word_return word498 = null;

        NovelangParser.punctuationSign_return punctuationSign499 = null;

        NovelangParser.delimitedMonoblockNoHyphenPair_return delimitedMonoblockNoHyphenPair500 = null;

        NovelangParser.softInlineLiteral_return softInlineLiteral501 = null;

        NovelangParser.hardInlineLiteral_return hardInlineLiteral502 = null;

        NovelangParser.word_return word503 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1213:3: ( ( word ( ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) )
            int alt279=2;
            int LA279_0 = input.LA(1);

            if ( ((LA279_0>=LATIN_SMALL_LETTER_F && LA279_0<=LATIN_SMALL_LETTER_S)||(LA279_0>=LATIN_SMALL_LETTER_N && LA279_0<=LATIN_SMALL_LETTER_V)||LA279_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA279_0>=LATIN_SMALL_LETTER_R && LA279_0<=LATIN_SMALL_LETTER_M)||(LA279_0>=DIGIT_0 && LA279_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt279=1;
            }
            else if ( (LA279_0==LEFT_PARENTHESIS||LA279_0==LEFT_SQUARE_BRACKET||(LA279_0>=DOUBLE_QUOTE && LA279_0<=SOLIDUS)||(LA279_0>=GRAVE_ACCENT && LA279_0<=APOSTROPHE)) ) {
                alt279=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 279, 0, input);

                throw nvae;
            }
            switch (alt279) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1213:5: ( word ( ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1213:5: ( word ( ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( word )? )* )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1213:7: word ( ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    {
                    pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoHyphenPair11424);
                    word488=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, word488.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1214:7: ( ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( word )? )*
                    loop273:
                    do {
                        int alt273=2;
                        int LA273_0 = input.LA(1);

                        if ( (LA273_0==LEFT_PARENTHESIS||LA273_0==LEFT_SQUARE_BRACKET||(LA273_0>=DOUBLE_QUOTE && LA273_0<=SOLIDUS)||(LA273_0>=GRAVE_ACCENT && LA273_0<=APOSTROPHE)) ) {
                            alt273=1;
                        }


                        switch (alt273) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1214:9: ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( word )?
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1214:9: ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral )
                    	    int alt271=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt271=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case DOUBLE_QUOTE:
                    	    case SOLIDUS:
                    	        {
                    	        alt271=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA271_3 = input.LA(2);

                    	        if ( (LA271_3==GRAVE_ACCENT) ) {
                    	            alt271=4;
                    	        }
                    	        else if ( ((LA271_3>=COMMERCIAL_AT && LA271_3<=WHITESPACE)||(LA271_3>=VERTICAL_LINE && LA271_3<=GREATER_THAN_SIGN)||(LA271_3>=FULL_STOP && LA271_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA271_3>=LATIN_SMALL_LETTER_R && LA271_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt271=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 271, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 271, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt271) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1214:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoHyphenPair11439);
                    	            punctuationSign489=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign489.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1215:13: delimitedMonoblockNoHyphenPair
                    	            {
                    	            pushFollow(FOLLOW_delimitedMonoblockNoHyphenPair_in_mixedDelimitedMonoblockNoHyphenPair11454);
                    	            delimitedMonoblockNoHyphenPair490=delimitedMonoblockNoHyphenPair();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblockNoHyphenPair490.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1216:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoHyphenPair11469);
                    	            softInlineLiteral491=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral491.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1217:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoHyphenPair11484);
                    	            hardInlineLiteral492=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral492.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1218:9: ( word )?
                    	    int alt272=2;
                    	    int LA272_0 = input.LA(1);

                    	    if ( ((LA272_0>=LATIN_SMALL_LETTER_F && LA272_0<=LATIN_SMALL_LETTER_S)||(LA272_0>=LATIN_SMALL_LETTER_N && LA272_0<=LATIN_SMALL_LETTER_V)||LA272_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA272_0>=LATIN_SMALL_LETTER_R && LA272_0<=LATIN_SMALL_LETTER_M)||(LA272_0>=DIGIT_0 && LA272_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt272=1;
                    	    }
                    	    switch (alt272) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1218:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoHyphenPair11495);
                    	            word493=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word493.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop273;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1220:5: ( ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1220:5: ( ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) )* ( word )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1220:7: ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) )* ( word )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1220:7: ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral )
                    int alt274=4;
                    switch ( input.LA(1) ) {
                    case FULL_STOP:
                    case COMMA:
                    case QUESTION_MARK:
                    case EXCLAMATION_MARK:
                    case SEMICOLON:
                    case COLON:
                    case APOSTROPHE:
                        {
                        alt274=1;
                        }
                        break;
                    case LEFT_PARENTHESIS:
                    case LEFT_SQUARE_BRACKET:
                    case DOUBLE_QUOTE:
                    case SOLIDUS:
                        {
                        alt274=2;
                        }
                        break;
                    case GRAVE_ACCENT:
                        {
                        int LA274_3 = input.LA(2);

                        if ( (LA274_3==GRAVE_ACCENT) ) {
                            alt274=4;
                        }
                        else if ( ((LA274_3>=COMMERCIAL_AT && LA274_3<=WHITESPACE)||(LA274_3>=VERTICAL_LINE && LA274_3<=GREATER_THAN_SIGN)||(LA274_3>=FULL_STOP && LA274_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA274_3>=LATIN_SMALL_LETTER_R && LA274_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt274=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 274, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 274, 0, input);

                        throw nvae;
                    }

                    switch (alt274) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1220:11: punctuationSign
                            {
                            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoHyphenPair11517);
                            punctuationSign494=punctuationSign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign494.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1221:11: delimitedMonoblockNoHyphenPair
                            {
                            pushFollow(FOLLOW_delimitedMonoblockNoHyphenPair_in_mixedDelimitedMonoblockNoHyphenPair11530);
                            delimitedMonoblockNoHyphenPair495=delimitedMonoblockNoHyphenPair();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblockNoHyphenPair495.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1222:11: softInlineLiteral
                            {
                            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoHyphenPair11543);
                            softInlineLiteral496=softInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral496.getTree());

                            }
                            break;
                        case 4 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1223:11: hardInlineLiteral
                            {
                            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoHyphenPair11556);
                            hardInlineLiteral497=hardInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral497.getTree());

                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1225:7: ( ( word )? ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) )*
                    loop277:
                    do {
                        int alt277=2;
                        alt277 = dfa277.predict(input);
                        switch (alt277) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1225:9: ( word )? ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1225:9: ( word )?
                    	    int alt275=2;
                    	    int LA275_0 = input.LA(1);

                    	    if ( ((LA275_0>=LATIN_SMALL_LETTER_F && LA275_0<=LATIN_SMALL_LETTER_S)||(LA275_0>=LATIN_SMALL_LETTER_N && LA275_0<=LATIN_SMALL_LETTER_V)||LA275_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA275_0>=LATIN_SMALL_LETTER_R && LA275_0<=LATIN_SMALL_LETTER_M)||(LA275_0>=DIGIT_0 && LA275_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt275=1;
                    	    }
                    	    switch (alt275) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1225:9: word
                    	            {
                    	            pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoHyphenPair11575);
                    	            word498=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, word498.getTree());

                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1226:9: ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral )
                    	    int alt276=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt276=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case LEFT_SQUARE_BRACKET:
                    	    case DOUBLE_QUOTE:
                    	    case SOLIDUS:
                    	        {
                    	        alt276=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA276_3 = input.LA(2);

                    	        if ( (LA276_3==GRAVE_ACCENT) ) {
                    	            alt276=4;
                    	        }
                    	        else if ( ((LA276_3>=COMMERCIAL_AT && LA276_3<=WHITESPACE)||(LA276_3>=VERTICAL_LINE && LA276_3<=GREATER_THAN_SIGN)||(LA276_3>=FULL_STOP && LA276_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA276_3>=LATIN_SMALL_LETTER_R && LA276_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt276=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 276, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 276, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt276) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1226:13: punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoHyphenPair11591);
                    	            punctuationSign499=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, punctuationSign499.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1227:13: delimitedMonoblockNoHyphenPair
                    	            {
                    	            pushFollow(FOLLOW_delimitedMonoblockNoHyphenPair_in_mixedDelimitedMonoblockNoHyphenPair11606);
                    	            delimitedMonoblockNoHyphenPair500=delimitedMonoblockNoHyphenPair();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, delimitedMonoblockNoHyphenPair500.getTree());

                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1228:13: softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoHyphenPair11621);
                    	            softInlineLiteral501=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, softInlineLiteral501.getTree());

                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1229:13: hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoHyphenPair11636);
                    	            hardInlineLiteral502=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hardInlineLiteral502.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop277;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1232:7: ( word )?
                    int alt278=2;
                    int LA278_0 = input.LA(1);

                    if ( ((LA278_0>=LATIN_SMALL_LETTER_F && LA278_0<=LATIN_SMALL_LETTER_S)||(LA278_0>=LATIN_SMALL_LETTER_N && LA278_0<=LATIN_SMALL_LETTER_V)||LA278_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA278_0>=LATIN_SMALL_LETTER_R && LA278_0<=LATIN_SMALL_LETTER_M)||(LA278_0>=DIGIT_0 && LA278_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1232:7: word
                            {
                            pushFollow(FOLLOW_word_in_mixedDelimitedMonoblockNoHyphenPair11678);
                            word503=word();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, word503.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixedDelimitedMonoblockNoHyphenPair"

    public static class bigDashedListItem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bigDashedListItem"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1246:1: bigDashedListItem : (i+= tags mediumbreak )? HYPHEN_MINUS HYPHEN_MINUS HYPHEN_MINUS (i+= whitespace i+= mixedDelimitedSpreadBlock )* ( ( (i+= whitespace )? i+= softbreak ( ( url )=>i+= url | ( ( whitespace )? smallDashedListItem )=> (i+= whitespace )? i+= smallDashedListItem | ( (i+= whitespace )? i+= mixedDelimitedSpreadBlock (i+= whitespace i+= mixedDelimitedSpreadBlock )* ) ) )* -> ^( PARAGRAPH_AS_LIST_ITEM_WITH_TRIPLE_HYPHEN_ ( $i)* ) ) ;
    public final NovelangParser.bigDashedListItem_return bigDashedListItem() throws RecognitionException {
        NovelangParser.bigDashedListItem_return retval = new NovelangParser.bigDashedListItem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token HYPHEN_MINUS505=null;
        Token HYPHEN_MINUS506=null;
        Token HYPHEN_MINUS507=null;
        List list_i=null;
        NovelangParser.mediumbreak_return mediumbreak504 = null;

        RuleReturnScope i = null;
        Object HYPHEN_MINUS505_tree=null;
        Object HYPHEN_MINUS506_tree=null;
        Object HYPHEN_MINUS507_tree=null;
        RewriteRuleTokenStream stream_HYPHEN_MINUS=new RewriteRuleTokenStream(adaptor,"token HYPHEN_MINUS");
        RewriteRuleSubtreeStream stream_tags=new RewriteRuleSubtreeStream(adaptor,"rule tags");
        RewriteRuleSubtreeStream stream_mediumbreak=new RewriteRuleSubtreeStream(adaptor,"rule mediumbreak");
        RewriteRuleSubtreeStream stream_smallDashedListItem=new RewriteRuleSubtreeStream(adaptor,"rule smallDashedListItem");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        RewriteRuleSubtreeStream stream_mixedDelimitedSpreadBlock=new RewriteRuleSubtreeStream(adaptor,"rule mixedDelimitedSpreadBlock");
        RewriteRuleSubtreeStream stream_url=new RewriteRuleSubtreeStream(adaptor,"rule url");
        RewriteRuleSubtreeStream stream_softbreak=new RewriteRuleSubtreeStream(adaptor,"rule softbreak");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1247:3: ( (i+= tags mediumbreak )? HYPHEN_MINUS HYPHEN_MINUS HYPHEN_MINUS (i+= whitespace i+= mixedDelimitedSpreadBlock )* ( ( (i+= whitespace )? i+= softbreak ( ( url )=>i+= url | ( ( whitespace )? smallDashedListItem )=> (i+= whitespace )? i+= smallDashedListItem | ( (i+= whitespace )? i+= mixedDelimitedSpreadBlock (i+= whitespace i+= mixedDelimitedSpreadBlock )* ) ) )* -> ^( PARAGRAPH_AS_LIST_ITEM_WITH_TRIPLE_HYPHEN_ ( $i)* ) ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1248:5: (i+= tags mediumbreak )? HYPHEN_MINUS HYPHEN_MINUS HYPHEN_MINUS (i+= whitespace i+= mixedDelimitedSpreadBlock )* ( ( (i+= whitespace )? i+= softbreak ( ( url )=>i+= url | ( ( whitespace )? smallDashedListItem )=> (i+= whitespace )? i+= smallDashedListItem | ( (i+= whitespace )? i+= mixedDelimitedSpreadBlock (i+= whitespace i+= mixedDelimitedSpreadBlock )* ) ) )* -> ^( PARAGRAPH_AS_LIST_ITEM_WITH_TRIPLE_HYPHEN_ ( $i)* ) )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1248:5: (i+= tags mediumbreak )?
            int alt280=2;
            int LA280_0 = input.LA(1);

            if ( (LA280_0==COMMERCIAL_AT) ) {
                alt280=1;
            }
            switch (alt280) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1248:7: i+= tags mediumbreak
                    {
                    pushFollow(FOLLOW_tags_in_bigDashedListItem11722);
                    i=tags();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tags.add(i.getTree());
                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i.getTree());

                    pushFollow(FOLLOW_mediumbreak_in_bigDashedListItem11724);
                    mediumbreak504=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak504.getTree());

                    }
                    break;

            }

            HYPHEN_MINUS505=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_bigDashedListItem11734); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_HYPHEN_MINUS.add(HYPHEN_MINUS505);

            HYPHEN_MINUS506=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_bigDashedListItem11736); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_HYPHEN_MINUS.add(HYPHEN_MINUS506);

            HYPHEN_MINUS507=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_bigDashedListItem11738); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_HYPHEN_MINUS.add(HYPHEN_MINUS507);

            if ( state.backtracking==0 ) {
               delegate.enterBlockDelimiterBoundary( input.LT( 1 ) ) ; 
            }
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1251:5: (i+= whitespace i+= mixedDelimitedSpreadBlock )*
            loop281:
            do {
                int alt281=2;
                int LA281_0 = input.LA(1);

                if ( (LA281_0==WHITESPACE) ) {
                    int LA281_1 = input.LA(2);

                    if ( (LA281_1==LEFT_PARENTHESIS||LA281_1==LEFT_SQUARE_BRACKET||(LA281_1>=DOUBLE_QUOTE && LA281_1<=HYPHEN_MINUS)||(LA281_1>=GRAVE_ACCENT && LA281_1<=LATIN_SMALL_LETTER_S)||LA281_1==TILDE||(LA281_1>=LATIN_SMALL_LETTER_N && LA281_1<=LATIN_SMALL_LETTER_V)||LA281_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA281_1>=LATIN_SMALL_LETTER_R && LA281_1<=LATIN_SMALL_LETTER_M)||(LA281_1>=DIGIT_0 && LA281_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt281=1;
                    }


                }


                switch (alt281) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1251:7: i+= whitespace i+= mixedDelimitedSpreadBlock
            	    {
            	    pushFollow(FOLLOW_whitespace_in_bigDashedListItem11757);
            	    i=whitespace();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_whitespace.add(i.getTree());
            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i.getTree());

            	    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_bigDashedListItem11763);
            	    i=mixedDelimitedSpreadBlock();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mixedDelimitedSpreadBlock.add(i.getTree());
            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i.getTree());


            	    }
            	    break;

            	default :
            	    break loop281;
                }
            } while (true);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1252:5: ( ( (i+= whitespace )? i+= softbreak ( ( url )=>i+= url | ( ( whitespace )? smallDashedListItem )=> (i+= whitespace )? i+= smallDashedListItem | ( (i+= whitespace )? i+= mixedDelimitedSpreadBlock (i+= whitespace i+= mixedDelimitedSpreadBlock )* ) ) )* -> ^( PARAGRAPH_AS_LIST_ITEM_WITH_TRIPLE_HYPHEN_ ( $i)* ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1252:7: ( (i+= whitespace )? i+= softbreak ( ( url )=>i+= url | ( ( whitespace )? smallDashedListItem )=> (i+= whitespace )? i+= smallDashedListItem | ( (i+= whitespace )? i+= mixedDelimitedSpreadBlock (i+= whitespace i+= mixedDelimitedSpreadBlock )* ) ) )*
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1252:7: ( (i+= whitespace )? i+= softbreak ( ( url )=>i+= url | ( ( whitespace )? smallDashedListItem )=> (i+= whitespace )? i+= smallDashedListItem | ( (i+= whitespace )? i+= mixedDelimitedSpreadBlock (i+= whitespace i+= mixedDelimitedSpreadBlock )* ) ) )*
            loop287:
            do {
                int alt287=2;
                int LA287_0 = input.LA(1);

                if ( (LA287_0==WHITESPACE) ) {
                    int LA287_1 = input.LA(2);

                    if ( (LA287_1==SOFTBREAK) ) {
                        int LA287_2 = input.LA(3);

                        if ( (LA287_2==LEFT_PARENTHESIS||LA287_2==LEFT_SQUARE_BRACKET||(LA287_2>=DOUBLE_QUOTE && LA287_2<=HYPHEN_MINUS)||(LA287_2>=GRAVE_ACCENT && LA287_2<=LATIN_SMALL_LETTER_S)||LA287_2==TILDE||(LA287_2>=LATIN_SMALL_LETTER_N && LA287_2<=LATIN_SMALL_LETTER_V)||LA287_2==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA287_2>=LATIN_SMALL_LETTER_R && LA287_2<=LATIN_SMALL_LETTER_M)||(LA287_2>=DIGIT_0 && LA287_2<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt287=1;
                        }
                        else if ( (LA287_2==WHITESPACE) ) {
                            int LA287_5 = input.LA(4);

                            if ( (LA287_5==LEFT_PARENTHESIS||LA287_5==LEFT_SQUARE_BRACKET||(LA287_5>=DOUBLE_QUOTE && LA287_5<=HYPHEN_MINUS)||(LA287_5>=GRAVE_ACCENT && LA287_5<=LATIN_SMALL_LETTER_S)||LA287_5==TILDE||(LA287_5>=LATIN_SMALL_LETTER_N && LA287_5<=LATIN_SMALL_LETTER_V)||LA287_5==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA287_5>=LATIN_SMALL_LETTER_R && LA287_5<=LATIN_SMALL_LETTER_M)||(LA287_5>=DIGIT_0 && LA287_5<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt287=1;
                            }


                        }


                    }


                }
                else if ( (LA287_0==SOFTBREAK) ) {
                    int LA287_2 = input.LA(2);

                    if ( (LA287_2==LEFT_PARENTHESIS||LA287_2==LEFT_SQUARE_BRACKET||(LA287_2>=DOUBLE_QUOTE && LA287_2<=HYPHEN_MINUS)||(LA287_2>=GRAVE_ACCENT && LA287_2<=LATIN_SMALL_LETTER_S)||LA287_2==TILDE||(LA287_2>=LATIN_SMALL_LETTER_N && LA287_2<=LATIN_SMALL_LETTER_V)||LA287_2==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA287_2>=LATIN_SMALL_LETTER_R && LA287_2<=LATIN_SMALL_LETTER_M)||(LA287_2>=DIGIT_0 && LA287_2<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt287=1;
                    }
                    else if ( (LA287_2==WHITESPACE) ) {
                        int LA287_5 = input.LA(3);

                        if ( (LA287_5==LEFT_PARENTHESIS||LA287_5==LEFT_SQUARE_BRACKET||(LA287_5>=DOUBLE_QUOTE && LA287_5<=HYPHEN_MINUS)||(LA287_5>=GRAVE_ACCENT && LA287_5<=LATIN_SMALL_LETTER_S)||LA287_5==TILDE||(LA287_5>=LATIN_SMALL_LETTER_N && LA287_5<=LATIN_SMALL_LETTER_V)||LA287_5==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA287_5>=LATIN_SMALL_LETTER_R && LA287_5<=LATIN_SMALL_LETTER_M)||(LA287_5>=DIGIT_0 && LA287_5<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt287=1;
                        }


                    }


                }


                switch (alt287) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1252:9: (i+= whitespace )? i+= softbreak ( ( url )=>i+= url | ( ( whitespace )? smallDashedListItem )=> (i+= whitespace )? i+= smallDashedListItem | ( (i+= whitespace )? i+= mixedDelimitedSpreadBlock (i+= whitespace i+= mixedDelimitedSpreadBlock )* ) )
            	    {
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1252:11: (i+= whitespace )?
            	    int alt282=2;
            	    int LA282_0 = input.LA(1);

            	    if ( (LA282_0==WHITESPACE) ) {
            	        alt282=1;
            	    }
            	    switch (alt282) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1252:11: i+= whitespace
            	            {
            	            pushFollow(FOLLOW_whitespace_in_bigDashedListItem11780);
            	            i=whitespace();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_whitespace.add(i.getTree());
            	            if (list_i==null) list_i=new ArrayList();
            	            list_i.add(i.getTree());


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_softbreak_in_bigDashedListItem11787);
            	    i=softbreak();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_softbreak.add(i.getTree());
            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i.getTree());

            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1253:9: ( ( url )=>i+= url | ( ( whitespace )? smallDashedListItem )=> (i+= whitespace )? i+= smallDashedListItem | ( (i+= whitespace )? i+= mixedDelimitedSpreadBlock (i+= whitespace i+= mixedDelimitedSpreadBlock )* ) )
            	    int alt286=3;
            	    alt286 = dfa286.predict(input);
            	    switch (alt286) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1254:13: ( url )=>i+= url
            	            {
            	            pushFollow(FOLLOW_url_in_bigDashedListItem11825);
            	            i=url();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_url.add(i.getTree());
            	            if (list_i==null) list_i=new ArrayList();
            	            list_i.add(i.getTree());


            	            }
            	            break;
            	        case 2 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1256:13: ( ( whitespace )? smallDashedListItem )=> (i+= whitespace )? i+= smallDashedListItem
            	            {
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1256:54: (i+= whitespace )?
            	            int alt283=2;
            	            int LA283_0 = input.LA(1);

            	            if ( (LA283_0==WHITESPACE) ) {
            	                alt283=1;
            	            }
            	            switch (alt283) {
            	                case 1 :
            	                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1256:54: i+= whitespace
            	                    {
            	                    pushFollow(FOLLOW_whitespace_in_bigDashedListItem11855);
            	                    i=whitespace();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_whitespace.add(i.getTree());
            	                    if (list_i==null) list_i=new ArrayList();
            	                    list_i.add(i.getTree());


            	                    }
            	                    break;

            	            }

            	            pushFollow(FOLLOW_smallDashedListItem_in_bigDashedListItem11862);
            	            i=smallDashedListItem();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_smallDashedListItem.add(i.getTree());
            	            if (list_i==null) list_i=new ArrayList();
            	            list_i.add(i.getTree());


            	            }
            	            break;
            	        case 3 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1257:13: ( (i+= whitespace )? i+= mixedDelimitedSpreadBlock (i+= whitespace i+= mixedDelimitedSpreadBlock )* )
            	            {
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1257:13: ( (i+= whitespace )? i+= mixedDelimitedSpreadBlock (i+= whitespace i+= mixedDelimitedSpreadBlock )* )
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1257:15: (i+= whitespace )? i+= mixedDelimitedSpreadBlock (i+= whitespace i+= mixedDelimitedSpreadBlock )*
            	            {
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1257:17: (i+= whitespace )?
            	            int alt284=2;
            	            int LA284_0 = input.LA(1);

            	            if ( (LA284_0==WHITESPACE) ) {
            	                alt284=1;
            	            }
            	            switch (alt284) {
            	                case 1 :
            	                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1257:17: i+= whitespace
            	                    {
            	                    pushFollow(FOLLOW_whitespace_in_bigDashedListItem11882);
            	                    i=whitespace();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_whitespace.add(i.getTree());
            	                    if (list_i==null) list_i=new ArrayList();
            	                    list_i.add(i.getTree());


            	                    }
            	                    break;

            	            }

            	            pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_bigDashedListItem11889);
            	            i=mixedDelimitedSpreadBlock();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_mixedDelimitedSpreadBlock.add(i.getTree());
            	            if (list_i==null) list_i=new ArrayList();
            	            list_i.add(i.getTree());

            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1258:15: (i+= whitespace i+= mixedDelimitedSpreadBlock )*
            	            loop285:
            	            do {
            	                int alt285=2;
            	                int LA285_0 = input.LA(1);

            	                if ( (LA285_0==WHITESPACE) ) {
            	                    int LA285_1 = input.LA(2);

            	                    if ( (LA285_1==LEFT_PARENTHESIS||LA285_1==LEFT_SQUARE_BRACKET||(LA285_1>=DOUBLE_QUOTE && LA285_1<=HYPHEN_MINUS)||(LA285_1>=GRAVE_ACCENT && LA285_1<=LATIN_SMALL_LETTER_S)||LA285_1==TILDE||(LA285_1>=LATIN_SMALL_LETTER_N && LA285_1<=LATIN_SMALL_LETTER_V)||LA285_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA285_1>=LATIN_SMALL_LETTER_R && LA285_1<=LATIN_SMALL_LETTER_M)||(LA285_1>=DIGIT_0 && LA285_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
            	                        alt285=1;
            	                    }


            	                }


            	                switch (alt285) {
            	            	case 1 :
            	            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1258:17: i+= whitespace i+= mixedDelimitedSpreadBlock
            	            	    {
            	            	    pushFollow(FOLLOW_whitespace_in_bigDashedListItem11912);
            	            	    i=whitespace();

            	            	    state._fsp--;
            	            	    if (state.failed) return retval;
            	            	    if ( state.backtracking==0 ) stream_whitespace.add(i.getTree());
            	            	    if (list_i==null) list_i=new ArrayList();
            	            	    list_i.add(i.getTree());

            	            	    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_bigDashedListItem11918);
            	            	    i=mixedDelimitedSpreadBlock();

            	            	    state._fsp--;
            	            	    if (state.failed) return retval;
            	            	    if ( state.backtracking==0 ) stream_mixedDelimitedSpreadBlock.add(i.getTree());
            	            	    if (list_i==null) list_i=new ArrayList();
            	            	    list_i.add(i.getTree());


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop285;
            	                }
            	            } while (true);


            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop287;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: i
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            root_0 = (Object)adaptor.nil();
            // 1261:10: -> ^( PARAGRAPH_AS_LIST_ITEM_WITH_TRIPLE_HYPHEN_ ( $i)* )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1261:13: ^( PARAGRAPH_AS_LIST_ITEM_WITH_TRIPLE_HYPHEN_ ( $i)* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAGRAPH_AS_LIST_ITEM_WITH_TRIPLE_HYPHEN_, "PARAGRAPH_AS_LIST_ITEM_WITH_TRIPLE_HYPHEN_"), root_1);

                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1261:59: ( $i)*
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextTree());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            if ( state.backtracking==0 ) {
               delegate.leaveBlockDelimiterBoundary() ; 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bigDashedListItem"

    public static class smallDashedListItem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "smallDashedListItem"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1266:1: smallDashedListItem : HYPHEN_MINUS (b+= whitespace b+= mixedDelimitedMonoblock )+ -> ^( EMBEDDED_LIST_ITEM_WITH_HYPHEN_ ( $b)+ ) ;
    public final NovelangParser.smallDashedListItem_return smallDashedListItem() throws RecognitionException {
        NovelangParser.smallDashedListItem_return retval = new NovelangParser.smallDashedListItem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token HYPHEN_MINUS508=null;
        List list_b=null;
        RuleReturnScope b = null;
        Object HYPHEN_MINUS508_tree=null;
        RewriteRuleTokenStream stream_HYPHEN_MINUS=new RewriteRuleTokenStream(adaptor,"token HYPHEN_MINUS");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        RewriteRuleSubtreeStream stream_mixedDelimitedMonoblock=new RewriteRuleSubtreeStream(adaptor,"rule mixedDelimitedMonoblock");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1267:3: ( HYPHEN_MINUS (b+= whitespace b+= mixedDelimitedMonoblock )+ -> ^( EMBEDDED_LIST_ITEM_WITH_HYPHEN_ ( $b)+ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1267:5: HYPHEN_MINUS (b+= whitespace b+= mixedDelimitedMonoblock )+
            {
            HYPHEN_MINUS508=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_smallDashedListItem11992); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_HYPHEN_MINUS.add(HYPHEN_MINUS508);

            if ( state.backtracking==0 ) {
               delegate.enterBlockDelimiterBoundary( input.LT( 1 ) ) ; 
            }
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1269:5: (b+= whitespace b+= mixedDelimitedMonoblock )+
            int cnt288=0;
            loop288:
            do {
                int alt288=2;
                int LA288_0 = input.LA(1);

                if ( (LA288_0==WHITESPACE) ) {
                    int LA288_1 = input.LA(2);

                    if ( (LA288_1==LEFT_PARENTHESIS||LA288_1==LEFT_SQUARE_BRACKET||(LA288_1>=DOUBLE_QUOTE && LA288_1<=HYPHEN_MINUS)||(LA288_1>=GRAVE_ACCENT && LA288_1<=LATIN_SMALL_LETTER_S)||LA288_1==TILDE||(LA288_1>=LATIN_SMALL_LETTER_N && LA288_1<=LATIN_SMALL_LETTER_V)||LA288_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA288_1>=LATIN_SMALL_LETTER_R && LA288_1<=LATIN_SMALL_LETTER_M)||(LA288_1>=DIGIT_0 && LA288_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt288=1;
                    }


                }


                switch (alt288) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1269:7: b+= whitespace b+= mixedDelimitedMonoblock
            	    {
            	    pushFollow(FOLLOW_whitespace_in_smallDashedListItem12011);
            	    b=whitespace();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_whitespace.add(b.getTree());
            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b.getTree());

            	    pushFollow(FOLLOW_mixedDelimitedMonoblock_in_smallDashedListItem12017);
            	    b=mixedDelimitedMonoblock();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mixedDelimitedMonoblock.add(b.getTree());
            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt288 >= 1 ) break loop288;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(288, input);
                        throw eee;
                }
                cnt288++;
            } while (true);

            if ( state.backtracking==0 ) {
               delegate.leaveBlockDelimiterBoundary() ; 
            }


            // AST REWRITE
            // elements: b
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: b
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (Object)adaptor.nil();
            // 1271:5: -> ^( EMBEDDED_LIST_ITEM_WITH_HYPHEN_ ( $b)+ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1271:8: ^( EMBEDDED_LIST_ITEM_WITH_HYPHEN_ ( $b)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EMBEDDED_LIST_ITEM_WITH_HYPHEN_, "EMBEDDED_LIST_ITEM_WITH_HYPHEN_"), root_1);

                if ( !(stream_b.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "smallDashedListItem"

    public static class cellRowSequence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cellRowSequence"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1279:1: cellRowSequence : (c+= tags mediumbreak )? c+= cellRow ( ( ( WHITESPACE )? SOFTBREAK ( WHITESPACE )? ) c+= cellRow )* -> ^( CELL_ROWS_WITH_VERTICAL_LINE ( $c)+ ) ;
    public final NovelangParser.cellRowSequence_return cellRowSequence() throws RecognitionException {
        NovelangParser.cellRowSequence_return retval = new NovelangParser.cellRowSequence_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHITESPACE510=null;
        Token SOFTBREAK511=null;
        Token WHITESPACE512=null;
        List list_c=null;
        NovelangParser.mediumbreak_return mediumbreak509 = null;

        RuleReturnScope c = null;
        Object WHITESPACE510_tree=null;
        Object SOFTBREAK511_tree=null;
        Object WHITESPACE512_tree=null;
        RewriteRuleTokenStream stream_WHITESPACE=new RewriteRuleTokenStream(adaptor,"token WHITESPACE");
        RewriteRuleTokenStream stream_SOFTBREAK=new RewriteRuleTokenStream(adaptor,"token SOFTBREAK");
        RewriteRuleSubtreeStream stream_tags=new RewriteRuleSubtreeStream(adaptor,"rule tags");
        RewriteRuleSubtreeStream stream_mediumbreak=new RewriteRuleSubtreeStream(adaptor,"rule mediumbreak");
        RewriteRuleSubtreeStream stream_cellRow=new RewriteRuleSubtreeStream(adaptor,"rule cellRow");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1280:3: ( (c+= tags mediumbreak )? c+= cellRow ( ( ( WHITESPACE )? SOFTBREAK ( WHITESPACE )? ) c+= cellRow )* -> ^( CELL_ROWS_WITH_VERTICAL_LINE ( $c)+ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1280:5: (c+= tags mediumbreak )? c+= cellRow ( ( ( WHITESPACE )? SOFTBREAK ( WHITESPACE )? ) c+= cellRow )*
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1280:5: (c+= tags mediumbreak )?
            int alt289=2;
            int LA289_0 = input.LA(1);

            if ( (LA289_0==COMMERCIAL_AT) ) {
                alt289=1;
            }
            switch (alt289) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1280:7: c+= tags mediumbreak
                    {
                    pushFollow(FOLLOW_tags_in_cellRowSequence12066);
                    c=tags();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tags.add(c.getTree());
                    if (list_c==null) list_c=new ArrayList();
                    list_c.add(c.getTree());

                    pushFollow(FOLLOW_mediumbreak_in_cellRowSequence12068);
                    mediumbreak509=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak509.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_cellRow_in_cellRowSequence12082);
            c=cellRow();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cellRow.add(c.getTree());
            if (list_c==null) list_c=new ArrayList();
            list_c.add(c.getTree());

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1282:5: ( ( ( WHITESPACE )? SOFTBREAK ( WHITESPACE )? ) c+= cellRow )*
            loop292:
            do {
                int alt292=2;
                int LA292_0 = input.LA(1);

                if ( (LA292_0==WHITESPACE) ) {
                    int LA292_1 = input.LA(2);

                    if ( (LA292_1==SOFTBREAK) ) {
                        int LA292_2 = input.LA(3);

                        if ( (LA292_2==WHITESPACE) ) {
                            int LA292_4 = input.LA(4);

                            if ( (LA292_4==VERTICAL_LINE) ) {
                                alt292=1;
                            }


                        }
                        else if ( (LA292_2==VERTICAL_LINE) ) {
                            alt292=1;
                        }


                    }


                }
                else if ( (LA292_0==SOFTBREAK) ) {
                    int LA292_2 = input.LA(2);

                    if ( (LA292_2==WHITESPACE) ) {
                        int LA292_4 = input.LA(3);

                        if ( (LA292_4==VERTICAL_LINE) ) {
                            alt292=1;
                        }


                    }
                    else if ( (LA292_2==VERTICAL_LINE) ) {
                        alt292=1;
                    }


                }


                switch (alt292) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1282:7: ( ( WHITESPACE )? SOFTBREAK ( WHITESPACE )? ) c+= cellRow
            	    {
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1282:7: ( ( WHITESPACE )? SOFTBREAK ( WHITESPACE )? )
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1282:9: ( WHITESPACE )? SOFTBREAK ( WHITESPACE )?
            	    {
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1282:9: ( WHITESPACE )?
            	    int alt290=2;
            	    int LA290_0 = input.LA(1);

            	    if ( (LA290_0==WHITESPACE) ) {
            	        alt290=1;
            	    }
            	    switch (alt290) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1282:9: WHITESPACE
            	            {
            	            WHITESPACE510=(Token)match(input,WHITESPACE,FOLLOW_WHITESPACE_in_cellRowSequence12093); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_WHITESPACE.add(WHITESPACE510);


            	            }
            	            break;

            	    }

            	    SOFTBREAK511=(Token)match(input,SOFTBREAK,FOLLOW_SOFTBREAK_in_cellRowSequence12096); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SOFTBREAK.add(SOFTBREAK511);

            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1282:31: ( WHITESPACE )?
            	    int alt291=2;
            	    int LA291_0 = input.LA(1);

            	    if ( (LA291_0==WHITESPACE) ) {
            	        alt291=1;
            	    }
            	    switch (alt291) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1282:31: WHITESPACE
            	            {
            	            WHITESPACE512=(Token)match(input,WHITESPACE,FOLLOW_WHITESPACE_in_cellRowSequence12098); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_WHITESPACE.add(WHITESPACE512);


            	            }
            	            break;

            	    }


            	    }

            	    pushFollow(FOLLOW_cellRow_in_cellRowSequence12107);
            	    c=cellRow();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cellRow.add(c.getTree());
            	    if (list_c==null) list_c=new ArrayList();
            	    list_c.add(c.getTree());


            	    }
            	    break;

            	default :
            	    break loop292;
                }
            } while (true);



            // AST REWRITE
            // elements: c
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: c
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"token c",list_c);
            root_0 = (Object)adaptor.nil();
            // 1283:5: -> ^( CELL_ROWS_WITH_VERTICAL_LINE ( $c)+ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1283:8: ^( CELL_ROWS_WITH_VERTICAL_LINE ( $c)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CELL_ROWS_WITH_VERTICAL_LINE, "CELL_ROWS_WITH_VERTICAL_LINE"), root_1);

                if ( !(stream_c.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextTree());

                }
                stream_c.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cellRowSequence"

    public static class cellRow_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cellRow"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1286:1: cellRow : VERTICAL_LINE ( ( whitespace )? cell )+ -> ^( CELL_ROW ( cell )+ ) ;
    public final NovelangParser.cellRow_return cellRow() throws RecognitionException {
        NovelangParser.cellRow_return retval = new NovelangParser.cellRow_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token VERTICAL_LINE513=null;
        NovelangParser.whitespace_return whitespace514 = null;

        NovelangParser.cell_return cell515 = null;


        Object VERTICAL_LINE513_tree=null;
        RewriteRuleTokenStream stream_VERTICAL_LINE=new RewriteRuleTokenStream(adaptor,"token VERTICAL_LINE");
        RewriteRuleSubtreeStream stream_cell=new RewriteRuleSubtreeStream(adaptor,"rule cell");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1287:3: ( VERTICAL_LINE ( ( whitespace )? cell )+ -> ^( CELL_ROW ( cell )+ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1287:5: VERTICAL_LINE ( ( whitespace )? cell )+
            {
            VERTICAL_LINE513=(Token)match(input,VERTICAL_LINE,FOLLOW_VERTICAL_LINE_in_cellRow12139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VERTICAL_LINE.add(VERTICAL_LINE513);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1287:19: ( ( whitespace )? cell )+
            int cnt294=0;
            loop294:
            do {
                int alt294=2;
                int LA294_0 = input.LA(1);

                if ( (LA294_0==WHITESPACE) ) {
                    int LA294_1 = input.LA(2);

                    if ( (LA294_1==LEFT_PARENTHESIS||LA294_1==LEFT_SQUARE_BRACKET||(LA294_1>=DOUBLE_QUOTE && LA294_1<=HYPHEN_MINUS)||LA294_1==VERTICAL_LINE||(LA294_1>=GRAVE_ACCENT && LA294_1<=LATIN_SMALL_LETTER_S)||LA294_1==TILDE||(LA294_1>=LATIN_SMALL_LETTER_N && LA294_1<=LATIN_SMALL_LETTER_V)||LA294_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA294_1>=LATIN_SMALL_LETTER_R && LA294_1<=LATIN_SMALL_LETTER_M)||(LA294_1>=DIGIT_0 && LA294_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt294=1;
                    }


                }
                else if ( (LA294_0==LEFT_PARENTHESIS||LA294_0==LEFT_SQUARE_BRACKET||(LA294_0>=DOUBLE_QUOTE && LA294_0<=HYPHEN_MINUS)||LA294_0==VERTICAL_LINE||(LA294_0>=GRAVE_ACCENT && LA294_0<=LATIN_SMALL_LETTER_S)||LA294_0==TILDE||(LA294_0>=LATIN_SMALL_LETTER_N && LA294_0<=LATIN_SMALL_LETTER_V)||LA294_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA294_0>=LATIN_SMALL_LETTER_R && LA294_0<=LATIN_SMALL_LETTER_M)||(LA294_0>=DIGIT_0 && LA294_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    alt294=1;
                }


                switch (alt294) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1287:21: ( whitespace )? cell
            	    {
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1287:21: ( whitespace )?
            	    int alt293=2;
            	    int LA293_0 = input.LA(1);

            	    if ( (LA293_0==WHITESPACE) ) {
            	        alt293=1;
            	    }
            	    switch (alt293) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1287:21: whitespace
            	            {
            	            pushFollow(FOLLOW_whitespace_in_cellRow12143);
            	            whitespace514=whitespace();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_whitespace.add(whitespace514.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_cell_in_cellRow12146);
            	    cell515=cell();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cell.add(cell515.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt294 >= 1 ) break loop294;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(294, input);
                        throw eee;
                }
                cnt294++;
            } while (true);



            // AST REWRITE
            // elements: cell
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1288:5: -> ^( CELL_ROW ( cell )+ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1288:8: ^( CELL_ROW ( cell )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CELL_ROW, "CELL_ROW"), root_1);

                if ( !(stream_cell.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cell.hasNext() ) {
                    adaptor.addChild(root_1, stream_cell.nextTree());

                }
                stream_cell.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cellRow"

    public static class cell_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cell"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1291:1: cell : ( mixedDelimitedMonoblock ( whitespace mixedDelimitedMonoblock )* ( whitespace )? )? VERTICAL_LINE -> ^( CELL ( mixedDelimitedMonoblock )* ) ;
    public final NovelangParser.cell_return cell() throws RecognitionException {
        NovelangParser.cell_return retval = new NovelangParser.cell_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token VERTICAL_LINE520=null;
        NovelangParser.mixedDelimitedMonoblock_return mixedDelimitedMonoblock516 = null;

        NovelangParser.whitespace_return whitespace517 = null;

        NovelangParser.mixedDelimitedMonoblock_return mixedDelimitedMonoblock518 = null;

        NovelangParser.whitespace_return whitespace519 = null;


        Object VERTICAL_LINE520_tree=null;
        RewriteRuleTokenStream stream_VERTICAL_LINE=new RewriteRuleTokenStream(adaptor,"token VERTICAL_LINE");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        RewriteRuleSubtreeStream stream_mixedDelimitedMonoblock=new RewriteRuleSubtreeStream(adaptor,"rule mixedDelimitedMonoblock");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1292:3: ( ( mixedDelimitedMonoblock ( whitespace mixedDelimitedMonoblock )* ( whitespace )? )? VERTICAL_LINE -> ^( CELL ( mixedDelimitedMonoblock )* ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1292:5: ( mixedDelimitedMonoblock ( whitespace mixedDelimitedMonoblock )* ( whitespace )? )? VERTICAL_LINE
            {
            if ( state.backtracking==0 ) {
               delegate.enterBlockDelimiterBoundary( input.LT( 1 ) ) ; 
            }
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1293:5: ( mixedDelimitedMonoblock ( whitespace mixedDelimitedMonoblock )* ( whitespace )? )?
            int alt297=2;
            int LA297_0 = input.LA(1);

            if ( (LA297_0==LEFT_PARENTHESIS||LA297_0==LEFT_SQUARE_BRACKET||(LA297_0>=DOUBLE_QUOTE && LA297_0<=HYPHEN_MINUS)||(LA297_0>=GRAVE_ACCENT && LA297_0<=LATIN_SMALL_LETTER_S)||LA297_0==TILDE||(LA297_0>=LATIN_SMALL_LETTER_N && LA297_0<=LATIN_SMALL_LETTER_V)||LA297_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA297_0>=LATIN_SMALL_LETTER_R && LA297_0<=LATIN_SMALL_LETTER_M)||(LA297_0>=DIGIT_0 && LA297_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt297=1;
            }
            switch (alt297) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1293:7: mixedDelimitedMonoblock ( whitespace mixedDelimitedMonoblock )* ( whitespace )?
                    {
                    pushFollow(FOLLOW_mixedDelimitedMonoblock_in_cell12188);
                    mixedDelimitedMonoblock516=mixedDelimitedMonoblock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixedDelimitedMonoblock.add(mixedDelimitedMonoblock516.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1293:31: ( whitespace mixedDelimitedMonoblock )*
                    loop295:
                    do {
                        int alt295=2;
                        int LA295_0 = input.LA(1);

                        if ( (LA295_0==WHITESPACE) ) {
                            int LA295_1 = input.LA(2);

                            if ( (LA295_1==LEFT_PARENTHESIS||LA295_1==LEFT_SQUARE_BRACKET||(LA295_1>=DOUBLE_QUOTE && LA295_1<=HYPHEN_MINUS)||(LA295_1>=GRAVE_ACCENT && LA295_1<=LATIN_SMALL_LETTER_S)||LA295_1==TILDE||(LA295_1>=LATIN_SMALL_LETTER_N && LA295_1<=LATIN_SMALL_LETTER_V)||LA295_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA295_1>=LATIN_SMALL_LETTER_R && LA295_1<=LATIN_SMALL_LETTER_M)||(LA295_1>=DIGIT_0 && LA295_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt295=1;
                            }


                        }


                        switch (alt295) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1293:33: whitespace mixedDelimitedMonoblock
                    	    {
                    	    pushFollow(FOLLOW_whitespace_in_cell12192);
                    	    whitespace517=whitespace();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whitespace.add(whitespace517.getTree());
                    	    pushFollow(FOLLOW_mixedDelimitedMonoblock_in_cell12194);
                    	    mixedDelimitedMonoblock518=mixedDelimitedMonoblock();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_mixedDelimitedMonoblock.add(mixedDelimitedMonoblock518.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop295;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1293:71: ( whitespace )?
                    int alt296=2;
                    int LA296_0 = input.LA(1);

                    if ( (LA296_0==WHITESPACE) ) {
                        alt296=1;
                    }
                    switch (alt296) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1293:71: whitespace
                            {
                            pushFollow(FOLLOW_whitespace_in_cell12199);
                            whitespace519=whitespace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whitespace.add(whitespace519.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               delegate.leaveBlockDelimiterBoundary() ; 
            }
            VERTICAL_LINE520=(Token)match(input,VERTICAL_LINE,FOLLOW_VERTICAL_LINE_in_cell12216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VERTICAL_LINE.add(VERTICAL_LINE520);



            // AST REWRITE
            // elements: mixedDelimitedMonoblock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1296:5: -> ^( CELL ( mixedDelimitedMonoblock )* )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1296:8: ^( CELL ( mixedDelimitedMonoblock )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CELL, "CELL"), root_1);

                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1296:16: ( mixedDelimitedMonoblock )*
                while ( stream_mixedDelimitedMonoblock.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixedDelimitedMonoblock.nextTree());

                }
                stream_mixedDelimitedMonoblock.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cell"

    public static class blockQuote_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockQuote"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1304:1: blockQuote : ( (p+= tags mediumbreak )? LESS_THAN_SIGN LESS_THAN_SIGN ( mediumbreak | largebreak )? (p+= paragraph | p+= literal ) ( largebreak (p+= paragraph | p+= literal ) )* ( mediumbreak | largebreak )? GREATER_THAN_SIGN GREATER_THAN_SIGN ) ->;
    public final NovelangParser.blockQuote_return blockQuote() throws RecognitionException {
        NovelangParser.blockQuote_return retval = new NovelangParser.blockQuote_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LESS_THAN_SIGN522=null;
        Token LESS_THAN_SIGN523=null;
        Token GREATER_THAN_SIGN529=null;
        Token GREATER_THAN_SIGN530=null;
        List list_p=null;
        NovelangParser.mediumbreak_return mediumbreak521 = null;

        NovelangParser.mediumbreak_return mediumbreak524 = null;

        NovelangParser.largebreak_return largebreak525 = null;

        NovelangParser.largebreak_return largebreak526 = null;

        NovelangParser.mediumbreak_return mediumbreak527 = null;

        NovelangParser.largebreak_return largebreak528 = null;

        RuleReturnScope p = null;
        Object LESS_THAN_SIGN522_tree=null;
        Object LESS_THAN_SIGN523_tree=null;
        Object GREATER_THAN_SIGN529_tree=null;
        Object GREATER_THAN_SIGN530_tree=null;
        RewriteRuleTokenStream stream_GREATER_THAN_SIGN=new RewriteRuleTokenStream(adaptor,"token GREATER_THAN_SIGN");
        RewriteRuleTokenStream stream_LESS_THAN_SIGN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN_SIGN");
        RewriteRuleSubtreeStream stream_tags=new RewriteRuleSubtreeStream(adaptor,"rule tags");
        RewriteRuleSubtreeStream stream_mediumbreak=new RewriteRuleSubtreeStream(adaptor,"rule mediumbreak");
        RewriteRuleSubtreeStream stream_paragraph=new RewriteRuleSubtreeStream(adaptor,"rule paragraph");
        RewriteRuleSubtreeStream stream_largebreak=new RewriteRuleSubtreeStream(adaptor,"rule largebreak");
        RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
         final Location startLocation = delegate.createLocation( input.LT( 1 ) ) ; 
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1306:3: ( ( (p+= tags mediumbreak )? LESS_THAN_SIGN LESS_THAN_SIGN ( mediumbreak | largebreak )? (p+= paragraph | p+= literal ) ( largebreak (p+= paragraph | p+= literal ) )* ( mediumbreak | largebreak )? GREATER_THAN_SIGN GREATER_THAN_SIGN ) ->)
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1306:5: ( (p+= tags mediumbreak )? LESS_THAN_SIGN LESS_THAN_SIGN ( mediumbreak | largebreak )? (p+= paragraph | p+= literal ) ( largebreak (p+= paragraph | p+= literal ) )* ( mediumbreak | largebreak )? GREATER_THAN_SIGN GREATER_THAN_SIGN )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1306:5: ( (p+= tags mediumbreak )? LESS_THAN_SIGN LESS_THAN_SIGN ( mediumbreak | largebreak )? (p+= paragraph | p+= literal ) ( largebreak (p+= paragraph | p+= literal ) )* ( mediumbreak | largebreak )? GREATER_THAN_SIGN GREATER_THAN_SIGN )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1307:7: (p+= tags mediumbreak )? LESS_THAN_SIGN LESS_THAN_SIGN ( mediumbreak | largebreak )? (p+= paragraph | p+= literal ) ( largebreak (p+= paragraph | p+= literal ) )* ( mediumbreak | largebreak )? GREATER_THAN_SIGN GREATER_THAN_SIGN
            {
            if ( state.backtracking==0 ) {
               delegate.enterBlockDelimiterBoundary( input.LT( 1 ) ) ; 
            }
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1308:7: (p+= tags mediumbreak )?
            int alt298=2;
            int LA298_0 = input.LA(1);

            if ( (LA298_0==COMMERCIAL_AT) ) {
                alt298=1;
            }
            switch (alt298) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1308:9: p+= tags mediumbreak
                    {
                    pushFollow(FOLLOW_tags_in_blockQuote12284);
                    p=tags();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tags.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());

                    pushFollow(FOLLOW_mediumbreak_in_blockQuote12286);
                    mediumbreak521=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak521.getTree());

                    }
                    break;

            }

            LESS_THAN_SIGN522=(Token)match(input,LESS_THAN_SIGN,FOLLOW_LESS_THAN_SIGN_in_blockQuote12297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN_SIGN.add(LESS_THAN_SIGN522);

            LESS_THAN_SIGN523=(Token)match(input,LESS_THAN_SIGN,FOLLOW_LESS_THAN_SIGN_in_blockQuote12299); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN_SIGN.add(LESS_THAN_SIGN523);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1310:7: ( mediumbreak | largebreak )?
            int alt299=3;
            int LA299_0 = input.LA(1);

            if ( (LA299_0==WHITESPACE) ) {
                int LA299_1 = input.LA(2);

                if ( (LA299_1==SOFTBREAK) ) {
                    switch ( input.LA(3) ) {
                        case WHITESPACE:
                            {
                            int LA299_5 = input.LA(4);

                            if ( (LA299_5==COMMERCIAL_AT||LA299_5==LEFT_PARENTHESIS||LA299_5==LEFT_SQUARE_BRACKET||(LA299_5>=DOUBLE_QUOTE && LA299_5<=HYPHEN_MINUS)||LA299_5==LESS_THAN_SIGN||(LA299_5>=GRAVE_ACCENT && LA299_5<=LATIN_SMALL_LETTER_S)||LA299_5==TILDE||(LA299_5>=LATIN_SMALL_LETTER_N && LA299_5<=LATIN_SMALL_LETTER_V)||LA299_5==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA299_5>=LATIN_SMALL_LETTER_R && LA299_5<=LATIN_SMALL_LETTER_M)||(LA299_5>=DIGIT_0 && LA299_5<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt299=1;
                            }
                            else if ( (LA299_5==SOFTBREAK) ) {
                                alt299=2;
                            }
                            }
                            break;
                        case SOFTBREAK:
                            {
                            alt299=2;
                            }
                            break;
                        case COMMERCIAL_AT:
                        case LEFT_PARENTHESIS:
                        case LEFT_SQUARE_BRACKET:
                        case DOUBLE_QUOTE:
                        case SOLIDUS:
                        case HYPHEN_MINUS:
                        case LESS_THAN_SIGN:
                        case GRAVE_ACCENT:
                        case FULL_STOP:
                        case COMMA:
                        case QUESTION_MARK:
                        case EXCLAMATION_MARK:
                        case SEMICOLON:
                        case COLON:
                        case APOSTROPHE:
                        case LATIN_SMALL_LETTER_F:
                        case LATIN_SMALL_LETTER_I:
                        case LATIN_SMALL_LETTER_L:
                        case LATIN_SMALL_LETTER_E:
                        case LATIN_SMALL_LETTER_H:
                        case LATIN_SMALL_LETTER_T:
                        case LATIN_SMALL_LETTER_P:
                        case LATIN_SMALL_LETTER_S:
                        case TILDE:
                        case LATIN_SMALL_LETTER_N:
                        case LATIN_SMALL_LETTER_G:
                        case LATIN_SMALL_LETTER_J:
                        case LATIN_SMALL_LETTER_V:
                        case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
                        case LATIN_SMALL_LETTER_R:
                        case LATIN_SMALL_LETTER_C:
                        case LATIN_SMALL_LETTER_U:
                        case LATIN_SMALL_LETTER_O:
                        case LATIN_SMALL_LETTER_A:
                        case LATIN_SMALL_LETTER_D:
                        case LATIN_SMALL_LETTER_B:
                        case LATIN_SMALL_LETTER_Y:
                        case LATIN_SMALL_LETTER_M:
                        case DIGIT_0:
                        case DIGIT_1:
                        case DIGIT_2:
                        case DIGIT_3:
                        case DIGIT_4:
                        case DIGIT_5:
                        case DIGIT_6:
                        case DIGIT_7:
                        case DIGIT_8:
                        case DIGIT_9:
                        case LATIN_CAPITAL_LETTER_A:
                        case LATIN_CAPITAL_LETTER_B:
                        case LATIN_CAPITAL_LETTER_C:
                        case LATIN_CAPITAL_LETTER_D:
                        case LATIN_CAPITAL_LETTER_E:
                        case LATIN_CAPITAL_LETTER_F:
                        case LATIN_SMALL_LETTER_K:
                        case LATIN_SMALL_LETTER_Q:
                        case LATIN_SMALL_LETTER_W:
                        case LATIN_SMALL_LETTER_X:
                        case LATIN_SMALL_LETTER_Z:
                        case LATIN_CAPITAL_LETTER_G:
                        case LATIN_CAPITAL_LETTER_H:
                        case LATIN_CAPITAL_LETTER_I:
                        case LATIN_CAPITAL_LETTER_J:
                        case LATIN_CAPITAL_LETTER_K:
                        case LATIN_CAPITAL_LETTER_L:
                        case LATIN_CAPITAL_LETTER_M:
                        case LATIN_CAPITAL_LETTER_N:
                        case LATIN_CAPITAL_LETTER_O:
                        case LATIN_CAPITAL_LETTER_P:
                        case LATIN_CAPITAL_LETTER_Q:
                        case LATIN_CAPITAL_LETTER_R:
                        case LATIN_CAPITAL_LETTER_S:
                        case LATIN_CAPITAL_LETTER_T:
                        case LATIN_CAPITAL_LETTER_U:
                        case LATIN_CAPITAL_LETTER_V:
                        case LATIN_CAPITAL_LETTER_W:
                        case LATIN_CAPITAL_LETTER_X:
                        case LATIN_CAPITAL_LETTER_Y:
                        case LATIN_CAPITAL_LETTER_Z:
                        case LATIN_SMALL_LETTER_A_WITH_GRAVE:
                        case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
                        case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
                        case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
                        case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
                        case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
                        case LATIN_SMALL_LETTER_A_WITH_ACUTE:
                        case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
                        case LATIN_SMALL_LETTER_AE:
                        case LATIN_CAPITAL_LETTER_AE:
                        case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
                        case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
                        case LATIN_SMALL_LETTER_E_WITH_GRAVE:
                        case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
                        case LATIN_SMALL_LETTER_E_WITH_ACUTE:
                        case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
                        case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
                        case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
                        case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
                        case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
                        case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
                        case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
                        case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
                        case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
                        case LATIN_SMALL_LETTER_I_WITH_ACUTE:
                        case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
                        case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
                        case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
                        case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
                        case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
                        case LATIN_SMALL_LETTER_O_WITH_ACUTE:
                        case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
                        case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
                        case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
                        case LATIN_SMALL_LETTER_U_WITH_GRAVE:
                        case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
                        case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
                        case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
                        case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
                        case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
                        case LATIN_SMALL_LETTER_U_WITH_ACUTE:
                        case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
                        case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
                        case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
                        case LATIN_SMALL_LIGATURE_OE:
                        case LATIN_CAPITAL_LIGATURE_OE:
                            {
                            alt299=1;
                            }
                            break;
                    }

                }
                else if ( (LA299_1==COMMERCIAL_AT||LA299_1==LEFT_PARENTHESIS||LA299_1==LEFT_SQUARE_BRACKET||(LA299_1>=DOUBLE_QUOTE && LA299_1<=HYPHEN_MINUS)||LA299_1==LESS_THAN_SIGN||(LA299_1>=GRAVE_ACCENT && LA299_1<=LATIN_SMALL_LETTER_S)||LA299_1==TILDE||(LA299_1>=LATIN_SMALL_LETTER_N && LA299_1<=LATIN_SMALL_LETTER_V)||LA299_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA299_1>=LATIN_SMALL_LETTER_R && LA299_1<=LATIN_SMALL_LETTER_M)||(LA299_1>=DIGIT_0 && LA299_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    alt299=1;
                }
            }
            else if ( (LA299_0==SOFTBREAK) ) {
                switch ( input.LA(2) ) {
                    case WHITESPACE:
                        {
                        int LA299_5 = input.LA(3);

                        if ( (LA299_5==COMMERCIAL_AT||LA299_5==LEFT_PARENTHESIS||LA299_5==LEFT_SQUARE_BRACKET||(LA299_5>=DOUBLE_QUOTE && LA299_5<=HYPHEN_MINUS)||LA299_5==LESS_THAN_SIGN||(LA299_5>=GRAVE_ACCENT && LA299_5<=LATIN_SMALL_LETTER_S)||LA299_5==TILDE||(LA299_5>=LATIN_SMALL_LETTER_N && LA299_5<=LATIN_SMALL_LETTER_V)||LA299_5==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA299_5>=LATIN_SMALL_LETTER_R && LA299_5<=LATIN_SMALL_LETTER_M)||(LA299_5>=DIGIT_0 && LA299_5<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt299=1;
                        }
                        else if ( (LA299_5==SOFTBREAK) ) {
                            alt299=2;
                        }
                        }
                        break;
                    case SOFTBREAK:
                        {
                        alt299=2;
                        }
                        break;
                    case COMMERCIAL_AT:
                    case LEFT_PARENTHESIS:
                    case LEFT_SQUARE_BRACKET:
                    case DOUBLE_QUOTE:
                    case SOLIDUS:
                    case HYPHEN_MINUS:
                    case LESS_THAN_SIGN:
                    case GRAVE_ACCENT:
                    case FULL_STOP:
                    case COMMA:
                    case QUESTION_MARK:
                    case EXCLAMATION_MARK:
                    case SEMICOLON:
                    case COLON:
                    case APOSTROPHE:
                    case LATIN_SMALL_LETTER_F:
                    case LATIN_SMALL_LETTER_I:
                    case LATIN_SMALL_LETTER_L:
                    case LATIN_SMALL_LETTER_E:
                    case LATIN_SMALL_LETTER_H:
                    case LATIN_SMALL_LETTER_T:
                    case LATIN_SMALL_LETTER_P:
                    case LATIN_SMALL_LETTER_S:
                    case TILDE:
                    case LATIN_SMALL_LETTER_N:
                    case LATIN_SMALL_LETTER_G:
                    case LATIN_SMALL_LETTER_J:
                    case LATIN_SMALL_LETTER_V:
                    case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
                    case LATIN_SMALL_LETTER_R:
                    case LATIN_SMALL_LETTER_C:
                    case LATIN_SMALL_LETTER_U:
                    case LATIN_SMALL_LETTER_O:
                    case LATIN_SMALL_LETTER_A:
                    case LATIN_SMALL_LETTER_D:
                    case LATIN_SMALL_LETTER_B:
                    case LATIN_SMALL_LETTER_Y:
                    case LATIN_SMALL_LETTER_M:
                    case DIGIT_0:
                    case DIGIT_1:
                    case DIGIT_2:
                    case DIGIT_3:
                    case DIGIT_4:
                    case DIGIT_5:
                    case DIGIT_6:
                    case DIGIT_7:
                    case DIGIT_8:
                    case DIGIT_9:
                    case LATIN_CAPITAL_LETTER_A:
                    case LATIN_CAPITAL_LETTER_B:
                    case LATIN_CAPITAL_LETTER_C:
                    case LATIN_CAPITAL_LETTER_D:
                    case LATIN_CAPITAL_LETTER_E:
                    case LATIN_CAPITAL_LETTER_F:
                    case LATIN_SMALL_LETTER_K:
                    case LATIN_SMALL_LETTER_Q:
                    case LATIN_SMALL_LETTER_W:
                    case LATIN_SMALL_LETTER_X:
                    case LATIN_SMALL_LETTER_Z:
                    case LATIN_CAPITAL_LETTER_G:
                    case LATIN_CAPITAL_LETTER_H:
                    case LATIN_CAPITAL_LETTER_I:
                    case LATIN_CAPITAL_LETTER_J:
                    case LATIN_CAPITAL_LETTER_K:
                    case LATIN_CAPITAL_LETTER_L:
                    case LATIN_CAPITAL_LETTER_M:
                    case LATIN_CAPITAL_LETTER_N:
                    case LATIN_CAPITAL_LETTER_O:
                    case LATIN_CAPITAL_LETTER_P:
                    case LATIN_CAPITAL_LETTER_Q:
                    case LATIN_CAPITAL_LETTER_R:
                    case LATIN_CAPITAL_LETTER_S:
                    case LATIN_CAPITAL_LETTER_T:
                    case LATIN_CAPITAL_LETTER_U:
                    case LATIN_CAPITAL_LETTER_V:
                    case LATIN_CAPITAL_LETTER_W:
                    case LATIN_CAPITAL_LETTER_X:
                    case LATIN_CAPITAL_LETTER_Y:
                    case LATIN_CAPITAL_LETTER_Z:
                    case LATIN_SMALL_LETTER_A_WITH_GRAVE:
                    case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
                    case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
                    case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
                    case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
                    case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
                    case LATIN_SMALL_LETTER_A_WITH_ACUTE:
                    case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
                    case LATIN_SMALL_LETTER_AE:
                    case LATIN_CAPITAL_LETTER_AE:
                    case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
                    case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
                    case LATIN_SMALL_LETTER_E_WITH_GRAVE:
                    case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
                    case LATIN_SMALL_LETTER_E_WITH_ACUTE:
                    case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
                    case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
                    case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
                    case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
                    case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
                    case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
                    case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
                    case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
                    case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
                    case LATIN_SMALL_LETTER_I_WITH_ACUTE:
                    case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
                    case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
                    case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
                    case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
                    case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
                    case LATIN_SMALL_LETTER_O_WITH_ACUTE:
                    case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
                    case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
                    case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
                    case LATIN_SMALL_LETTER_U_WITH_GRAVE:
                    case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
                    case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
                    case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
                    case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
                    case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
                    case LATIN_SMALL_LETTER_U_WITH_ACUTE:
                    case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
                    case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
                    case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
                    case LATIN_SMALL_LIGATURE_OE:
                    case LATIN_CAPITAL_LIGATURE_OE:
                        {
                        alt299=1;
                        }
                        break;
                }

            }
            switch (alt299) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1310:9: mediumbreak
                    {
                    pushFollow(FOLLOW_mediumbreak_in_blockQuote12309);
                    mediumbreak524=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak524.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1310:23: largebreak
                    {
                    pushFollow(FOLLOW_largebreak_in_blockQuote12313);
                    largebreak525=largebreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_largebreak.add(largebreak525.getTree());

                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1311:7: (p+= paragraph | p+= literal )
            int alt300=2;
            alt300 = dfa300.predict(input);
            switch (alt300) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1311:9: p+= paragraph
                    {
                    pushFollow(FOLLOW_paragraph_in_blockQuote12330);
                    p=paragraph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_paragraph.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1311:26: p+= literal
                    {
                    pushFollow(FOLLOW_literal_in_blockQuote12338);
                    p=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_literal.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1312:7: ( largebreak (p+= paragraph | p+= literal ) )*
            loop302:
            do {
                int alt302=2;
                alt302 = dfa302.predict(input);
                switch (alt302) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1312:9: largebreak (p+= paragraph | p+= literal )
            	    {
            	    pushFollow(FOLLOW_largebreak_in_blockQuote12350);
            	    largebreak526=largebreak();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_largebreak.add(largebreak526.getTree());
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1312:20: (p+= paragraph | p+= literal )
            	    int alt301=2;
            	    alt301 = dfa301.predict(input);
            	    switch (alt301) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1312:22: p+= paragraph
            	            {
            	            pushFollow(FOLLOW_paragraph_in_blockQuote12358);
            	            p=paragraph();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_paragraph.add(p.getTree());
            	            if (list_p==null) list_p=new ArrayList();
            	            list_p.add(p.getTree());


            	            }
            	            break;
            	        case 2 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1312:39: p+= literal
            	            {
            	            pushFollow(FOLLOW_literal_in_blockQuote12366);
            	            p=literal();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_literal.add(p.getTree());
            	            if (list_p==null) list_p=new ArrayList();
            	            list_p.add(p.getTree());


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop302;
                }
            } while (true);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1313:7: ( mediumbreak | largebreak )?
            int alt303=3;
            int LA303_0 = input.LA(1);

            if ( (LA303_0==WHITESPACE) ) {
                int LA303_1 = input.LA(2);

                if ( (LA303_1==GREATER_THAN_SIGN) ) {
                    alt303=1;
                }
                else if ( (LA303_1==SOFTBREAK) ) {
                    switch ( input.LA(3) ) {
                        case WHITESPACE:
                            {
                            int LA303_5 = input.LA(4);

                            if ( (LA303_5==SOFTBREAK) ) {
                                alt303=2;
                            }
                            else if ( (LA303_5==GREATER_THAN_SIGN) ) {
                                alt303=1;
                            }
                            }
                            break;
                        case GREATER_THAN_SIGN:
                            {
                            alt303=1;
                            }
                            break;
                        case SOFTBREAK:
                            {
                            alt303=2;
                            }
                            break;
                    }

                }
            }
            else if ( (LA303_0==SOFTBREAK) ) {
                switch ( input.LA(2) ) {
                    case WHITESPACE:
                        {
                        int LA303_5 = input.LA(3);

                        if ( (LA303_5==SOFTBREAK) ) {
                            alt303=2;
                        }
                        else if ( (LA303_5==GREATER_THAN_SIGN) ) {
                            alt303=1;
                        }
                        }
                        break;
                    case GREATER_THAN_SIGN:
                        {
                        alt303=1;
                        }
                        break;
                    case SOFTBREAK:
                        {
                        alt303=2;
                        }
                        break;
                }

            }
            switch (alt303) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1313:9: mediumbreak
                    {
                    pushFollow(FOLLOW_mediumbreak_in_blockQuote12381);
                    mediumbreak527=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak527.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1313:23: largebreak
                    {
                    pushFollow(FOLLOW_largebreak_in_blockQuote12385);
                    largebreak528=largebreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_largebreak.add(largebreak528.getTree());

                    }
                    break;

            }

            GREATER_THAN_SIGN529=(Token)match(input,GREATER_THAN_SIGN,FOLLOW_GREATER_THAN_SIGN_in_blockQuote12396); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GREATER_THAN_SIGN.add(GREATER_THAN_SIGN529);

            GREATER_THAN_SIGN530=(Token)match(input,GREATER_THAN_SIGN,FOLLOW_GREATER_THAN_SIGN_in_blockQuote12398); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GREATER_THAN_SIGN.add(GREATER_THAN_SIGN530);

            if ( state.backtracking==0 ) {
               delegate.leaveBlockDelimiterBoundary() ; 
            }

            }



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1321:6: ->
            {
                adaptor.addChild(root_0,   delegate.createTree(
                               PARAGRAPHS_INSIDE_ANGLED_BRACKET_PAIRS,
                               startLocation,
                               list_p
                           )
                         );

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "blockQuote"

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1329:1: literal : ( tags mediumbreak )? LESS_THAN_SIGN LESS_THAN_SIGN LESS_THAN_SIGN ( WHITESPACE )? SOFTBREAK l= literalLines SOFTBREAK GREATER_THAN_SIGN GREATER_THAN_SIGN GREATER_THAN_SIGN ->;
    public final NovelangParser.literal_return literal() throws RecognitionException {
        NovelangParser.literal_return retval = new NovelangParser.literal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LESS_THAN_SIGN533=null;
        Token LESS_THAN_SIGN534=null;
        Token LESS_THAN_SIGN535=null;
        Token WHITESPACE536=null;
        Token SOFTBREAK537=null;
        Token SOFTBREAK538=null;
        Token GREATER_THAN_SIGN539=null;
        Token GREATER_THAN_SIGN540=null;
        Token GREATER_THAN_SIGN541=null;
        NovelangParser.literalLines_return l = null;

        NovelangParser.tags_return tags531 = null;

        NovelangParser.mediumbreak_return mediumbreak532 = null;


        Object LESS_THAN_SIGN533_tree=null;
        Object LESS_THAN_SIGN534_tree=null;
        Object LESS_THAN_SIGN535_tree=null;
        Object WHITESPACE536_tree=null;
        Object SOFTBREAK537_tree=null;
        Object SOFTBREAK538_tree=null;
        Object GREATER_THAN_SIGN539_tree=null;
        Object GREATER_THAN_SIGN540_tree=null;
        Object GREATER_THAN_SIGN541_tree=null;
        RewriteRuleTokenStream stream_GREATER_THAN_SIGN=new RewriteRuleTokenStream(adaptor,"token GREATER_THAN_SIGN");
        RewriteRuleTokenStream stream_WHITESPACE=new RewriteRuleTokenStream(adaptor,"token WHITESPACE");
        RewriteRuleTokenStream stream_LESS_THAN_SIGN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN_SIGN");
        RewriteRuleTokenStream stream_SOFTBREAK=new RewriteRuleTokenStream(adaptor,"token SOFTBREAK");
        RewriteRuleSubtreeStream stream_tags=new RewriteRuleSubtreeStream(adaptor,"rule tags");
        RewriteRuleSubtreeStream stream_literalLines=new RewriteRuleSubtreeStream(adaptor,"rule literalLines");
        RewriteRuleSubtreeStream stream_mediumbreak=new RewriteRuleSubtreeStream(adaptor,"rule mediumbreak");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1330:3: ( ( tags mediumbreak )? LESS_THAN_SIGN LESS_THAN_SIGN LESS_THAN_SIGN ( WHITESPACE )? SOFTBREAK l= literalLines SOFTBREAK GREATER_THAN_SIGN GREATER_THAN_SIGN GREATER_THAN_SIGN ->)
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1330:5: ( tags mediumbreak )? LESS_THAN_SIGN LESS_THAN_SIGN LESS_THAN_SIGN ( WHITESPACE )? SOFTBREAK l= literalLines SOFTBREAK GREATER_THAN_SIGN GREATER_THAN_SIGN GREATER_THAN_SIGN
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1330:5: ( tags mediumbreak )?
            int alt304=2;
            int LA304_0 = input.LA(1);

            if ( (LA304_0==COMMERCIAL_AT) ) {
                alt304=1;
            }
            switch (alt304) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1330:7: tags mediumbreak
                    {
                    pushFollow(FOLLOW_tags_in_literal12448);
                    tags531=tags();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tags.add(tags531.getTree());
                    pushFollow(FOLLOW_mediumbreak_in_literal12450);
                    mediumbreak532=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak532.getTree());

                    }
                    break;

            }

            LESS_THAN_SIGN533=(Token)match(input,LESS_THAN_SIGN,FOLLOW_LESS_THAN_SIGN_in_literal12459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN_SIGN.add(LESS_THAN_SIGN533);

            LESS_THAN_SIGN534=(Token)match(input,LESS_THAN_SIGN,FOLLOW_LESS_THAN_SIGN_in_literal12461); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN_SIGN.add(LESS_THAN_SIGN534);

            LESS_THAN_SIGN535=(Token)match(input,LESS_THAN_SIGN,FOLLOW_LESS_THAN_SIGN_in_literal12463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN_SIGN.add(LESS_THAN_SIGN535);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1332:5: ( WHITESPACE )?
            int alt305=2;
            int LA305_0 = input.LA(1);

            if ( (LA305_0==WHITESPACE) ) {
                alt305=1;
            }
            switch (alt305) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1332:5: WHITESPACE
                    {
                    WHITESPACE536=(Token)match(input,WHITESPACE,FOLLOW_WHITESPACE_in_literal12470); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITESPACE.add(WHITESPACE536);


                    }
                    break;

            }

            SOFTBREAK537=(Token)match(input,SOFTBREAK,FOLLOW_SOFTBREAK_in_literal12473); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SOFTBREAK.add(SOFTBREAK537);

            pushFollow(FOLLOW_literalLines_in_literal12483);
            l=literalLines();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_literalLines.add(l.getTree());
            SOFTBREAK538=(Token)match(input,SOFTBREAK,FOLLOW_SOFTBREAK_in_literal12489); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SOFTBREAK.add(SOFTBREAK538);

            GREATER_THAN_SIGN539=(Token)match(input,GREATER_THAN_SIGN,FOLLOW_GREATER_THAN_SIGN_in_literal12491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GREATER_THAN_SIGN.add(GREATER_THAN_SIGN539);

            GREATER_THAN_SIGN540=(Token)match(input,GREATER_THAN_SIGN,FOLLOW_GREATER_THAN_SIGN_in_literal12493); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GREATER_THAN_SIGN.add(GREATER_THAN_SIGN540);

            GREATER_THAN_SIGN541=(Token)match(input,GREATER_THAN_SIGN,FOLLOW_GREATER_THAN_SIGN_in_literal12495); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GREATER_THAN_SIGN.add(GREATER_THAN_SIGN541);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1335:5: ->
            {
                adaptor.addChild(root_0,  delegate.createTree( LINES_OF_LITERAL, (l!=null?l.unescaped:null) ) );

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class literalLines_return extends ParserRuleReturnScope {
        public String unescaped;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literalLines"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1338:1: literalLines returns [ String unescaped ] : s1= literalLine (s2= SOFTBREAK s3= literalLine )* ;
    public final NovelangParser.literalLines_return literalLines() throws RecognitionException {
        NovelangParser.literalLines_return retval = new NovelangParser.literalLines_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token s2=null;
        NovelangParser.literalLine_return s1 = null;

        NovelangParser.literalLine_return s3 = null;


        Object s2_tree=null;


          final StringBuffer buffer = new StringBuffer() ;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1342:3: (s1= literalLine (s2= SOFTBREAK s3= literalLine )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1342:5: s1= literalLine (s2= SOFTBREAK s3= literalLine )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_literalLine_in_literalLines12533);
            s1=literalLine();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, s1.getTree());
            if ( state.backtracking==0 ) {
               buffer.append( (s1!=null?s1.unescaped:null) ) ; 
            }
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1343:5: (s2= SOFTBREAK s3= literalLine )*
            loop306:
            do {
                int alt306=2;
                int LA306_0 = input.LA(1);

                if ( (LA306_0==SOFTBREAK) ) {
                    int LA306_1 = input.LA(2);

                    if ( (LA306_1==GREATER_THAN_SIGN) ) {
                        int LA306_2 = input.LA(3);

                        if ( (LA306_2==GREATER_THAN_SIGN) ) {
                            int LA306_4 = input.LA(4);

                            if ( ((LA306_4>=COMMERCIAL_AT && LA306_4<=LESS_THAN_SIGN)||(LA306_4>=GRAVE_ACCENT && LA306_4<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA306_4>=LATIN_SMALL_LETTER_R && LA306_4<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt306=1;
                            }


                        }
                        else if ( ((LA306_2>=COMMERCIAL_AT && LA306_2<=LESS_THAN_SIGN)||(LA306_2>=GRAVE_ACCENT && LA306_2<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA306_2>=LATIN_SMALL_LETTER_R && LA306_2<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt306=1;
                        }


                    }
                    else if ( ((LA306_1>=COMMERCIAL_AT && LA306_1<=LESS_THAN_SIGN)||(LA306_1>=GRAVE_ACCENT && LA306_1<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA306_1>=LATIN_SMALL_LETTER_R && LA306_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt306=1;
                    }


                }


                switch (alt306) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1343:7: s2= SOFTBREAK s3= literalLine
            	    {
            	    s2=(Token)match(input,SOFTBREAK,FOLLOW_SOFTBREAK_in_literalLines12547); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    s2_tree = (Object)adaptor.create(s2);
            	    adaptor.addChild(root_0, s2_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s2!=null?s2.getText():null) ) ; 
            	    }
            	    pushFollow(FOLLOW_literalLine_in_literalLines12561);
            	    s3=literalLine();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s3.getTree());
            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s3!=null?s3.unescaped:null) ) ; 
            	    }

            	    }
            	    break;

            	default :
            	    break loop306;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               retval.unescaped = buffer.toString() ; 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "literalLines"

    public static class literalLine_return extends ParserRuleReturnScope {
        public String unescaped;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literalLine"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1350:1: literalLine returns [ String unescaped ] : ( ( (s1= anySymbolExceptGreaterthansign | s2= escapedCharacter | s3= WHITESPACE ) (s4= anySymbol | s5= escapedCharacter | s6= WHITESPACE )* ) | (s7= GREATER_THAN_SIGN ( ( (s8= anySymbolExceptGreaterthansign | s9= escapedCharacter | s10= WHITESPACE ) (s11= anySymbol | s12= escapedCharacter | s13= WHITESPACE )* ) | (s14= GREATER_THAN_SIGN ( (s15= anySymbolExceptGreaterthansign | s16= escapedCharacter | s17= WHITESPACE ) (s18= anySymbol | s19= escapedCharacter | s20= WHITESPACE )* )? ) )? ) )? ;
    public final NovelangParser.literalLine_return literalLine() throws RecognitionException {
        NovelangParser.literalLine_return retval = new NovelangParser.literalLine_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token s3=null;
        Token s6=null;
        Token s7=null;
        Token s10=null;
        Token s13=null;
        Token s14=null;
        Token s17=null;
        Token s20=null;
        NovelangParser.anySymbolExceptGreaterthansign_return s1 = null;

        NovelangParser.escapedCharacter_return s2 = null;

        NovelangParser.anySymbol_return s4 = null;

        NovelangParser.escapedCharacter_return s5 = null;

        NovelangParser.anySymbolExceptGreaterthansign_return s8 = null;

        NovelangParser.escapedCharacter_return s9 = null;

        NovelangParser.anySymbol_return s11 = null;

        NovelangParser.escapedCharacter_return s12 = null;

        NovelangParser.anySymbolExceptGreaterthansign_return s15 = null;

        NovelangParser.escapedCharacter_return s16 = null;

        NovelangParser.anySymbol_return s18 = null;

        NovelangParser.escapedCharacter_return s19 = null;


        Object s3_tree=null;
        Object s6_tree=null;
        Object s7_tree=null;
        Object s10_tree=null;
        Object s13_tree=null;
        Object s14_tree=null;
        Object s17_tree=null;
        Object s20_tree=null;


          final StringBuffer buffer = new StringBuffer() ;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1363:3: ( ( ( (s1= anySymbolExceptGreaterthansign | s2= escapedCharacter | s3= WHITESPACE ) (s4= anySymbol | s5= escapedCharacter | s6= WHITESPACE )* ) | (s7= GREATER_THAN_SIGN ( ( (s8= anySymbolExceptGreaterthansign | s9= escapedCharacter | s10= WHITESPACE ) (s11= anySymbol | s12= escapedCharacter | s13= WHITESPACE )* ) | (s14= GREATER_THAN_SIGN ( (s15= anySymbolExceptGreaterthansign | s16= escapedCharacter | s17= WHITESPACE ) (s18= anySymbol | s19= escapedCharacter | s20= WHITESPACE )* )? ) )? ) )? )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1363:5: ( ( (s1= anySymbolExceptGreaterthansign | s2= escapedCharacter | s3= WHITESPACE ) (s4= anySymbol | s5= escapedCharacter | s6= WHITESPACE )* ) | (s7= GREATER_THAN_SIGN ( ( (s8= anySymbolExceptGreaterthansign | s9= escapedCharacter | s10= WHITESPACE ) (s11= anySymbol | s12= escapedCharacter | s13= WHITESPACE )* ) | (s14= GREATER_THAN_SIGN ( (s15= anySymbolExceptGreaterthansign | s16= escapedCharacter | s17= WHITESPACE ) (s18= anySymbol | s19= escapedCharacter | s20= WHITESPACE )* )? ) )? ) )?
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1363:5: ( ( (s1= anySymbolExceptGreaterthansign | s2= escapedCharacter | s3= WHITESPACE ) (s4= anySymbol | s5= escapedCharacter | s6= WHITESPACE )* ) | (s7= GREATER_THAN_SIGN ( ( (s8= anySymbolExceptGreaterthansign | s9= escapedCharacter | s10= WHITESPACE ) (s11= anySymbol | s12= escapedCharacter | s13= WHITESPACE )* ) | (s14= GREATER_THAN_SIGN ( (s15= anySymbolExceptGreaterthansign | s16= escapedCharacter | s17= WHITESPACE ) (s18= anySymbol | s19= escapedCharacter | s20= WHITESPACE )* )? ) )? ) )?
            int alt315=3;
            int LA315_0 = input.LA(1);

            if ( ((LA315_0>=COMMERCIAL_AT && LA315_0<=WHITESPACE)||(LA315_0>=VERTICAL_LINE && LA315_0<=LESS_THAN_SIGN)||(LA315_0>=GRAVE_ACCENT && LA315_0<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA315_0>=LATIN_SMALL_LETTER_R && LA315_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt315=1;
            }
            else if ( (LA315_0==GREATER_THAN_SIGN) ) {
                alt315=2;
            }
            switch (alt315) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1363:9: ( (s1= anySymbolExceptGreaterthansign | s2= escapedCharacter | s3= WHITESPACE ) (s4= anySymbol | s5= escapedCharacter | s6= WHITESPACE )* )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1363:9: ( (s1= anySymbolExceptGreaterthansign | s2= escapedCharacter | s3= WHITESPACE ) (s4= anySymbol | s5= escapedCharacter | s6= WHITESPACE )* )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1363:11: (s1= anySymbolExceptGreaterthansign | s2= escapedCharacter | s3= WHITESPACE ) (s4= anySymbol | s5= escapedCharacter | s6= WHITESPACE )*
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1363:11: (s1= anySymbolExceptGreaterthansign | s2= escapedCharacter | s3= WHITESPACE )
                    int alt307=3;
                    switch ( input.LA(1) ) {
                    case COMMERCIAL_AT:
                    case REVERSE_SOLIDUS:
                    case LEFT_PARENTHESIS:
                    case RIGHT_PARENTHESIS:
                    case LEFT_SQUARE_BRACKET:
                    case RIGHT_SQUARE_BRACKET:
                    case DOUBLE_QUOTE:
                    case SOLIDUS:
                    case HYPHEN_MINUS:
                    case LOW_LINE:
                    case VERTICAL_LINE:
                    case LESS_THAN_SIGN:
                    case GRAVE_ACCENT:
                    case FULL_STOP:
                    case COMMA:
                    case QUESTION_MARK:
                    case EXCLAMATION_MARK:
                    case SEMICOLON:
                    case COLON:
                    case APOSTROPHE:
                    case LATIN_SMALL_LETTER_F:
                    case LATIN_SMALL_LETTER_I:
                    case LATIN_SMALL_LETTER_L:
                    case LATIN_SMALL_LETTER_E:
                    case LATIN_SMALL_LETTER_H:
                    case LATIN_SMALL_LETTER_T:
                    case LATIN_SMALL_LETTER_P:
                    case LATIN_SMALL_LETTER_S:
                    case NUMBER_SIGN:
                    case AMPERSAND:
                    case EQUALS_SIGN:
                    case TILDE:
                    case DOLLAR_SIGN:
                    case PLUS_SIGN:
                    case ASTERISK:
                    case PERCENT_SIGN:
                    case LATIN_SMALL_LETTER_N:
                    case LATIN_SMALL_LETTER_G:
                    case LATIN_SMALL_LETTER_J:
                    case LATIN_SMALL_LETTER_V:
                    case CIRCUMFLEX_ACCENT:
                    case LATIN_SMALL_LETTER_R:
                    case LATIN_SMALL_LETTER_C:
                    case LATIN_SMALL_LETTER_U:
                    case LATIN_SMALL_LETTER_O:
                    case LATIN_SMALL_LETTER_A:
                    case LATIN_SMALL_LETTER_D:
                    case LATIN_SMALL_LETTER_B:
                    case LATIN_SMALL_LETTER_Y:
                    case LATIN_SMALL_LETTER_M:
                    case COPYRIGHT_SIGN:
                    case DEGREE_SIGN:
                    case EURO_SIGN:
                    case LEFT_CURLY_BRACKET:
                    case LEFT_SINGLE_QUOTATION_MARK:
                    case MULTIPLICATION_SIGN:
                    case POUND_SIGN:
                    case REGISTERED_SIGN:
                    case RIGHT_CURLY_BRACKET:
                    case RIGHT_SINGLE_QUOTATION_MARK:
                    case SECTION_SIGN:
                    case DIGIT_0:
                    case DIGIT_1:
                    case DIGIT_2:
                    case DIGIT_3:
                    case DIGIT_4:
                    case DIGIT_5:
                    case DIGIT_6:
                    case DIGIT_7:
                    case DIGIT_8:
                    case DIGIT_9:
                    case LATIN_CAPITAL_LETTER_A:
                    case LATIN_CAPITAL_LETTER_B:
                    case LATIN_CAPITAL_LETTER_C:
                    case LATIN_CAPITAL_LETTER_D:
                    case LATIN_CAPITAL_LETTER_E:
                    case LATIN_CAPITAL_LETTER_F:
                    case LATIN_SMALL_LETTER_K:
                    case LATIN_SMALL_LETTER_Q:
                    case LATIN_SMALL_LETTER_W:
                    case LATIN_SMALL_LETTER_X:
                    case LATIN_SMALL_LETTER_Z:
                    case LATIN_CAPITAL_LETTER_G:
                    case LATIN_CAPITAL_LETTER_H:
                    case LATIN_CAPITAL_LETTER_I:
                    case LATIN_CAPITAL_LETTER_J:
                    case LATIN_CAPITAL_LETTER_K:
                    case LATIN_CAPITAL_LETTER_L:
                    case LATIN_CAPITAL_LETTER_M:
                    case LATIN_CAPITAL_LETTER_N:
                    case LATIN_CAPITAL_LETTER_O:
                    case LATIN_CAPITAL_LETTER_P:
                    case LATIN_CAPITAL_LETTER_Q:
                    case LATIN_CAPITAL_LETTER_R:
                    case LATIN_CAPITAL_LETTER_S:
                    case LATIN_CAPITAL_LETTER_T:
                    case LATIN_CAPITAL_LETTER_U:
                    case LATIN_CAPITAL_LETTER_V:
                    case LATIN_CAPITAL_LETTER_W:
                    case LATIN_CAPITAL_LETTER_X:
                    case LATIN_CAPITAL_LETTER_Y:
                    case LATIN_CAPITAL_LETTER_Z:
                    case LATIN_SMALL_LETTER_A_WITH_GRAVE:
                    case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
                    case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
                    case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
                    case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
                    case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
                    case LATIN_SMALL_LETTER_A_WITH_ACUTE:
                    case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
                    case LATIN_SMALL_LETTER_AE:
                    case LATIN_CAPITAL_LETTER_AE:
                    case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
                    case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
                    case LATIN_SMALL_LETTER_E_WITH_GRAVE:
                    case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
                    case LATIN_SMALL_LETTER_E_WITH_ACUTE:
                    case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
                    case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
                    case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
                    case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
                    case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
                    case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
                    case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
                    case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
                    case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
                    case LATIN_SMALL_LETTER_I_WITH_ACUTE:
                    case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
                    case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
                    case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
                    case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
                    case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
                    case LATIN_SMALL_LETTER_O_WITH_ACUTE:
                    case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
                    case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
                    case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
                    case LATIN_SMALL_LETTER_U_WITH_GRAVE:
                    case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
                    case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
                    case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
                    case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
                    case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
                    case LATIN_SMALL_LETTER_U_WITH_ACUTE:
                    case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
                    case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
                    case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
                    case LATIN_SMALL_LIGATURE_OE:
                    case LATIN_CAPITAL_LIGATURE_OE:
                        {
                        alt307=1;
                        }
                        break;
                    case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
                        {
                        alt307=2;
                        }
                        break;
                    case WHITESPACE:
                        {
                        alt307=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 307, 0, input);

                        throw nvae;
                    }

                    switch (alt307) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1363:15: s1= anySymbolExceptGreaterthansign
                            {
                            pushFollow(FOLLOW_anySymbolExceptGreaterthansign_in_literalLine12627);
                            s1=anySymbolExceptGreaterthansign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, s1.getTree());
                            if ( state.backtracking==0 ) {
                               buffer.append( (s1!=null?input.toString(s1.start,s1.stop):null) ) ; 
                            }

                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1364:15: s2= escapedCharacter
                            {
                            pushFollow(FOLLOW_escapedCharacter_in_literalLine12650);
                            s2=escapedCharacter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, s2.getTree());
                            if ( state.backtracking==0 ) {
                               buffer.append( (s2!=null?s2.unescaped:null) ) ; 
                            }

                            }
                            break;
                        case 3 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1365:15: s3= WHITESPACE
                            {
                            s3=(Token)match(input,WHITESPACE,FOLLOW_WHITESPACE_in_literalLine12673); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            s3_tree = (Object)adaptor.create(s3);
                            adaptor.addChild(root_0, s3_tree);
                            }
                            if ( state.backtracking==0 ) {
                               buffer.append( (s3!=null?s3.getText():null) ) ; 
                            }

                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1367:11: (s4= anySymbol | s5= escapedCharacter | s6= WHITESPACE )*
                    loop308:
                    do {
                        int alt308=4;
                        switch ( input.LA(1) ) {
                        case COMMERCIAL_AT:
                        case REVERSE_SOLIDUS:
                        case LEFT_PARENTHESIS:
                        case RIGHT_PARENTHESIS:
                        case LEFT_SQUARE_BRACKET:
                        case RIGHT_SQUARE_BRACKET:
                        case DOUBLE_QUOTE:
                        case SOLIDUS:
                        case HYPHEN_MINUS:
                        case LOW_LINE:
                        case VERTICAL_LINE:
                        case LESS_THAN_SIGN:
                        case GREATER_THAN_SIGN:
                        case GRAVE_ACCENT:
                        case FULL_STOP:
                        case COMMA:
                        case QUESTION_MARK:
                        case EXCLAMATION_MARK:
                        case SEMICOLON:
                        case COLON:
                        case APOSTROPHE:
                        case LATIN_SMALL_LETTER_F:
                        case LATIN_SMALL_LETTER_I:
                        case LATIN_SMALL_LETTER_L:
                        case LATIN_SMALL_LETTER_E:
                        case LATIN_SMALL_LETTER_H:
                        case LATIN_SMALL_LETTER_T:
                        case LATIN_SMALL_LETTER_P:
                        case LATIN_SMALL_LETTER_S:
                        case NUMBER_SIGN:
                        case AMPERSAND:
                        case EQUALS_SIGN:
                        case TILDE:
                        case DOLLAR_SIGN:
                        case PLUS_SIGN:
                        case ASTERISK:
                        case PERCENT_SIGN:
                        case LATIN_SMALL_LETTER_N:
                        case LATIN_SMALL_LETTER_G:
                        case LATIN_SMALL_LETTER_J:
                        case LATIN_SMALL_LETTER_V:
                        case CIRCUMFLEX_ACCENT:
                        case LATIN_SMALL_LETTER_R:
                        case LATIN_SMALL_LETTER_C:
                        case LATIN_SMALL_LETTER_U:
                        case LATIN_SMALL_LETTER_O:
                        case LATIN_SMALL_LETTER_A:
                        case LATIN_SMALL_LETTER_D:
                        case LATIN_SMALL_LETTER_B:
                        case LATIN_SMALL_LETTER_Y:
                        case LATIN_SMALL_LETTER_M:
                        case COPYRIGHT_SIGN:
                        case DEGREE_SIGN:
                        case EURO_SIGN:
                        case LEFT_CURLY_BRACKET:
                        case LEFT_SINGLE_QUOTATION_MARK:
                        case MULTIPLICATION_SIGN:
                        case POUND_SIGN:
                        case REGISTERED_SIGN:
                        case RIGHT_CURLY_BRACKET:
                        case RIGHT_SINGLE_QUOTATION_MARK:
                        case SECTION_SIGN:
                        case DIGIT_0:
                        case DIGIT_1:
                        case DIGIT_2:
                        case DIGIT_3:
                        case DIGIT_4:
                        case DIGIT_5:
                        case DIGIT_6:
                        case DIGIT_7:
                        case DIGIT_8:
                        case DIGIT_9:
                        case LATIN_CAPITAL_LETTER_A:
                        case LATIN_CAPITAL_LETTER_B:
                        case LATIN_CAPITAL_LETTER_C:
                        case LATIN_CAPITAL_LETTER_D:
                        case LATIN_CAPITAL_LETTER_E:
                        case LATIN_CAPITAL_LETTER_F:
                        case LATIN_SMALL_LETTER_K:
                        case LATIN_SMALL_LETTER_Q:
                        case LATIN_SMALL_LETTER_W:
                        case LATIN_SMALL_LETTER_X:
                        case LATIN_SMALL_LETTER_Z:
                        case LATIN_CAPITAL_LETTER_G:
                        case LATIN_CAPITAL_LETTER_H:
                        case LATIN_CAPITAL_LETTER_I:
                        case LATIN_CAPITAL_LETTER_J:
                        case LATIN_CAPITAL_LETTER_K:
                        case LATIN_CAPITAL_LETTER_L:
                        case LATIN_CAPITAL_LETTER_M:
                        case LATIN_CAPITAL_LETTER_N:
                        case LATIN_CAPITAL_LETTER_O:
                        case LATIN_CAPITAL_LETTER_P:
                        case LATIN_CAPITAL_LETTER_Q:
                        case LATIN_CAPITAL_LETTER_R:
                        case LATIN_CAPITAL_LETTER_S:
                        case LATIN_CAPITAL_LETTER_T:
                        case LATIN_CAPITAL_LETTER_U:
                        case LATIN_CAPITAL_LETTER_V:
                        case LATIN_CAPITAL_LETTER_W:
                        case LATIN_CAPITAL_LETTER_X:
                        case LATIN_CAPITAL_LETTER_Y:
                        case LATIN_CAPITAL_LETTER_Z:
                        case LATIN_SMALL_LETTER_A_WITH_GRAVE:
                        case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
                        case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
                        case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
                        case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
                        case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
                        case LATIN_SMALL_LETTER_A_WITH_ACUTE:
                        case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
                        case LATIN_SMALL_LETTER_AE:
                        case LATIN_CAPITAL_LETTER_AE:
                        case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
                        case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
                        case LATIN_SMALL_LETTER_E_WITH_GRAVE:
                        case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
                        case LATIN_SMALL_LETTER_E_WITH_ACUTE:
                        case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
                        case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
                        case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
                        case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
                        case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
                        case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
                        case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
                        case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
                        case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
                        case LATIN_SMALL_LETTER_I_WITH_ACUTE:
                        case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
                        case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
                        case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
                        case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
                        case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
                        case LATIN_SMALL_LETTER_O_WITH_ACUTE:
                        case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
                        case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
                        case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
                        case LATIN_SMALL_LETTER_U_WITH_GRAVE:
                        case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
                        case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
                        case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
                        case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
                        case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
                        case LATIN_SMALL_LETTER_U_WITH_ACUTE:
                        case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
                        case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
                        case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
                        case LATIN_SMALL_LIGATURE_OE:
                        case LATIN_CAPITAL_LIGATURE_OE:
                            {
                            alt308=1;
                            }
                            break;
                        case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
                            {
                            alt308=2;
                            }
                            break;
                        case WHITESPACE:
                            {
                            alt308=3;
                            }
                            break;

                        }

                        switch (alt308) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1367:15: s4= anySymbol
                    	    {
                    	    pushFollow(FOLLOW_anySymbol_in_literalLine12708);
                    	    s4=anySymbol();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s4.getTree());
                    	    if ( state.backtracking==0 ) {
                    	       buffer.append( (s4!=null?input.toString(s4.start,s4.stop):null) ) ; 
                    	    }

                    	    }
                    	    break;
                    	case 2 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1368:15: s5= escapedCharacter
                    	    {
                    	    pushFollow(FOLLOW_escapedCharacter_in_literalLine12732);
                    	    s5=escapedCharacter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s5.getTree());
                    	    if ( state.backtracking==0 ) {
                    	       buffer.append( (s5!=null?s5.unescaped:null) ) ; 
                    	    }

                    	    }
                    	    break;
                    	case 3 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1369:15: s6= WHITESPACE
                    	    {
                    	    s6=(Token)match(input,WHITESPACE,FOLLOW_WHITESPACE_in_literalLine12756); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    s6_tree = (Object)adaptor.create(s6);
                    	    adaptor.addChild(root_0, s6_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	       buffer.append( (s6!=null?s6.getText():null) ) ; 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop308;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1373:9: (s7= GREATER_THAN_SIGN ( ( (s8= anySymbolExceptGreaterthansign | s9= escapedCharacter | s10= WHITESPACE ) (s11= anySymbol | s12= escapedCharacter | s13= WHITESPACE )* ) | (s14= GREATER_THAN_SIGN ( (s15= anySymbolExceptGreaterthansign | s16= escapedCharacter | s17= WHITESPACE ) (s18= anySymbol | s19= escapedCharacter | s20= WHITESPACE )* )? ) )? )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1373:9: (s7= GREATER_THAN_SIGN ( ( (s8= anySymbolExceptGreaterthansign | s9= escapedCharacter | s10= WHITESPACE ) (s11= anySymbol | s12= escapedCharacter | s13= WHITESPACE )* ) | (s14= GREATER_THAN_SIGN ( (s15= anySymbolExceptGreaterthansign | s16= escapedCharacter | s17= WHITESPACE ) (s18= anySymbol | s19= escapedCharacter | s20= WHITESPACE )* )? ) )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1373:11: s7= GREATER_THAN_SIGN ( ( (s8= anySymbolExceptGreaterthansign | s9= escapedCharacter | s10= WHITESPACE ) (s11= anySymbol | s12= escapedCharacter | s13= WHITESPACE )* ) | (s14= GREATER_THAN_SIGN ( (s15= anySymbolExceptGreaterthansign | s16= escapedCharacter | s17= WHITESPACE ) (s18= anySymbol | s19= escapedCharacter | s20= WHITESPACE )* )? ) )?
                    {
                    s7=(Token)match(input,GREATER_THAN_SIGN,FOLLOW_GREATER_THAN_SIGN_in_literalLine12807); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s7_tree = (Object)adaptor.create(s7);
                    adaptor.addChild(root_0, s7_tree);
                    }
                    if ( state.backtracking==0 ) {
                       buffer.append( (s7!=null?s7.getText():null) ) ; 
                    }
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1374:11: ( ( (s8= anySymbolExceptGreaterthansign | s9= escapedCharacter | s10= WHITESPACE ) (s11= anySymbol | s12= escapedCharacter | s13= WHITESPACE )* ) | (s14= GREATER_THAN_SIGN ( (s15= anySymbolExceptGreaterthansign | s16= escapedCharacter | s17= WHITESPACE ) (s18= anySymbol | s19= escapedCharacter | s20= WHITESPACE )* )? ) )?
                    int alt314=3;
                    int LA314_0 = input.LA(1);

                    if ( ((LA314_0>=COMMERCIAL_AT && LA314_0<=WHITESPACE)||(LA314_0>=VERTICAL_LINE && LA314_0<=LESS_THAN_SIGN)||(LA314_0>=GRAVE_ACCENT && LA314_0<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA314_0>=LATIN_SMALL_LETTER_R && LA314_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt314=1;
                    }
                    else if ( (LA314_0==GREATER_THAN_SIGN) ) {
                        alt314=2;
                    }
                    switch (alt314) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1374:15: ( (s8= anySymbolExceptGreaterthansign | s9= escapedCharacter | s10= WHITESPACE ) (s11= anySymbol | s12= escapedCharacter | s13= WHITESPACE )* )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1374:15: ( (s8= anySymbolExceptGreaterthansign | s9= escapedCharacter | s10= WHITESPACE ) (s11= anySymbol | s12= escapedCharacter | s13= WHITESPACE )* )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1374:17: (s8= anySymbolExceptGreaterthansign | s9= escapedCharacter | s10= WHITESPACE ) (s11= anySymbol | s12= escapedCharacter | s13= WHITESPACE )*
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1374:17: (s8= anySymbolExceptGreaterthansign | s9= escapedCharacter | s10= WHITESPACE )
                            int alt309=3;
                            switch ( input.LA(1) ) {
                            case COMMERCIAL_AT:
                            case REVERSE_SOLIDUS:
                            case LEFT_PARENTHESIS:
                            case RIGHT_PARENTHESIS:
                            case LEFT_SQUARE_BRACKET:
                            case RIGHT_SQUARE_BRACKET:
                            case DOUBLE_QUOTE:
                            case SOLIDUS:
                            case HYPHEN_MINUS:
                            case LOW_LINE:
                            case VERTICAL_LINE:
                            case LESS_THAN_SIGN:
                            case GRAVE_ACCENT:
                            case FULL_STOP:
                            case COMMA:
                            case QUESTION_MARK:
                            case EXCLAMATION_MARK:
                            case SEMICOLON:
                            case COLON:
                            case APOSTROPHE:
                            case LATIN_SMALL_LETTER_F:
                            case LATIN_SMALL_LETTER_I:
                            case LATIN_SMALL_LETTER_L:
                            case LATIN_SMALL_LETTER_E:
                            case LATIN_SMALL_LETTER_H:
                            case LATIN_SMALL_LETTER_T:
                            case LATIN_SMALL_LETTER_P:
                            case LATIN_SMALL_LETTER_S:
                            case NUMBER_SIGN:
                            case AMPERSAND:
                            case EQUALS_SIGN:
                            case TILDE:
                            case DOLLAR_SIGN:
                            case PLUS_SIGN:
                            case ASTERISK:
                            case PERCENT_SIGN:
                            case LATIN_SMALL_LETTER_N:
                            case LATIN_SMALL_LETTER_G:
                            case LATIN_SMALL_LETTER_J:
                            case LATIN_SMALL_LETTER_V:
                            case CIRCUMFLEX_ACCENT:
                            case LATIN_SMALL_LETTER_R:
                            case LATIN_SMALL_LETTER_C:
                            case LATIN_SMALL_LETTER_U:
                            case LATIN_SMALL_LETTER_O:
                            case LATIN_SMALL_LETTER_A:
                            case LATIN_SMALL_LETTER_D:
                            case LATIN_SMALL_LETTER_B:
                            case LATIN_SMALL_LETTER_Y:
                            case LATIN_SMALL_LETTER_M:
                            case COPYRIGHT_SIGN:
                            case DEGREE_SIGN:
                            case EURO_SIGN:
                            case LEFT_CURLY_BRACKET:
                            case LEFT_SINGLE_QUOTATION_MARK:
                            case MULTIPLICATION_SIGN:
                            case POUND_SIGN:
                            case REGISTERED_SIGN:
                            case RIGHT_CURLY_BRACKET:
                            case RIGHT_SINGLE_QUOTATION_MARK:
                            case SECTION_SIGN:
                            case DIGIT_0:
                            case DIGIT_1:
                            case DIGIT_2:
                            case DIGIT_3:
                            case DIGIT_4:
                            case DIGIT_5:
                            case DIGIT_6:
                            case DIGIT_7:
                            case DIGIT_8:
                            case DIGIT_9:
                            case LATIN_CAPITAL_LETTER_A:
                            case LATIN_CAPITAL_LETTER_B:
                            case LATIN_CAPITAL_LETTER_C:
                            case LATIN_CAPITAL_LETTER_D:
                            case LATIN_CAPITAL_LETTER_E:
                            case LATIN_CAPITAL_LETTER_F:
                            case LATIN_SMALL_LETTER_K:
                            case LATIN_SMALL_LETTER_Q:
                            case LATIN_SMALL_LETTER_W:
                            case LATIN_SMALL_LETTER_X:
                            case LATIN_SMALL_LETTER_Z:
                            case LATIN_CAPITAL_LETTER_G:
                            case LATIN_CAPITAL_LETTER_H:
                            case LATIN_CAPITAL_LETTER_I:
                            case LATIN_CAPITAL_LETTER_J:
                            case LATIN_CAPITAL_LETTER_K:
                            case LATIN_CAPITAL_LETTER_L:
                            case LATIN_CAPITAL_LETTER_M:
                            case LATIN_CAPITAL_LETTER_N:
                            case LATIN_CAPITAL_LETTER_O:
                            case LATIN_CAPITAL_LETTER_P:
                            case LATIN_CAPITAL_LETTER_Q:
                            case LATIN_CAPITAL_LETTER_R:
                            case LATIN_CAPITAL_LETTER_S:
                            case LATIN_CAPITAL_LETTER_T:
                            case LATIN_CAPITAL_LETTER_U:
                            case LATIN_CAPITAL_LETTER_V:
                            case LATIN_CAPITAL_LETTER_W:
                            case LATIN_CAPITAL_LETTER_X:
                            case LATIN_CAPITAL_LETTER_Y:
                            case LATIN_CAPITAL_LETTER_Z:
                            case LATIN_SMALL_LETTER_A_WITH_GRAVE:
                            case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
                            case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
                            case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
                            case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
                            case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
                            case LATIN_SMALL_LETTER_A_WITH_ACUTE:
                            case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
                            case LATIN_SMALL_LETTER_AE:
                            case LATIN_CAPITAL_LETTER_AE:
                            case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
                            case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
                            case LATIN_SMALL_LETTER_E_WITH_GRAVE:
                            case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
                            case LATIN_SMALL_LETTER_E_WITH_ACUTE:
                            case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
                            case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
                            case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
                            case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
                            case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
                            case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
                            case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
                            case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
                            case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
                            case LATIN_SMALL_LETTER_I_WITH_ACUTE:
                            case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
                            case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
                            case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
                            case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
                            case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
                            case LATIN_SMALL_LETTER_O_WITH_ACUTE:
                            case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
                            case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
                            case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
                            case LATIN_SMALL_LETTER_U_WITH_GRAVE:
                            case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
                            case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
                            case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
                            case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
                            case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
                            case LATIN_SMALL_LETTER_U_WITH_ACUTE:
                            case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
                            case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
                            case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
                            case LATIN_SMALL_LIGATURE_OE:
                            case LATIN_CAPITAL_LIGATURE_OE:
                                {
                                alt309=1;
                                }
                                break;
                            case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
                                {
                                alt309=2;
                                }
                                break;
                            case WHITESPACE:
                                {
                                alt309=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 309, 0, input);

                                throw nvae;
                            }

                            switch (alt309) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1374:21: s8= anySymbolExceptGreaterthansign
                                    {
                                    pushFollow(FOLLOW_anySymbolExceptGreaterthansign_in_literalLine12837);
                                    s8=anySymbolExceptGreaterthansign();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, s8.getTree());
                                    if ( state.backtracking==0 ) {
                                       buffer.append( (s8!=null?input.toString(s8.start,s8.stop):null) ) ; 
                                    }

                                    }
                                    break;
                                case 2 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1375:21: s9= escapedCharacter
                                    {
                                    pushFollow(FOLLOW_escapedCharacter_in_literalLine12867);
                                    s9=escapedCharacter();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, s9.getTree());
                                    if ( state.backtracking==0 ) {
                                       buffer.append( (s9!=null?s9.unescaped:null) ) ; 
                                    }

                                    }
                                    break;
                                case 3 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1376:21: s10= WHITESPACE
                                    {
                                    s10=(Token)match(input,WHITESPACE,FOLLOW_WHITESPACE_in_literalLine12897); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    s10_tree = (Object)adaptor.create(s10);
                                    adaptor.addChild(root_0, s10_tree);
                                    }
                                    if ( state.backtracking==0 ) {
                                       buffer.append( (s10!=null?s10.getText():null) ) ; 
                                    }

                                    }
                                    break;

                            }

                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1378:17: (s11= anySymbol | s12= escapedCharacter | s13= WHITESPACE )*
                            loop310:
                            do {
                                int alt310=4;
                                switch ( input.LA(1) ) {
                                case COMMERCIAL_AT:
                                case REVERSE_SOLIDUS:
                                case LEFT_PARENTHESIS:
                                case RIGHT_PARENTHESIS:
                                case LEFT_SQUARE_BRACKET:
                                case RIGHT_SQUARE_BRACKET:
                                case DOUBLE_QUOTE:
                                case SOLIDUS:
                                case HYPHEN_MINUS:
                                case LOW_LINE:
                                case VERTICAL_LINE:
                                case LESS_THAN_SIGN:
                                case GREATER_THAN_SIGN:
                                case GRAVE_ACCENT:
                                case FULL_STOP:
                                case COMMA:
                                case QUESTION_MARK:
                                case EXCLAMATION_MARK:
                                case SEMICOLON:
                                case COLON:
                                case APOSTROPHE:
                                case LATIN_SMALL_LETTER_F:
                                case LATIN_SMALL_LETTER_I:
                                case LATIN_SMALL_LETTER_L:
                                case LATIN_SMALL_LETTER_E:
                                case LATIN_SMALL_LETTER_H:
                                case LATIN_SMALL_LETTER_T:
                                case LATIN_SMALL_LETTER_P:
                                case LATIN_SMALL_LETTER_S:
                                case NUMBER_SIGN:
                                case AMPERSAND:
                                case EQUALS_SIGN:
                                case TILDE:
                                case DOLLAR_SIGN:
                                case PLUS_SIGN:
                                case ASTERISK:
                                case PERCENT_SIGN:
                                case LATIN_SMALL_LETTER_N:
                                case LATIN_SMALL_LETTER_G:
                                case LATIN_SMALL_LETTER_J:
                                case LATIN_SMALL_LETTER_V:
                                case CIRCUMFLEX_ACCENT:
                                case LATIN_SMALL_LETTER_R:
                                case LATIN_SMALL_LETTER_C:
                                case LATIN_SMALL_LETTER_U:
                                case LATIN_SMALL_LETTER_O:
                                case LATIN_SMALL_LETTER_A:
                                case LATIN_SMALL_LETTER_D:
                                case LATIN_SMALL_LETTER_B:
                                case LATIN_SMALL_LETTER_Y:
                                case LATIN_SMALL_LETTER_M:
                                case COPYRIGHT_SIGN:
                                case DEGREE_SIGN:
                                case EURO_SIGN:
                                case LEFT_CURLY_BRACKET:
                                case LEFT_SINGLE_QUOTATION_MARK:
                                case MULTIPLICATION_SIGN:
                                case POUND_SIGN:
                                case REGISTERED_SIGN:
                                case RIGHT_CURLY_BRACKET:
                                case RIGHT_SINGLE_QUOTATION_MARK:
                                case SECTION_SIGN:
                                case DIGIT_0:
                                case DIGIT_1:
                                case DIGIT_2:
                                case DIGIT_3:
                                case DIGIT_4:
                                case DIGIT_5:
                                case DIGIT_6:
                                case DIGIT_7:
                                case DIGIT_8:
                                case DIGIT_9:
                                case LATIN_CAPITAL_LETTER_A:
                                case LATIN_CAPITAL_LETTER_B:
                                case LATIN_CAPITAL_LETTER_C:
                                case LATIN_CAPITAL_LETTER_D:
                                case LATIN_CAPITAL_LETTER_E:
                                case LATIN_CAPITAL_LETTER_F:
                                case LATIN_SMALL_LETTER_K:
                                case LATIN_SMALL_LETTER_Q:
                                case LATIN_SMALL_LETTER_W:
                                case LATIN_SMALL_LETTER_X:
                                case LATIN_SMALL_LETTER_Z:
                                case LATIN_CAPITAL_LETTER_G:
                                case LATIN_CAPITAL_LETTER_H:
                                case LATIN_CAPITAL_LETTER_I:
                                case LATIN_CAPITAL_LETTER_J:
                                case LATIN_CAPITAL_LETTER_K:
                                case LATIN_CAPITAL_LETTER_L:
                                case LATIN_CAPITAL_LETTER_M:
                                case LATIN_CAPITAL_LETTER_N:
                                case LATIN_CAPITAL_LETTER_O:
                                case LATIN_CAPITAL_LETTER_P:
                                case LATIN_CAPITAL_LETTER_Q:
                                case LATIN_CAPITAL_LETTER_R:
                                case LATIN_CAPITAL_LETTER_S:
                                case LATIN_CAPITAL_LETTER_T:
                                case LATIN_CAPITAL_LETTER_U:
                                case LATIN_CAPITAL_LETTER_V:
                                case LATIN_CAPITAL_LETTER_W:
                                case LATIN_CAPITAL_LETTER_X:
                                case LATIN_CAPITAL_LETTER_Y:
                                case LATIN_CAPITAL_LETTER_Z:
                                case LATIN_SMALL_LETTER_A_WITH_GRAVE:
                                case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
                                case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
                                case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
                                case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
                                case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
                                case LATIN_SMALL_LETTER_A_WITH_ACUTE:
                                case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
                                case LATIN_SMALL_LETTER_AE:
                                case LATIN_CAPITAL_LETTER_AE:
                                case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
                                case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
                                case LATIN_SMALL_LETTER_E_WITH_GRAVE:
                                case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
                                case LATIN_SMALL_LETTER_E_WITH_ACUTE:
                                case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
                                case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
                                case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
                                case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
                                case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
                                case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
                                case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
                                case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
                                case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
                                case LATIN_SMALL_LETTER_I_WITH_ACUTE:
                                case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
                                case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
                                case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
                                case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
                                case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
                                case LATIN_SMALL_LETTER_O_WITH_ACUTE:
                                case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
                                case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
                                case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
                                case LATIN_SMALL_LETTER_U_WITH_GRAVE:
                                case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
                                case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
                                case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
                                case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
                                case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
                                case LATIN_SMALL_LETTER_U_WITH_ACUTE:
                                case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
                                case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
                                case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
                                case LATIN_SMALL_LIGATURE_OE:
                                case LATIN_CAPITAL_LIGATURE_OE:
                                    {
                                    alt310=1;
                                    }
                                    break;
                                case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
                                    {
                                    alt310=2;
                                    }
                                    break;
                                case WHITESPACE:
                                    {
                                    alt310=3;
                                    }
                                    break;

                                }

                                switch (alt310) {
                            	case 1 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1378:21: s11= anySymbol
                            	    {
                            	    pushFollow(FOLLOW_anySymbol_in_literalLine12946);
                            	    s11=anySymbol();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s11.getTree());
                            	    if ( state.backtracking==0 ) {
                            	       buffer.append( (s11!=null?input.toString(s11.start,s11.stop):null) ) ; 
                            	    }

                            	    }
                            	    break;
                            	case 2 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1379:21: s12= escapedCharacter
                            	    {
                            	    pushFollow(FOLLOW_escapedCharacter_in_literalLine12976);
                            	    s12=escapedCharacter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s12.getTree());
                            	    if ( state.backtracking==0 ) {
                            	       buffer.append( (s12!=null?s12.unescaped:null) ) ; 
                            	    }

                            	    }
                            	    break;
                            	case 3 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1380:21: s13= WHITESPACE
                            	    {
                            	    s13=(Token)match(input,WHITESPACE,FOLLOW_WHITESPACE_in_literalLine13006); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    s13_tree = (Object)adaptor.create(s13);
                            	    adaptor.addChild(root_0, s13_tree);
                            	    }
                            	    if ( state.backtracking==0 ) {
                            	       buffer.append( (s13!=null?s13.getText():null) ) ; 
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop310;
                                }
                            } while (true);


                            }


                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1383:15: (s14= GREATER_THAN_SIGN ( (s15= anySymbolExceptGreaterthansign | s16= escapedCharacter | s17= WHITESPACE ) (s18= anySymbol | s19= escapedCharacter | s20= WHITESPACE )* )? )
                            {
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1383:15: (s14= GREATER_THAN_SIGN ( (s15= anySymbolExceptGreaterthansign | s16= escapedCharacter | s17= WHITESPACE ) (s18= anySymbol | s19= escapedCharacter | s20= WHITESPACE )* )? )
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1383:17: s14= GREATER_THAN_SIGN ( (s15= anySymbolExceptGreaterthansign | s16= escapedCharacter | s17= WHITESPACE ) (s18= anySymbol | s19= escapedCharacter | s20= WHITESPACE )* )?
                            {
                            s14=(Token)match(input,GREATER_THAN_SIGN,FOLLOW_GREATER_THAN_SIGN_in_literalLine13066); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            s14_tree = (Object)adaptor.create(s14);
                            adaptor.addChild(root_0, s14_tree);
                            }
                            if ( state.backtracking==0 ) {
                               buffer.append( (s14!=null?s14.getText():null) ) ; 
                            }
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1384:17: ( (s15= anySymbolExceptGreaterthansign | s16= escapedCharacter | s17= WHITESPACE ) (s18= anySymbol | s19= escapedCharacter | s20= WHITESPACE )* )?
                            int alt313=2;
                            int LA313_0 = input.LA(1);

                            if ( ((LA313_0>=COMMERCIAL_AT && LA313_0<=WHITESPACE)||(LA313_0>=VERTICAL_LINE && LA313_0<=LESS_THAN_SIGN)||(LA313_0>=GRAVE_ACCENT && LA313_0<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA313_0>=LATIN_SMALL_LETTER_R && LA313_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                                alt313=1;
                            }
                            switch (alt313) {
                                case 1 :
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1384:19: (s15= anySymbolExceptGreaterthansign | s16= escapedCharacter | s17= WHITESPACE ) (s18= anySymbol | s19= escapedCharacter | s20= WHITESPACE )*
                                    {
                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1384:19: (s15= anySymbolExceptGreaterthansign | s16= escapedCharacter | s17= WHITESPACE )
                                    int alt311=3;
                                    switch ( input.LA(1) ) {
                                    case COMMERCIAL_AT:
                                    case REVERSE_SOLIDUS:
                                    case LEFT_PARENTHESIS:
                                    case RIGHT_PARENTHESIS:
                                    case LEFT_SQUARE_BRACKET:
                                    case RIGHT_SQUARE_BRACKET:
                                    case DOUBLE_QUOTE:
                                    case SOLIDUS:
                                    case HYPHEN_MINUS:
                                    case LOW_LINE:
                                    case VERTICAL_LINE:
                                    case LESS_THAN_SIGN:
                                    case GRAVE_ACCENT:
                                    case FULL_STOP:
                                    case COMMA:
                                    case QUESTION_MARK:
                                    case EXCLAMATION_MARK:
                                    case SEMICOLON:
                                    case COLON:
                                    case APOSTROPHE:
                                    case LATIN_SMALL_LETTER_F:
                                    case LATIN_SMALL_LETTER_I:
                                    case LATIN_SMALL_LETTER_L:
                                    case LATIN_SMALL_LETTER_E:
                                    case LATIN_SMALL_LETTER_H:
                                    case LATIN_SMALL_LETTER_T:
                                    case LATIN_SMALL_LETTER_P:
                                    case LATIN_SMALL_LETTER_S:
                                    case NUMBER_SIGN:
                                    case AMPERSAND:
                                    case EQUALS_SIGN:
                                    case TILDE:
                                    case DOLLAR_SIGN:
                                    case PLUS_SIGN:
                                    case ASTERISK:
                                    case PERCENT_SIGN:
                                    case LATIN_SMALL_LETTER_N:
                                    case LATIN_SMALL_LETTER_G:
                                    case LATIN_SMALL_LETTER_J:
                                    case LATIN_SMALL_LETTER_V:
                                    case CIRCUMFLEX_ACCENT:
                                    case LATIN_SMALL_LETTER_R:
                                    case LATIN_SMALL_LETTER_C:
                                    case LATIN_SMALL_LETTER_U:
                                    case LATIN_SMALL_LETTER_O:
                                    case LATIN_SMALL_LETTER_A:
                                    case LATIN_SMALL_LETTER_D:
                                    case LATIN_SMALL_LETTER_B:
                                    case LATIN_SMALL_LETTER_Y:
                                    case LATIN_SMALL_LETTER_M:
                                    case COPYRIGHT_SIGN:
                                    case DEGREE_SIGN:
                                    case EURO_SIGN:
                                    case LEFT_CURLY_BRACKET:
                                    case LEFT_SINGLE_QUOTATION_MARK:
                                    case MULTIPLICATION_SIGN:
                                    case POUND_SIGN:
                                    case REGISTERED_SIGN:
                                    case RIGHT_CURLY_BRACKET:
                                    case RIGHT_SINGLE_QUOTATION_MARK:
                                    case SECTION_SIGN:
                                    case DIGIT_0:
                                    case DIGIT_1:
                                    case DIGIT_2:
                                    case DIGIT_3:
                                    case DIGIT_4:
                                    case DIGIT_5:
                                    case DIGIT_6:
                                    case DIGIT_7:
                                    case DIGIT_8:
                                    case DIGIT_9:
                                    case LATIN_CAPITAL_LETTER_A:
                                    case LATIN_CAPITAL_LETTER_B:
                                    case LATIN_CAPITAL_LETTER_C:
                                    case LATIN_CAPITAL_LETTER_D:
                                    case LATIN_CAPITAL_LETTER_E:
                                    case LATIN_CAPITAL_LETTER_F:
                                    case LATIN_SMALL_LETTER_K:
                                    case LATIN_SMALL_LETTER_Q:
                                    case LATIN_SMALL_LETTER_W:
                                    case LATIN_SMALL_LETTER_X:
                                    case LATIN_SMALL_LETTER_Z:
                                    case LATIN_CAPITAL_LETTER_G:
                                    case LATIN_CAPITAL_LETTER_H:
                                    case LATIN_CAPITAL_LETTER_I:
                                    case LATIN_CAPITAL_LETTER_J:
                                    case LATIN_CAPITAL_LETTER_K:
                                    case LATIN_CAPITAL_LETTER_L:
                                    case LATIN_CAPITAL_LETTER_M:
                                    case LATIN_CAPITAL_LETTER_N:
                                    case LATIN_CAPITAL_LETTER_O:
                                    case LATIN_CAPITAL_LETTER_P:
                                    case LATIN_CAPITAL_LETTER_Q:
                                    case LATIN_CAPITAL_LETTER_R:
                                    case LATIN_CAPITAL_LETTER_S:
                                    case LATIN_CAPITAL_LETTER_T:
                                    case LATIN_CAPITAL_LETTER_U:
                                    case LATIN_CAPITAL_LETTER_V:
                                    case LATIN_CAPITAL_LETTER_W:
                                    case LATIN_CAPITAL_LETTER_X:
                                    case LATIN_CAPITAL_LETTER_Y:
                                    case LATIN_CAPITAL_LETTER_Z:
                                    case LATIN_SMALL_LETTER_A_WITH_GRAVE:
                                    case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
                                    case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
                                    case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
                                    case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
                                    case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
                                    case LATIN_SMALL_LETTER_A_WITH_ACUTE:
                                    case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
                                    case LATIN_SMALL_LETTER_AE:
                                    case LATIN_CAPITAL_LETTER_AE:
                                    case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
                                    case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
                                    case LATIN_SMALL_LETTER_E_WITH_GRAVE:
                                    case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
                                    case LATIN_SMALL_LETTER_E_WITH_ACUTE:
                                    case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
                                    case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
                                    case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
                                    case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
                                    case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
                                    case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
                                    case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
                                    case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
                                    case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
                                    case LATIN_SMALL_LETTER_I_WITH_ACUTE:
                                    case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
                                    case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
                                    case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
                                    case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
                                    case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
                                    case LATIN_SMALL_LETTER_O_WITH_ACUTE:
                                    case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
                                    case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
                                    case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
                                    case LATIN_SMALL_LETTER_U_WITH_GRAVE:
                                    case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
                                    case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
                                    case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
                                    case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
                                    case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
                                    case LATIN_SMALL_LETTER_U_WITH_ACUTE:
                                    case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
                                    case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
                                    case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
                                    case LATIN_SMALL_LIGATURE_OE:
                                    case LATIN_CAPITAL_LIGATURE_OE:
                                        {
                                        alt311=1;
                                        }
                                        break;
                                    case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
                                        {
                                        alt311=2;
                                        }
                                        break;
                                    case WHITESPACE:
                                        {
                                        alt311=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 311, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt311) {
                                        case 1 :
                                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1384:23: s15= anySymbolExceptGreaterthansign
                                            {
                                            pushFollow(FOLLOW_anySymbolExceptGreaterthansign_in_literalLine13096);
                                            s15=anySymbolExceptGreaterthansign();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) adaptor.addChild(root_0, s15.getTree());
                                            if ( state.backtracking==0 ) {
                                               buffer.append( (s15!=null?input.toString(s15.start,s15.stop):null) ) ; 
                                            }

                                            }
                                            break;
                                        case 2 :
                                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1385:23: s16= escapedCharacter
                                            {
                                            pushFollow(FOLLOW_escapedCharacter_in_literalLine13126);
                                            s16=escapedCharacter();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) adaptor.addChild(root_0, s16.getTree());
                                            if ( state.backtracking==0 ) {
                                               buffer.append( (s16!=null?s16.unescaped:null) ) ; 
                                            }

                                            }
                                            break;
                                        case 3 :
                                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1386:23: s17= WHITESPACE
                                            {
                                            s17=(Token)match(input,WHITESPACE,FOLLOW_WHITESPACE_in_literalLine13158); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                            s17_tree = (Object)adaptor.create(s17);
                                            adaptor.addChild(root_0, s17_tree);
                                            }
                                            if ( state.backtracking==0 ) {
                                               buffer.append( (s17!=null?s17.getText():null) ) ; 
                                            }

                                            }
                                            break;

                                    }

                                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1388:19: (s18= anySymbol | s19= escapedCharacter | s20= WHITESPACE )*
                                    loop312:
                                    do {
                                        int alt312=4;
                                        switch ( input.LA(1) ) {
                                        case COMMERCIAL_AT:
                                        case REVERSE_SOLIDUS:
                                        case LEFT_PARENTHESIS:
                                        case RIGHT_PARENTHESIS:
                                        case LEFT_SQUARE_BRACKET:
                                        case RIGHT_SQUARE_BRACKET:
                                        case DOUBLE_QUOTE:
                                        case SOLIDUS:
                                        case HYPHEN_MINUS:
                                        case LOW_LINE:
                                        case VERTICAL_LINE:
                                        case LESS_THAN_SIGN:
                                        case GREATER_THAN_SIGN:
                                        case GRAVE_ACCENT:
                                        case FULL_STOP:
                                        case COMMA:
                                        case QUESTION_MARK:
                                        case EXCLAMATION_MARK:
                                        case SEMICOLON:
                                        case COLON:
                                        case APOSTROPHE:
                                        case LATIN_SMALL_LETTER_F:
                                        case LATIN_SMALL_LETTER_I:
                                        case LATIN_SMALL_LETTER_L:
                                        case LATIN_SMALL_LETTER_E:
                                        case LATIN_SMALL_LETTER_H:
                                        case LATIN_SMALL_LETTER_T:
                                        case LATIN_SMALL_LETTER_P:
                                        case LATIN_SMALL_LETTER_S:
                                        case NUMBER_SIGN:
                                        case AMPERSAND:
                                        case EQUALS_SIGN:
                                        case TILDE:
                                        case DOLLAR_SIGN:
                                        case PLUS_SIGN:
                                        case ASTERISK:
                                        case PERCENT_SIGN:
                                        case LATIN_SMALL_LETTER_N:
                                        case LATIN_SMALL_LETTER_G:
                                        case LATIN_SMALL_LETTER_J:
                                        case LATIN_SMALL_LETTER_V:
                                        case CIRCUMFLEX_ACCENT:
                                        case LATIN_SMALL_LETTER_R:
                                        case LATIN_SMALL_LETTER_C:
                                        case LATIN_SMALL_LETTER_U:
                                        case LATIN_SMALL_LETTER_O:
                                        case LATIN_SMALL_LETTER_A:
                                        case LATIN_SMALL_LETTER_D:
                                        case LATIN_SMALL_LETTER_B:
                                        case LATIN_SMALL_LETTER_Y:
                                        case LATIN_SMALL_LETTER_M:
                                        case COPYRIGHT_SIGN:
                                        case DEGREE_SIGN:
                                        case EURO_SIGN:
                                        case LEFT_CURLY_BRACKET:
                                        case LEFT_SINGLE_QUOTATION_MARK:
                                        case MULTIPLICATION_SIGN:
                                        case POUND_SIGN:
                                        case REGISTERED_SIGN:
                                        case RIGHT_CURLY_BRACKET:
                                        case RIGHT_SINGLE_QUOTATION_MARK:
                                        case SECTION_SIGN:
                                        case DIGIT_0:
                                        case DIGIT_1:
                                        case DIGIT_2:
                                        case DIGIT_3:
                                        case DIGIT_4:
                                        case DIGIT_5:
                                        case DIGIT_6:
                                        case DIGIT_7:
                                        case DIGIT_8:
                                        case DIGIT_9:
                                        case LATIN_CAPITAL_LETTER_A:
                                        case LATIN_CAPITAL_LETTER_B:
                                        case LATIN_CAPITAL_LETTER_C:
                                        case LATIN_CAPITAL_LETTER_D:
                                        case LATIN_CAPITAL_LETTER_E:
                                        case LATIN_CAPITAL_LETTER_F:
                                        case LATIN_SMALL_LETTER_K:
                                        case LATIN_SMALL_LETTER_Q:
                                        case LATIN_SMALL_LETTER_W:
                                        case LATIN_SMALL_LETTER_X:
                                        case LATIN_SMALL_LETTER_Z:
                                        case LATIN_CAPITAL_LETTER_G:
                                        case LATIN_CAPITAL_LETTER_H:
                                        case LATIN_CAPITAL_LETTER_I:
                                        case LATIN_CAPITAL_LETTER_J:
                                        case LATIN_CAPITAL_LETTER_K:
                                        case LATIN_CAPITAL_LETTER_L:
                                        case LATIN_CAPITAL_LETTER_M:
                                        case LATIN_CAPITAL_LETTER_N:
                                        case LATIN_CAPITAL_LETTER_O:
                                        case LATIN_CAPITAL_LETTER_P:
                                        case LATIN_CAPITAL_LETTER_Q:
                                        case LATIN_CAPITAL_LETTER_R:
                                        case LATIN_CAPITAL_LETTER_S:
                                        case LATIN_CAPITAL_LETTER_T:
                                        case LATIN_CAPITAL_LETTER_U:
                                        case LATIN_CAPITAL_LETTER_V:
                                        case LATIN_CAPITAL_LETTER_W:
                                        case LATIN_CAPITAL_LETTER_X:
                                        case LATIN_CAPITAL_LETTER_Y:
                                        case LATIN_CAPITAL_LETTER_Z:
                                        case LATIN_SMALL_LETTER_A_WITH_GRAVE:
                                        case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
                                        case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
                                        case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
                                        case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
                                        case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
                                        case LATIN_SMALL_LETTER_A_WITH_ACUTE:
                                        case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
                                        case LATIN_SMALL_LETTER_AE:
                                        case LATIN_CAPITAL_LETTER_AE:
                                        case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
                                        case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
                                        case LATIN_SMALL_LETTER_E_WITH_GRAVE:
                                        case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
                                        case LATIN_SMALL_LETTER_E_WITH_ACUTE:
                                        case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
                                        case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
                                        case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
                                        case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
                                        case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
                                        case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
                                        case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
                                        case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
                                        case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
                                        case LATIN_SMALL_LETTER_I_WITH_ACUTE:
                                        case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
                                        case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
                                        case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
                                        case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
                                        case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
                                        case LATIN_SMALL_LETTER_O_WITH_ACUTE:
                                        case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
                                        case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
                                        case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
                                        case LATIN_SMALL_LETTER_U_WITH_GRAVE:
                                        case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
                                        case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
                                        case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
                                        case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
                                        case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
                                        case LATIN_SMALL_LETTER_U_WITH_ACUTE:
                                        case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
                                        case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
                                        case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
                                        case LATIN_SMALL_LIGATURE_OE:
                                        case LATIN_CAPITAL_LIGATURE_OE:
                                            {
                                            alt312=1;
                                            }
                                            break;
                                        case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
                                            {
                                            alt312=2;
                                            }
                                            break;
                                        case WHITESPACE:
                                            {
                                            alt312=3;
                                            }
                                            break;

                                        }

                                        switch (alt312) {
                                    	case 1 :
                                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1388:23: s18= anySymbol
                                    	    {
                                    	    pushFollow(FOLLOW_anySymbol_in_literalLine13209);
                                    	    s18=anySymbol();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s18.getTree());
                                    	    if ( state.backtracking==0 ) {
                                    	       buffer.append( (s18!=null?input.toString(s18.start,s18.stop):null) ) ; 
                                    	    }

                                    	    }
                                    	    break;
                                    	case 2 :
                                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1389:23: s19= escapedCharacter
                                    	    {
                                    	    pushFollow(FOLLOW_escapedCharacter_in_literalLine13239);
                                    	    s19=escapedCharacter();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s19.getTree());
                                    	    if ( state.backtracking==0 ) {
                                    	       buffer.append( (s19!=null?s19.unescaped:null) ) ; 
                                    	    }

                                    	    }
                                    	    break;
                                    	case 3 :
                                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1390:21: s20= WHITESPACE
                                    	    {
                                    	    s20=(Token)match(input,WHITESPACE,FOLLOW_WHITESPACE_in_literalLine13269); if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) {
                                    	    s20_tree = (Object)adaptor.create(s20);
                                    	    adaptor.addChild(root_0, s20_tree);
                                    	    }
                                    	    if ( state.backtracking==0 ) {
                                    	       buffer.append( (s20!=null?s20.getText():null) ) ; 
                                    	    }

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop312;
                                        }
                                    } while (true);


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               retval.unescaped = buffer.toString() ; 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "literalLine"

    public static class softInlineLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "softInlineLiteral"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1401:1: softInlineLiteral : GRAVE_ACCENT (s1= anySymbolExceptGraveAccent | s2= WHITESPACE | s3= escapedCharacter )+ GRAVE_ACCENT ->;
    public final NovelangParser.softInlineLiteral_return softInlineLiteral() throws RecognitionException {
        NovelangParser.softInlineLiteral_return retval = new NovelangParser.softInlineLiteral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token s2=null;
        Token GRAVE_ACCENT542=null;
        Token GRAVE_ACCENT543=null;
        NovelangParser.anySymbolExceptGraveAccent_return s1 = null;

        NovelangParser.escapedCharacter_return s3 = null;


        Object s2_tree=null;
        Object GRAVE_ACCENT542_tree=null;
        Object GRAVE_ACCENT543_tree=null;
        RewriteRuleTokenStream stream_GRAVE_ACCENT=new RewriteRuleTokenStream(adaptor,"token GRAVE_ACCENT");
        RewriteRuleTokenStream stream_WHITESPACE=new RewriteRuleTokenStream(adaptor,"token WHITESPACE");
        RewriteRuleSubtreeStream stream_escapedCharacter=new RewriteRuleSubtreeStream(adaptor,"rule escapedCharacter");
        RewriteRuleSubtreeStream stream_anySymbolExceptGraveAccent=new RewriteRuleSubtreeStream(adaptor,"rule anySymbolExceptGraveAccent");

          final StringBuffer buffer = new StringBuffer() ;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1405:3: ( GRAVE_ACCENT (s1= anySymbolExceptGraveAccent | s2= WHITESPACE | s3= escapedCharacter )+ GRAVE_ACCENT ->)
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1405:5: GRAVE_ACCENT (s1= anySymbolExceptGraveAccent | s2= WHITESPACE | s3= escapedCharacter )+ GRAVE_ACCENT
            {
            GRAVE_ACCENT542=(Token)match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_softInlineLiteral13397); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GRAVE_ACCENT.add(GRAVE_ACCENT542);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1406:5: (s1= anySymbolExceptGraveAccent | s2= WHITESPACE | s3= escapedCharacter )+
            int cnt316=0;
            loop316:
            do {
                int alt316=4;
                switch ( input.LA(1) ) {
                case COMMERCIAL_AT:
                case REVERSE_SOLIDUS:
                case LEFT_PARENTHESIS:
                case RIGHT_PARENTHESIS:
                case LEFT_SQUARE_BRACKET:
                case RIGHT_SQUARE_BRACKET:
                case DOUBLE_QUOTE:
                case SOLIDUS:
                case HYPHEN_MINUS:
                case LOW_LINE:
                case VERTICAL_LINE:
                case LESS_THAN_SIGN:
                case GREATER_THAN_SIGN:
                case FULL_STOP:
                case COMMA:
                case QUESTION_MARK:
                case EXCLAMATION_MARK:
                case SEMICOLON:
                case COLON:
                case APOSTROPHE:
                case LATIN_SMALL_LETTER_F:
                case LATIN_SMALL_LETTER_I:
                case LATIN_SMALL_LETTER_L:
                case LATIN_SMALL_LETTER_E:
                case LATIN_SMALL_LETTER_H:
                case LATIN_SMALL_LETTER_T:
                case LATIN_SMALL_LETTER_P:
                case LATIN_SMALL_LETTER_S:
                case NUMBER_SIGN:
                case AMPERSAND:
                case EQUALS_SIGN:
                case TILDE:
                case DOLLAR_SIGN:
                case PLUS_SIGN:
                case ASTERISK:
                case PERCENT_SIGN:
                case LATIN_SMALL_LETTER_N:
                case LATIN_SMALL_LETTER_G:
                case LATIN_SMALL_LETTER_J:
                case LATIN_SMALL_LETTER_V:
                case CIRCUMFLEX_ACCENT:
                case LATIN_SMALL_LETTER_R:
                case LATIN_SMALL_LETTER_C:
                case LATIN_SMALL_LETTER_U:
                case LATIN_SMALL_LETTER_O:
                case LATIN_SMALL_LETTER_A:
                case LATIN_SMALL_LETTER_D:
                case LATIN_SMALL_LETTER_B:
                case LATIN_SMALL_LETTER_Y:
                case LATIN_SMALL_LETTER_M:
                case COPYRIGHT_SIGN:
                case DEGREE_SIGN:
                case EURO_SIGN:
                case LEFT_CURLY_BRACKET:
                case LEFT_SINGLE_QUOTATION_MARK:
                case MULTIPLICATION_SIGN:
                case POUND_SIGN:
                case REGISTERED_SIGN:
                case RIGHT_CURLY_BRACKET:
                case RIGHT_SINGLE_QUOTATION_MARK:
                case SECTION_SIGN:
                case DIGIT_0:
                case DIGIT_1:
                case DIGIT_2:
                case DIGIT_3:
                case DIGIT_4:
                case DIGIT_5:
                case DIGIT_6:
                case DIGIT_7:
                case DIGIT_8:
                case DIGIT_9:
                case LATIN_CAPITAL_LETTER_A:
                case LATIN_CAPITAL_LETTER_B:
                case LATIN_CAPITAL_LETTER_C:
                case LATIN_CAPITAL_LETTER_D:
                case LATIN_CAPITAL_LETTER_E:
                case LATIN_CAPITAL_LETTER_F:
                case LATIN_SMALL_LETTER_K:
                case LATIN_SMALL_LETTER_Q:
                case LATIN_SMALL_LETTER_W:
                case LATIN_SMALL_LETTER_X:
                case LATIN_SMALL_LETTER_Z:
                case LATIN_CAPITAL_LETTER_G:
                case LATIN_CAPITAL_LETTER_H:
                case LATIN_CAPITAL_LETTER_I:
                case LATIN_CAPITAL_LETTER_J:
                case LATIN_CAPITAL_LETTER_K:
                case LATIN_CAPITAL_LETTER_L:
                case LATIN_CAPITAL_LETTER_M:
                case LATIN_CAPITAL_LETTER_N:
                case LATIN_CAPITAL_LETTER_O:
                case LATIN_CAPITAL_LETTER_P:
                case LATIN_CAPITAL_LETTER_Q:
                case LATIN_CAPITAL_LETTER_R:
                case LATIN_CAPITAL_LETTER_S:
                case LATIN_CAPITAL_LETTER_T:
                case LATIN_CAPITAL_LETTER_U:
                case LATIN_CAPITAL_LETTER_V:
                case LATIN_CAPITAL_LETTER_W:
                case LATIN_CAPITAL_LETTER_X:
                case LATIN_CAPITAL_LETTER_Y:
                case LATIN_CAPITAL_LETTER_Z:
                case LATIN_SMALL_LETTER_A_WITH_GRAVE:
                case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
                case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
                case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
                case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
                case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
                case LATIN_SMALL_LETTER_A_WITH_ACUTE:
                case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
                case LATIN_SMALL_LETTER_AE:
                case LATIN_CAPITAL_LETTER_AE:
                case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
                case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
                case LATIN_SMALL_LETTER_E_WITH_GRAVE:
                case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
                case LATIN_SMALL_LETTER_E_WITH_ACUTE:
                case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
                case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
                case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
                case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
                case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
                case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
                case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
                case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
                case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
                case LATIN_SMALL_LETTER_I_WITH_ACUTE:
                case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
                case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
                case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
                case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
                case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
                case LATIN_SMALL_LETTER_O_WITH_ACUTE:
                case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
                case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
                case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
                case LATIN_SMALL_LETTER_U_WITH_GRAVE:
                case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
                case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
                case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
                case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
                case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
                case LATIN_SMALL_LETTER_U_WITH_ACUTE:
                case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
                case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
                case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
                case LATIN_SMALL_LIGATURE_OE:
                case LATIN_CAPITAL_LIGATURE_OE:
                    {
                    alt316=1;
                    }
                    break;
                case WHITESPACE:
                    {
                    alt316=2;
                    }
                    break;
                case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
                    {
                    alt316=3;
                    }
                    break;

                }

                switch (alt316) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1406:9: s1= anySymbolExceptGraveAccent
            	    {
            	    pushFollow(FOLLOW_anySymbolExceptGraveAccent_in_softInlineLiteral13411);
            	    s1=anySymbolExceptGraveAccent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_anySymbolExceptGraveAccent.add(s1.getTree());
            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s1!=null?input.toString(s1.start,s1.stop):null) ) ; 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1407:9: s2= WHITESPACE
            	    {
            	    s2=(Token)match(input,WHITESPACE,FOLLOW_WHITESPACE_in_softInlineLiteral13427); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_WHITESPACE.add(s2);

            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s2!=null?s2.getText():null) ) ; 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1408:9: s3= escapedCharacter
            	    {
            	    pushFollow(FOLLOW_escapedCharacter_in_softInlineLiteral13443);
            	    s3=escapedCharacter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapedCharacter.add(s3.getTree());
            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s3!=null?s3.unescaped:null) ) ; 
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt316 >= 1 ) break loop316;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(316, input);
                        throw eee;
                }
                cnt316++;
            } while (true);

            GRAVE_ACCENT543=(Token)match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_softInlineLiteral13459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GRAVE_ACCENT.add(GRAVE_ACCENT543);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1411:5: ->
            {
                adaptor.addChild(root_0,  delegate.createTree( BLOCK_OF_LITERAL_INSIDE_GRAVE_ACCENTS, buffer.toString() ) );

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "softInlineLiteral"

    public static class hardInlineLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hardInlineLiteral"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1414:1: hardInlineLiteral : GRAVE_ACCENT GRAVE_ACCENT (s1= anySymbolExceptGraveAccent | s2= WHITESPACE | s3= escapedCharacter )+ GRAVE_ACCENT GRAVE_ACCENT ->;
    public final NovelangParser.hardInlineLiteral_return hardInlineLiteral() throws RecognitionException {
        NovelangParser.hardInlineLiteral_return retval = new NovelangParser.hardInlineLiteral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token s2=null;
        Token GRAVE_ACCENT544=null;
        Token GRAVE_ACCENT545=null;
        Token GRAVE_ACCENT546=null;
        Token GRAVE_ACCENT547=null;
        NovelangParser.anySymbolExceptGraveAccent_return s1 = null;

        NovelangParser.escapedCharacter_return s3 = null;


        Object s2_tree=null;
        Object GRAVE_ACCENT544_tree=null;
        Object GRAVE_ACCENT545_tree=null;
        Object GRAVE_ACCENT546_tree=null;
        Object GRAVE_ACCENT547_tree=null;
        RewriteRuleTokenStream stream_GRAVE_ACCENT=new RewriteRuleTokenStream(adaptor,"token GRAVE_ACCENT");
        RewriteRuleTokenStream stream_WHITESPACE=new RewriteRuleTokenStream(adaptor,"token WHITESPACE");
        RewriteRuleSubtreeStream stream_escapedCharacter=new RewriteRuleSubtreeStream(adaptor,"rule escapedCharacter");
        RewriteRuleSubtreeStream stream_anySymbolExceptGraveAccent=new RewriteRuleSubtreeStream(adaptor,"rule anySymbolExceptGraveAccent");

          final StringBuffer buffer = new StringBuffer() ;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1418:3: ( GRAVE_ACCENT GRAVE_ACCENT (s1= anySymbolExceptGraveAccent | s2= WHITESPACE | s3= escapedCharacter )+ GRAVE_ACCENT GRAVE_ACCENT ->)
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1418:5: GRAVE_ACCENT GRAVE_ACCENT (s1= anySymbolExceptGraveAccent | s2= WHITESPACE | s3= escapedCharacter )+ GRAVE_ACCENT GRAVE_ACCENT
            {
            GRAVE_ACCENT544=(Token)match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_hardInlineLiteral13488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GRAVE_ACCENT.add(GRAVE_ACCENT544);

            GRAVE_ACCENT545=(Token)match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_hardInlineLiteral13490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GRAVE_ACCENT.add(GRAVE_ACCENT545);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1419:5: (s1= anySymbolExceptGraveAccent | s2= WHITESPACE | s3= escapedCharacter )+
            int cnt317=0;
            loop317:
            do {
                int alt317=4;
                switch ( input.LA(1) ) {
                case COMMERCIAL_AT:
                case REVERSE_SOLIDUS:
                case LEFT_PARENTHESIS:
                case RIGHT_PARENTHESIS:
                case LEFT_SQUARE_BRACKET:
                case RIGHT_SQUARE_BRACKET:
                case DOUBLE_QUOTE:
                case SOLIDUS:
                case HYPHEN_MINUS:
                case LOW_LINE:
                case VERTICAL_LINE:
                case LESS_THAN_SIGN:
                case GREATER_THAN_SIGN:
                case FULL_STOP:
                case COMMA:
                case QUESTION_MARK:
                case EXCLAMATION_MARK:
                case SEMICOLON:
                case COLON:
                case APOSTROPHE:
                case LATIN_SMALL_LETTER_F:
                case LATIN_SMALL_LETTER_I:
                case LATIN_SMALL_LETTER_L:
                case LATIN_SMALL_LETTER_E:
                case LATIN_SMALL_LETTER_H:
                case LATIN_SMALL_LETTER_T:
                case LATIN_SMALL_LETTER_P:
                case LATIN_SMALL_LETTER_S:
                case NUMBER_SIGN:
                case AMPERSAND:
                case EQUALS_SIGN:
                case TILDE:
                case DOLLAR_SIGN:
                case PLUS_SIGN:
                case ASTERISK:
                case PERCENT_SIGN:
                case LATIN_SMALL_LETTER_N:
                case LATIN_SMALL_LETTER_G:
                case LATIN_SMALL_LETTER_J:
                case LATIN_SMALL_LETTER_V:
                case CIRCUMFLEX_ACCENT:
                case LATIN_SMALL_LETTER_R:
                case LATIN_SMALL_LETTER_C:
                case LATIN_SMALL_LETTER_U:
                case LATIN_SMALL_LETTER_O:
                case LATIN_SMALL_LETTER_A:
                case LATIN_SMALL_LETTER_D:
                case LATIN_SMALL_LETTER_B:
                case LATIN_SMALL_LETTER_Y:
                case LATIN_SMALL_LETTER_M:
                case COPYRIGHT_SIGN:
                case DEGREE_SIGN:
                case EURO_SIGN:
                case LEFT_CURLY_BRACKET:
                case LEFT_SINGLE_QUOTATION_MARK:
                case MULTIPLICATION_SIGN:
                case POUND_SIGN:
                case REGISTERED_SIGN:
                case RIGHT_CURLY_BRACKET:
                case RIGHT_SINGLE_QUOTATION_MARK:
                case SECTION_SIGN:
                case DIGIT_0:
                case DIGIT_1:
                case DIGIT_2:
                case DIGIT_3:
                case DIGIT_4:
                case DIGIT_5:
                case DIGIT_6:
                case DIGIT_7:
                case DIGIT_8:
                case DIGIT_9:
                case LATIN_CAPITAL_LETTER_A:
                case LATIN_CAPITAL_LETTER_B:
                case LATIN_CAPITAL_LETTER_C:
                case LATIN_CAPITAL_LETTER_D:
                case LATIN_CAPITAL_LETTER_E:
                case LATIN_CAPITAL_LETTER_F:
                case LATIN_SMALL_LETTER_K:
                case LATIN_SMALL_LETTER_Q:
                case LATIN_SMALL_LETTER_W:
                case LATIN_SMALL_LETTER_X:
                case LATIN_SMALL_LETTER_Z:
                case LATIN_CAPITAL_LETTER_G:
                case LATIN_CAPITAL_LETTER_H:
                case LATIN_CAPITAL_LETTER_I:
                case LATIN_CAPITAL_LETTER_J:
                case LATIN_CAPITAL_LETTER_K:
                case LATIN_CAPITAL_LETTER_L:
                case LATIN_CAPITAL_LETTER_M:
                case LATIN_CAPITAL_LETTER_N:
                case LATIN_CAPITAL_LETTER_O:
                case LATIN_CAPITAL_LETTER_P:
                case LATIN_CAPITAL_LETTER_Q:
                case LATIN_CAPITAL_LETTER_R:
                case LATIN_CAPITAL_LETTER_S:
                case LATIN_CAPITAL_LETTER_T:
                case LATIN_CAPITAL_LETTER_U:
                case LATIN_CAPITAL_LETTER_V:
                case LATIN_CAPITAL_LETTER_W:
                case LATIN_CAPITAL_LETTER_X:
                case LATIN_CAPITAL_LETTER_Y:
                case LATIN_CAPITAL_LETTER_Z:
                case LATIN_SMALL_LETTER_A_WITH_GRAVE:
                case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
                case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
                case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
                case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
                case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
                case LATIN_SMALL_LETTER_A_WITH_ACUTE:
                case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
                case LATIN_SMALL_LETTER_AE:
                case LATIN_CAPITAL_LETTER_AE:
                case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
                case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
                case LATIN_SMALL_LETTER_E_WITH_GRAVE:
                case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
                case LATIN_SMALL_LETTER_E_WITH_ACUTE:
                case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
                case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
                case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
                case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
                case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
                case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
                case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
                case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
                case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
                case LATIN_SMALL_LETTER_I_WITH_ACUTE:
                case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
                case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
                case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
                case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
                case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
                case LATIN_SMALL_LETTER_O_WITH_ACUTE:
                case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
                case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
                case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
                case LATIN_SMALL_LETTER_U_WITH_GRAVE:
                case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
                case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
                case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
                case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
                case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
                case LATIN_SMALL_LETTER_U_WITH_ACUTE:
                case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
                case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
                case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
                case LATIN_SMALL_LIGATURE_OE:
                case LATIN_CAPITAL_LIGATURE_OE:
                    {
                    alt317=1;
                    }
                    break;
                case WHITESPACE:
                    {
                    alt317=2;
                    }
                    break;
                case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
                    {
                    alt317=3;
                    }
                    break;

                }

                switch (alt317) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1419:9: s1= anySymbolExceptGraveAccent
            	    {
            	    pushFollow(FOLLOW_anySymbolExceptGraveAccent_in_hardInlineLiteral13504);
            	    s1=anySymbolExceptGraveAccent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_anySymbolExceptGraveAccent.add(s1.getTree());
            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s1!=null?input.toString(s1.start,s1.stop):null) ) ; 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1420:9: s2= WHITESPACE
            	    {
            	    s2=(Token)match(input,WHITESPACE,FOLLOW_WHITESPACE_in_hardInlineLiteral13520); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_WHITESPACE.add(s2);

            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s2!=null?s2.getText():null) ) ; 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1421:9: s3= escapedCharacter
            	    {
            	    pushFollow(FOLLOW_escapedCharacter_in_hardInlineLiteral13536);
            	    s3=escapedCharacter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapedCharacter.add(s3.getTree());
            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s3!=null?s3.unescaped:null) ) ; 
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt317 >= 1 ) break loop317;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(317, input);
                        throw eee;
                }
                cnt317++;
            } while (true);

            GRAVE_ACCENT546=(Token)match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_hardInlineLiteral13552); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GRAVE_ACCENT.add(GRAVE_ACCENT546);

            GRAVE_ACCENT547=(Token)match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_hardInlineLiteral13554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GRAVE_ACCENT.add(GRAVE_ACCENT547);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1424:5: ->
            {
                adaptor.addChild(root_0,  delegate.createTree( BLOCK_OF_LITERAL_INSIDE_GRAVE_ACCENT_PAIRS, buffer.toString() ) );

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hardInlineLiteral"

    public static class anySymbol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anySymbol"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1429:1: anySymbol : ( anySymbolExceptGreaterthansign | GREATER_THAN_SIGN );
    public final NovelangParser.anySymbol_return anySymbol() throws RecognitionException {
        NovelangParser.anySymbol_return retval = new NovelangParser.anySymbol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token GREATER_THAN_SIGN549=null;
        NovelangParser.anySymbolExceptGreaterthansign_return anySymbolExceptGreaterthansign548 = null;


        Object GREATER_THAN_SIGN549_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1430:3: ( anySymbolExceptGreaterthansign | GREATER_THAN_SIGN )
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( ((LA318_0>=COMMERCIAL_AT && LA318_0<=LOW_LINE)||(LA318_0>=VERTICAL_LINE && LA318_0<=LESS_THAN_SIGN)||(LA318_0>=GRAVE_ACCENT && LA318_0<=CIRCUMFLEX_ACCENT)||(LA318_0>=LATIN_SMALL_LETTER_R && LA318_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt318=1;
            }
            else if ( (LA318_0==GREATER_THAN_SIGN) ) {
                alt318=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 318, 0, input);

                throw nvae;
            }
            switch (alt318) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1430:5: anySymbolExceptGreaterthansign
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_anySymbolExceptGreaterthansign_in_anySymbol13584);
                    anySymbolExceptGreaterthansign548=anySymbolExceptGreaterthansign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anySymbolExceptGreaterthansign548.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1431:5: GREATER_THAN_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    GREATER_THAN_SIGN549=(Token)match(input,GREATER_THAN_SIGN,FOLLOW_GREATER_THAN_SIGN_in_anySymbol13590); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_THAN_SIGN549_tree = (Object)adaptor.create(GREATER_THAN_SIGN549);
                    adaptor.addChild(root_0, GREATER_THAN_SIGN549_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "anySymbol"

    public static class anySymbolExceptGreaterthansign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anySymbolExceptGreaterthansign"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1434:1: anySymbolExceptGreaterthansign : ( anySymbolExceptGreaterthansignAndGraveAccent | GRAVE_ACCENT );
    public final NovelangParser.anySymbolExceptGreaterthansign_return anySymbolExceptGreaterthansign() throws RecognitionException {
        NovelangParser.anySymbolExceptGreaterthansign_return retval = new NovelangParser.anySymbolExceptGreaterthansign_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token GRAVE_ACCENT551=null;
        NovelangParser.anySymbolExceptGreaterthansignAndGraveAccent_return anySymbolExceptGreaterthansignAndGraveAccent550 = null;


        Object GRAVE_ACCENT551_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1435:3: ( anySymbolExceptGreaterthansignAndGraveAccent | GRAVE_ACCENT )
            int alt319=2;
            int LA319_0 = input.LA(1);

            if ( ((LA319_0>=COMMERCIAL_AT && LA319_0<=LOW_LINE)||(LA319_0>=VERTICAL_LINE && LA319_0<=LESS_THAN_SIGN)||(LA319_0>=FULL_STOP && LA319_0<=CIRCUMFLEX_ACCENT)||(LA319_0>=LATIN_SMALL_LETTER_R && LA319_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt319=1;
            }
            else if ( (LA319_0==GRAVE_ACCENT) ) {
                alt319=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 319, 0, input);

                throw nvae;
            }
            switch (alt319) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1435:5: anySymbolExceptGreaterthansignAndGraveAccent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_anySymbolExceptGreaterthansignAndGraveAccent_in_anySymbolExceptGreaterthansign13607);
                    anySymbolExceptGreaterthansignAndGraveAccent550=anySymbolExceptGreaterthansignAndGraveAccent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anySymbolExceptGreaterthansignAndGraveAccent550.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1436:5: GRAVE_ACCENT
                    {
                    root_0 = (Object)adaptor.nil();

                    GRAVE_ACCENT551=(Token)match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_anySymbolExceptGreaterthansign13613); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GRAVE_ACCENT551_tree = (Object)adaptor.create(GRAVE_ACCENT551);
                    adaptor.addChild(root_0, GRAVE_ACCENT551_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "anySymbolExceptGreaterthansign"

    public static class anySymbolExceptGraveAccent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anySymbolExceptGraveAccent"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1439:1: anySymbolExceptGraveAccent : ( anySymbolExceptGreaterthansignAndGraveAccent | GREATER_THAN_SIGN );
    public final NovelangParser.anySymbolExceptGraveAccent_return anySymbolExceptGraveAccent() throws RecognitionException {
        NovelangParser.anySymbolExceptGraveAccent_return retval = new NovelangParser.anySymbolExceptGraveAccent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token GREATER_THAN_SIGN553=null;
        NovelangParser.anySymbolExceptGreaterthansignAndGraveAccent_return anySymbolExceptGreaterthansignAndGraveAccent552 = null;


        Object GREATER_THAN_SIGN553_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1440:3: ( anySymbolExceptGreaterthansignAndGraveAccent | GREATER_THAN_SIGN )
            int alt320=2;
            int LA320_0 = input.LA(1);

            if ( ((LA320_0>=COMMERCIAL_AT && LA320_0<=LOW_LINE)||(LA320_0>=VERTICAL_LINE && LA320_0<=LESS_THAN_SIGN)||(LA320_0>=FULL_STOP && LA320_0<=CIRCUMFLEX_ACCENT)||(LA320_0>=LATIN_SMALL_LETTER_R && LA320_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt320=1;
            }
            else if ( (LA320_0==GREATER_THAN_SIGN) ) {
                alt320=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 320, 0, input);

                throw nvae;
            }
            switch (alt320) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1440:5: anySymbolExceptGreaterthansignAndGraveAccent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_anySymbolExceptGreaterthansignAndGraveAccent_in_anySymbolExceptGraveAccent13628);
                    anySymbolExceptGreaterthansignAndGraveAccent552=anySymbolExceptGreaterthansignAndGraveAccent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anySymbolExceptGreaterthansignAndGraveAccent552.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1441:5: GREATER_THAN_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    GREATER_THAN_SIGN553=(Token)match(input,GREATER_THAN_SIGN,FOLLOW_GREATER_THAN_SIGN_in_anySymbolExceptGraveAccent13634); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_THAN_SIGN553_tree = (Object)adaptor.create(GREATER_THAN_SIGN553);
                    adaptor.addChild(root_0, GREATER_THAN_SIGN553_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "anySymbolExceptGraveAccent"

    public static class leadingPunctuationSign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "leadingPunctuationSign"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1450:1: leadingPunctuationSign : FULL_STOP FULL_STOP FULL_STOP ;
    public final NovelangParser.leadingPunctuationSign_return leadingPunctuationSign() throws RecognitionException {
        NovelangParser.leadingPunctuationSign_return retval = new NovelangParser.leadingPunctuationSign_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FULL_STOP554=null;
        Token FULL_STOP555=null;
        Token FULL_STOP556=null;

        Object FULL_STOP554_tree=null;
        Object FULL_STOP555_tree=null;
        Object FULL_STOP556_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1451:3: ( FULL_STOP FULL_STOP FULL_STOP )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1451:5: FULL_STOP FULL_STOP FULL_STOP
            {
            root_0 = (Object)adaptor.nil();

            FULL_STOP554=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_leadingPunctuationSign13661); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FULL_STOP554_tree = (Object)adaptor.create(FULL_STOP554);
            adaptor.addChild(root_0, FULL_STOP554_tree);
            }
            FULL_STOP555=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_leadingPunctuationSign13663); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FULL_STOP555_tree = (Object)adaptor.create(FULL_STOP555);
            adaptor.addChild(root_0, FULL_STOP555_tree);
            }
            FULL_STOP556=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_leadingPunctuationSign13665); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FULL_STOP556_tree = (Object)adaptor.create(FULL_STOP556);
            adaptor.addChild(root_0, FULL_STOP556_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "leadingPunctuationSign"

    public static class punctuationSign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "punctuationSign"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1454:1: punctuationSign : (s1= COMMA -> ^( PUNCTUATION_SIGN ) | ( FULL_STOP FULL_STOP FULL_STOP )=> FULL_STOP FULL_STOP FULL_STOP -> ^( PUNCTUATION_SIGN ) | s3= FULL_STOP -> ^( PUNCTUATION_SIGN ) | s4= QUESTION_MARK -> ^( PUNCTUATION_SIGN ) | s5= EXCLAMATION_MARK -> ^( PUNCTUATION_SIGN ) | s6= SEMICOLON -> ^( PUNCTUATION_SIGN ) | s7= COLON -> ^( PUNCTUATION_SIGN ) | s8= APOSTROPHE ->);
    public final NovelangParser.punctuationSign_return punctuationSign() throws RecognitionException {
        NovelangParser.punctuationSign_return retval = new NovelangParser.punctuationSign_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token s1=null;
        Token s3=null;
        Token s4=null;
        Token s5=null;
        Token s6=null;
        Token s7=null;
        Token s8=null;
        Token FULL_STOP557=null;
        Token FULL_STOP558=null;
        Token FULL_STOP559=null;

        Object s1_tree=null;
        Object s3_tree=null;
        Object s4_tree=null;
        Object s5_tree=null;
        Object s6_tree=null;
        Object s7_tree=null;
        Object s8_tree=null;
        Object FULL_STOP557_tree=null;
        Object FULL_STOP558_tree=null;
        Object FULL_STOP559_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_EXCLAMATION_MARK=new RewriteRuleTokenStream(adaptor,"token EXCLAMATION_MARK");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_APOSTROPHE=new RewriteRuleTokenStream(adaptor,"token APOSTROPHE");
        RewriteRuleTokenStream stream_FULL_STOP=new RewriteRuleTokenStream(adaptor,"token FULL_STOP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_QUESTION_MARK=new RewriteRuleTokenStream(adaptor,"token QUESTION_MARK");

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1455:3: (s1= COMMA -> ^( PUNCTUATION_SIGN ) | ( FULL_STOP FULL_STOP FULL_STOP )=> FULL_STOP FULL_STOP FULL_STOP -> ^( PUNCTUATION_SIGN ) | s3= FULL_STOP -> ^( PUNCTUATION_SIGN ) | s4= QUESTION_MARK -> ^( PUNCTUATION_SIGN ) | s5= EXCLAMATION_MARK -> ^( PUNCTUATION_SIGN ) | s6= SEMICOLON -> ^( PUNCTUATION_SIGN ) | s7= COLON -> ^( PUNCTUATION_SIGN ) | s8= APOSTROPHE ->)
            int alt321=8;
            alt321 = dfa321.predict(input);
            switch (alt321) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1455:5: s1= COMMA
                    {
                    s1=(Token)match(input,COMMA,FOLLOW_COMMA_in_punctuationSign13682); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(s1);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1455:16: -> ^( PUNCTUATION_SIGN )
                    {
                        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1455:19: ^( PUNCTUATION_SIGN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PUNCTUATION_SIGN, "PUNCTUATION_SIGN"), root_1);

                        adaptor.addChild(root_1,  delegate.createTree( SIGN_COMMA, (s1!=null?s1.getText():null) ) );

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1457:5: ( FULL_STOP FULL_STOP FULL_STOP )=> FULL_STOP FULL_STOP FULL_STOP
                    {
                    FULL_STOP557=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_punctuationSign13717); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FULL_STOP.add(FULL_STOP557);

                    FULL_STOP558=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_punctuationSign13719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FULL_STOP.add(FULL_STOP558);

                    FULL_STOP559=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_punctuationSign13721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FULL_STOP.add(FULL_STOP559);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1458:7: -> ^( PUNCTUATION_SIGN )
                    {
                        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1458:10: ^( PUNCTUATION_SIGN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PUNCTUATION_SIGN, "PUNCTUATION_SIGN"), root_1);

                        adaptor.addChild(root_1,  delegate.createTree( SIGN_ELLIPSIS, "..." ) );

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1460:5: s3= FULL_STOP
                    {
                    s3=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_punctuationSign13763); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FULL_STOP.add(s3);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1460:21: -> ^( PUNCTUATION_SIGN )
                    {
                        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1460:24: ^( PUNCTUATION_SIGN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PUNCTUATION_SIGN, "PUNCTUATION_SIGN"), root_1);

                        adaptor.addChild(root_1,  delegate.createTree( SIGN_FULLSTOP, (s3!=null?s3.getText():null) ) );

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1461:5: s4= QUESTION_MARK
                    {
                    s4=(Token)match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_punctuationSign13784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION_MARK.add(s4);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1461:24: -> ^( PUNCTUATION_SIGN )
                    {
                        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1461:27: ^( PUNCTUATION_SIGN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PUNCTUATION_SIGN, "PUNCTUATION_SIGN"), root_1);

                        adaptor.addChild(root_1,  delegate.createTree( SIGN_QUESTIONMARK, (s4!=null?s4.getText():null) ) );

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1463:5: s5= EXCLAMATION_MARK
                    {
                    s5=(Token)match(input,EXCLAMATION_MARK,FOLLOW_EXCLAMATION_MARK_in_punctuationSign13810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXCLAMATION_MARK.add(s5);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1463:27: -> ^( PUNCTUATION_SIGN )
                    {
                        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1463:30: ^( PUNCTUATION_SIGN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PUNCTUATION_SIGN, "PUNCTUATION_SIGN"), root_1);

                        adaptor.addChild(root_1,  delegate.createTree( SIGN_EXCLAMATIONMARK, (s5!=null?s5.getText():null) ) );

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1465:5: s6= SEMICOLON
                    {
                    s6=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_punctuationSign13837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(s6);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1465:20: -> ^( PUNCTUATION_SIGN )
                    {
                        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1465:23: ^( PUNCTUATION_SIGN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PUNCTUATION_SIGN, "PUNCTUATION_SIGN"), root_1);

                        adaptor.addChild(root_1,  delegate.createTree( SIGN_SEMICOLON, (s6!=null?s6.getText():null) ) );

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1466:5: s7= COLON
                    {
                    s7=(Token)match(input,COLON,FOLLOW_COLON_in_punctuationSign13857); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(s7);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1466:16: -> ^( PUNCTUATION_SIGN )
                    {
                        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1466:19: ^( PUNCTUATION_SIGN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PUNCTUATION_SIGN, "PUNCTUATION_SIGN"), root_1);

                        adaptor.addChild(root_1,  delegate.createTree( SIGN_COLON, (s7!=null?s7.getText():null) ) );

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1467:5: s8= APOSTROPHE
                    {
                    s8=(Token)match(input,APOSTROPHE,FOLLOW_APOSTROPHE_in_punctuationSign13878); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOSTROPHE.add(s8);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1467:21: ->
                    {
                        adaptor.addChild(root_0,  delegate.createTree( APOSTROPHE_WORDMATE, (s8!=null?s8.getText():null) ) );

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "punctuationSign"

    public static class url_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "url"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1476:1: url : ( (http= httpUrl ->) | (file= fileUrl ->) );
    public final NovelangParser.url_return url() throws RecognitionException {
        NovelangParser.url_return retval = new NovelangParser.url_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.httpUrl_return http = null;

        NovelangParser.fileUrl_return file = null;


        RewriteRuleSubtreeStream stream_httpUrl=new RewriteRuleSubtreeStream(adaptor,"rule httpUrl");
        RewriteRuleSubtreeStream stream_fileUrl=new RewriteRuleSubtreeStream(adaptor,"rule fileUrl");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1477:3: ( (http= httpUrl ->) | (file= fileUrl ->) )
            int alt322=2;
            int LA322_0 = input.LA(1);

            if ( (LA322_0==LATIN_SMALL_LETTER_H) ) {
                alt322=1;
            }
            else if ( (LA322_0==LATIN_SMALL_LETTER_F) ) {
                alt322=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 322, 0, input);

                throw nvae;
            }
            switch (alt322) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1477:5: (http= httpUrl ->)
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1477:5: (http= httpUrl ->)
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1477:7: http= httpUrl
                    {
                    pushFollow(FOLLOW_httpUrl_in_url13913);
                    http=httpUrl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_httpUrl.add(http.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1477:22: ->
                    {
                        adaptor.addChild(root_0,  delegate.createTree( URL_LITERAL, (http!=null?input.toString(http.start,http.stop):null) ) );

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1478:5: (file= fileUrl ->)
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1478:5: (file= fileUrl ->)
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1478:7: file= fileUrl
                    {
                    pushFollow(FOLLOW_fileUrl_in_url13932);
                    file=fileUrl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fileUrl.add(file.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1478:22: ->
                    {
                        adaptor.addChild(root_0,  delegate.createTree( URL_LITERAL, (file!=null?input.toString(file.start,file.stop):null) ) );

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "url"

    public static class fileUrl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fileUrl"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1481:1: fileUrl : LATIN_SMALL_LETTER_F LATIN_SMALL_LETTER_I LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E COLON ( SOLIDUS )? urlFilePath ;
    public final NovelangParser.fileUrl_return fileUrl() throws RecognitionException {
        NovelangParser.fileUrl_return retval = new NovelangParser.fileUrl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LATIN_SMALL_LETTER_F560=null;
        Token LATIN_SMALL_LETTER_I561=null;
        Token LATIN_SMALL_LETTER_L562=null;
        Token LATIN_SMALL_LETTER_E563=null;
        Token COLON564=null;
        Token SOLIDUS565=null;
        NovelangParser.urlFilePath_return urlFilePath566 = null;


        Object LATIN_SMALL_LETTER_F560_tree=null;
        Object LATIN_SMALL_LETTER_I561_tree=null;
        Object LATIN_SMALL_LETTER_L562_tree=null;
        Object LATIN_SMALL_LETTER_E563_tree=null;
        Object COLON564_tree=null;
        Object SOLIDUS565_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1486:3: ( LATIN_SMALL_LETTER_F LATIN_SMALL_LETTER_I LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E COLON ( SOLIDUS )? urlFilePath )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1486:5: LATIN_SMALL_LETTER_F LATIN_SMALL_LETTER_I LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E COLON ( SOLIDUS )? urlFilePath
            {
            root_0 = (Object)adaptor.nil();

            LATIN_SMALL_LETTER_F560=(Token)match(input,LATIN_SMALL_LETTER_F,FOLLOW_LATIN_SMALL_LETTER_F_in_fileUrl14000); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_F560_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_F560);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_F560_tree);
            }
            LATIN_SMALL_LETTER_I561=(Token)match(input,LATIN_SMALL_LETTER_I,FOLLOW_LATIN_SMALL_LETTER_I_in_fileUrl14002); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_I561_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_I561);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_I561_tree);
            }
            LATIN_SMALL_LETTER_L562=(Token)match(input,LATIN_SMALL_LETTER_L,FOLLOW_LATIN_SMALL_LETTER_L_in_fileUrl14004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_L562_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_L562);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_L562_tree);
            }
            LATIN_SMALL_LETTER_E563=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_fileUrl14006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_E563_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_E563);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_E563_tree);
            }
            COLON564=(Token)match(input,COLON,FOLLOW_COLON_in_fileUrl14013); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON564_tree = (Object)adaptor.create(COLON564);
            adaptor.addChild(root_0, COLON564_tree);
            }
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1487:11: ( SOLIDUS )?
            int alt323=2;
            int LA323_0 = input.LA(1);

            if ( (LA323_0==SOLIDUS) ) {
                alt323=1;
            }
            switch (alt323) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1487:11: SOLIDUS
                    {
                    SOLIDUS565=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_fileUrl14015); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SOLIDUS565_tree = (Object)adaptor.create(SOLIDUS565);
                    adaptor.addChild(root_0, SOLIDUS565_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_urlFilePath_in_fileUrl14018);
            urlFilePath566=urlFilePath();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, urlFilePath566.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fileUrl"

    public static class httpUrl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "httpUrl"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1490:1: httpUrl : ( LATIN_SMALL_LETTER_H LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_P ( LATIN_SMALL_LETTER_S )? COLON SOLIDUS SOLIDUS )=> LATIN_SMALL_LETTER_H LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_P ( LATIN_SMALL_LETTER_S )? COLON SOLIDUS SOLIDUS urlHostPort ( SOLIDUS httpUrlPath ( QUESTION_MARK httpUrlSearch )? )? ( NUMBER_SIGN httpUrlSearch )? ;
    public final NovelangParser.httpUrl_return httpUrl() throws RecognitionException {
        NovelangParser.httpUrl_return retval = new NovelangParser.httpUrl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LATIN_SMALL_LETTER_H567=null;
        Token LATIN_SMALL_LETTER_T568=null;
        Token LATIN_SMALL_LETTER_T569=null;
        Token LATIN_SMALL_LETTER_P570=null;
        Token LATIN_SMALL_LETTER_S571=null;
        Token COLON572=null;
        Token SOLIDUS573=null;
        Token SOLIDUS574=null;
        Token SOLIDUS576=null;
        Token QUESTION_MARK578=null;
        Token NUMBER_SIGN580=null;
        NovelangParser.urlHostPort_return urlHostPort575 = null;

        NovelangParser.httpUrlPath_return httpUrlPath577 = null;

        NovelangParser.httpUrlSearch_return httpUrlSearch579 = null;

        NovelangParser.httpUrlSearch_return httpUrlSearch581 = null;


        Object LATIN_SMALL_LETTER_H567_tree=null;
        Object LATIN_SMALL_LETTER_T568_tree=null;
        Object LATIN_SMALL_LETTER_T569_tree=null;
        Object LATIN_SMALL_LETTER_P570_tree=null;
        Object LATIN_SMALL_LETTER_S571_tree=null;
        Object COLON572_tree=null;
        Object SOLIDUS573_tree=null;
        Object SOLIDUS574_tree=null;
        Object SOLIDUS576_tree=null;
        Object QUESTION_MARK578_tree=null;
        Object NUMBER_SIGN580_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1491:3: ( ( LATIN_SMALL_LETTER_H LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_P ( LATIN_SMALL_LETTER_S )? COLON SOLIDUS SOLIDUS )=> LATIN_SMALL_LETTER_H LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_P ( LATIN_SMALL_LETTER_S )? COLON SOLIDUS SOLIDUS urlHostPort ( SOLIDUS httpUrlPath ( QUESTION_MARK httpUrlSearch )? )? ( NUMBER_SIGN httpUrlSearch )? )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1491:5: ( LATIN_SMALL_LETTER_H LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_P ( LATIN_SMALL_LETTER_S )? COLON SOLIDUS SOLIDUS )=> LATIN_SMALL_LETTER_H LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_P ( LATIN_SMALL_LETTER_S )? COLON SOLIDUS SOLIDUS urlHostPort ( SOLIDUS httpUrlPath ( QUESTION_MARK httpUrlSearch )? )? ( NUMBER_SIGN httpUrlSearch )?
            {
            root_0 = (Object)adaptor.nil();

            LATIN_SMALL_LETTER_H567=(Token)match(input,LATIN_SMALL_LETTER_H,FOLLOW_LATIN_SMALL_LETTER_H_in_httpUrl14158); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_H567_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_H567);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_H567_tree);
            }
            LATIN_SMALL_LETTER_T568=(Token)match(input,LATIN_SMALL_LETTER_T,FOLLOW_LATIN_SMALL_LETTER_T_in_httpUrl14169); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_T568_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_T568);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_T568_tree);
            }
            LATIN_SMALL_LETTER_T569=(Token)match(input,LATIN_SMALL_LETTER_T,FOLLOW_LATIN_SMALL_LETTER_T_in_httpUrl14180); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_T569_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_T569);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_T569_tree);
            }
            LATIN_SMALL_LETTER_P570=(Token)match(input,LATIN_SMALL_LETTER_P,FOLLOW_LATIN_SMALL_LETTER_P_in_httpUrl14191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_P570_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_P570);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_P570_tree);
            }
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1504:9: ( LATIN_SMALL_LETTER_S )?
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==LATIN_SMALL_LETTER_S) ) {
                alt324=1;
            }
            switch (alt324) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1504:9: LATIN_SMALL_LETTER_S
                    {
                    LATIN_SMALL_LETTER_S571=(Token)match(input,LATIN_SMALL_LETTER_S,FOLLOW_LATIN_SMALL_LETTER_S_in_httpUrl14202); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LATIN_SMALL_LETTER_S571_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_S571);
                    adaptor.addChild(root_0, LATIN_SMALL_LETTER_S571_tree);
                    }

                    }
                    break;

            }

            COLON572=(Token)match(input,COLON,FOLLOW_COLON_in_httpUrl14213); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON572_tree = (Object)adaptor.create(COLON572);
            adaptor.addChild(root_0, COLON572_tree);
            }
            SOLIDUS573=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_httpUrl14224); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SOLIDUS573_tree = (Object)adaptor.create(SOLIDUS573);
            adaptor.addChild(root_0, SOLIDUS573_tree);
            }
            SOLIDUS574=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_httpUrl14235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SOLIDUS574_tree = (Object)adaptor.create(SOLIDUS574);
            adaptor.addChild(root_0, SOLIDUS574_tree);
            }
            pushFollow(FOLLOW_urlHostPort_in_httpUrl14242);
            urlHostPort575=urlHostPort();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, urlHostPort575.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1509:5: ( SOLIDUS httpUrlPath ( QUESTION_MARK httpUrlSearch )? )?
            int alt326=2;
            int LA326_0 = input.LA(1);

            if ( (LA326_0==SOLIDUS) ) {
                alt326=1;
            }
            switch (alt326) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1509:7: SOLIDUS httpUrlPath ( QUESTION_MARK httpUrlSearch )?
                    {
                    SOLIDUS576=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_httpUrl14251); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SOLIDUS576_tree = (Object)adaptor.create(SOLIDUS576);
                    adaptor.addChild(root_0, SOLIDUS576_tree);
                    }
                    pushFollow(FOLLOW_httpUrlPath_in_httpUrl14253);
                    httpUrlPath577=httpUrlPath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, httpUrlPath577.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1510:7: ( QUESTION_MARK httpUrlSearch )?
                    int alt325=2;
                    int LA325_0 = input.LA(1);

                    if ( (LA325_0==QUESTION_MARK) ) {
                        alt325=1;
                    }
                    switch (alt325) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1510:9: QUESTION_MARK httpUrlSearch
                            {
                            QUESTION_MARK578=(Token)match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_httpUrl14264); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            QUESTION_MARK578_tree = (Object)adaptor.create(QUESTION_MARK578);
                            adaptor.addChild(root_0, QUESTION_MARK578_tree);
                            }
                            pushFollow(FOLLOW_httpUrlSearch_in_httpUrl14266);
                            httpUrlSearch579=httpUrlSearch();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, httpUrlSearch579.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1512:5: ( NUMBER_SIGN httpUrlSearch )?
            int alt327=2;
            int LA327_0 = input.LA(1);

            if ( (LA327_0==NUMBER_SIGN) ) {
                alt327=1;
            }
            switch (alt327) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1512:7: NUMBER_SIGN httpUrlSearch
                    {
                    NUMBER_SIGN580=(Token)match(input,NUMBER_SIGN,FOLLOW_NUMBER_SIGN_in_httpUrl14285); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_SIGN580_tree = (Object)adaptor.create(NUMBER_SIGN580);
                    adaptor.addChild(root_0, NUMBER_SIGN580_tree);
                    }
                    pushFollow(FOLLOW_httpUrlSearch_in_httpUrl14287);
                    httpUrlSearch581=httpUrlSearch();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, httpUrlSearch581.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "httpUrl"

    public static class urlIpSchemePart_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlIpSchemePart"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1517:1: urlIpSchemePart : SOLIDUS SOLIDUS urlLogin ( SOLIDUS urlPath ) ;
    public final NovelangParser.urlIpSchemePart_return urlIpSchemePart() throws RecognitionException {
        NovelangParser.urlIpSchemePart_return retval = new NovelangParser.urlIpSchemePart_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SOLIDUS582=null;
        Token SOLIDUS583=null;
        Token SOLIDUS585=null;
        NovelangParser.urlLogin_return urlLogin584 = null;

        NovelangParser.urlPath_return urlPath586 = null;


        Object SOLIDUS582_tree=null;
        Object SOLIDUS583_tree=null;
        Object SOLIDUS585_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1518:3: ( SOLIDUS SOLIDUS urlLogin ( SOLIDUS urlPath ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1518:5: SOLIDUS SOLIDUS urlLogin ( SOLIDUS urlPath )
            {
            root_0 = (Object)adaptor.nil();

            SOLIDUS582=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_urlIpSchemePart14306); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SOLIDUS582_tree = (Object)adaptor.create(SOLIDUS582);
            adaptor.addChild(root_0, SOLIDUS582_tree);
            }
            SOLIDUS583=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_urlIpSchemePart14308); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SOLIDUS583_tree = (Object)adaptor.create(SOLIDUS583);
            adaptor.addChild(root_0, SOLIDUS583_tree);
            }
            pushFollow(FOLLOW_urlLogin_in_urlIpSchemePart14310);
            urlLogin584=urlLogin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, urlLogin584.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1518:30: ( SOLIDUS urlPath )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1518:32: SOLIDUS urlPath
            {
            SOLIDUS585=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_urlIpSchemePart14314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SOLIDUS585_tree = (Object)adaptor.create(SOLIDUS585);
            adaptor.addChild(root_0, SOLIDUS585_tree);
            }
            pushFollow(FOLLOW_urlPath_in_urlIpSchemePart14316);
            urlPath586=urlPath();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, urlPath586.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlIpSchemePart"

    public static class urlLogin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlLogin"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1521:1: urlLogin : ( urlUser ( COLON urlPassword )? COMMERCIAL_AT )? urlHostPort ;
    public final NovelangParser.urlLogin_return urlLogin() throws RecognitionException {
        NovelangParser.urlLogin_return retval = new NovelangParser.urlLogin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON588=null;
        Token COMMERCIAL_AT590=null;
        NovelangParser.urlUser_return urlUser587 = null;

        NovelangParser.urlPassword_return urlPassword589 = null;

        NovelangParser.urlHostPort_return urlHostPort591 = null;


        Object COLON588_tree=null;
        Object COMMERCIAL_AT590_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1522:3: ( ( urlUser ( COLON urlPassword )? COMMERCIAL_AT )? urlHostPort )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1522:5: ( urlUser ( COLON urlPassword )? COMMERCIAL_AT )? urlHostPort
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1522:5: ( urlUser ( COLON urlPassword )? COMMERCIAL_AT )?
            int alt329=2;
            alt329 = dfa329.predict(input);
            switch (alt329) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1522:7: urlUser ( COLON urlPassword )? COMMERCIAL_AT
                    {
                    pushFollow(FOLLOW_urlUser_in_urlLogin14336);
                    urlUser587=urlUser();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlUser587.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1522:15: ( COLON urlPassword )?
                    int alt328=2;
                    int LA328_0 = input.LA(1);

                    if ( (LA328_0==COLON) ) {
                        alt328=1;
                    }
                    switch (alt328) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1522:17: COLON urlPassword
                            {
                            COLON588=(Token)match(input,COLON,FOLLOW_COLON_in_urlLogin14340); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLON588_tree = (Object)adaptor.create(COLON588);
                            adaptor.addChild(root_0, COLON588_tree);
                            }
                            pushFollow(FOLLOW_urlPassword_in_urlLogin14342);
                            urlPassword589=urlPassword();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, urlPassword589.getTree());

                            }
                            break;

                    }

                    COMMERCIAL_AT590=(Token)match(input,COMMERCIAL_AT,FOLLOW_COMMERCIAL_AT_in_urlLogin14347); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMERCIAL_AT590_tree = (Object)adaptor.create(COMMERCIAL_AT590);
                    adaptor.addChild(root_0, COMMERCIAL_AT590_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_urlHostPort_in_urlLogin14352);
            urlHostPort591=urlHostPort();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, urlHostPort591.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlLogin"

    public static class urlHostPort_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlHostPort"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1525:1: urlHostPort : urlHost ( ( COLON urlPort ) )? ;
    public final NovelangParser.urlHostPort_return urlHostPort() throws RecognitionException {
        NovelangParser.urlHostPort_return retval = new NovelangParser.urlHostPort_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON593=null;
        NovelangParser.urlHost_return urlHost592 = null;

        NovelangParser.urlPort_return urlPort594 = null;


        Object COLON593_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1526:3: ( urlHost ( ( COLON urlPort ) )? )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1526:5: urlHost ( ( COLON urlPort ) )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_urlHost_in_urlHostPort14368);
            urlHost592=urlHost();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, urlHost592.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1526:13: ( ( COLON urlPort ) )?
            int alt330=2;
            int LA330_0 = input.LA(1);

            if ( (LA330_0==COLON) ) {
                alt330=1;
            }
            switch (alt330) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1526:15: ( COLON urlPort )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1526:15: ( COLON urlPort )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1526:17: COLON urlPort
                    {
                    COLON593=(Token)match(input,COLON,FOLLOW_COLON_in_urlHostPort14374); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON593_tree = (Object)adaptor.create(COLON593);
                    adaptor.addChild(root_0, COLON593_tree);
                    }
                    pushFollow(FOLLOW_urlPort_in_urlHostPort14376);
                    urlPort594=urlPort();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlPort594.getTree());

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlHostPort"

    public static class urlHost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlHost"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1529:1: urlHost : ( urlHostName | urlHostNumber );
    public final NovelangParser.urlHost_return urlHost() throws RecognitionException {
        NovelangParser.urlHost_return retval = new NovelangParser.urlHost_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.urlHostName_return urlHostName595 = null;

        NovelangParser.urlHostNumber_return urlHostNumber596 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1530:3: ( urlHostName | urlHostNumber )
            int alt331=2;
            alt331 = dfa331.predict(input);
            switch (alt331) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1530:5: urlHostName
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_urlHostName_in_urlHost14396);
                    urlHostName595=urlHostName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlHostName595.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1531:5: urlHostNumber
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_urlHostNumber_in_urlHost14402);
                    urlHostNumber596=urlHostNumber();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlHostNumber596.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlHost"

    public static class urlHostName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlHostName"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1534:1: urlHostName : ( urlDomainLabel FULL_STOP )* urlTopLabel ;
    public final NovelangParser.urlHostName_return urlHostName() throws RecognitionException {
        NovelangParser.urlHostName_return retval = new NovelangParser.urlHostName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FULL_STOP598=null;
        NovelangParser.urlDomainLabel_return urlDomainLabel597 = null;

        NovelangParser.urlTopLabel_return urlTopLabel599 = null;


        Object FULL_STOP598_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1535:3: ( ( urlDomainLabel FULL_STOP )* urlTopLabel )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1535:5: ( urlDomainLabel FULL_STOP )* urlTopLabel
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1535:5: ( urlDomainLabel FULL_STOP )*
            loop332:
            do {
                int alt332=2;
                alt332 = dfa332.predict(input);
                switch (alt332) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1535:7: urlDomainLabel FULL_STOP
            	    {
            	    pushFollow(FOLLOW_urlDomainLabel_in_urlHostName14419);
            	    urlDomainLabel597=urlDomainLabel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlDomainLabel597.getTree());
            	    FULL_STOP598=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_urlHostName14421); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    FULL_STOP598_tree = (Object)adaptor.create(FULL_STOP598);
            	    adaptor.addChild(root_0, FULL_STOP598_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop332;
                }
            } while (true);

            pushFollow(FOLLOW_urlTopLabel_in_urlHostName14426);
            urlTopLabel599=urlTopLabel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, urlTopLabel599.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlHostName"

    public static class urlDomainLabel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlDomainLabel"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1538:1: urlDomainLabel : ( urlAlphaDigit | ( urlAlphaDigit ( urlAlphaDigit | HYPHEN_MINUS )* urlAlphaDigit ) );
    public final NovelangParser.urlDomainLabel_return urlDomainLabel() throws RecognitionException {
        NovelangParser.urlDomainLabel_return retval = new NovelangParser.urlDomainLabel_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token HYPHEN_MINUS603=null;
        NovelangParser.urlAlphaDigit_return urlAlphaDigit600 = null;

        NovelangParser.urlAlphaDigit_return urlAlphaDigit601 = null;

        NovelangParser.urlAlphaDigit_return urlAlphaDigit602 = null;

        NovelangParser.urlAlphaDigit_return urlAlphaDigit604 = null;


        Object HYPHEN_MINUS603_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1539:3: ( urlAlphaDigit | ( urlAlphaDigit ( urlAlphaDigit | HYPHEN_MINUS )* urlAlphaDigit ) )
            int alt334=2;
            switch ( input.LA(1) ) {
            case LATIN_SMALL_LETTER_F:
            case LATIN_SMALL_LETTER_E:
            case LATIN_SMALL_LETTER_C:
            case LATIN_SMALL_LETTER_A:
            case LATIN_SMALL_LETTER_D:
            case LATIN_SMALL_LETTER_B:
            case LATIN_CAPITAL_LETTER_A:
            case LATIN_CAPITAL_LETTER_B:
            case LATIN_CAPITAL_LETTER_C:
            case LATIN_CAPITAL_LETTER_D:
            case LATIN_CAPITAL_LETTER_E:
            case LATIN_CAPITAL_LETTER_F:
                {
                int LA334_1 = input.LA(2);

                if ( (LA334_1==HYPHEN_MINUS||(LA334_1>=LATIN_SMALL_LETTER_F && LA334_1<=LATIN_SMALL_LETTER_S)||(LA334_1>=LATIN_SMALL_LETTER_N && LA334_1<=LATIN_SMALL_LETTER_V)||(LA334_1>=LATIN_SMALL_LETTER_R && LA334_1<=LATIN_SMALL_LETTER_M)||(LA334_1>=DIGIT_0 && LA334_1<=LATIN_CAPITAL_LETTER_Z)) ) {
                    alt334=2;
                }
                else if ( (LA334_1==FULL_STOP) ) {
                    alt334=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 334, 1, input);

                    throw nvae;
                }
                }
                break;
            case LATIN_SMALL_LETTER_I:
            case LATIN_SMALL_LETTER_L:
            case LATIN_SMALL_LETTER_H:
            case LATIN_SMALL_LETTER_T:
            case LATIN_SMALL_LETTER_P:
            case LATIN_SMALL_LETTER_S:
            case LATIN_SMALL_LETTER_N:
            case LATIN_SMALL_LETTER_G:
            case LATIN_SMALL_LETTER_J:
            case LATIN_SMALL_LETTER_V:
            case LATIN_SMALL_LETTER_R:
            case LATIN_SMALL_LETTER_U:
            case LATIN_SMALL_LETTER_O:
            case LATIN_SMALL_LETTER_Y:
            case LATIN_SMALL_LETTER_M:
            case LATIN_SMALL_LETTER_K:
            case LATIN_SMALL_LETTER_Q:
            case LATIN_SMALL_LETTER_W:
            case LATIN_SMALL_LETTER_X:
            case LATIN_SMALL_LETTER_Z:
            case LATIN_CAPITAL_LETTER_G:
            case LATIN_CAPITAL_LETTER_H:
            case LATIN_CAPITAL_LETTER_I:
            case LATIN_CAPITAL_LETTER_J:
            case LATIN_CAPITAL_LETTER_K:
            case LATIN_CAPITAL_LETTER_L:
            case LATIN_CAPITAL_LETTER_M:
            case LATIN_CAPITAL_LETTER_N:
            case LATIN_CAPITAL_LETTER_O:
            case LATIN_CAPITAL_LETTER_P:
            case LATIN_CAPITAL_LETTER_Q:
            case LATIN_CAPITAL_LETTER_R:
            case LATIN_CAPITAL_LETTER_S:
            case LATIN_CAPITAL_LETTER_T:
            case LATIN_CAPITAL_LETTER_U:
            case LATIN_CAPITAL_LETTER_V:
            case LATIN_CAPITAL_LETTER_W:
            case LATIN_CAPITAL_LETTER_X:
            case LATIN_CAPITAL_LETTER_Y:
            case LATIN_CAPITAL_LETTER_Z:
                {
                int LA334_2 = input.LA(2);

                if ( (LA334_2==HYPHEN_MINUS||(LA334_2>=LATIN_SMALL_LETTER_F && LA334_2<=LATIN_SMALL_LETTER_S)||(LA334_2>=LATIN_SMALL_LETTER_N && LA334_2<=LATIN_SMALL_LETTER_V)||(LA334_2>=LATIN_SMALL_LETTER_R && LA334_2<=LATIN_SMALL_LETTER_M)||(LA334_2>=DIGIT_0 && LA334_2<=LATIN_CAPITAL_LETTER_Z)) ) {
                    alt334=2;
                }
                else if ( (LA334_2==FULL_STOP) ) {
                    alt334=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 334, 2, input);

                    throw nvae;
                }
                }
                break;
            case DIGIT_0:
            case DIGIT_1:
            case DIGIT_2:
            case DIGIT_3:
            case DIGIT_4:
            case DIGIT_5:
            case DIGIT_6:
            case DIGIT_7:
            case DIGIT_8:
            case DIGIT_9:
                {
                int LA334_3 = input.LA(2);

                if ( (LA334_3==HYPHEN_MINUS||(LA334_3>=LATIN_SMALL_LETTER_F && LA334_3<=LATIN_SMALL_LETTER_S)||(LA334_3>=LATIN_SMALL_LETTER_N && LA334_3<=LATIN_SMALL_LETTER_V)||(LA334_3>=LATIN_SMALL_LETTER_R && LA334_3<=LATIN_SMALL_LETTER_M)||(LA334_3>=DIGIT_0 && LA334_3<=LATIN_CAPITAL_LETTER_Z)) ) {
                    alt334=2;
                }
                else if ( (LA334_3==FULL_STOP) ) {
                    alt334=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 334, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 334, 0, input);

                throw nvae;
            }

            switch (alt334) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1539:5: urlAlphaDigit
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_urlAlphaDigit_in_urlDomainLabel14441);
                    urlAlphaDigit600=urlAlphaDigit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlAlphaDigit600.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1540:5: ( urlAlphaDigit ( urlAlphaDigit | HYPHEN_MINUS )* urlAlphaDigit )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1540:5: ( urlAlphaDigit ( urlAlphaDigit | HYPHEN_MINUS )* urlAlphaDigit )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1540:7: urlAlphaDigit ( urlAlphaDigit | HYPHEN_MINUS )* urlAlphaDigit
                    {
                    pushFollow(FOLLOW_urlAlphaDigit_in_urlDomainLabel14450);
                    urlAlphaDigit601=urlAlphaDigit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlAlphaDigit601.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1540:21: ( urlAlphaDigit | HYPHEN_MINUS )*
                    loop333:
                    do {
                        int alt333=3;
                        switch ( input.LA(1) ) {
                        case LATIN_SMALL_LETTER_F:
                        case LATIN_SMALL_LETTER_E:
                        case LATIN_SMALL_LETTER_C:
                        case LATIN_SMALL_LETTER_A:
                        case LATIN_SMALL_LETTER_D:
                        case LATIN_SMALL_LETTER_B:
                        case LATIN_CAPITAL_LETTER_A:
                        case LATIN_CAPITAL_LETTER_B:
                        case LATIN_CAPITAL_LETTER_C:
                        case LATIN_CAPITAL_LETTER_D:
                        case LATIN_CAPITAL_LETTER_E:
                        case LATIN_CAPITAL_LETTER_F:
                            {
                            int LA333_1 = input.LA(2);

                            if ( (LA333_1==HYPHEN_MINUS||(LA333_1>=LATIN_SMALL_LETTER_F && LA333_1<=LATIN_SMALL_LETTER_S)||(LA333_1>=LATIN_SMALL_LETTER_N && LA333_1<=LATIN_SMALL_LETTER_V)||(LA333_1>=LATIN_SMALL_LETTER_R && LA333_1<=LATIN_SMALL_LETTER_M)||(LA333_1>=DIGIT_0 && LA333_1<=LATIN_CAPITAL_LETTER_Z)) ) {
                                alt333=1;
                            }


                            }
                            break;
                        case LATIN_SMALL_LETTER_I:
                        case LATIN_SMALL_LETTER_L:
                        case LATIN_SMALL_LETTER_H:
                        case LATIN_SMALL_LETTER_T:
                        case LATIN_SMALL_LETTER_P:
                        case LATIN_SMALL_LETTER_S:
                        case LATIN_SMALL_LETTER_N:
                        case LATIN_SMALL_LETTER_G:
                        case LATIN_SMALL_LETTER_J:
                        case LATIN_SMALL_LETTER_V:
                        case LATIN_SMALL_LETTER_R:
                        case LATIN_SMALL_LETTER_U:
                        case LATIN_SMALL_LETTER_O:
                        case LATIN_SMALL_LETTER_Y:
                        case LATIN_SMALL_LETTER_M:
                        case LATIN_SMALL_LETTER_K:
                        case LATIN_SMALL_LETTER_Q:
                        case LATIN_SMALL_LETTER_W:
                        case LATIN_SMALL_LETTER_X:
                        case LATIN_SMALL_LETTER_Z:
                        case LATIN_CAPITAL_LETTER_G:
                        case LATIN_CAPITAL_LETTER_H:
                        case LATIN_CAPITAL_LETTER_I:
                        case LATIN_CAPITAL_LETTER_J:
                        case LATIN_CAPITAL_LETTER_K:
                        case LATIN_CAPITAL_LETTER_L:
                        case LATIN_CAPITAL_LETTER_M:
                        case LATIN_CAPITAL_LETTER_N:
                        case LATIN_CAPITAL_LETTER_O:
                        case LATIN_CAPITAL_LETTER_P:
                        case LATIN_CAPITAL_LETTER_Q:
                        case LATIN_CAPITAL_LETTER_R:
                        case LATIN_CAPITAL_LETTER_S:
                        case LATIN_CAPITAL_LETTER_T:
                        case LATIN_CAPITAL_LETTER_U:
                        case LATIN_CAPITAL_LETTER_V:
                        case LATIN_CAPITAL_LETTER_W:
                        case LATIN_CAPITAL_LETTER_X:
                        case LATIN_CAPITAL_LETTER_Y:
                        case LATIN_CAPITAL_LETTER_Z:
                            {
                            int LA333_2 = input.LA(2);

                            if ( (LA333_2==HYPHEN_MINUS||(LA333_2>=LATIN_SMALL_LETTER_F && LA333_2<=LATIN_SMALL_LETTER_S)||(LA333_2>=LATIN_SMALL_LETTER_N && LA333_2<=LATIN_SMALL_LETTER_V)||(LA333_2>=LATIN_SMALL_LETTER_R && LA333_2<=LATIN_SMALL_LETTER_M)||(LA333_2>=DIGIT_0 && LA333_2<=LATIN_CAPITAL_LETTER_Z)) ) {
                                alt333=1;
                            }


                            }
                            break;
                        case DIGIT_0:
                        case DIGIT_1:
                        case DIGIT_2:
                        case DIGIT_3:
                        case DIGIT_4:
                        case DIGIT_5:
                        case DIGIT_6:
                        case DIGIT_7:
                        case DIGIT_8:
                        case DIGIT_9:
                            {
                            int LA333_3 = input.LA(2);

                            if ( (LA333_3==HYPHEN_MINUS||(LA333_3>=LATIN_SMALL_LETTER_F && LA333_3<=LATIN_SMALL_LETTER_S)||(LA333_3>=LATIN_SMALL_LETTER_N && LA333_3<=LATIN_SMALL_LETTER_V)||(LA333_3>=LATIN_SMALL_LETTER_R && LA333_3<=LATIN_SMALL_LETTER_M)||(LA333_3>=DIGIT_0 && LA333_3<=LATIN_CAPITAL_LETTER_Z)) ) {
                                alt333=1;
                            }


                            }
                            break;
                        case HYPHEN_MINUS:
                            {
                            alt333=2;
                            }
                            break;

                        }

                        switch (alt333) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1540:23: urlAlphaDigit
                    	    {
                    	    pushFollow(FOLLOW_urlAlphaDigit_in_urlDomainLabel14454);
                    	    urlAlphaDigit602=urlAlphaDigit();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlAlphaDigit602.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1540:39: HYPHEN_MINUS
                    	    {
                    	    HYPHEN_MINUS603=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_urlDomainLabel14458); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    HYPHEN_MINUS603_tree = (Object)adaptor.create(HYPHEN_MINUS603);
                    	    adaptor.addChild(root_0, HYPHEN_MINUS603_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop333;
                        }
                    } while (true);

                    pushFollow(FOLLOW_urlAlphaDigit_in_urlDomainLabel14463);
                    urlAlphaDigit604=urlAlphaDigit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlAlphaDigit604.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlDomainLabel"

    public static class urlTopLabel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlTopLabel"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1543:1: urlTopLabel : ( urlAlpha | ( urlAlpha ( urlAlphaDigit | HYPHEN_MINUS )* urlAlphaDigit ) );
    public final NovelangParser.urlTopLabel_return urlTopLabel() throws RecognitionException {
        NovelangParser.urlTopLabel_return retval = new NovelangParser.urlTopLabel_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token HYPHEN_MINUS608=null;
        NovelangParser.urlAlpha_return urlAlpha605 = null;

        NovelangParser.urlAlpha_return urlAlpha606 = null;

        NovelangParser.urlAlphaDigit_return urlAlphaDigit607 = null;

        NovelangParser.urlAlphaDigit_return urlAlphaDigit609 = null;


        Object HYPHEN_MINUS608_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1544:3: ( urlAlpha | ( urlAlpha ( urlAlphaDigit | HYPHEN_MINUS )* urlAlphaDigit ) )
            int alt336=2;
            int LA336_0 = input.LA(1);

            if ( (LA336_0==LATIN_SMALL_LETTER_F||LA336_0==LATIN_SMALL_LETTER_E||LA336_0==LATIN_SMALL_LETTER_C||(LA336_0>=LATIN_SMALL_LETTER_A && LA336_0<=LATIN_SMALL_LETTER_B)||(LA336_0>=LATIN_CAPITAL_LETTER_A && LA336_0<=LATIN_CAPITAL_LETTER_F)) ) {
                int LA336_1 = input.LA(2);

                if ( (LA336_1==HYPHEN_MINUS||(LA336_1>=LATIN_SMALL_LETTER_F && LA336_1<=LATIN_SMALL_LETTER_S)||(LA336_1>=LATIN_SMALL_LETTER_N && LA336_1<=LATIN_SMALL_LETTER_V)||(LA336_1>=LATIN_SMALL_LETTER_R && LA336_1<=LATIN_SMALL_LETTER_M)||(LA336_1>=DIGIT_0 && LA336_1<=LATIN_CAPITAL_LETTER_Z)) ) {
                    alt336=2;
                }
                else if ( (LA336_1==EOF||LA336_1==SOLIDUS||(LA336_1>=WHITESPACE && LA336_1<=SOFTBREAK)||LA336_1==GREATER_THAN_SIGN||LA336_1==COLON||LA336_1==NUMBER_SIGN) ) {
                    alt336=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA336_0>=LATIN_SMALL_LETTER_I && LA336_0<=LATIN_SMALL_LETTER_L)||(LA336_0>=LATIN_SMALL_LETTER_H && LA336_0<=LATIN_SMALL_LETTER_S)||(LA336_0>=LATIN_SMALL_LETTER_N && LA336_0<=LATIN_SMALL_LETTER_V)||LA336_0==LATIN_SMALL_LETTER_R||(LA336_0>=LATIN_SMALL_LETTER_U && LA336_0<=LATIN_SMALL_LETTER_O)||(LA336_0>=LATIN_SMALL_LETTER_Y && LA336_0<=LATIN_SMALL_LETTER_M)||(LA336_0>=LATIN_SMALL_LETTER_K && LA336_0<=LATIN_CAPITAL_LETTER_Z)) ) {
                int LA336_2 = input.LA(2);

                if ( (LA336_2==HYPHEN_MINUS||(LA336_2>=LATIN_SMALL_LETTER_F && LA336_2<=LATIN_SMALL_LETTER_S)||(LA336_2>=LATIN_SMALL_LETTER_N && LA336_2<=LATIN_SMALL_LETTER_V)||(LA336_2>=LATIN_SMALL_LETTER_R && LA336_2<=LATIN_SMALL_LETTER_M)||(LA336_2>=DIGIT_0 && LA336_2<=LATIN_CAPITAL_LETTER_Z)) ) {
                    alt336=2;
                }
                else if ( (LA336_2==EOF||LA336_2==SOLIDUS||(LA336_2>=WHITESPACE && LA336_2<=SOFTBREAK)||LA336_2==GREATER_THAN_SIGN||LA336_2==COLON||LA336_2==NUMBER_SIGN) ) {
                    alt336=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 336, 0, input);

                throw nvae;
            }
            switch (alt336) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1544:5: urlAlpha
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_urlAlpha_in_urlTopLabel14480);
                    urlAlpha605=urlAlpha();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlAlpha605.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1545:5: ( urlAlpha ( urlAlphaDigit | HYPHEN_MINUS )* urlAlphaDigit )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1545:5: ( urlAlpha ( urlAlphaDigit | HYPHEN_MINUS )* urlAlphaDigit )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1545:7: urlAlpha ( urlAlphaDigit | HYPHEN_MINUS )* urlAlphaDigit
                    {
                    pushFollow(FOLLOW_urlAlpha_in_urlTopLabel14489);
                    urlAlpha606=urlAlpha();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlAlpha606.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1545:16: ( urlAlphaDigit | HYPHEN_MINUS )*
                    loop335:
                    do {
                        int alt335=3;
                        switch ( input.LA(1) ) {
                        case LATIN_SMALL_LETTER_F:
                        case LATIN_SMALL_LETTER_E:
                        case LATIN_SMALL_LETTER_C:
                        case LATIN_SMALL_LETTER_A:
                        case LATIN_SMALL_LETTER_D:
                        case LATIN_SMALL_LETTER_B:
                        case LATIN_CAPITAL_LETTER_A:
                        case LATIN_CAPITAL_LETTER_B:
                        case LATIN_CAPITAL_LETTER_C:
                        case LATIN_CAPITAL_LETTER_D:
                        case LATIN_CAPITAL_LETTER_E:
                        case LATIN_CAPITAL_LETTER_F:
                            {
                            int LA335_1 = input.LA(2);

                            if ( (LA335_1==HYPHEN_MINUS||(LA335_1>=LATIN_SMALL_LETTER_F && LA335_1<=LATIN_SMALL_LETTER_S)||(LA335_1>=LATIN_SMALL_LETTER_N && LA335_1<=LATIN_SMALL_LETTER_V)||(LA335_1>=LATIN_SMALL_LETTER_R && LA335_1<=LATIN_SMALL_LETTER_M)||(LA335_1>=DIGIT_0 && LA335_1<=LATIN_CAPITAL_LETTER_Z)) ) {
                                alt335=1;
                            }


                            }
                            break;
                        case LATIN_SMALL_LETTER_I:
                        case LATIN_SMALL_LETTER_L:
                        case LATIN_SMALL_LETTER_H:
                        case LATIN_SMALL_LETTER_T:
                        case LATIN_SMALL_LETTER_P:
                        case LATIN_SMALL_LETTER_S:
                        case LATIN_SMALL_LETTER_N:
                        case LATIN_SMALL_LETTER_G:
                        case LATIN_SMALL_LETTER_J:
                        case LATIN_SMALL_LETTER_V:
                        case LATIN_SMALL_LETTER_R:
                        case LATIN_SMALL_LETTER_U:
                        case LATIN_SMALL_LETTER_O:
                        case LATIN_SMALL_LETTER_Y:
                        case LATIN_SMALL_LETTER_M:
                        case LATIN_SMALL_LETTER_K:
                        case LATIN_SMALL_LETTER_Q:
                        case LATIN_SMALL_LETTER_W:
                        case LATIN_SMALL_LETTER_X:
                        case LATIN_SMALL_LETTER_Z:
                        case LATIN_CAPITAL_LETTER_G:
                        case LATIN_CAPITAL_LETTER_H:
                        case LATIN_CAPITAL_LETTER_I:
                        case LATIN_CAPITAL_LETTER_J:
                        case LATIN_CAPITAL_LETTER_K:
                        case LATIN_CAPITAL_LETTER_L:
                        case LATIN_CAPITAL_LETTER_M:
                        case LATIN_CAPITAL_LETTER_N:
                        case LATIN_CAPITAL_LETTER_O:
                        case LATIN_CAPITAL_LETTER_P:
                        case LATIN_CAPITAL_LETTER_Q:
                        case LATIN_CAPITAL_LETTER_R:
                        case LATIN_CAPITAL_LETTER_S:
                        case LATIN_CAPITAL_LETTER_T:
                        case LATIN_CAPITAL_LETTER_U:
                        case LATIN_CAPITAL_LETTER_V:
                        case LATIN_CAPITAL_LETTER_W:
                        case LATIN_CAPITAL_LETTER_X:
                        case LATIN_CAPITAL_LETTER_Y:
                        case LATIN_CAPITAL_LETTER_Z:
                            {
                            int LA335_2 = input.LA(2);

                            if ( (LA335_2==HYPHEN_MINUS||(LA335_2>=LATIN_SMALL_LETTER_F && LA335_2<=LATIN_SMALL_LETTER_S)||(LA335_2>=LATIN_SMALL_LETTER_N && LA335_2<=LATIN_SMALL_LETTER_V)||(LA335_2>=LATIN_SMALL_LETTER_R && LA335_2<=LATIN_SMALL_LETTER_M)||(LA335_2>=DIGIT_0 && LA335_2<=LATIN_CAPITAL_LETTER_Z)) ) {
                                alt335=1;
                            }


                            }
                            break;
                        case DIGIT_0:
                        case DIGIT_1:
                        case DIGIT_2:
                        case DIGIT_3:
                        case DIGIT_4:
                        case DIGIT_5:
                        case DIGIT_6:
                        case DIGIT_7:
                        case DIGIT_8:
                        case DIGIT_9:
                            {
                            int LA335_3 = input.LA(2);

                            if ( (LA335_3==HYPHEN_MINUS||(LA335_3>=LATIN_SMALL_LETTER_F && LA335_3<=LATIN_SMALL_LETTER_S)||(LA335_3>=LATIN_SMALL_LETTER_N && LA335_3<=LATIN_SMALL_LETTER_V)||(LA335_3>=LATIN_SMALL_LETTER_R && LA335_3<=LATIN_SMALL_LETTER_M)||(LA335_3>=DIGIT_0 && LA335_3<=LATIN_CAPITAL_LETTER_Z)) ) {
                                alt335=1;
                            }


                            }
                            break;
                        case HYPHEN_MINUS:
                            {
                            alt335=2;
                            }
                            break;

                        }

                        switch (alt335) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1545:18: urlAlphaDigit
                    	    {
                    	    pushFollow(FOLLOW_urlAlphaDigit_in_urlTopLabel14493);
                    	    urlAlphaDigit607=urlAlphaDigit();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlAlphaDigit607.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1545:34: HYPHEN_MINUS
                    	    {
                    	    HYPHEN_MINUS608=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_urlTopLabel14497); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    HYPHEN_MINUS608_tree = (Object)adaptor.create(HYPHEN_MINUS608);
                    	    adaptor.addChild(root_0, HYPHEN_MINUS608_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop335;
                        }
                    } while (true);

                    pushFollow(FOLLOW_urlAlphaDigit_in_urlTopLabel14502);
                    urlAlphaDigit609=urlAlphaDigit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlAlphaDigit609.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlTopLabel"

    public static class urlHostNumber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlHostNumber"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1548:1: urlHostNumber : urlDigits FULL_STOP urlDigits FULL_STOP urlDigits FULL_STOP urlDigits ;
    public final NovelangParser.urlHostNumber_return urlHostNumber() throws RecognitionException {
        NovelangParser.urlHostNumber_return retval = new NovelangParser.urlHostNumber_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FULL_STOP611=null;
        Token FULL_STOP613=null;
        Token FULL_STOP615=null;
        NovelangParser.urlDigits_return urlDigits610 = null;

        NovelangParser.urlDigits_return urlDigits612 = null;

        NovelangParser.urlDigits_return urlDigits614 = null;

        NovelangParser.urlDigits_return urlDigits616 = null;


        Object FULL_STOP611_tree=null;
        Object FULL_STOP613_tree=null;
        Object FULL_STOP615_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1549:3: ( urlDigits FULL_STOP urlDigits FULL_STOP urlDigits FULL_STOP urlDigits )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1549:5: urlDigits FULL_STOP urlDigits FULL_STOP urlDigits FULL_STOP urlDigits
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_urlDigits_in_urlHostNumber14519);
            urlDigits610=urlDigits();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, urlDigits610.getTree());
            FULL_STOP611=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_urlHostNumber14521); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FULL_STOP611_tree = (Object)adaptor.create(FULL_STOP611);
            adaptor.addChild(root_0, FULL_STOP611_tree);
            }
            pushFollow(FOLLOW_urlDigits_in_urlHostNumber14523);
            urlDigits612=urlDigits();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, urlDigits612.getTree());
            FULL_STOP613=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_urlHostNumber14525); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FULL_STOP613_tree = (Object)adaptor.create(FULL_STOP613);
            adaptor.addChild(root_0, FULL_STOP613_tree);
            }
            pushFollow(FOLLOW_urlDigits_in_urlHostNumber14527);
            urlDigits614=urlDigits();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, urlDigits614.getTree());
            FULL_STOP615=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_urlHostNumber14529); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FULL_STOP615_tree = (Object)adaptor.create(FULL_STOP615);
            adaptor.addChild(root_0, FULL_STOP615_tree);
            }
            pushFollow(FOLLOW_urlDigits_in_urlHostNumber14531);
            urlDigits616=urlDigits();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, urlDigits616.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlHostNumber"

    public static class urlPort_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlPort"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1552:1: urlPort : ( digit )+ ;
    public final NovelangParser.urlPort_return urlPort() throws RecognitionException {
        NovelangParser.urlPort_return retval = new NovelangParser.urlPort_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.digit_return digit617 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1553:3: ( ( digit )+ )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1553:5: ( digit )+
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1553:5: ( digit )+
            int cnt337=0;
            loop337:
            do {
                int alt337=2;
                int LA337_0 = input.LA(1);

                if ( ((LA337_0>=DIGIT_0 && LA337_0<=DIGIT_9)) ) {
                    alt337=1;
                }


                switch (alt337) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1553:5: digit
            	    {
            	    pushFollow(FOLLOW_digit_in_urlPort14547);
            	    digit617=digit();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, digit617.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt337 >= 1 ) break loop337;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(337, input);
                        throw eee;
                }
                cnt337++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlPort"

    public static class urlUser_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlUser"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1556:1: urlUser : ( urlUChar | SEMICOLON | QUESTION_MARK | AMPERSAND | EQUALS_SIGN )* ;
    public final NovelangParser.urlUser_return urlUser() throws RecognitionException {
        NovelangParser.urlUser_return retval = new NovelangParser.urlUser_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON619=null;
        Token QUESTION_MARK620=null;
        Token AMPERSAND621=null;
        Token EQUALS_SIGN622=null;
        NovelangParser.urlUChar_return urlUChar618 = null;


        Object SEMICOLON619_tree=null;
        Object QUESTION_MARK620_tree=null;
        Object AMPERSAND621_tree=null;
        Object EQUALS_SIGN622_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1557:3: ( ( urlUChar | SEMICOLON | QUESTION_MARK | AMPERSAND | EQUALS_SIGN )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1557:5: ( urlUChar | SEMICOLON | QUESTION_MARK | AMPERSAND | EQUALS_SIGN )*
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1557:5: ( urlUChar | SEMICOLON | QUESTION_MARK | AMPERSAND | EQUALS_SIGN )*
            loop338:
            do {
                int alt338=6;
                switch ( input.LA(1) ) {
                case LEFT_PARENTHESIS:
                case RIGHT_PARENTHESIS:
                case HYPHEN_MINUS:
                case LOW_LINE:
                case FULL_STOP:
                case COMMA:
                case EXCLAMATION_MARK:
                case APOSTROPHE:
                case LATIN_SMALL_LETTER_F:
                case LATIN_SMALL_LETTER_I:
                case LATIN_SMALL_LETTER_L:
                case LATIN_SMALL_LETTER_E:
                case LATIN_SMALL_LETTER_H:
                case LATIN_SMALL_LETTER_T:
                case LATIN_SMALL_LETTER_P:
                case LATIN_SMALL_LETTER_S:
                case DOLLAR_SIGN:
                case PLUS_SIGN:
                case ASTERISK:
                case PERCENT_SIGN:
                case LATIN_SMALL_LETTER_N:
                case LATIN_SMALL_LETTER_G:
                case LATIN_SMALL_LETTER_J:
                case LATIN_SMALL_LETTER_V:
                case LATIN_SMALL_LETTER_R:
                case LATIN_SMALL_LETTER_C:
                case LATIN_SMALL_LETTER_U:
                case LATIN_SMALL_LETTER_O:
                case LATIN_SMALL_LETTER_A:
                case LATIN_SMALL_LETTER_D:
                case LATIN_SMALL_LETTER_B:
                case LATIN_SMALL_LETTER_Y:
                case LATIN_SMALL_LETTER_M:
                case DIGIT_0:
                case DIGIT_1:
                case DIGIT_2:
                case DIGIT_3:
                case DIGIT_4:
                case DIGIT_5:
                case DIGIT_6:
                case DIGIT_7:
                case DIGIT_8:
                case DIGIT_9:
                case LATIN_CAPITAL_LETTER_A:
                case LATIN_CAPITAL_LETTER_B:
                case LATIN_CAPITAL_LETTER_C:
                case LATIN_CAPITAL_LETTER_D:
                case LATIN_CAPITAL_LETTER_E:
                case LATIN_CAPITAL_LETTER_F:
                case LATIN_SMALL_LETTER_K:
                case LATIN_SMALL_LETTER_Q:
                case LATIN_SMALL_LETTER_W:
                case LATIN_SMALL_LETTER_X:
                case LATIN_SMALL_LETTER_Z:
                case LATIN_CAPITAL_LETTER_G:
                case LATIN_CAPITAL_LETTER_H:
                case LATIN_CAPITAL_LETTER_I:
                case LATIN_CAPITAL_LETTER_J:
                case LATIN_CAPITAL_LETTER_K:
                case LATIN_CAPITAL_LETTER_L:
                case LATIN_CAPITAL_LETTER_M:
                case LATIN_CAPITAL_LETTER_N:
                case LATIN_CAPITAL_LETTER_O:
                case LATIN_CAPITAL_LETTER_P:
                case LATIN_CAPITAL_LETTER_Q:
                case LATIN_CAPITAL_LETTER_R:
                case LATIN_CAPITAL_LETTER_S:
                case LATIN_CAPITAL_LETTER_T:
                case LATIN_CAPITAL_LETTER_U:
                case LATIN_CAPITAL_LETTER_V:
                case LATIN_CAPITAL_LETTER_W:
                case LATIN_CAPITAL_LETTER_X:
                case LATIN_CAPITAL_LETTER_Y:
                case LATIN_CAPITAL_LETTER_Z:
                    {
                    alt338=1;
                    }
                    break;
                case SEMICOLON:
                    {
                    alt338=2;
                    }
                    break;
                case QUESTION_MARK:
                    {
                    alt338=3;
                    }
                    break;
                case AMPERSAND:
                    {
                    alt338=4;
                    }
                    break;
                case EQUALS_SIGN:
                    {
                    alt338=5;
                    }
                    break;

                }

                switch (alt338) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1557:9: urlUChar
            	    {
            	    pushFollow(FOLLOW_urlUChar_in_urlUser14568);
            	    urlUChar618=urlUChar();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlUChar618.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1558:9: SEMICOLON
            	    {
            	    SEMICOLON619=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_urlUser14580); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SEMICOLON619_tree = (Object)adaptor.create(SEMICOLON619);
            	    adaptor.addChild(root_0, SEMICOLON619_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1559:9: QUESTION_MARK
            	    {
            	    QUESTION_MARK620=(Token)match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_urlUser14590); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    QUESTION_MARK620_tree = (Object)adaptor.create(QUESTION_MARK620);
            	    adaptor.addChild(root_0, QUESTION_MARK620_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1560:9: AMPERSAND
            	    {
            	    AMPERSAND621=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_urlUser14600); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AMPERSAND621_tree = (Object)adaptor.create(AMPERSAND621);
            	    adaptor.addChild(root_0, AMPERSAND621_tree);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1561:9: EQUALS_SIGN
            	    {
            	    EQUALS_SIGN622=(Token)match(input,EQUALS_SIGN,FOLLOW_EQUALS_SIGN_in_urlUser14610); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    EQUALS_SIGN622_tree = (Object)adaptor.create(EQUALS_SIGN622);
            	    adaptor.addChild(root_0, EQUALS_SIGN622_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop338;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlUser"

    public static class urlPassword_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlPassword"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1565:1: urlPassword : ( urlUChar | SEMICOLON | QUESTION_MARK | AMPERSAND | EQUALS_SIGN )* ;
    public final NovelangParser.urlPassword_return urlPassword() throws RecognitionException {
        NovelangParser.urlPassword_return retval = new NovelangParser.urlPassword_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON624=null;
        Token QUESTION_MARK625=null;
        Token AMPERSAND626=null;
        Token EQUALS_SIGN627=null;
        NovelangParser.urlUChar_return urlUChar623 = null;


        Object SEMICOLON624_tree=null;
        Object QUESTION_MARK625_tree=null;
        Object AMPERSAND626_tree=null;
        Object EQUALS_SIGN627_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1566:3: ( ( urlUChar | SEMICOLON | QUESTION_MARK | AMPERSAND | EQUALS_SIGN )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1566:5: ( urlUChar | SEMICOLON | QUESTION_MARK | AMPERSAND | EQUALS_SIGN )*
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1566:5: ( urlUChar | SEMICOLON | QUESTION_MARK | AMPERSAND | EQUALS_SIGN )*
            loop339:
            do {
                int alt339=6;
                switch ( input.LA(1) ) {
                case LEFT_PARENTHESIS:
                case RIGHT_PARENTHESIS:
                case HYPHEN_MINUS:
                case LOW_LINE:
                case FULL_STOP:
                case COMMA:
                case EXCLAMATION_MARK:
                case APOSTROPHE:
                case LATIN_SMALL_LETTER_F:
                case LATIN_SMALL_LETTER_I:
                case LATIN_SMALL_LETTER_L:
                case LATIN_SMALL_LETTER_E:
                case LATIN_SMALL_LETTER_H:
                case LATIN_SMALL_LETTER_T:
                case LATIN_SMALL_LETTER_P:
                case LATIN_SMALL_LETTER_S:
                case DOLLAR_SIGN:
                case PLUS_SIGN:
                case ASTERISK:
                case PERCENT_SIGN:
                case LATIN_SMALL_LETTER_N:
                case LATIN_SMALL_LETTER_G:
                case LATIN_SMALL_LETTER_J:
                case LATIN_SMALL_LETTER_V:
                case LATIN_SMALL_LETTER_R:
                case LATIN_SMALL_LETTER_C:
                case LATIN_SMALL_LETTER_U:
                case LATIN_SMALL_LETTER_O:
                case LATIN_SMALL_LETTER_A:
                case LATIN_SMALL_LETTER_D:
                case LATIN_SMALL_LETTER_B:
                case LATIN_SMALL_LETTER_Y:
                case LATIN_SMALL_LETTER_M:
                case DIGIT_0:
                case DIGIT_1:
                case DIGIT_2:
                case DIGIT_3:
                case DIGIT_4:
                case DIGIT_5:
                case DIGIT_6:
                case DIGIT_7:
                case DIGIT_8:
                case DIGIT_9:
                case LATIN_CAPITAL_LETTER_A:
                case LATIN_CAPITAL_LETTER_B:
                case LATIN_CAPITAL_LETTER_C:
                case LATIN_CAPITAL_LETTER_D:
                case LATIN_CAPITAL_LETTER_E:
                case LATIN_CAPITAL_LETTER_F:
                case LATIN_SMALL_LETTER_K:
                case LATIN_SMALL_LETTER_Q:
                case LATIN_SMALL_LETTER_W:
                case LATIN_SMALL_LETTER_X:
                case LATIN_SMALL_LETTER_Z:
                case LATIN_CAPITAL_LETTER_G:
                case LATIN_CAPITAL_LETTER_H:
                case LATIN_CAPITAL_LETTER_I:
                case LATIN_CAPITAL_LETTER_J:
                case LATIN_CAPITAL_LETTER_K:
                case LATIN_CAPITAL_LETTER_L:
                case LATIN_CAPITAL_LETTER_M:
                case LATIN_CAPITAL_LETTER_N:
                case LATIN_CAPITAL_LETTER_O:
                case LATIN_CAPITAL_LETTER_P:
                case LATIN_CAPITAL_LETTER_Q:
                case LATIN_CAPITAL_LETTER_R:
                case LATIN_CAPITAL_LETTER_S:
                case LATIN_CAPITAL_LETTER_T:
                case LATIN_CAPITAL_LETTER_U:
                case LATIN_CAPITAL_LETTER_V:
                case LATIN_CAPITAL_LETTER_W:
                case LATIN_CAPITAL_LETTER_X:
                case LATIN_CAPITAL_LETTER_Y:
                case LATIN_CAPITAL_LETTER_Z:
                    {
                    alt339=1;
                    }
                    break;
                case SEMICOLON:
                    {
                    alt339=2;
                    }
                    break;
                case QUESTION_MARK:
                    {
                    alt339=3;
                    }
                    break;
                case AMPERSAND:
                    {
                    alt339=4;
                    }
                    break;
                case EQUALS_SIGN:
                    {
                    alt339=5;
                    }
                    break;

                }

                switch (alt339) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1566:9: urlUChar
            	    {
            	    pushFollow(FOLLOW_urlUChar_in_urlPassword14634);
            	    urlUChar623=urlUChar();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlUChar623.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1567:9: SEMICOLON
            	    {
            	    SEMICOLON624=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_urlPassword14646); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SEMICOLON624_tree = (Object)adaptor.create(SEMICOLON624);
            	    adaptor.addChild(root_0, SEMICOLON624_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1568:9: QUESTION_MARK
            	    {
            	    QUESTION_MARK625=(Token)match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_urlPassword14656); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    QUESTION_MARK625_tree = (Object)adaptor.create(QUESTION_MARK625);
            	    adaptor.addChild(root_0, QUESTION_MARK625_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1569:9: AMPERSAND
            	    {
            	    AMPERSAND626=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_urlPassword14666); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AMPERSAND626_tree = (Object)adaptor.create(AMPERSAND626);
            	    adaptor.addChild(root_0, AMPERSAND626_tree);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1570:9: EQUALS_SIGN
            	    {
            	    EQUALS_SIGN627=(Token)match(input,EQUALS_SIGN,FOLLOW_EQUALS_SIGN_in_urlPassword14676); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    EQUALS_SIGN627_tree = (Object)adaptor.create(EQUALS_SIGN627);
            	    adaptor.addChild(root_0, EQUALS_SIGN627_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop339;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlPassword"

    public static class urlPath_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlPath"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1574:1: urlPath : ( urlXChar )* ;
    public final NovelangParser.urlPath_return urlPath() throws RecognitionException {
        NovelangParser.urlPath_return retval = new NovelangParser.urlPath_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.urlXChar_return urlXChar628 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1575:3: ( ( urlXChar )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1575:5: ( urlXChar )*
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1575:5: ( urlXChar )*
            loop340:
            do {
                int alt340=2;
                int LA340_0 = input.LA(1);

                if ( (LA340_0==COMMERCIAL_AT||(LA340_0>=LEFT_PARENTHESIS && LA340_0<=RIGHT_PARENTHESIS)||(LA340_0>=SOLIDUS && LA340_0<=LOW_LINE)||(LA340_0>=FULL_STOP && LA340_0<=LATIN_SMALL_LETTER_S)||(LA340_0>=AMPERSAND && LA340_0<=EQUALS_SIGN)||(LA340_0>=DOLLAR_SIGN && LA340_0<=LATIN_SMALL_LETTER_V)||(LA340_0>=LATIN_SMALL_LETTER_R && LA340_0<=LATIN_SMALL_LETTER_M)||(LA340_0>=DIGIT_0 && LA340_0<=LATIN_CAPITAL_LETTER_Z)) ) {
                    alt340=1;
                }


                switch (alt340) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1575:5: urlXChar
            	    {
            	    pushFollow(FOLLOW_urlXChar_in_urlPath14696);
            	    urlXChar628=urlXChar();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlXChar628.getTree());

            	    }
            	    break;

            	default :
            	    break loop340;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlPath"

    public static class urlFilePath_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlFilePath"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1578:1: urlFilePath : urlFileSegment ( SOLIDUS urlFileSegment )* ;
    public final NovelangParser.urlFilePath_return urlFilePath() throws RecognitionException {
        NovelangParser.urlFilePath_return retval = new NovelangParser.urlFilePath_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SOLIDUS630=null;
        NovelangParser.urlFileSegment_return urlFileSegment629 = null;

        NovelangParser.urlFileSegment_return urlFileSegment631 = null;


        Object SOLIDUS630_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1579:3: ( urlFileSegment ( SOLIDUS urlFileSegment )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1579:5: urlFileSegment ( SOLIDUS urlFileSegment )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_urlFileSegment_in_urlFilePath14712);
            urlFileSegment629=urlFileSegment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, urlFileSegment629.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1579:20: ( SOLIDUS urlFileSegment )*
            loop341:
            do {
                int alt341=2;
                int LA341_0 = input.LA(1);

                if ( (LA341_0==SOLIDUS) ) {
                    alt341=1;
                }


                switch (alt341) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1579:22: SOLIDUS urlFileSegment
            	    {
            	    SOLIDUS630=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_urlFilePath14716); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SOLIDUS630_tree = (Object)adaptor.create(SOLIDUS630);
            	    adaptor.addChild(root_0, SOLIDUS630_tree);
            	    }
            	    pushFollow(FOLLOW_urlFileSegment_in_urlFilePath14718);
            	    urlFileSegment631=urlFileSegment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlFileSegment631.getTree());

            	    }
            	    break;

            	default :
            	    break loop341;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlFilePath"

    public static class urlFileSegment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlFileSegment"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1582:1: urlFileSegment : ( urlUChar | QUESTION_MARK | COLON | SEMICOLON | COMMERCIAL_AT | AMPERSAND | EQUALS_SIGN | TILDE )+ ;
    public final NovelangParser.urlFileSegment_return urlFileSegment() throws RecognitionException {
        NovelangParser.urlFileSegment_return retval = new NovelangParser.urlFileSegment_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token QUESTION_MARK633=null;
        Token COLON634=null;
        Token SEMICOLON635=null;
        Token COMMERCIAL_AT636=null;
        Token AMPERSAND637=null;
        Token EQUALS_SIGN638=null;
        Token TILDE639=null;
        NovelangParser.urlUChar_return urlUChar632 = null;


        Object QUESTION_MARK633_tree=null;
        Object COLON634_tree=null;
        Object SEMICOLON635_tree=null;
        Object COMMERCIAL_AT636_tree=null;
        Object AMPERSAND637_tree=null;
        Object EQUALS_SIGN638_tree=null;
        Object TILDE639_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1583:3: ( ( urlUChar | QUESTION_MARK | COLON | SEMICOLON | COMMERCIAL_AT | AMPERSAND | EQUALS_SIGN | TILDE )+ )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1583:5: ( urlUChar | QUESTION_MARK | COLON | SEMICOLON | COMMERCIAL_AT | AMPERSAND | EQUALS_SIGN | TILDE )+
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1583:5: ( urlUChar | QUESTION_MARK | COLON | SEMICOLON | COMMERCIAL_AT | AMPERSAND | EQUALS_SIGN | TILDE )+
            int cnt342=0;
            loop342:
            do {
                int alt342=9;
                switch ( input.LA(1) ) {
                case LEFT_PARENTHESIS:
                case RIGHT_PARENTHESIS:
                case HYPHEN_MINUS:
                case LOW_LINE:
                case FULL_STOP:
                case COMMA:
                case EXCLAMATION_MARK:
                case APOSTROPHE:
                case LATIN_SMALL_LETTER_F:
                case LATIN_SMALL_LETTER_I:
                case LATIN_SMALL_LETTER_L:
                case LATIN_SMALL_LETTER_E:
                case LATIN_SMALL_LETTER_H:
                case LATIN_SMALL_LETTER_T:
                case LATIN_SMALL_LETTER_P:
                case LATIN_SMALL_LETTER_S:
                case DOLLAR_SIGN:
                case PLUS_SIGN:
                case ASTERISK:
                case PERCENT_SIGN:
                case LATIN_SMALL_LETTER_N:
                case LATIN_SMALL_LETTER_G:
                case LATIN_SMALL_LETTER_J:
                case LATIN_SMALL_LETTER_V:
                case LATIN_SMALL_LETTER_R:
                case LATIN_SMALL_LETTER_C:
                case LATIN_SMALL_LETTER_U:
                case LATIN_SMALL_LETTER_O:
                case LATIN_SMALL_LETTER_A:
                case LATIN_SMALL_LETTER_D:
                case LATIN_SMALL_LETTER_B:
                case LATIN_SMALL_LETTER_Y:
                case LATIN_SMALL_LETTER_M:
                case DIGIT_0:
                case DIGIT_1:
                case DIGIT_2:
                case DIGIT_3:
                case DIGIT_4:
                case DIGIT_5:
                case DIGIT_6:
                case DIGIT_7:
                case DIGIT_8:
                case DIGIT_9:
                case LATIN_CAPITAL_LETTER_A:
                case LATIN_CAPITAL_LETTER_B:
                case LATIN_CAPITAL_LETTER_C:
                case LATIN_CAPITAL_LETTER_D:
                case LATIN_CAPITAL_LETTER_E:
                case LATIN_CAPITAL_LETTER_F:
                case LATIN_SMALL_LETTER_K:
                case LATIN_SMALL_LETTER_Q:
                case LATIN_SMALL_LETTER_W:
                case LATIN_SMALL_LETTER_X:
                case LATIN_SMALL_LETTER_Z:
                case LATIN_CAPITAL_LETTER_G:
                case LATIN_CAPITAL_LETTER_H:
                case LATIN_CAPITAL_LETTER_I:
                case LATIN_CAPITAL_LETTER_J:
                case LATIN_CAPITAL_LETTER_K:
                case LATIN_CAPITAL_LETTER_L:
                case LATIN_CAPITAL_LETTER_M:
                case LATIN_CAPITAL_LETTER_N:
                case LATIN_CAPITAL_LETTER_O:
                case LATIN_CAPITAL_LETTER_P:
                case LATIN_CAPITAL_LETTER_Q:
                case LATIN_CAPITAL_LETTER_R:
                case LATIN_CAPITAL_LETTER_S:
                case LATIN_CAPITAL_LETTER_T:
                case LATIN_CAPITAL_LETTER_U:
                case LATIN_CAPITAL_LETTER_V:
                case LATIN_CAPITAL_LETTER_W:
                case LATIN_CAPITAL_LETTER_X:
                case LATIN_CAPITAL_LETTER_Y:
                case LATIN_CAPITAL_LETTER_Z:
                    {
                    alt342=1;
                    }
                    break;
                case QUESTION_MARK:
                    {
                    alt342=2;
                    }
                    break;
                case COLON:
                    {
                    alt342=3;
                    }
                    break;
                case SEMICOLON:
                    {
                    alt342=4;
                    }
                    break;
                case COMMERCIAL_AT:
                    {
                    alt342=5;
                    }
                    break;
                case AMPERSAND:
                    {
                    alt342=6;
                    }
                    break;
                case EQUALS_SIGN:
                    {
                    alt342=7;
                    }
                    break;
                case TILDE:
                    {
                    alt342=8;
                    }
                    break;

                }

                switch (alt342) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1583:9: urlUChar
            	    {
            	    pushFollow(FOLLOW_urlUChar_in_urlFileSegment14740);
            	    urlUChar632=urlUChar();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlUChar632.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1584:9: QUESTION_MARK
            	    {
            	    QUESTION_MARK633=(Token)match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_urlFileSegment14755); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    QUESTION_MARK633_tree = (Object)adaptor.create(QUESTION_MARK633);
            	    adaptor.addChild(root_0, QUESTION_MARK633_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1585:9: COLON
            	    {
            	    COLON634=(Token)match(input,COLON,FOLLOW_COLON_in_urlFileSegment14765); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COLON634_tree = (Object)adaptor.create(COLON634);
            	    adaptor.addChild(root_0, COLON634_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1586:9: SEMICOLON
            	    {
            	    SEMICOLON635=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_urlFileSegment14775); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SEMICOLON635_tree = (Object)adaptor.create(SEMICOLON635);
            	    adaptor.addChild(root_0, SEMICOLON635_tree);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1587:9: COMMERCIAL_AT
            	    {
            	    COMMERCIAL_AT636=(Token)match(input,COMMERCIAL_AT,FOLLOW_COMMERCIAL_AT_in_urlFileSegment14785); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMERCIAL_AT636_tree = (Object)adaptor.create(COMMERCIAL_AT636);
            	    adaptor.addChild(root_0, COMMERCIAL_AT636_tree);
            	    }

            	    }
            	    break;
            	case 6 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1588:9: AMPERSAND
            	    {
            	    AMPERSAND637=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_urlFileSegment14795); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AMPERSAND637_tree = (Object)adaptor.create(AMPERSAND637);
            	    adaptor.addChild(root_0, AMPERSAND637_tree);
            	    }

            	    }
            	    break;
            	case 7 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1589:9: EQUALS_SIGN
            	    {
            	    EQUALS_SIGN638=(Token)match(input,EQUALS_SIGN,FOLLOW_EQUALS_SIGN_in_urlFileSegment14805); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    EQUALS_SIGN638_tree = (Object)adaptor.create(EQUALS_SIGN638);
            	    adaptor.addChild(root_0, EQUALS_SIGN638_tree);
            	    }

            	    }
            	    break;
            	case 8 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1590:9: TILDE
            	    {
            	    TILDE639=(Token)match(input,TILDE,FOLLOW_TILDE_in_urlFileSegment14815); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    TILDE639_tree = (Object)adaptor.create(TILDE639);
            	    adaptor.addChild(root_0, TILDE639_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt342 >= 1 ) break loop342;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(342, input);
                        throw eee;
                }
                cnt342++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlFileSegment"

    public static class httpUrlPath_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "httpUrlPath"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1595:1: httpUrlPath : httpUrlSegment ( ( SOLIDUS httpUrlPath )=> SOLIDUS httpUrlPath )* ;
    public final NovelangParser.httpUrlPath_return httpUrlPath() throws RecognitionException {
        NovelangParser.httpUrlPath_return retval = new NovelangParser.httpUrlPath_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SOLIDUS641=null;
        NovelangParser.httpUrlSegment_return httpUrlSegment640 = null;

        NovelangParser.httpUrlPath_return httpUrlPath642 = null;


        Object SOLIDUS641_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1596:3: ( httpUrlSegment ( ( SOLIDUS httpUrlPath )=> SOLIDUS httpUrlPath )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1596:5: httpUrlSegment ( ( SOLIDUS httpUrlPath )=> SOLIDUS httpUrlPath )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_httpUrlSegment_in_httpUrlPath14863);
            httpUrlSegment640=httpUrlSegment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, httpUrlSegment640.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1597:5: ( ( SOLIDUS httpUrlPath )=> SOLIDUS httpUrlPath )*
            loop343:
            do {
                int alt343=2;
                int LA343_0 = input.LA(1);

                if ( (LA343_0==SOLIDUS) ) {
                    int LA343_2 = input.LA(2);

                    if ( (synpred43_Novelang()) ) {
                        alt343=1;
                    }


                }


                switch (alt343) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1597:7: ( SOLIDUS httpUrlPath )=> SOLIDUS httpUrlPath
            	    {
            	    SOLIDUS641=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_httpUrlPath14882); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SOLIDUS641_tree = (Object)adaptor.create(SOLIDUS641);
            	    adaptor.addChild(root_0, SOLIDUS641_tree);
            	    }
            	    pushFollow(FOLLOW_httpUrlPath_in_httpUrlPath14884);
            	    httpUrlPath642=httpUrlPath();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, httpUrlPath642.getTree());

            	    }
            	    break;

            	default :
            	    break loop343;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "httpUrlPath"

    public static class httpUrlSegment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "httpUrlSegment"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1600:1: httpUrlSegment : ( urlUChar | SEMICOLON | COLON | COMMERCIAL_AT | AMPERSAND | EQUALS_SIGN | TILDE )* ;
    public final NovelangParser.httpUrlSegment_return httpUrlSegment() throws RecognitionException {
        NovelangParser.httpUrlSegment_return retval = new NovelangParser.httpUrlSegment_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON644=null;
        Token COLON645=null;
        Token COMMERCIAL_AT646=null;
        Token AMPERSAND647=null;
        Token EQUALS_SIGN648=null;
        Token TILDE649=null;
        NovelangParser.urlUChar_return urlUChar643 = null;


        Object SEMICOLON644_tree=null;
        Object COLON645_tree=null;
        Object COMMERCIAL_AT646_tree=null;
        Object AMPERSAND647_tree=null;
        Object EQUALS_SIGN648_tree=null;
        Object TILDE649_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1601:3: ( ( urlUChar | SEMICOLON | COLON | COMMERCIAL_AT | AMPERSAND | EQUALS_SIGN | TILDE )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1601:5: ( urlUChar | SEMICOLON | COLON | COMMERCIAL_AT | AMPERSAND | EQUALS_SIGN | TILDE )*
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1601:5: ( urlUChar | SEMICOLON | COLON | COMMERCIAL_AT | AMPERSAND | EQUALS_SIGN | TILDE )*
            loop344:
            do {
                int alt344=8;
                switch ( input.LA(1) ) {
                case LEFT_PARENTHESIS:
                case RIGHT_PARENTHESIS:
                case HYPHEN_MINUS:
                case LOW_LINE:
                case FULL_STOP:
                case COMMA:
                case EXCLAMATION_MARK:
                case APOSTROPHE:
                case LATIN_SMALL_LETTER_F:
                case LATIN_SMALL_LETTER_I:
                case LATIN_SMALL_LETTER_L:
                case LATIN_SMALL_LETTER_E:
                case LATIN_SMALL_LETTER_H:
                case LATIN_SMALL_LETTER_T:
                case LATIN_SMALL_LETTER_P:
                case LATIN_SMALL_LETTER_S:
                case DOLLAR_SIGN:
                case PLUS_SIGN:
                case ASTERISK:
                case PERCENT_SIGN:
                case LATIN_SMALL_LETTER_N:
                case LATIN_SMALL_LETTER_G:
                case LATIN_SMALL_LETTER_J:
                case LATIN_SMALL_LETTER_V:
                case LATIN_SMALL_LETTER_R:
                case LATIN_SMALL_LETTER_C:
                case LATIN_SMALL_LETTER_U:
                case LATIN_SMALL_LETTER_O:
                case LATIN_SMALL_LETTER_A:
                case LATIN_SMALL_LETTER_D:
                case LATIN_SMALL_LETTER_B:
                case LATIN_SMALL_LETTER_Y:
                case LATIN_SMALL_LETTER_M:
                case DIGIT_0:
                case DIGIT_1:
                case DIGIT_2:
                case DIGIT_3:
                case DIGIT_4:
                case DIGIT_5:
                case DIGIT_6:
                case DIGIT_7:
                case DIGIT_8:
                case DIGIT_9:
                case LATIN_CAPITAL_LETTER_A:
                case LATIN_CAPITAL_LETTER_B:
                case LATIN_CAPITAL_LETTER_C:
                case LATIN_CAPITAL_LETTER_D:
                case LATIN_CAPITAL_LETTER_E:
                case LATIN_CAPITAL_LETTER_F:
                case LATIN_SMALL_LETTER_K:
                case LATIN_SMALL_LETTER_Q:
                case LATIN_SMALL_LETTER_W:
                case LATIN_SMALL_LETTER_X:
                case LATIN_SMALL_LETTER_Z:
                case LATIN_CAPITAL_LETTER_G:
                case LATIN_CAPITAL_LETTER_H:
                case LATIN_CAPITAL_LETTER_I:
                case LATIN_CAPITAL_LETTER_J:
                case LATIN_CAPITAL_LETTER_K:
                case LATIN_CAPITAL_LETTER_L:
                case LATIN_CAPITAL_LETTER_M:
                case LATIN_CAPITAL_LETTER_N:
                case LATIN_CAPITAL_LETTER_O:
                case LATIN_CAPITAL_LETTER_P:
                case LATIN_CAPITAL_LETTER_Q:
                case LATIN_CAPITAL_LETTER_R:
                case LATIN_CAPITAL_LETTER_S:
                case LATIN_CAPITAL_LETTER_T:
                case LATIN_CAPITAL_LETTER_U:
                case LATIN_CAPITAL_LETTER_V:
                case LATIN_CAPITAL_LETTER_W:
                case LATIN_CAPITAL_LETTER_X:
                case LATIN_CAPITAL_LETTER_Y:
                case LATIN_CAPITAL_LETTER_Z:
                    {
                    alt344=1;
                    }
                    break;
                case SEMICOLON:
                    {
                    alt344=2;
                    }
                    break;
                case COLON:
                    {
                    alt344=3;
                    }
                    break;
                case COMMERCIAL_AT:
                    {
                    alt344=4;
                    }
                    break;
                case AMPERSAND:
                    {
                    alt344=5;
                    }
                    break;
                case EQUALS_SIGN:
                    {
                    alt344=6;
                    }
                    break;
                case TILDE:
                    {
                    alt344=7;
                    }
                    break;

                }

                switch (alt344) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1601:9: urlUChar
            	    {
            	    pushFollow(FOLLOW_urlUChar_in_httpUrlSegment14907);
            	    urlUChar643=urlUChar();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlUChar643.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1602:9: SEMICOLON
            	    {
            	    SEMICOLON644=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_httpUrlSegment14917); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SEMICOLON644_tree = (Object)adaptor.create(SEMICOLON644);
            	    adaptor.addChild(root_0, SEMICOLON644_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1603:9: COLON
            	    {
            	    COLON645=(Token)match(input,COLON,FOLLOW_COLON_in_httpUrlSegment14927); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COLON645_tree = (Object)adaptor.create(COLON645);
            	    adaptor.addChild(root_0, COLON645_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1604:9: COMMERCIAL_AT
            	    {
            	    COMMERCIAL_AT646=(Token)match(input,COMMERCIAL_AT,FOLLOW_COMMERCIAL_AT_in_httpUrlSegment14937); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMERCIAL_AT646_tree = (Object)adaptor.create(COMMERCIAL_AT646);
            	    adaptor.addChild(root_0, COMMERCIAL_AT646_tree);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1605:9: AMPERSAND
            	    {
            	    AMPERSAND647=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_httpUrlSegment14947); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AMPERSAND647_tree = (Object)adaptor.create(AMPERSAND647);
            	    adaptor.addChild(root_0, AMPERSAND647_tree);
            	    }

            	    }
            	    break;
            	case 6 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1606:9: EQUALS_SIGN
            	    {
            	    EQUALS_SIGN648=(Token)match(input,EQUALS_SIGN,FOLLOW_EQUALS_SIGN_in_httpUrlSegment14957); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    EQUALS_SIGN648_tree = (Object)adaptor.create(EQUALS_SIGN648);
            	    adaptor.addChild(root_0, EQUALS_SIGN648_tree);
            	    }

            	    }
            	    break;
            	case 7 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1607:9: TILDE
            	    {
            	    TILDE649=(Token)match(input,TILDE,FOLLOW_TILDE_in_httpUrlSegment14967); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    TILDE649_tree = (Object)adaptor.create(TILDE649);
            	    adaptor.addChild(root_0, TILDE649_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop344;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "httpUrlSegment"

    public static class httpUrlSearch_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "httpUrlSearch"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1611:1: httpUrlSearch : ( urlUChar | SEMICOLON | COLON | COMMERCIAL_AT | AMPERSAND | EQUALS_SIGN | SOLIDUS )* ;
    public final NovelangParser.httpUrlSearch_return httpUrlSearch() throws RecognitionException {
        NovelangParser.httpUrlSearch_return retval = new NovelangParser.httpUrlSearch_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON651=null;
        Token COLON652=null;
        Token COMMERCIAL_AT653=null;
        Token AMPERSAND654=null;
        Token EQUALS_SIGN655=null;
        Token SOLIDUS656=null;
        NovelangParser.urlUChar_return urlUChar650 = null;


        Object SEMICOLON651_tree=null;
        Object COLON652_tree=null;
        Object COMMERCIAL_AT653_tree=null;
        Object AMPERSAND654_tree=null;
        Object EQUALS_SIGN655_tree=null;
        Object SOLIDUS656_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1612:3: ( ( urlUChar | SEMICOLON | COLON | COMMERCIAL_AT | AMPERSAND | EQUALS_SIGN | SOLIDUS )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1612:5: ( urlUChar | SEMICOLON | COLON | COMMERCIAL_AT | AMPERSAND | EQUALS_SIGN | SOLIDUS )*
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1612:5: ( urlUChar | SEMICOLON | COLON | COMMERCIAL_AT | AMPERSAND | EQUALS_SIGN | SOLIDUS )*
            loop345:
            do {
                int alt345=8;
                switch ( input.LA(1) ) {
                case LEFT_PARENTHESIS:
                case RIGHT_PARENTHESIS:
                case HYPHEN_MINUS:
                case LOW_LINE:
                case FULL_STOP:
                case COMMA:
                case EXCLAMATION_MARK:
                case APOSTROPHE:
                case LATIN_SMALL_LETTER_F:
                case LATIN_SMALL_LETTER_I:
                case LATIN_SMALL_LETTER_L:
                case LATIN_SMALL_LETTER_E:
                case LATIN_SMALL_LETTER_H:
                case LATIN_SMALL_LETTER_T:
                case LATIN_SMALL_LETTER_P:
                case LATIN_SMALL_LETTER_S:
                case DOLLAR_SIGN:
                case PLUS_SIGN:
                case ASTERISK:
                case PERCENT_SIGN:
                case LATIN_SMALL_LETTER_N:
                case LATIN_SMALL_LETTER_G:
                case LATIN_SMALL_LETTER_J:
                case LATIN_SMALL_LETTER_V:
                case LATIN_SMALL_LETTER_R:
                case LATIN_SMALL_LETTER_C:
                case LATIN_SMALL_LETTER_U:
                case LATIN_SMALL_LETTER_O:
                case LATIN_SMALL_LETTER_A:
                case LATIN_SMALL_LETTER_D:
                case LATIN_SMALL_LETTER_B:
                case LATIN_SMALL_LETTER_Y:
                case LATIN_SMALL_LETTER_M:
                case DIGIT_0:
                case DIGIT_1:
                case DIGIT_2:
                case DIGIT_3:
                case DIGIT_4:
                case DIGIT_5:
                case DIGIT_6:
                case DIGIT_7:
                case DIGIT_8:
                case DIGIT_9:
                case LATIN_CAPITAL_LETTER_A:
                case LATIN_CAPITAL_LETTER_B:
                case LATIN_CAPITAL_LETTER_C:
                case LATIN_CAPITAL_LETTER_D:
                case LATIN_CAPITAL_LETTER_E:
                case LATIN_CAPITAL_LETTER_F:
                case LATIN_SMALL_LETTER_K:
                case LATIN_SMALL_LETTER_Q:
                case LATIN_SMALL_LETTER_W:
                case LATIN_SMALL_LETTER_X:
                case LATIN_SMALL_LETTER_Z:
                case LATIN_CAPITAL_LETTER_G:
                case LATIN_CAPITAL_LETTER_H:
                case LATIN_CAPITAL_LETTER_I:
                case LATIN_CAPITAL_LETTER_J:
                case LATIN_CAPITAL_LETTER_K:
                case LATIN_CAPITAL_LETTER_L:
                case LATIN_CAPITAL_LETTER_M:
                case LATIN_CAPITAL_LETTER_N:
                case LATIN_CAPITAL_LETTER_O:
                case LATIN_CAPITAL_LETTER_P:
                case LATIN_CAPITAL_LETTER_Q:
                case LATIN_CAPITAL_LETTER_R:
                case LATIN_CAPITAL_LETTER_S:
                case LATIN_CAPITAL_LETTER_T:
                case LATIN_CAPITAL_LETTER_U:
                case LATIN_CAPITAL_LETTER_V:
                case LATIN_CAPITAL_LETTER_W:
                case LATIN_CAPITAL_LETTER_X:
                case LATIN_CAPITAL_LETTER_Y:
                case LATIN_CAPITAL_LETTER_Z:
                    {
                    alt345=1;
                    }
                    break;
                case SEMICOLON:
                    {
                    alt345=2;
                    }
                    break;
                case COLON:
                    {
                    alt345=3;
                    }
                    break;
                case COMMERCIAL_AT:
                    {
                    alt345=4;
                    }
                    break;
                case AMPERSAND:
                    {
                    alt345=5;
                    }
                    break;
                case EQUALS_SIGN:
                    {
                    alt345=6;
                    }
                    break;
                case SOLIDUS:
                    {
                    alt345=7;
                    }
                    break;

                }

                switch (alt345) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1612:9: urlUChar
            	    {
            	    pushFollow(FOLLOW_urlUChar_in_httpUrlSearch15005);
            	    urlUChar650=urlUChar();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlUChar650.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1613:9: SEMICOLON
            	    {
            	    SEMICOLON651=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_httpUrlSearch15015); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SEMICOLON651_tree = (Object)adaptor.create(SEMICOLON651);
            	    adaptor.addChild(root_0, SEMICOLON651_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1614:9: COLON
            	    {
            	    COLON652=(Token)match(input,COLON,FOLLOW_COLON_in_httpUrlSearch15025); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COLON652_tree = (Object)adaptor.create(COLON652);
            	    adaptor.addChild(root_0, COLON652_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1615:9: COMMERCIAL_AT
            	    {
            	    COMMERCIAL_AT653=(Token)match(input,COMMERCIAL_AT,FOLLOW_COMMERCIAL_AT_in_httpUrlSearch15035); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMERCIAL_AT653_tree = (Object)adaptor.create(COMMERCIAL_AT653);
            	    adaptor.addChild(root_0, COMMERCIAL_AT653_tree);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1616:9: AMPERSAND
            	    {
            	    AMPERSAND654=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_httpUrlSearch15045); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AMPERSAND654_tree = (Object)adaptor.create(AMPERSAND654);
            	    adaptor.addChild(root_0, AMPERSAND654_tree);
            	    }

            	    }
            	    break;
            	case 6 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1617:9: EQUALS_SIGN
            	    {
            	    EQUALS_SIGN655=(Token)match(input,EQUALS_SIGN,FOLLOW_EQUALS_SIGN_in_httpUrlSearch15055); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    EQUALS_SIGN655_tree = (Object)adaptor.create(EQUALS_SIGN655);
            	    adaptor.addChild(root_0, EQUALS_SIGN655_tree);
            	    }

            	    }
            	    break;
            	case 7 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1618:9: SOLIDUS
            	    {
            	    SOLIDUS656=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_httpUrlSearch15065); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SOLIDUS656_tree = (Object)adaptor.create(SOLIDUS656);
            	    adaptor.addChild(root_0, SOLIDUS656_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop345;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "httpUrlSearch"

    public static class urlAlpha_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlAlpha"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1622:1: urlAlpha : ( hexLetter | nonHexLetter );
    public final NovelangParser.urlAlpha_return urlAlpha() throws RecognitionException {
        NovelangParser.urlAlpha_return retval = new NovelangParser.urlAlpha_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.hexLetter_return hexLetter657 = null;

        NovelangParser.nonHexLetter_return nonHexLetter658 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1623:3: ( hexLetter | nonHexLetter )
            int alt346=2;
            int LA346_0 = input.LA(1);

            if ( (LA346_0==LATIN_SMALL_LETTER_F||LA346_0==LATIN_SMALL_LETTER_E||LA346_0==LATIN_SMALL_LETTER_C||(LA346_0>=LATIN_SMALL_LETTER_A && LA346_0<=LATIN_SMALL_LETTER_B)||(LA346_0>=LATIN_CAPITAL_LETTER_A && LA346_0<=LATIN_CAPITAL_LETTER_F)) ) {
                alt346=1;
            }
            else if ( ((LA346_0>=LATIN_SMALL_LETTER_I && LA346_0<=LATIN_SMALL_LETTER_L)||(LA346_0>=LATIN_SMALL_LETTER_H && LA346_0<=LATIN_SMALL_LETTER_S)||(LA346_0>=LATIN_SMALL_LETTER_N && LA346_0<=LATIN_SMALL_LETTER_V)||LA346_0==LATIN_SMALL_LETTER_R||(LA346_0>=LATIN_SMALL_LETTER_U && LA346_0<=LATIN_SMALL_LETTER_O)||(LA346_0>=LATIN_SMALL_LETTER_Y && LA346_0<=LATIN_SMALL_LETTER_M)||(LA346_0>=LATIN_SMALL_LETTER_K && LA346_0<=LATIN_CAPITAL_LETTER_Z)) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 0, input);

                throw nvae;
            }
            switch (alt346) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1623:5: hexLetter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_hexLetter_in_urlAlpha15102);
                    hexLetter657=hexLetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hexLetter657.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1624:5: nonHexLetter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonHexLetter_in_urlAlpha15109);
                    nonHexLetter658=nonHexLetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonHexLetter658.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlAlpha"

    public static class urlAlphaDigit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlAlphaDigit"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1627:1: urlAlphaDigit : ( hexLetter | nonHexLetter | digit );
    public final NovelangParser.urlAlphaDigit_return urlAlphaDigit() throws RecognitionException {
        NovelangParser.urlAlphaDigit_return retval = new NovelangParser.urlAlphaDigit_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.hexLetter_return hexLetter659 = null;

        NovelangParser.nonHexLetter_return nonHexLetter660 = null;

        NovelangParser.digit_return digit661 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1628:3: ( hexLetter | nonHexLetter | digit )
            int alt347=3;
            switch ( input.LA(1) ) {
            case LATIN_SMALL_LETTER_F:
            case LATIN_SMALL_LETTER_E:
            case LATIN_SMALL_LETTER_C:
            case LATIN_SMALL_LETTER_A:
            case LATIN_SMALL_LETTER_D:
            case LATIN_SMALL_LETTER_B:
            case LATIN_CAPITAL_LETTER_A:
            case LATIN_CAPITAL_LETTER_B:
            case LATIN_CAPITAL_LETTER_C:
            case LATIN_CAPITAL_LETTER_D:
            case LATIN_CAPITAL_LETTER_E:
            case LATIN_CAPITAL_LETTER_F:
                {
                alt347=1;
                }
                break;
            case LATIN_SMALL_LETTER_I:
            case LATIN_SMALL_LETTER_L:
            case LATIN_SMALL_LETTER_H:
            case LATIN_SMALL_LETTER_T:
            case LATIN_SMALL_LETTER_P:
            case LATIN_SMALL_LETTER_S:
            case LATIN_SMALL_LETTER_N:
            case LATIN_SMALL_LETTER_G:
            case LATIN_SMALL_LETTER_J:
            case LATIN_SMALL_LETTER_V:
            case LATIN_SMALL_LETTER_R:
            case LATIN_SMALL_LETTER_U:
            case LATIN_SMALL_LETTER_O:
            case LATIN_SMALL_LETTER_Y:
            case LATIN_SMALL_LETTER_M:
            case LATIN_SMALL_LETTER_K:
            case LATIN_SMALL_LETTER_Q:
            case LATIN_SMALL_LETTER_W:
            case LATIN_SMALL_LETTER_X:
            case LATIN_SMALL_LETTER_Z:
            case LATIN_CAPITAL_LETTER_G:
            case LATIN_CAPITAL_LETTER_H:
            case LATIN_CAPITAL_LETTER_I:
            case LATIN_CAPITAL_LETTER_J:
            case LATIN_CAPITAL_LETTER_K:
            case LATIN_CAPITAL_LETTER_L:
            case LATIN_CAPITAL_LETTER_M:
            case LATIN_CAPITAL_LETTER_N:
            case LATIN_CAPITAL_LETTER_O:
            case LATIN_CAPITAL_LETTER_P:
            case LATIN_CAPITAL_LETTER_Q:
            case LATIN_CAPITAL_LETTER_R:
            case LATIN_CAPITAL_LETTER_S:
            case LATIN_CAPITAL_LETTER_T:
            case LATIN_CAPITAL_LETTER_U:
            case LATIN_CAPITAL_LETTER_V:
            case LATIN_CAPITAL_LETTER_W:
            case LATIN_CAPITAL_LETTER_X:
            case LATIN_CAPITAL_LETTER_Y:
            case LATIN_CAPITAL_LETTER_Z:
                {
                alt347=2;
                }
                break;
            case DIGIT_0:
            case DIGIT_1:
            case DIGIT_2:
            case DIGIT_3:
            case DIGIT_4:
            case DIGIT_5:
            case DIGIT_6:
            case DIGIT_7:
            case DIGIT_8:
            case DIGIT_9:
                {
                alt347=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 347, 0, input);

                throw nvae;
            }

            switch (alt347) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1628:5: hexLetter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_hexLetter_in_urlAlphaDigit15124);
                    hexLetter659=hexLetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hexLetter659.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1629:5: nonHexLetter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonHexLetter_in_urlAlphaDigit15131);
                    nonHexLetter660=nonHexLetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonHexLetter660.getTree());

                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1630:5: digit
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_digit_in_urlAlphaDigit15137);
                    digit661=digit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, digit661.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlAlphaDigit"

    public static class urlDigits_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlDigits"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1633:1: urlDigits : ( digit )+ ;
    public final NovelangParser.urlDigits_return urlDigits() throws RecognitionException {
        NovelangParser.urlDigits_return retval = new NovelangParser.urlDigits_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.digit_return digit662 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1634:3: ( ( digit )+ )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1634:5: ( digit )+
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1634:5: ( digit )+
            int cnt348=0;
            loop348:
            do {
                int alt348=2;
                int LA348_0 = input.LA(1);

                if ( ((LA348_0>=DIGIT_0 && LA348_0<=DIGIT_9)) ) {
                    alt348=1;
                }


                switch (alt348) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1634:5: digit
            	    {
            	    pushFollow(FOLLOW_digit_in_urlDigits15152);
            	    digit662=digit();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, digit662.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt348 >= 1 ) break loop348;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(348, input);
                        throw eee;
                }
                cnt348++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlDigits"

    public static class urlSafe_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlSafe"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1637:1: urlSafe : ( DOLLAR_SIGN | HYPHEN_MINUS | LOW_LINE | FULL_STOP | PLUS_SIGN );
    public final NovelangParser.urlSafe_return urlSafe() throws RecognitionException {
        NovelangParser.urlSafe_return retval = new NovelangParser.urlSafe_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set663=null;

        Object set663_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1638:3: ( DOLLAR_SIGN | HYPHEN_MINUS | LOW_LINE | FULL_STOP | PLUS_SIGN )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:
            {
            root_0 = (Object)adaptor.nil();

            set663=(Token)input.LT(1);
            if ( (input.LA(1)>=HYPHEN_MINUS && input.LA(1)<=LOW_LINE)||input.LA(1)==FULL_STOP||(input.LA(1)>=DOLLAR_SIGN && input.LA(1)<=PLUS_SIGN) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set663));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlSafe"

    public static class urlExtra_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlExtra"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1645:1: urlExtra : ( EXCLAMATION_MARK | ASTERISK | APOSTROPHE | LEFT_PARENTHESIS | RIGHT_PARENTHESIS | COMMA );
    public final NovelangParser.urlExtra_return urlExtra() throws RecognitionException {
        NovelangParser.urlExtra_return retval = new NovelangParser.urlExtra_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set664=null;

        Object set664_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1646:3: ( EXCLAMATION_MARK | ASTERISK | APOSTROPHE | LEFT_PARENTHESIS | RIGHT_PARENTHESIS | COMMA )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:
            {
            root_0 = (Object)adaptor.nil();

            set664=(Token)input.LT(1);
            if ( (input.LA(1)>=LEFT_PARENTHESIS && input.LA(1)<=RIGHT_PARENTHESIS)||input.LA(1)==COMMA||input.LA(1)==EXCLAMATION_MARK||input.LA(1)==APOSTROPHE||input.LA(1)==ASTERISK ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set664));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlExtra"

    public static class urlReserved_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlReserved"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1654:1: urlReserved : ( SEMICOLON | SOLIDUS | QUESTION_MARK | COLON | COMMERCIAL_AT | AMPERSAND | EQUALS_SIGN );
    public final NovelangParser.urlReserved_return urlReserved() throws RecognitionException {
        NovelangParser.urlReserved_return retval = new NovelangParser.urlReserved_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set665=null;

        Object set665_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1655:3: ( SEMICOLON | SOLIDUS | QUESTION_MARK | COLON | COMMERCIAL_AT | AMPERSAND | EQUALS_SIGN )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:
            {
            root_0 = (Object)adaptor.nil();

            set665=(Token)input.LT(1);
            if ( input.LA(1)==COMMERCIAL_AT||input.LA(1)==SOLIDUS||input.LA(1)==QUESTION_MARK||(input.LA(1)>=SEMICOLON && input.LA(1)<=COLON)||(input.LA(1)>=AMPERSAND && input.LA(1)<=EQUALS_SIGN) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set665));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlReserved"

    public static class urlHex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlHex"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1664:1: urlHex : ( digit | hexLetter );
    public final NovelangParser.urlHex_return urlHex() throws RecognitionException {
        NovelangParser.urlHex_return retval = new NovelangParser.urlHex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.digit_return digit666 = null;

        NovelangParser.hexLetter_return hexLetter667 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1665:3: ( digit | hexLetter )
            int alt349=2;
            int LA349_0 = input.LA(1);

            if ( ((LA349_0>=DIGIT_0 && LA349_0<=DIGIT_9)) ) {
                alt349=1;
            }
            else if ( (LA349_0==LATIN_SMALL_LETTER_F||LA349_0==LATIN_SMALL_LETTER_E||LA349_0==LATIN_SMALL_LETTER_C||(LA349_0>=LATIN_SMALL_LETTER_A && LA349_0<=LATIN_SMALL_LETTER_B)||(LA349_0>=LATIN_CAPITAL_LETTER_A && LA349_0<=LATIN_CAPITAL_LETTER_F)) ) {
                alt349=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 349, 0, input);

                throw nvae;
            }
            switch (alt349) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1665:5: digit
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_digit_in_urlHex15303);
                    digit666=digit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, digit666.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1665:13: hexLetter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_hexLetter_in_urlHex15307);
                    hexLetter667=hexLetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hexLetter667.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlHex"

    public static class urlEscape_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlEscape"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1668:1: urlEscape : PERCENT_SIGN urlHex urlHex ;
    public final NovelangParser.urlEscape_return urlEscape() throws RecognitionException {
        NovelangParser.urlEscape_return retval = new NovelangParser.urlEscape_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PERCENT_SIGN668=null;
        NovelangParser.urlHex_return urlHex669 = null;

        NovelangParser.urlHex_return urlHex670 = null;


        Object PERCENT_SIGN668_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1669:3: ( PERCENT_SIGN urlHex urlHex )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1669:5: PERCENT_SIGN urlHex urlHex
            {
            root_0 = (Object)adaptor.nil();

            PERCENT_SIGN668=(Token)match(input,PERCENT_SIGN,FOLLOW_PERCENT_SIGN_in_urlEscape15322); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PERCENT_SIGN668_tree = (Object)adaptor.create(PERCENT_SIGN668);
            adaptor.addChild(root_0, PERCENT_SIGN668_tree);
            }
            pushFollow(FOLLOW_urlHex_in_urlEscape15324);
            urlHex669=urlHex();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, urlHex669.getTree());
            pushFollow(FOLLOW_urlHex_in_urlEscape15326);
            urlHex670=urlHex();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, urlHex670.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlEscape"

    public static class urlUnreserved_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlUnreserved"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1672:1: urlUnreserved : ( hexLetter | nonHexLetter | digit | urlSafe | urlExtra );
    public final NovelangParser.urlUnreserved_return urlUnreserved() throws RecognitionException {
        NovelangParser.urlUnreserved_return retval = new NovelangParser.urlUnreserved_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.hexLetter_return hexLetter671 = null;

        NovelangParser.nonHexLetter_return nonHexLetter672 = null;

        NovelangParser.digit_return digit673 = null;

        NovelangParser.urlSafe_return urlSafe674 = null;

        NovelangParser.urlExtra_return urlExtra675 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1673:3: ( hexLetter | nonHexLetter | digit | urlSafe | urlExtra )
            int alt350=5;
            switch ( input.LA(1) ) {
            case LATIN_SMALL_LETTER_F:
            case LATIN_SMALL_LETTER_E:
            case LATIN_SMALL_LETTER_C:
            case LATIN_SMALL_LETTER_A:
            case LATIN_SMALL_LETTER_D:
            case LATIN_SMALL_LETTER_B:
            case LATIN_CAPITAL_LETTER_A:
            case LATIN_CAPITAL_LETTER_B:
            case LATIN_CAPITAL_LETTER_C:
            case LATIN_CAPITAL_LETTER_D:
            case LATIN_CAPITAL_LETTER_E:
            case LATIN_CAPITAL_LETTER_F:
                {
                alt350=1;
                }
                break;
            case LATIN_SMALL_LETTER_I:
            case LATIN_SMALL_LETTER_L:
            case LATIN_SMALL_LETTER_H:
            case LATIN_SMALL_LETTER_T:
            case LATIN_SMALL_LETTER_P:
            case LATIN_SMALL_LETTER_S:
            case LATIN_SMALL_LETTER_N:
            case LATIN_SMALL_LETTER_G:
            case LATIN_SMALL_LETTER_J:
            case LATIN_SMALL_LETTER_V:
            case LATIN_SMALL_LETTER_R:
            case LATIN_SMALL_LETTER_U:
            case LATIN_SMALL_LETTER_O:
            case LATIN_SMALL_LETTER_Y:
            case LATIN_SMALL_LETTER_M:
            case LATIN_SMALL_LETTER_K:
            case LATIN_SMALL_LETTER_Q:
            case LATIN_SMALL_LETTER_W:
            case LATIN_SMALL_LETTER_X:
            case LATIN_SMALL_LETTER_Z:
            case LATIN_CAPITAL_LETTER_G:
            case LATIN_CAPITAL_LETTER_H:
            case LATIN_CAPITAL_LETTER_I:
            case LATIN_CAPITAL_LETTER_J:
            case LATIN_CAPITAL_LETTER_K:
            case LATIN_CAPITAL_LETTER_L:
            case LATIN_CAPITAL_LETTER_M:
            case LATIN_CAPITAL_LETTER_N:
            case LATIN_CAPITAL_LETTER_O:
            case LATIN_CAPITAL_LETTER_P:
            case LATIN_CAPITAL_LETTER_Q:
            case LATIN_CAPITAL_LETTER_R:
            case LATIN_CAPITAL_LETTER_S:
            case LATIN_CAPITAL_LETTER_T:
            case LATIN_CAPITAL_LETTER_U:
            case LATIN_CAPITAL_LETTER_V:
            case LATIN_CAPITAL_LETTER_W:
            case LATIN_CAPITAL_LETTER_X:
            case LATIN_CAPITAL_LETTER_Y:
            case LATIN_CAPITAL_LETTER_Z:
                {
                alt350=2;
                }
                break;
            case DIGIT_0:
            case DIGIT_1:
            case DIGIT_2:
            case DIGIT_3:
            case DIGIT_4:
            case DIGIT_5:
            case DIGIT_6:
            case DIGIT_7:
            case DIGIT_8:
            case DIGIT_9:
                {
                alt350=3;
                }
                break;
            case HYPHEN_MINUS:
            case LOW_LINE:
            case FULL_STOP:
            case DOLLAR_SIGN:
            case PLUS_SIGN:
                {
                alt350=4;
                }
                break;
            case LEFT_PARENTHESIS:
            case RIGHT_PARENTHESIS:
            case COMMA:
            case EXCLAMATION_MARK:
            case APOSTROPHE:
            case ASTERISK:
                {
                alt350=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 350, 0, input);

                throw nvae;
            }

            switch (alt350) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1673:5: hexLetter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_hexLetter_in_urlUnreserved15341);
                    hexLetter671=hexLetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hexLetter671.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1674:5: nonHexLetter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonHexLetter_in_urlUnreserved15348);
                    nonHexLetter672=nonHexLetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonHexLetter672.getTree());

                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1675:5: digit
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_digit_in_urlUnreserved15354);
                    digit673=digit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, digit673.getTree());

                    }
                    break;
                case 4 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1676:5: urlSafe
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_urlSafe_in_urlUnreserved15361);
                    urlSafe674=urlSafe();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlSafe674.getTree());

                    }
                    break;
                case 5 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1677:5: urlExtra
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_urlExtra_in_urlUnreserved15368);
                    urlExtra675=urlExtra();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlExtra675.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlUnreserved"

    public static class urlUChar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlUChar"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1680:1: urlUChar : ( urlUnreserved | urlEscape );
    public final NovelangParser.urlUChar_return urlUChar() throws RecognitionException {
        NovelangParser.urlUChar_return retval = new NovelangParser.urlUChar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.urlUnreserved_return urlUnreserved676 = null;

        NovelangParser.urlEscape_return urlEscape677 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1681:3: ( urlUnreserved | urlEscape )
            int alt351=2;
            int LA351_0 = input.LA(1);

            if ( ((LA351_0>=LEFT_PARENTHESIS && LA351_0<=RIGHT_PARENTHESIS)||(LA351_0>=HYPHEN_MINUS && LA351_0<=LOW_LINE)||(LA351_0>=FULL_STOP && LA351_0<=COMMA)||LA351_0==EXCLAMATION_MARK||(LA351_0>=APOSTROPHE && LA351_0<=LATIN_SMALL_LETTER_S)||(LA351_0>=DOLLAR_SIGN && LA351_0<=ASTERISK)||(LA351_0>=LATIN_SMALL_LETTER_N && LA351_0<=LATIN_SMALL_LETTER_V)||(LA351_0>=LATIN_SMALL_LETTER_R && LA351_0<=LATIN_SMALL_LETTER_M)||(LA351_0>=DIGIT_0 && LA351_0<=LATIN_CAPITAL_LETTER_Z)) ) {
                alt351=1;
            }
            else if ( (LA351_0==PERCENT_SIGN) ) {
                alt351=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 351, 0, input);

                throw nvae;
            }
            switch (alt351) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1681:5: urlUnreserved
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_urlUnreserved_in_urlUChar15383);
                    urlUnreserved676=urlUnreserved();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlUnreserved676.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1682:5: urlEscape
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_urlEscape_in_urlUChar15389);
                    urlEscape677=urlEscape();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlEscape677.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlUChar"

    public static class urlXChar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlXChar"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1685:1: urlXChar : ( urlUnreserved | urlReserved | urlEscape );
    public final NovelangParser.urlXChar_return urlXChar() throws RecognitionException {
        NovelangParser.urlXChar_return retval = new NovelangParser.urlXChar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.urlUnreserved_return urlUnreserved678 = null;

        NovelangParser.urlReserved_return urlReserved679 = null;

        NovelangParser.urlEscape_return urlEscape680 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1686:3: ( urlUnreserved | urlReserved | urlEscape )
            int alt352=3;
            switch ( input.LA(1) ) {
            case LEFT_PARENTHESIS:
            case RIGHT_PARENTHESIS:
            case HYPHEN_MINUS:
            case LOW_LINE:
            case FULL_STOP:
            case COMMA:
            case EXCLAMATION_MARK:
            case APOSTROPHE:
            case LATIN_SMALL_LETTER_F:
            case LATIN_SMALL_LETTER_I:
            case LATIN_SMALL_LETTER_L:
            case LATIN_SMALL_LETTER_E:
            case LATIN_SMALL_LETTER_H:
            case LATIN_SMALL_LETTER_T:
            case LATIN_SMALL_LETTER_P:
            case LATIN_SMALL_LETTER_S:
            case DOLLAR_SIGN:
            case PLUS_SIGN:
            case ASTERISK:
            case LATIN_SMALL_LETTER_N:
            case LATIN_SMALL_LETTER_G:
            case LATIN_SMALL_LETTER_J:
            case LATIN_SMALL_LETTER_V:
            case LATIN_SMALL_LETTER_R:
            case LATIN_SMALL_LETTER_C:
            case LATIN_SMALL_LETTER_U:
            case LATIN_SMALL_LETTER_O:
            case LATIN_SMALL_LETTER_A:
            case LATIN_SMALL_LETTER_D:
            case LATIN_SMALL_LETTER_B:
            case LATIN_SMALL_LETTER_Y:
            case LATIN_SMALL_LETTER_M:
            case DIGIT_0:
            case DIGIT_1:
            case DIGIT_2:
            case DIGIT_3:
            case DIGIT_4:
            case DIGIT_5:
            case DIGIT_6:
            case DIGIT_7:
            case DIGIT_8:
            case DIGIT_9:
            case LATIN_CAPITAL_LETTER_A:
            case LATIN_CAPITAL_LETTER_B:
            case LATIN_CAPITAL_LETTER_C:
            case LATIN_CAPITAL_LETTER_D:
            case LATIN_CAPITAL_LETTER_E:
            case LATIN_CAPITAL_LETTER_F:
            case LATIN_SMALL_LETTER_K:
            case LATIN_SMALL_LETTER_Q:
            case LATIN_SMALL_LETTER_W:
            case LATIN_SMALL_LETTER_X:
            case LATIN_SMALL_LETTER_Z:
            case LATIN_CAPITAL_LETTER_G:
            case LATIN_CAPITAL_LETTER_H:
            case LATIN_CAPITAL_LETTER_I:
            case LATIN_CAPITAL_LETTER_J:
            case LATIN_CAPITAL_LETTER_K:
            case LATIN_CAPITAL_LETTER_L:
            case LATIN_CAPITAL_LETTER_M:
            case LATIN_CAPITAL_LETTER_N:
            case LATIN_CAPITAL_LETTER_O:
            case LATIN_CAPITAL_LETTER_P:
            case LATIN_CAPITAL_LETTER_Q:
            case LATIN_CAPITAL_LETTER_R:
            case LATIN_CAPITAL_LETTER_S:
            case LATIN_CAPITAL_LETTER_T:
            case LATIN_CAPITAL_LETTER_U:
            case LATIN_CAPITAL_LETTER_V:
            case LATIN_CAPITAL_LETTER_W:
            case LATIN_CAPITAL_LETTER_X:
            case LATIN_CAPITAL_LETTER_Y:
            case LATIN_CAPITAL_LETTER_Z:
                {
                alt352=1;
                }
                break;
            case COMMERCIAL_AT:
            case SOLIDUS:
            case QUESTION_MARK:
            case SEMICOLON:
            case COLON:
            case AMPERSAND:
            case EQUALS_SIGN:
                {
                alt352=2;
                }
                break;
            case PERCENT_SIGN:
                {
                alt352=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 352, 0, input);

                throw nvae;
            }

            switch (alt352) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1686:5: urlUnreserved
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_urlUnreserved_in_urlXChar15404);
                    urlUnreserved678=urlUnreserved();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlUnreserved678.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1687:5: urlReserved
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_urlReserved_in_urlXChar15410);
                    urlReserved679=urlReserved();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlReserved679.getTree());

                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1688:5: urlEscape
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_urlEscape_in_urlXChar15416);
                    urlEscape680=urlEscape();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, urlEscape680.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlXChar"

    public static class embeddableResource_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "embeddableResource"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1696:1: embeddableResource : externalResourcePath ( ( rasterImageExtension -> ^( RASTER_IMAGE ) ) | ( vectorImageExtension -> ^( VECTOR_IMAGE ) ) ) ;
    public final NovelangParser.embeddableResource_return embeddableResource() throws RecognitionException {
        NovelangParser.embeddableResource_return retval = new NovelangParser.embeddableResource_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.externalResourcePath_return externalResourcePath681 = null;

        NovelangParser.rasterImageExtension_return rasterImageExtension682 = null;

        NovelangParser.vectorImageExtension_return vectorImageExtension683 = null;


        RewriteRuleSubtreeStream stream_vectorImageExtension=new RewriteRuleSubtreeStream(adaptor,"rule vectorImageExtension");
        RewriteRuleSubtreeStream stream_rasterImageExtension=new RewriteRuleSubtreeStream(adaptor,"rule rasterImageExtension");
        RewriteRuleSubtreeStream stream_externalResourcePath=new RewriteRuleSubtreeStream(adaptor,"rule externalResourcePath");
         final Location startLocation = delegate.createLocation( input.LT( 1 ) ) ; 
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1698:3: ( externalResourcePath ( ( rasterImageExtension -> ^( RASTER_IMAGE ) ) | ( vectorImageExtension -> ^( VECTOR_IMAGE ) ) ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1698:5: externalResourcePath ( ( rasterImageExtension -> ^( RASTER_IMAGE ) ) | ( vectorImageExtension -> ^( VECTOR_IMAGE ) ) )
            {
            pushFollow(FOLLOW_externalResourcePath_in_embeddableResource15441);
            externalResourcePath681=externalResourcePath();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_externalResourcePath.add(externalResourcePath681.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1699:5: ( ( rasterImageExtension -> ^( RASTER_IMAGE ) ) | ( vectorImageExtension -> ^( VECTOR_IMAGE ) ) )
            int alt353=2;
            int LA353_0 = input.LA(1);

            if ( (LA353_0==FULL_STOP) ) {
                int LA353_1 = input.LA(2);

                if ( (LA353_1==LATIN_SMALL_LETTER_S) ) {
                    alt353=2;
                }
                else if ( (LA353_1==LATIN_SMALL_LETTER_P||(LA353_1>=LATIN_SMALL_LETTER_G && LA353_1<=LATIN_SMALL_LETTER_J)) ) {
                    alt353=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 353, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 353, 0, input);

                throw nvae;
            }
            switch (alt353) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1699:10: ( rasterImageExtension -> ^( RASTER_IMAGE ) )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1699:10: ( rasterImageExtension -> ^( RASTER_IMAGE ) )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1699:12: rasterImageExtension
                    {
                    pushFollow(FOLLOW_rasterImageExtension_in_embeddableResource15455);
                    rasterImageExtension682=rasterImageExtension();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rasterImageExtension.add(rasterImageExtension682.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1700:11: -> ^( RASTER_IMAGE )
                    {
                        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1700:14: ^( RASTER_IMAGE )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RASTER_IMAGE, "RASTER_IMAGE"), root_1);

                        adaptor.addChild(root_1,  delegate.createTree(
                                              RESOURCE_LOCATION,
                                              startLocation,
                                              (externalResourcePath681!=null?input.toString(externalResourcePath681.start,externalResourcePath681.stop):null) + (rasterImageExtension682!=null?input.toString(rasterImageExtension682.start,rasterImageExtension682.stop):null) 
                                          ) );

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1707:10: ( vectorImageExtension -> ^( VECTOR_IMAGE ) )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1707:10: ( vectorImageExtension -> ^( VECTOR_IMAGE ) )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1707:12: vectorImageExtension
                    {
                    pushFollow(FOLLOW_vectorImageExtension_in_embeddableResource15513);
                    vectorImageExtension683=vectorImageExtension();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_vectorImageExtension.add(vectorImageExtension683.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1708:11: -> ^( VECTOR_IMAGE )
                    {
                        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1708:14: ^( VECTOR_IMAGE )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VECTOR_IMAGE, "VECTOR_IMAGE"), root_1);

                        adaptor.addChild(root_1,  delegate.createTree(
                                              RESOURCE_LOCATION,
                                              startLocation,
                                              (externalResourcePath681!=null?input.toString(externalResourcePath681.start,externalResourcePath681.stop):null) + (vectorImageExtension683!=null?input.toString(vectorImageExtension683.start,vectorImageExtension683.stop):null)
                                          ) );

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "embeddableResource"

    public static class externalResourcePath_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "externalResourcePath"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1718:1: externalResourcePath : ( FULL_STOP ( FULL_STOP ( SOLIDUS FULL_STOP FULL_STOP )* )? )? SOLIDUS externalResourceSegment ( SOLIDUS externalResourceSegment )* ;
    public final NovelangParser.externalResourcePath_return externalResourcePath() throws RecognitionException {
        NovelangParser.externalResourcePath_return retval = new NovelangParser.externalResourcePath_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FULL_STOP684=null;
        Token FULL_STOP685=null;
        Token SOLIDUS686=null;
        Token FULL_STOP687=null;
        Token FULL_STOP688=null;
        Token SOLIDUS689=null;
        Token SOLIDUS691=null;
        NovelangParser.externalResourceSegment_return externalResourceSegment690 = null;

        NovelangParser.externalResourceSegment_return externalResourceSegment692 = null;


        Object FULL_STOP684_tree=null;
        Object FULL_STOP685_tree=null;
        Object SOLIDUS686_tree=null;
        Object FULL_STOP687_tree=null;
        Object FULL_STOP688_tree=null;
        Object SOLIDUS689_tree=null;
        Object SOLIDUS691_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1719:3: ( ( FULL_STOP ( FULL_STOP ( SOLIDUS FULL_STOP FULL_STOP )* )? )? SOLIDUS externalResourceSegment ( SOLIDUS externalResourceSegment )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1720:5: ( FULL_STOP ( FULL_STOP ( SOLIDUS FULL_STOP FULL_STOP )* )? )? SOLIDUS externalResourceSegment ( SOLIDUS externalResourceSegment )*
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1720:5: ( FULL_STOP ( FULL_STOP ( SOLIDUS FULL_STOP FULL_STOP )* )? )?
            int alt356=2;
            int LA356_0 = input.LA(1);

            if ( (LA356_0==FULL_STOP) ) {
                alt356=1;
            }
            switch (alt356) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1720:7: FULL_STOP ( FULL_STOP ( SOLIDUS FULL_STOP FULL_STOP )* )?
                    {
                    FULL_STOP684=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_externalResourcePath15585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL_STOP684_tree = (Object)adaptor.create(FULL_STOP684);
                    adaptor.addChild(root_0, FULL_STOP684_tree);
                    }
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1720:17: ( FULL_STOP ( SOLIDUS FULL_STOP FULL_STOP )* )?
                    int alt355=2;
                    int LA355_0 = input.LA(1);

                    if ( (LA355_0==FULL_STOP) ) {
                        alt355=1;
                    }
                    switch (alt355) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1720:19: FULL_STOP ( SOLIDUS FULL_STOP FULL_STOP )*
                            {
                            FULL_STOP685=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_externalResourcePath15589); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            FULL_STOP685_tree = (Object)adaptor.create(FULL_STOP685);
                            adaptor.addChild(root_0, FULL_STOP685_tree);
                            }
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1720:29: ( SOLIDUS FULL_STOP FULL_STOP )*
                            loop354:
                            do {
                                int alt354=2;
                                int LA354_0 = input.LA(1);

                                if ( (LA354_0==SOLIDUS) ) {
                                    int LA354_1 = input.LA(2);

                                    if ( (LA354_1==FULL_STOP) ) {
                                        alt354=1;
                                    }


                                }


                                switch (alt354) {
                            	case 1 :
                            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1720:31: SOLIDUS FULL_STOP FULL_STOP
                            	    {
                            	    SOLIDUS686=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_externalResourcePath15593); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    SOLIDUS686_tree = (Object)adaptor.create(SOLIDUS686);
                            	    adaptor.addChild(root_0, SOLIDUS686_tree);
                            	    }
                            	    FULL_STOP687=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_externalResourcePath15595); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    FULL_STOP687_tree = (Object)adaptor.create(FULL_STOP687);
                            	    adaptor.addChild(root_0, FULL_STOP687_tree);
                            	    }
                            	    FULL_STOP688=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_externalResourcePath15597); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    FULL_STOP688_tree = (Object)adaptor.create(FULL_STOP688);
                            	    adaptor.addChild(root_0, FULL_STOP688_tree);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop354;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            SOLIDUS689=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_externalResourcePath15608); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SOLIDUS689_tree = (Object)adaptor.create(SOLIDUS689);
            adaptor.addChild(root_0, SOLIDUS689_tree);
            }
            pushFollow(FOLLOW_externalResourceSegment_in_externalResourcePath15614);
            externalResourceSegment690=externalResourceSegment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, externalResourceSegment690.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1721:29: ( SOLIDUS externalResourceSegment )*
            loop357:
            do {
                int alt357=2;
                int LA357_0 = input.LA(1);

                if ( (LA357_0==SOLIDUS) ) {
                    alt357=1;
                }


                switch (alt357) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1721:31: SOLIDUS externalResourceSegment
            	    {
            	    SOLIDUS691=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_externalResourcePath15618); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SOLIDUS691_tree = (Object)adaptor.create(SOLIDUS691);
            	    adaptor.addChild(root_0, SOLIDUS691_tree);
            	    }
            	    pushFollow(FOLLOW_externalResourceSegment_in_externalResourcePath15620);
            	    externalResourceSegment692=externalResourceSegment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, externalResourceSegment692.getTree());

            	    }
            	    break;

            	default :
            	    break loop357;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "externalResourcePath"

    public static class externalResourceSegment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "externalResourceSegment"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1724:1: externalResourceSegment : ( externalResourceCharacter ( FULL_STOP ( FULL_STOP )? )? )* externalResourceCharacter ;
    public final NovelangParser.externalResourceSegment_return externalResourceSegment() throws RecognitionException {
        NovelangParser.externalResourceSegment_return retval = new NovelangParser.externalResourceSegment_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FULL_STOP694=null;
        Token FULL_STOP695=null;
        NovelangParser.externalResourceCharacter_return externalResourceCharacter693 = null;

        NovelangParser.externalResourceCharacter_return externalResourceCharacter696 = null;


        Object FULL_STOP694_tree=null;
        Object FULL_STOP695_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1725:3: ( ( externalResourceCharacter ( FULL_STOP ( FULL_STOP )? )? )* externalResourceCharacter )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1725:5: ( externalResourceCharacter ( FULL_STOP ( FULL_STOP )? )? )* externalResourceCharacter
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1725:5: ( externalResourceCharacter ( FULL_STOP ( FULL_STOP )? )? )*
            loop360:
            do {
                int alt360=2;
                alt360 = dfa360.predict(input);
                switch (alt360) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1725:9: externalResourceCharacter ( FULL_STOP ( FULL_STOP )? )?
            	    {
            	    pushFollow(FOLLOW_externalResourceCharacter_in_externalResourceSegment15642);
            	    externalResourceCharacter693=externalResourceCharacter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, externalResourceCharacter693.getTree());
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1726:9: ( FULL_STOP ( FULL_STOP )? )?
            	    int alt359=2;
            	    int LA359_0 = input.LA(1);

            	    if ( (LA359_0==FULL_STOP) ) {
            	        alt359=1;
            	    }
            	    switch (alt359) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1726:11: FULL_STOP ( FULL_STOP )?
            	            {
            	            FULL_STOP694=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_externalResourceSegment15654); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            FULL_STOP694_tree = (Object)adaptor.create(FULL_STOP694);
            	            adaptor.addChild(root_0, FULL_STOP694_tree);
            	            }
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1726:21: ( FULL_STOP )?
            	            int alt358=2;
            	            int LA358_0 = input.LA(1);

            	            if ( (LA358_0==FULL_STOP) ) {
            	                alt358=1;
            	            }
            	            switch (alt358) {
            	                case 1 :
            	                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1726:21: FULL_STOP
            	                    {
            	                    FULL_STOP695=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_externalResourceSegment15656); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    FULL_STOP695_tree = (Object)adaptor.create(FULL_STOP695);
            	                    adaptor.addChild(root_0, FULL_STOP695_tree);
            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop360;
                }
            } while (true);

            pushFollow(FOLLOW_externalResourceCharacter_in_externalResourceSegment15673);
            externalResourceCharacter696=externalResourceCharacter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, externalResourceCharacter696.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "externalResourceSegment"

    public static class externalResourceCharacter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "externalResourceCharacter"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1731:1: externalResourceCharacter : ( letter | digit | HYPHEN_MINUS | EQUALS_SIGN | PLUS_SIGN | PERCENT_SIGN | COMMA | COMMERCIAL_AT | LOW_LINE | DOLLAR_SIGN );
    public final NovelangParser.externalResourceCharacter_return externalResourceCharacter() throws RecognitionException {
        NovelangParser.externalResourceCharacter_return retval = new NovelangParser.externalResourceCharacter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token HYPHEN_MINUS699=null;
        Token EQUALS_SIGN700=null;
        Token PLUS_SIGN701=null;
        Token PERCENT_SIGN702=null;
        Token COMMA703=null;
        Token COMMERCIAL_AT704=null;
        Token LOW_LINE705=null;
        Token DOLLAR_SIGN706=null;
        NovelangParser.letter_return letter697 = null;

        NovelangParser.digit_return digit698 = null;


        Object HYPHEN_MINUS699_tree=null;
        Object EQUALS_SIGN700_tree=null;
        Object PLUS_SIGN701_tree=null;
        Object PERCENT_SIGN702_tree=null;
        Object COMMA703_tree=null;
        Object COMMERCIAL_AT704_tree=null;
        Object LOW_LINE705_tree=null;
        Object DOLLAR_SIGN706_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1732:3: ( letter | digit | HYPHEN_MINUS | EQUALS_SIGN | PLUS_SIGN | PERCENT_SIGN | COMMA | COMMERCIAL_AT | LOW_LINE | DOLLAR_SIGN )
            int alt361=10;
            switch ( input.LA(1) ) {
            case LATIN_SMALL_LETTER_F:
            case LATIN_SMALL_LETTER_I:
            case LATIN_SMALL_LETTER_L:
            case LATIN_SMALL_LETTER_E:
            case LATIN_SMALL_LETTER_H:
            case LATIN_SMALL_LETTER_T:
            case LATIN_SMALL_LETTER_P:
            case LATIN_SMALL_LETTER_S:
            case LATIN_SMALL_LETTER_N:
            case LATIN_SMALL_LETTER_G:
            case LATIN_SMALL_LETTER_J:
            case LATIN_SMALL_LETTER_V:
            case LATIN_SMALL_LETTER_R:
            case LATIN_SMALL_LETTER_C:
            case LATIN_SMALL_LETTER_U:
            case LATIN_SMALL_LETTER_O:
            case LATIN_SMALL_LETTER_A:
            case LATIN_SMALL_LETTER_D:
            case LATIN_SMALL_LETTER_B:
            case LATIN_SMALL_LETTER_Y:
            case LATIN_SMALL_LETTER_M:
            case LATIN_CAPITAL_LETTER_A:
            case LATIN_CAPITAL_LETTER_B:
            case LATIN_CAPITAL_LETTER_C:
            case LATIN_CAPITAL_LETTER_D:
            case LATIN_CAPITAL_LETTER_E:
            case LATIN_CAPITAL_LETTER_F:
            case LATIN_SMALL_LETTER_K:
            case LATIN_SMALL_LETTER_Q:
            case LATIN_SMALL_LETTER_W:
            case LATIN_SMALL_LETTER_X:
            case LATIN_SMALL_LETTER_Z:
            case LATIN_CAPITAL_LETTER_G:
            case LATIN_CAPITAL_LETTER_H:
            case LATIN_CAPITAL_LETTER_I:
            case LATIN_CAPITAL_LETTER_J:
            case LATIN_CAPITAL_LETTER_K:
            case LATIN_CAPITAL_LETTER_L:
            case LATIN_CAPITAL_LETTER_M:
            case LATIN_CAPITAL_LETTER_N:
            case LATIN_CAPITAL_LETTER_O:
            case LATIN_CAPITAL_LETTER_P:
            case LATIN_CAPITAL_LETTER_Q:
            case LATIN_CAPITAL_LETTER_R:
            case LATIN_CAPITAL_LETTER_S:
            case LATIN_CAPITAL_LETTER_T:
            case LATIN_CAPITAL_LETTER_U:
            case LATIN_CAPITAL_LETTER_V:
            case LATIN_CAPITAL_LETTER_W:
            case LATIN_CAPITAL_LETTER_X:
            case LATIN_CAPITAL_LETTER_Y:
            case LATIN_CAPITAL_LETTER_Z:
            case LATIN_SMALL_LETTER_A_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
            case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_A_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
            case LATIN_SMALL_LETTER_AE:
            case LATIN_CAPITAL_LETTER_AE:
            case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
            case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
            case LATIN_SMALL_LETTER_E_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
            case LATIN_SMALL_LETTER_E_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
            case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_I_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
            case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_O_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
            case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
            case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
            case LATIN_SMALL_LETTER_U_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
            case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_U_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
            case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
            case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
            case LATIN_SMALL_LIGATURE_OE:
            case LATIN_CAPITAL_LIGATURE_OE:
                {
                alt361=1;
                }
                break;
            case DIGIT_0:
            case DIGIT_1:
            case DIGIT_2:
            case DIGIT_3:
            case DIGIT_4:
            case DIGIT_5:
            case DIGIT_6:
            case DIGIT_7:
            case DIGIT_8:
            case DIGIT_9:
                {
                alt361=2;
                }
                break;
            case HYPHEN_MINUS:
                {
                alt361=3;
                }
                break;
            case EQUALS_SIGN:
                {
                alt361=4;
                }
                break;
            case PLUS_SIGN:
                {
                alt361=5;
                }
                break;
            case PERCENT_SIGN:
                {
                alt361=6;
                }
                break;
            case COMMA:
                {
                alt361=7;
                }
                break;
            case COMMERCIAL_AT:
                {
                alt361=8;
                }
                break;
            case LOW_LINE:
                {
                alt361=9;
                }
                break;
            case DOLLAR_SIGN:
                {
                alt361=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 361, 0, input);

                throw nvae;
            }

            switch (alt361) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1732:5: letter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_letter_in_externalResourceCharacter15704);
                    letter697=letter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, letter697.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1733:5: digit
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_digit_in_externalResourceCharacter15710);
                    digit698=digit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, digit698.getTree());

                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1734:5: HYPHEN_MINUS
                    {
                    root_0 = (Object)adaptor.nil();

                    HYPHEN_MINUS699=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_externalResourceCharacter15716); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HYPHEN_MINUS699_tree = (Object)adaptor.create(HYPHEN_MINUS699);
                    adaptor.addChild(root_0, HYPHEN_MINUS699_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1735:5: EQUALS_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    EQUALS_SIGN700=(Token)match(input,EQUALS_SIGN,FOLLOW_EQUALS_SIGN_in_externalResourceCharacter15722); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_SIGN700_tree = (Object)adaptor.create(EQUALS_SIGN700);
                    adaptor.addChild(root_0, EQUALS_SIGN700_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1736:5: PLUS_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    PLUS_SIGN701=(Token)match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_externalResourceCharacter15728); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS_SIGN701_tree = (Object)adaptor.create(PLUS_SIGN701);
                    adaptor.addChild(root_0, PLUS_SIGN701_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1737:5: PERCENT_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    PERCENT_SIGN702=(Token)match(input,PERCENT_SIGN,FOLLOW_PERCENT_SIGN_in_externalResourceCharacter15734); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PERCENT_SIGN702_tree = (Object)adaptor.create(PERCENT_SIGN702);
                    adaptor.addChild(root_0, PERCENT_SIGN702_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1738:5: COMMA
                    {
                    root_0 = (Object)adaptor.nil();

                    COMMA703=(Token)match(input,COMMA,FOLLOW_COMMA_in_externalResourceCharacter15740); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA703_tree = (Object)adaptor.create(COMMA703);
                    adaptor.addChild(root_0, COMMA703_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1739:5: COMMERCIAL_AT
                    {
                    root_0 = (Object)adaptor.nil();

                    COMMERCIAL_AT704=(Token)match(input,COMMERCIAL_AT,FOLLOW_COMMERCIAL_AT_in_externalResourceCharacter15746); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMERCIAL_AT704_tree = (Object)adaptor.create(COMMERCIAL_AT704);
                    adaptor.addChild(root_0, COMMERCIAL_AT704_tree);
                    }

                    }
                    break;
                case 9 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1740:5: LOW_LINE
                    {
                    root_0 = (Object)adaptor.nil();

                    LOW_LINE705=(Token)match(input,LOW_LINE,FOLLOW_LOW_LINE_in_externalResourceCharacter15752); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOW_LINE705_tree = (Object)adaptor.create(LOW_LINE705);
                    adaptor.addChild(root_0, LOW_LINE705_tree);
                    }

                    }
                    break;
                case 10 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1741:5: DOLLAR_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    DOLLAR_SIGN706=(Token)match(input,DOLLAR_SIGN,FOLLOW_DOLLAR_SIGN_in_externalResourceCharacter15758); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR_SIGN706_tree = (Object)adaptor.create(DOLLAR_SIGN706);
                    adaptor.addChild(root_0, DOLLAR_SIGN706_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "externalResourceCharacter"

    public static class rasterImageExtension_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rasterImageExtension"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1744:1: rasterImageExtension : FULL_STOP ( ( LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_N LATIN_SMALL_LETTER_G ) | ( LATIN_SMALL_LETTER_J LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_G ) | ( LATIN_SMALL_LETTER_G LATIN_SMALL_LETTER_I LATIN_SMALL_LETTER_F ) ) ;
    public final NovelangParser.rasterImageExtension_return rasterImageExtension() throws RecognitionException {
        NovelangParser.rasterImageExtension_return retval = new NovelangParser.rasterImageExtension_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FULL_STOP707=null;
        Token LATIN_SMALL_LETTER_P708=null;
        Token LATIN_SMALL_LETTER_N709=null;
        Token LATIN_SMALL_LETTER_G710=null;
        Token LATIN_SMALL_LETTER_J711=null;
        Token LATIN_SMALL_LETTER_P712=null;
        Token LATIN_SMALL_LETTER_G713=null;
        Token LATIN_SMALL_LETTER_G714=null;
        Token LATIN_SMALL_LETTER_I715=null;
        Token LATIN_SMALL_LETTER_F716=null;

        Object FULL_STOP707_tree=null;
        Object LATIN_SMALL_LETTER_P708_tree=null;
        Object LATIN_SMALL_LETTER_N709_tree=null;
        Object LATIN_SMALL_LETTER_G710_tree=null;
        Object LATIN_SMALL_LETTER_J711_tree=null;
        Object LATIN_SMALL_LETTER_P712_tree=null;
        Object LATIN_SMALL_LETTER_G713_tree=null;
        Object LATIN_SMALL_LETTER_G714_tree=null;
        Object LATIN_SMALL_LETTER_I715_tree=null;
        Object LATIN_SMALL_LETTER_F716_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1745:3: ( FULL_STOP ( ( LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_N LATIN_SMALL_LETTER_G ) | ( LATIN_SMALL_LETTER_J LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_G ) | ( LATIN_SMALL_LETTER_G LATIN_SMALL_LETTER_I LATIN_SMALL_LETTER_F ) ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1745:5: FULL_STOP ( ( LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_N LATIN_SMALL_LETTER_G ) | ( LATIN_SMALL_LETTER_J LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_G ) | ( LATIN_SMALL_LETTER_G LATIN_SMALL_LETTER_I LATIN_SMALL_LETTER_F ) )
            {
            root_0 = (Object)adaptor.nil();

            FULL_STOP707=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_rasterImageExtension15771); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FULL_STOP707_tree = (Object)adaptor.create(FULL_STOP707);
            adaptor.addChild(root_0, FULL_STOP707_tree);
            }
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1745:15: ( ( LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_N LATIN_SMALL_LETTER_G ) | ( LATIN_SMALL_LETTER_J LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_G ) | ( LATIN_SMALL_LETTER_G LATIN_SMALL_LETTER_I LATIN_SMALL_LETTER_F ) )
            int alt362=3;
            switch ( input.LA(1) ) {
            case LATIN_SMALL_LETTER_P:
                {
                alt362=1;
                }
                break;
            case LATIN_SMALL_LETTER_J:
                {
                alt362=2;
                }
                break;
            case LATIN_SMALL_LETTER_G:
                {
                alt362=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 362, 0, input);

                throw nvae;
            }

            switch (alt362) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1746:9: ( LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_N LATIN_SMALL_LETTER_G )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1746:9: ( LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_N LATIN_SMALL_LETTER_G )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1746:11: LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_N LATIN_SMALL_LETTER_G
                    {
                    LATIN_SMALL_LETTER_P708=(Token)match(input,LATIN_SMALL_LETTER_P,FOLLOW_LATIN_SMALL_LETTER_P_in_rasterImageExtension15786); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LATIN_SMALL_LETTER_P708_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_P708);
                    adaptor.addChild(root_0, LATIN_SMALL_LETTER_P708_tree);
                    }
                    LATIN_SMALL_LETTER_N709=(Token)match(input,LATIN_SMALL_LETTER_N,FOLLOW_LATIN_SMALL_LETTER_N_in_rasterImageExtension15788); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LATIN_SMALL_LETTER_N709_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_N709);
                    adaptor.addChild(root_0, LATIN_SMALL_LETTER_N709_tree);
                    }
                    LATIN_SMALL_LETTER_G710=(Token)match(input,LATIN_SMALL_LETTER_G,FOLLOW_LATIN_SMALL_LETTER_G_in_rasterImageExtension15790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LATIN_SMALL_LETTER_G710_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_G710);
                    adaptor.addChild(root_0, LATIN_SMALL_LETTER_G710_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1747:9: ( LATIN_SMALL_LETTER_J LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_G )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1747:9: ( LATIN_SMALL_LETTER_J LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_G )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1747:11: LATIN_SMALL_LETTER_J LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_G
                    {
                    LATIN_SMALL_LETTER_J711=(Token)match(input,LATIN_SMALL_LETTER_J,FOLLOW_LATIN_SMALL_LETTER_J_in_rasterImageExtension15804); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LATIN_SMALL_LETTER_J711_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_J711);
                    adaptor.addChild(root_0, LATIN_SMALL_LETTER_J711_tree);
                    }
                    LATIN_SMALL_LETTER_P712=(Token)match(input,LATIN_SMALL_LETTER_P,FOLLOW_LATIN_SMALL_LETTER_P_in_rasterImageExtension15806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LATIN_SMALL_LETTER_P712_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_P712);
                    adaptor.addChild(root_0, LATIN_SMALL_LETTER_P712_tree);
                    }
                    LATIN_SMALL_LETTER_G713=(Token)match(input,LATIN_SMALL_LETTER_G,FOLLOW_LATIN_SMALL_LETTER_G_in_rasterImageExtension15808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LATIN_SMALL_LETTER_G713_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_G713);
                    adaptor.addChild(root_0, LATIN_SMALL_LETTER_G713_tree);
                    }

                    }


                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1748:9: ( LATIN_SMALL_LETTER_G LATIN_SMALL_LETTER_I LATIN_SMALL_LETTER_F )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1748:9: ( LATIN_SMALL_LETTER_G LATIN_SMALL_LETTER_I LATIN_SMALL_LETTER_F )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1748:11: LATIN_SMALL_LETTER_G LATIN_SMALL_LETTER_I LATIN_SMALL_LETTER_F
                    {
                    LATIN_SMALL_LETTER_G714=(Token)match(input,LATIN_SMALL_LETTER_G,FOLLOW_LATIN_SMALL_LETTER_G_in_rasterImageExtension15822); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LATIN_SMALL_LETTER_G714_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_G714);
                    adaptor.addChild(root_0, LATIN_SMALL_LETTER_G714_tree);
                    }
                    LATIN_SMALL_LETTER_I715=(Token)match(input,LATIN_SMALL_LETTER_I,FOLLOW_LATIN_SMALL_LETTER_I_in_rasterImageExtension15824); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LATIN_SMALL_LETTER_I715_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_I715);
                    adaptor.addChild(root_0, LATIN_SMALL_LETTER_I715_tree);
                    }
                    LATIN_SMALL_LETTER_F716=(Token)match(input,LATIN_SMALL_LETTER_F,FOLLOW_LATIN_SMALL_LETTER_F_in_rasterImageExtension15826); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LATIN_SMALL_LETTER_F716_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_F716);
                    adaptor.addChild(root_0, LATIN_SMALL_LETTER_F716_tree);
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rasterImageExtension"

    public static class vectorImageExtension_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vectorImageExtension"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1753:1: vectorImageExtension : FULL_STOP ( ( LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_G ) ) ;
    public final NovelangParser.vectorImageExtension_return vectorImageExtension() throws RecognitionException {
        NovelangParser.vectorImageExtension_return retval = new NovelangParser.vectorImageExtension_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FULL_STOP717=null;
        Token LATIN_SMALL_LETTER_S718=null;
        Token LATIN_SMALL_LETTER_V719=null;
        Token LATIN_SMALL_LETTER_G720=null;

        Object FULL_STOP717_tree=null;
        Object LATIN_SMALL_LETTER_S718_tree=null;
        Object LATIN_SMALL_LETTER_V719_tree=null;
        Object LATIN_SMALL_LETTER_G720_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1754:3: ( FULL_STOP ( ( LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_G ) ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1754:5: FULL_STOP ( ( LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_G ) )
            {
            root_0 = (Object)adaptor.nil();

            FULL_STOP717=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_vectorImageExtension15856); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FULL_STOP717_tree = (Object)adaptor.create(FULL_STOP717);
            adaptor.addChild(root_0, FULL_STOP717_tree);
            }
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1754:15: ( ( LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_G ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1755:9: ( LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_G )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1755:9: ( LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_G )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1755:11: LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_G
            {
            LATIN_SMALL_LETTER_S718=(Token)match(input,LATIN_SMALL_LETTER_S,FOLLOW_LATIN_SMALL_LETTER_S_in_vectorImageExtension15871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_S718_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_S718);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_S718_tree);
            }
            LATIN_SMALL_LETTER_V719=(Token)match(input,LATIN_SMALL_LETTER_V,FOLLOW_LATIN_SMALL_LETTER_V_in_vectorImageExtension15873); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_V719_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_V719);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_V719_tree);
            }
            LATIN_SMALL_LETTER_G720=(Token)match(input,LATIN_SMALL_LETTER_G,FOLLOW_LATIN_SMALL_LETTER_G_in_vectorImageExtension15875); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_G720_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_G720);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_G720_tree);
            }

            }


            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vectorImageExtension"

    public static class blockAfterTilde_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockAfterTilde"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1765:1: blockAfterTilde : ( TILDE b+= subblockAfterTilde )+ -> ^( BLOCK_AFTER_TILDE ( $b)+ ) ;
    public final NovelangParser.blockAfterTilde_return blockAfterTilde() throws RecognitionException {
        NovelangParser.blockAfterTilde_return retval = new NovelangParser.blockAfterTilde_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TILDE721=null;
        List list_b=null;
        RuleReturnScope b = null;
        Object TILDE721_tree=null;
        RewriteRuleTokenStream stream_TILDE=new RewriteRuleTokenStream(adaptor,"token TILDE");
        RewriteRuleSubtreeStream stream_subblockAfterTilde=new RewriteRuleSubtreeStream(adaptor,"rule subblockAfterTilde");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1766:3: ( ( TILDE b+= subblockAfterTilde )+ -> ^( BLOCK_AFTER_TILDE ( $b)+ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1766:5: ( TILDE b+= subblockAfterTilde )+
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1766:5: ( TILDE b+= subblockAfterTilde )+
            int cnt363=0;
            loop363:
            do {
                int alt363=2;
                int LA363_0 = input.LA(1);

                if ( (LA363_0==TILDE) ) {
                    alt363=1;
                }


                switch (alt363) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1767:7: TILDE b+= subblockAfterTilde
            	    {
            	    TILDE721=(Token)match(input,TILDE,FOLLOW_TILDE_in_blockAfterTilde15919); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_TILDE.add(TILDE721);

            	    pushFollow(FOLLOW_subblockAfterTilde_in_blockAfterTilde15932);
            	    b=subblockAfterTilde();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_subblockAfterTilde.add(b.getTree());
            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt363 >= 1 ) break loop363;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(363, input);
                        throw eee;
                }
                cnt363++;
            } while (true);



            // AST REWRITE
            // elements: b
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: b
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (Object)adaptor.nil();
            // 1769:7: -> ^( BLOCK_AFTER_TILDE ( $b)+ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1769:10: ^( BLOCK_AFTER_TILDE ( $b)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK_AFTER_TILDE, "BLOCK_AFTER_TILDE"), root_1);

                if ( !(stream_b.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "blockAfterTilde"

    public static class subblockAfterTilde_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subblockAfterTilde"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1772:1: subblockAfterTilde : ( (s+= word ( (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) (s+= word )? )* ) | ( (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) ( (s+= word )? (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) )* (s+= word )? ) ) -> ^( SUBBLOCK ( $s)+ ) ;
    public final NovelangParser.subblockAfterTilde_return subblockAfterTilde() throws RecognitionException {
        NovelangParser.subblockAfterTilde_return retval = new NovelangParser.subblockAfterTilde_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        List list_s=null;
        RuleReturnScope s = null;
        RewriteRuleSubtreeStream stream_delimitedMonoblockNoSeparator=new RewriteRuleSubtreeStream(adaptor,"rule delimitedMonoblockNoSeparator");
        RewriteRuleSubtreeStream stream_softInlineLiteral=new RewriteRuleSubtreeStream(adaptor,"rule softInlineLiteral");
        RewriteRuleSubtreeStream stream_hardInlineLiteral=new RewriteRuleSubtreeStream(adaptor,"rule hardInlineLiteral");
        RewriteRuleSubtreeStream stream_word=new RewriteRuleSubtreeStream(adaptor,"rule word");
        RewriteRuleSubtreeStream stream_punctuationSign=new RewriteRuleSubtreeStream(adaptor,"rule punctuationSign");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1773:3: ( ( (s+= word ( (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) (s+= word )? )* ) | ( (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) ( (s+= word )? (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) )* (s+= word )? ) ) -> ^( SUBBLOCK ( $s)+ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1773:5: ( (s+= word ( (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) (s+= word )? )* ) | ( (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) ( (s+= word )? (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) )* (s+= word )? ) )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1773:5: ( (s+= word ( (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) (s+= word )? )* ) | ( (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) ( (s+= word )? (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) )* (s+= word )? ) )
            int alt372=2;
            int LA372_0 = input.LA(1);

            if ( ((LA372_0>=LATIN_SMALL_LETTER_F && LA372_0<=LATIN_SMALL_LETTER_S)||(LA372_0>=LATIN_SMALL_LETTER_N && LA372_0<=LATIN_SMALL_LETTER_V)||LA372_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA372_0>=LATIN_SMALL_LETTER_R && LA372_0<=LATIN_SMALL_LETTER_M)||(LA372_0>=DIGIT_0 && LA372_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                alt372=1;
            }
            else if ( (LA372_0==LEFT_PARENTHESIS||LA372_0==SOLIDUS||(LA372_0>=GRAVE_ACCENT && LA372_0<=APOSTROPHE)) ) {
                alt372=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 372, 0, input);

                throw nvae;
            }
            switch (alt372) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1774:6: (s+= word ( (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) (s+= word )? )* )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1774:6: (s+= word ( (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) (s+= word )? )* )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1774:9: s+= word ( (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) (s+= word )? )*
                    {
                    pushFollow(FOLLOW_word_in_subblockAfterTilde15982);
                    s=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_word.add(s.getTree());
                    if (list_s==null) list_s=new ArrayList();
                    list_s.add(s.getTree());

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1775:8: ( (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) (s+= word )? )*
                    loop366:
                    do {
                        int alt366=2;
                        int LA366_0 = input.LA(1);

                        if ( (LA366_0==LEFT_PARENTHESIS||LA366_0==SOLIDUS||(LA366_0>=GRAVE_ACCENT && LA366_0<=APOSTROPHE)) ) {
                            alt366=1;
                        }


                        switch (alt366) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1775:10: (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) (s+= word )?
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1775:10: (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral )
                    	    int alt364=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt364=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case SOLIDUS:
                    	        {
                    	        alt364=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA364_3 = input.LA(2);

                    	        if ( (LA364_3==GRAVE_ACCENT) ) {
                    	            alt364=4;
                    	        }
                    	        else if ( ((LA364_3>=COMMERCIAL_AT && LA364_3<=WHITESPACE)||(LA364_3>=VERTICAL_LINE && LA364_3<=GREATER_THAN_SIGN)||(LA364_3>=FULL_STOP && LA364_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA364_3>=LATIN_SMALL_LETTER_R && LA364_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt364=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 364, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 364, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt364) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1775:14: s+= punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_subblockAfterTilde16002);
                    	            s=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_punctuationSign.add(s.getTree());
                    	            if (list_s==null) list_s=new ArrayList();
                    	            list_s.add(s.getTree());


                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1776:14: s+= delimitedMonoblockNoSeparator
                    	            {
                    	            pushFollow(FOLLOW_delimitedMonoblockNoSeparator_in_subblockAfterTilde16022);
                    	            s=delimitedMonoblockNoSeparator();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_delimitedMonoblockNoSeparator.add(s.getTree());
                    	            if (list_s==null) list_s=new ArrayList();
                    	            list_s.add(s.getTree());


                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1777:14: s+= softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_subblockAfterTilde16041);
                    	            s=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_softInlineLiteral.add(s.getTree());
                    	            if (list_s==null) list_s=new ArrayList();
                    	            list_s.add(s.getTree());


                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1778:14: s+= hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_subblockAfterTilde16061);
                    	            s=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_hardInlineLiteral.add(s.getTree());
                    	            if (list_s==null) list_s=new ArrayList();
                    	            list_s.add(s.getTree());


                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1779:12: (s+= word )?
                    	    int alt365=2;
                    	    int LA365_0 = input.LA(1);

                    	    if ( ((LA365_0>=LATIN_SMALL_LETTER_F && LA365_0<=LATIN_SMALL_LETTER_S)||(LA365_0>=LATIN_SMALL_LETTER_N && LA365_0<=LATIN_SMALL_LETTER_V)||LA365_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA365_0>=LATIN_SMALL_LETTER_R && LA365_0<=LATIN_SMALL_LETTER_M)||(LA365_0>=DIGIT_0 && LA365_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt365=1;
                    	    }
                    	    switch (alt365) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1779:12: s+= word
                    	            {
                    	            pushFollow(FOLLOW_word_in_subblockAfterTilde16077);
                    	            s=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_word.add(s.getTree());
                    	            if (list_s==null) list_s=new ArrayList();
                    	            list_s.add(s.getTree());


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop366;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1781:6: ( (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) ( (s+= word )? (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) )* (s+= word )? )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1781:6: ( (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) ( (s+= word )? (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) )* (s+= word )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1782:8: (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) ( (s+= word )? (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) )* (s+= word )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1782:8: (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral )
                    int alt367=4;
                    switch ( input.LA(1) ) {
                    case FULL_STOP:
                    case COMMA:
                    case QUESTION_MARK:
                    case EXCLAMATION_MARK:
                    case SEMICOLON:
                    case COLON:
                    case APOSTROPHE:
                        {
                        alt367=1;
                        }
                        break;
                    case LEFT_PARENTHESIS:
                    case SOLIDUS:
                        {
                        alt367=2;
                        }
                        break;
                    case GRAVE_ACCENT:
                        {
                        int LA367_3 = input.LA(2);

                        if ( (LA367_3==GRAVE_ACCENT) ) {
                            alt367=4;
                        }
                        else if ( ((LA367_3>=COMMERCIAL_AT && LA367_3<=WHITESPACE)||(LA367_3>=VERTICAL_LINE && LA367_3<=GREATER_THAN_SIGN)||(LA367_3>=FULL_STOP && LA367_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA367_3>=LATIN_SMALL_LETTER_R && LA367_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 0, input);

                        throw nvae;
                    }

                    switch (alt367) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1782:12: s+= punctuationSign
                            {
                            pushFollow(FOLLOW_punctuationSign_in_subblockAfterTilde16113);
                            s=punctuationSign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_punctuationSign.add(s.getTree());
                            if (list_s==null) list_s=new ArrayList();
                            list_s.add(s.getTree());


                            }
                            break;
                        case 2 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1783:12: s+= delimitedMonoblockNoSeparator
                            {
                            pushFollow(FOLLOW_delimitedMonoblockNoSeparator_in_subblockAfterTilde16131);
                            s=delimitedMonoblockNoSeparator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_delimitedMonoblockNoSeparator.add(s.getTree());
                            if (list_s==null) list_s=new ArrayList();
                            list_s.add(s.getTree());


                            }
                            break;
                        case 3 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1784:12: s+= softInlineLiteral
                            {
                            pushFollow(FOLLOW_softInlineLiteral_in_subblockAfterTilde16148);
                            s=softInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_softInlineLiteral.add(s.getTree());
                            if (list_s==null) list_s=new ArrayList();
                            list_s.add(s.getTree());


                            }
                            break;
                        case 4 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1785:12: s+= hardInlineLiteral
                            {
                            pushFollow(FOLLOW_hardInlineLiteral_in_subblockAfterTilde16166);
                            s=hardInlineLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hardInlineLiteral.add(s.getTree());
                            if (list_s==null) list_s=new ArrayList();
                            list_s.add(s.getTree());


                            }
                            break;

                    }

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1787:8: ( (s+= word )? (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) )*
                    loop370:
                    do {
                        int alt370=2;
                        alt370 = dfa370.predict(input);
                        switch (alt370) {
                    	case 1 :
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1787:10: (s+= word )? (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral )
                    	    {
                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1787:12: (s+= word )?
                    	    int alt368=2;
                    	    int LA368_0 = input.LA(1);

                    	    if ( ((LA368_0>=LATIN_SMALL_LETTER_F && LA368_0<=LATIN_SMALL_LETTER_S)||(LA368_0>=LATIN_SMALL_LETTER_N && LA368_0<=LATIN_SMALL_LETTER_V)||LA368_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA368_0>=LATIN_SMALL_LETTER_R && LA368_0<=LATIN_SMALL_LETTER_M)||(LA368_0>=DIGIT_0 && LA368_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	        alt368=1;
                    	    }
                    	    switch (alt368) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1787:12: s+= word
                    	            {
                    	            pushFollow(FOLLOW_word_in_subblockAfterTilde16191);
                    	            s=word();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_word.add(s.getTree());
                    	            if (list_s==null) list_s=new ArrayList();
                    	            list_s.add(s.getTree());


                    	            }
                    	            break;

                    	    }

                    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1788:10: (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral )
                    	    int alt369=4;
                    	    switch ( input.LA(1) ) {
                    	    case FULL_STOP:
                    	    case COMMA:
                    	    case QUESTION_MARK:
                    	    case EXCLAMATION_MARK:
                    	    case SEMICOLON:
                    	    case COLON:
                    	    case APOSTROPHE:
                    	        {
                    	        alt369=1;
                    	        }
                    	        break;
                    	    case LEFT_PARENTHESIS:
                    	    case SOLIDUS:
                    	        {
                    	        alt369=2;
                    	        }
                    	        break;
                    	    case GRAVE_ACCENT:
                    	        {
                    	        int LA369_3 = input.LA(2);

                    	        if ( (LA369_3==GRAVE_ACCENT) ) {
                    	            alt369=4;
                    	        }
                    	        else if ( ((LA369_3>=COMMERCIAL_AT && LA369_3<=WHITESPACE)||(LA369_3>=VERTICAL_LINE && LA369_3<=GREATER_THAN_SIGN)||(LA369_3>=FULL_STOP && LA369_3<=LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK)||(LA369_3>=LATIN_SMALL_LETTER_R && LA369_3<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    	            alt369=3;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 369, 3, input);

                    	            throw nvae;
                    	        }
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 369, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt369) {
                    	        case 1 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1788:14: s+= punctuationSign
                    	            {
                    	            pushFollow(FOLLOW_punctuationSign_in_subblockAfterTilde16212);
                    	            s=punctuationSign();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_punctuationSign.add(s.getTree());
                    	            if (list_s==null) list_s=new ArrayList();
                    	            list_s.add(s.getTree());


                    	            }
                    	            break;
                    	        case 2 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1789:14: s+= delimitedMonoblockNoSeparator
                    	            {
                    	            pushFollow(FOLLOW_delimitedMonoblockNoSeparator_in_subblockAfterTilde16232);
                    	            s=delimitedMonoblockNoSeparator();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_delimitedMonoblockNoSeparator.add(s.getTree());
                    	            if (list_s==null) list_s=new ArrayList();
                    	            list_s.add(s.getTree());


                    	            }
                    	            break;
                    	        case 3 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1790:14: s+= softInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_softInlineLiteral_in_subblockAfterTilde16251);
                    	            s=softInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_softInlineLiteral.add(s.getTree());
                    	            if (list_s==null) list_s=new ArrayList();
                    	            list_s.add(s.getTree());


                    	            }
                    	            break;
                    	        case 4 :
                    	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1791:14: s+= hardInlineLiteral
                    	            {
                    	            pushFollow(FOLLOW_hardInlineLiteral_in_subblockAfterTilde16271);
                    	            s=hardInlineLiteral();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_hardInlineLiteral.add(s.getTree());
                    	            if (list_s==null) list_s=new ArrayList();
                    	            list_s.add(s.getTree());


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop370;
                        }
                    } while (true);

                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1794:10: (s+= word )?
                    int alt371=2;
                    int LA371_0 = input.LA(1);

                    if ( ((LA371_0>=LATIN_SMALL_LETTER_F && LA371_0<=LATIN_SMALL_LETTER_S)||(LA371_0>=LATIN_SMALL_LETTER_N && LA371_0<=LATIN_SMALL_LETTER_V)||LA371_0==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA371_0>=LATIN_SMALL_LETTER_R && LA371_0<=LATIN_SMALL_LETTER_M)||(LA371_0>=DIGIT_0 && LA371_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt371=1;
                    }
                    switch (alt371) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1794:10: s+= word
                            {
                            pushFollow(FOLLOW_word_in_subblockAfterTilde16320);
                            s=word();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_word.add(s.getTree());
                            if (list_s==null) list_s=new ArrayList();
                            list_s.add(s.getTree());


                            }
                            break;

                    }


                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: s
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: s
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"token s",list_s);
            root_0 = (Object)adaptor.nil();
            // 1796:7: -> ^( SUBBLOCK ( $s)+ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1796:10: ^( SUBBLOCK ( $s)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SUBBLOCK, "SUBBLOCK"), root_1);

                if ( !(stream_s.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextTree());

                }
                stream_s.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subblockAfterTilde"

    public static class word_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "word"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1800:1: word : ( (w1= rawWord ( CIRCUMFLEX_ACCENT w2= rawWord ) ) -> ^( WORD_ ^( WORD_AFTER_CIRCUMFLEX_ACCENT ) ) | (w= rawWord ) ->);
    public final NovelangParser.word_return word() throws RecognitionException {
        NovelangParser.word_return retval = new NovelangParser.word_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CIRCUMFLEX_ACCENT722=null;
        NovelangParser.rawWord_return w1 = null;

        NovelangParser.rawWord_return w2 = null;

        NovelangParser.rawWord_return w = null;


        Object CIRCUMFLEX_ACCENT722_tree=null;
        RewriteRuleTokenStream stream_CIRCUMFLEX_ACCENT=new RewriteRuleTokenStream(adaptor,"token CIRCUMFLEX_ACCENT");
        RewriteRuleSubtreeStream stream_rawWord=new RewriteRuleSubtreeStream(adaptor,"rule rawWord");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1801:3: ( (w1= rawWord ( CIRCUMFLEX_ACCENT w2= rawWord ) ) -> ^( WORD_ ^( WORD_AFTER_CIRCUMFLEX_ACCENT ) ) | (w= rawWord ) ->)
            int alt373=2;
            alt373 = dfa373.predict(input);
            switch (alt373) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1801:5: (w1= rawWord ( CIRCUMFLEX_ACCENT w2= rawWord ) )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1801:5: (w1= rawWord ( CIRCUMFLEX_ACCENT w2= rawWord ) )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1801:7: w1= rawWord ( CIRCUMFLEX_ACCENT w2= rawWord )
                    {
                    pushFollow(FOLLOW_rawWord_in_word16368);
                    w1=rawWord();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rawWord.add(w1.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1801:20: ( CIRCUMFLEX_ACCENT w2= rawWord )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1801:22: CIRCUMFLEX_ACCENT w2= rawWord
                    {
                    CIRCUMFLEX_ACCENT722=(Token)match(input,CIRCUMFLEX_ACCENT,FOLLOW_CIRCUMFLEX_ACCENT_in_word16372); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CIRCUMFLEX_ACCENT.add(CIRCUMFLEX_ACCENT722);

                    pushFollow(FOLLOW_rawWord_in_word16378);
                    w2=rawWord();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rawWord.add(w2.getTree());

                    }


                    }



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1802:5: -> ^( WORD_ ^( WORD_AFTER_CIRCUMFLEX_ACCENT ) )
                    {
                        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1802:8: ^( WORD_ ^( WORD_AFTER_CIRCUMFLEX_ACCENT ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(WORD_, "WORD_"), root_1);

                        adaptor.addChild(root_1,  delegate.createTree( (w1!=null?w1.text:null) ) );
                        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1803:13: ^( WORD_AFTER_CIRCUMFLEX_ACCENT )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(WORD_AFTER_CIRCUMFLEX_ACCENT, "WORD_AFTER_CIRCUMFLEX_ACCENT"), root_2);

                        adaptor.addChild(root_2,  delegate.createTree( (w2!=null?w2.text:null) ) );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1805:5: (w= rawWord )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1805:5: (w= rawWord )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1805:7: w= rawWord
                    {
                    pushFollow(FOLLOW_rawWord_in_word16440);
                    w=rawWord();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rawWord.add(w.getTree());

                    }



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1806:5: ->
                    {
                        adaptor.addChild(root_0,  delegate.createTree( WORD_, (w!=null?w.text:null) ) );

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "word"

    public static class symbolicName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "symbolicName"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1809:1: symbolicName : ( hexLetter | nonHexLetter | digit ) ( ( HYPHEN_MINUS | LOW_LINE )? ( hexLetter | nonHexLetter | digit ) )* ;
    public final NovelangParser.symbolicName_return symbolicName() throws RecognitionException {
        NovelangParser.symbolicName_return retval = new NovelangParser.symbolicName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set726=null;
        NovelangParser.hexLetter_return hexLetter723 = null;

        NovelangParser.nonHexLetter_return nonHexLetter724 = null;

        NovelangParser.digit_return digit725 = null;

        NovelangParser.hexLetter_return hexLetter727 = null;

        NovelangParser.nonHexLetter_return nonHexLetter728 = null;

        NovelangParser.digit_return digit729 = null;


        Object set726_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1810:3: ( ( hexLetter | nonHexLetter | digit ) ( ( HYPHEN_MINUS | LOW_LINE )? ( hexLetter | nonHexLetter | digit ) )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1810:5: ( hexLetter | nonHexLetter | digit ) ( ( HYPHEN_MINUS | LOW_LINE )? ( hexLetter | nonHexLetter | digit ) )*
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1810:5: ( hexLetter | nonHexLetter | digit )
            int alt374=3;
            switch ( input.LA(1) ) {
            case LATIN_SMALL_LETTER_F:
            case LATIN_SMALL_LETTER_E:
            case LATIN_SMALL_LETTER_C:
            case LATIN_SMALL_LETTER_A:
            case LATIN_SMALL_LETTER_D:
            case LATIN_SMALL_LETTER_B:
            case LATIN_CAPITAL_LETTER_A:
            case LATIN_CAPITAL_LETTER_B:
            case LATIN_CAPITAL_LETTER_C:
            case LATIN_CAPITAL_LETTER_D:
            case LATIN_CAPITAL_LETTER_E:
            case LATIN_CAPITAL_LETTER_F:
                {
                alt374=1;
                }
                break;
            case LATIN_SMALL_LETTER_I:
            case LATIN_SMALL_LETTER_L:
            case LATIN_SMALL_LETTER_H:
            case LATIN_SMALL_LETTER_T:
            case LATIN_SMALL_LETTER_P:
            case LATIN_SMALL_LETTER_S:
            case LATIN_SMALL_LETTER_N:
            case LATIN_SMALL_LETTER_G:
            case LATIN_SMALL_LETTER_J:
            case LATIN_SMALL_LETTER_V:
            case LATIN_SMALL_LETTER_R:
            case LATIN_SMALL_LETTER_U:
            case LATIN_SMALL_LETTER_O:
            case LATIN_SMALL_LETTER_Y:
            case LATIN_SMALL_LETTER_M:
            case LATIN_SMALL_LETTER_K:
            case LATIN_SMALL_LETTER_Q:
            case LATIN_SMALL_LETTER_W:
            case LATIN_SMALL_LETTER_X:
            case LATIN_SMALL_LETTER_Z:
            case LATIN_CAPITAL_LETTER_G:
            case LATIN_CAPITAL_LETTER_H:
            case LATIN_CAPITAL_LETTER_I:
            case LATIN_CAPITAL_LETTER_J:
            case LATIN_CAPITAL_LETTER_K:
            case LATIN_CAPITAL_LETTER_L:
            case LATIN_CAPITAL_LETTER_M:
            case LATIN_CAPITAL_LETTER_N:
            case LATIN_CAPITAL_LETTER_O:
            case LATIN_CAPITAL_LETTER_P:
            case LATIN_CAPITAL_LETTER_Q:
            case LATIN_CAPITAL_LETTER_R:
            case LATIN_CAPITAL_LETTER_S:
            case LATIN_CAPITAL_LETTER_T:
            case LATIN_CAPITAL_LETTER_U:
            case LATIN_CAPITAL_LETTER_V:
            case LATIN_CAPITAL_LETTER_W:
            case LATIN_CAPITAL_LETTER_X:
            case LATIN_CAPITAL_LETTER_Y:
            case LATIN_CAPITAL_LETTER_Z:
                {
                alt374=2;
                }
                break;
            case DIGIT_0:
            case DIGIT_1:
            case DIGIT_2:
            case DIGIT_3:
            case DIGIT_4:
            case DIGIT_5:
            case DIGIT_6:
            case DIGIT_7:
            case DIGIT_8:
            case DIGIT_9:
                {
                alt374=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 374, 0, input);

                throw nvae;
            }

            switch (alt374) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1810:7: hexLetter
                    {
                    pushFollow(FOLLOW_hexLetter_in_symbolicName16470);
                    hexLetter723=hexLetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hexLetter723.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1810:19: nonHexLetter
                    {
                    pushFollow(FOLLOW_nonHexLetter_in_symbolicName16474);
                    nonHexLetter724=nonHexLetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonHexLetter724.getTree());

                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1810:34: digit
                    {
                    pushFollow(FOLLOW_digit_in_symbolicName16478);
                    digit725=digit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, digit725.getTree());

                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1811:5: ( ( HYPHEN_MINUS | LOW_LINE )? ( hexLetter | nonHexLetter | digit ) )*
            loop377:
            do {
                int alt377=2;
                int LA377_0 = input.LA(1);

                if ( ((LA377_0>=HYPHEN_MINUS && LA377_0<=LOW_LINE)||(LA377_0>=LATIN_SMALL_LETTER_F && LA377_0<=LATIN_SMALL_LETTER_S)||(LA377_0>=LATIN_SMALL_LETTER_N && LA377_0<=LATIN_SMALL_LETTER_V)||(LA377_0>=LATIN_SMALL_LETTER_R && LA377_0<=LATIN_SMALL_LETTER_M)||(LA377_0>=DIGIT_0 && LA377_0<=LATIN_CAPITAL_LETTER_Z)) ) {
                    alt377=1;
                }


                switch (alt377) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1811:7: ( HYPHEN_MINUS | LOW_LINE )? ( hexLetter | nonHexLetter | digit )
            	    {
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1811:7: ( HYPHEN_MINUS | LOW_LINE )?
            	    int alt375=2;
            	    int LA375_0 = input.LA(1);

            	    if ( ((LA375_0>=HYPHEN_MINUS && LA375_0<=LOW_LINE)) ) {
            	        alt375=1;
            	    }
            	    switch (alt375) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:
            	            {
            	            set726=(Token)input.LT(1);
            	            if ( (input.LA(1)>=HYPHEN_MINUS && input.LA(1)<=LOW_LINE) ) {
            	                input.consume();
            	                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set726));
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }

            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1811:36: ( hexLetter | nonHexLetter | digit )
            	    int alt376=3;
            	    switch ( input.LA(1) ) {
            	    case LATIN_SMALL_LETTER_F:
            	    case LATIN_SMALL_LETTER_E:
            	    case LATIN_SMALL_LETTER_C:
            	    case LATIN_SMALL_LETTER_A:
            	    case LATIN_SMALL_LETTER_D:
            	    case LATIN_SMALL_LETTER_B:
            	    case LATIN_CAPITAL_LETTER_A:
            	    case LATIN_CAPITAL_LETTER_B:
            	    case LATIN_CAPITAL_LETTER_C:
            	    case LATIN_CAPITAL_LETTER_D:
            	    case LATIN_CAPITAL_LETTER_E:
            	    case LATIN_CAPITAL_LETTER_F:
            	        {
            	        alt376=1;
            	        }
            	        break;
            	    case LATIN_SMALL_LETTER_I:
            	    case LATIN_SMALL_LETTER_L:
            	    case LATIN_SMALL_LETTER_H:
            	    case LATIN_SMALL_LETTER_T:
            	    case LATIN_SMALL_LETTER_P:
            	    case LATIN_SMALL_LETTER_S:
            	    case LATIN_SMALL_LETTER_N:
            	    case LATIN_SMALL_LETTER_G:
            	    case LATIN_SMALL_LETTER_J:
            	    case LATIN_SMALL_LETTER_V:
            	    case LATIN_SMALL_LETTER_R:
            	    case LATIN_SMALL_LETTER_U:
            	    case LATIN_SMALL_LETTER_O:
            	    case LATIN_SMALL_LETTER_Y:
            	    case LATIN_SMALL_LETTER_M:
            	    case LATIN_SMALL_LETTER_K:
            	    case LATIN_SMALL_LETTER_Q:
            	    case LATIN_SMALL_LETTER_W:
            	    case LATIN_SMALL_LETTER_X:
            	    case LATIN_SMALL_LETTER_Z:
            	    case LATIN_CAPITAL_LETTER_G:
            	    case LATIN_CAPITAL_LETTER_H:
            	    case LATIN_CAPITAL_LETTER_I:
            	    case LATIN_CAPITAL_LETTER_J:
            	    case LATIN_CAPITAL_LETTER_K:
            	    case LATIN_CAPITAL_LETTER_L:
            	    case LATIN_CAPITAL_LETTER_M:
            	    case LATIN_CAPITAL_LETTER_N:
            	    case LATIN_CAPITAL_LETTER_O:
            	    case LATIN_CAPITAL_LETTER_P:
            	    case LATIN_CAPITAL_LETTER_Q:
            	    case LATIN_CAPITAL_LETTER_R:
            	    case LATIN_CAPITAL_LETTER_S:
            	    case LATIN_CAPITAL_LETTER_T:
            	    case LATIN_CAPITAL_LETTER_U:
            	    case LATIN_CAPITAL_LETTER_V:
            	    case LATIN_CAPITAL_LETTER_W:
            	    case LATIN_CAPITAL_LETTER_X:
            	    case LATIN_CAPITAL_LETTER_Y:
            	    case LATIN_CAPITAL_LETTER_Z:
            	        {
            	        alt376=2;
            	        }
            	        break;
            	    case DIGIT_0:
            	    case DIGIT_1:
            	    case DIGIT_2:
            	    case DIGIT_3:
            	    case DIGIT_4:
            	    case DIGIT_5:
            	    case DIGIT_6:
            	    case DIGIT_7:
            	    case DIGIT_8:
            	    case DIGIT_9:
            	        {
            	        alt376=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 376, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt376) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1811:38: hexLetter
            	            {
            	            pushFollow(FOLLOW_hexLetter_in_symbolicName16501);
            	            hexLetter727=hexLetter();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, hexLetter727.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1811:50: nonHexLetter
            	            {
            	            pushFollow(FOLLOW_nonHexLetter_in_symbolicName16505);
            	            nonHexLetter728=nonHexLetter();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonHexLetter728.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1811:65: digit
            	            {
            	            pushFollow(FOLLOW_digit_in_symbolicName16509);
            	            digit729=digit();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, digit729.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop377;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "symbolicName"

    public static class rawWord_return extends ParserRuleReturnScope {
        public String text;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rawWord"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1814:1: rawWord returns [ String text ] : (s1= hexLetter | s2= nonHexLetter | s3= letterWithDiacritics | s4= digit | s5= escapedCharacter )+ (s6= HYPHEN_MINUS (s7= hexLetter | s8= nonHexLetter | s9= letterWithDiacritics | s10= digit | s11= escapedCharacter )+ )* ;
    public final NovelangParser.rawWord_return rawWord() throws RecognitionException {
        NovelangParser.rawWord_return retval = new NovelangParser.rawWord_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token s6=null;
        NovelangParser.hexLetter_return s1 = null;

        NovelangParser.nonHexLetter_return s2 = null;

        NovelangParser.letterWithDiacritics_return s3 = null;

        NovelangParser.digit_return s4 = null;

        NovelangParser.escapedCharacter_return s5 = null;

        NovelangParser.hexLetter_return s7 = null;

        NovelangParser.nonHexLetter_return s8 = null;

        NovelangParser.letterWithDiacritics_return s9 = null;

        NovelangParser.digit_return s10 = null;

        NovelangParser.escapedCharacter_return s11 = null;


        Object s6_tree=null;


          final StringBuffer buffer = new StringBuffer() ;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1821:3: ( (s1= hexLetter | s2= nonHexLetter | s3= letterWithDiacritics | s4= digit | s5= escapedCharacter )+ (s6= HYPHEN_MINUS (s7= hexLetter | s8= nonHexLetter | s9= letterWithDiacritics | s10= digit | s11= escapedCharacter )+ )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1821:5: (s1= hexLetter | s2= nonHexLetter | s3= letterWithDiacritics | s4= digit | s5= escapedCharacter )+ (s6= HYPHEN_MINUS (s7= hexLetter | s8= nonHexLetter | s9= letterWithDiacritics | s10= digit | s11= escapedCharacter )+ )*
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1821:5: (s1= hexLetter | s2= nonHexLetter | s3= letterWithDiacritics | s4= digit | s5= escapedCharacter )+
            int cnt378=0;
            loop378:
            do {
                int alt378=6;
                switch ( input.LA(1) ) {
                case LATIN_SMALL_LETTER_F:
                case LATIN_SMALL_LETTER_E:
                case LATIN_SMALL_LETTER_C:
                case LATIN_SMALL_LETTER_A:
                case LATIN_SMALL_LETTER_D:
                case LATIN_SMALL_LETTER_B:
                case LATIN_CAPITAL_LETTER_A:
                case LATIN_CAPITAL_LETTER_B:
                case LATIN_CAPITAL_LETTER_C:
                case LATIN_CAPITAL_LETTER_D:
                case LATIN_CAPITAL_LETTER_E:
                case LATIN_CAPITAL_LETTER_F:
                    {
                    alt378=1;
                    }
                    break;
                case LATIN_SMALL_LETTER_I:
                case LATIN_SMALL_LETTER_L:
                case LATIN_SMALL_LETTER_H:
                case LATIN_SMALL_LETTER_T:
                case LATIN_SMALL_LETTER_P:
                case LATIN_SMALL_LETTER_S:
                case LATIN_SMALL_LETTER_N:
                case LATIN_SMALL_LETTER_G:
                case LATIN_SMALL_LETTER_J:
                case LATIN_SMALL_LETTER_V:
                case LATIN_SMALL_LETTER_R:
                case LATIN_SMALL_LETTER_U:
                case LATIN_SMALL_LETTER_O:
                case LATIN_SMALL_LETTER_Y:
                case LATIN_SMALL_LETTER_M:
                case LATIN_SMALL_LETTER_K:
                case LATIN_SMALL_LETTER_Q:
                case LATIN_SMALL_LETTER_W:
                case LATIN_SMALL_LETTER_X:
                case LATIN_SMALL_LETTER_Z:
                case LATIN_CAPITAL_LETTER_G:
                case LATIN_CAPITAL_LETTER_H:
                case LATIN_CAPITAL_LETTER_I:
                case LATIN_CAPITAL_LETTER_J:
                case LATIN_CAPITAL_LETTER_K:
                case LATIN_CAPITAL_LETTER_L:
                case LATIN_CAPITAL_LETTER_M:
                case LATIN_CAPITAL_LETTER_N:
                case LATIN_CAPITAL_LETTER_O:
                case LATIN_CAPITAL_LETTER_P:
                case LATIN_CAPITAL_LETTER_Q:
                case LATIN_CAPITAL_LETTER_R:
                case LATIN_CAPITAL_LETTER_S:
                case LATIN_CAPITAL_LETTER_T:
                case LATIN_CAPITAL_LETTER_U:
                case LATIN_CAPITAL_LETTER_V:
                case LATIN_CAPITAL_LETTER_W:
                case LATIN_CAPITAL_LETTER_X:
                case LATIN_CAPITAL_LETTER_Y:
                case LATIN_CAPITAL_LETTER_Z:
                    {
                    alt378=2;
                    }
                    break;
                case LATIN_SMALL_LETTER_A_WITH_GRAVE:
                case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
                case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
                case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
                case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
                case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
                case LATIN_SMALL_LETTER_A_WITH_ACUTE:
                case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
                case LATIN_SMALL_LETTER_AE:
                case LATIN_CAPITAL_LETTER_AE:
                case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
                case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
                case LATIN_SMALL_LETTER_E_WITH_GRAVE:
                case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
                case LATIN_SMALL_LETTER_E_WITH_ACUTE:
                case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
                case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
                case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
                case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
                case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
                case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
                case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
                case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
                case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
                case LATIN_SMALL_LETTER_I_WITH_ACUTE:
                case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
                case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
                case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
                case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
                case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
                case LATIN_SMALL_LETTER_O_WITH_ACUTE:
                case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
                case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
                case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
                case LATIN_SMALL_LETTER_U_WITH_GRAVE:
                case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
                case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
                case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
                case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
                case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
                case LATIN_SMALL_LETTER_U_WITH_ACUTE:
                case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
                case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
                case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
                case LATIN_SMALL_LIGATURE_OE:
                case LATIN_CAPITAL_LIGATURE_OE:
                    {
                    alt378=3;
                    }
                    break;
                case DIGIT_0:
                case DIGIT_1:
                case DIGIT_2:
                case DIGIT_3:
                case DIGIT_4:
                case DIGIT_5:
                case DIGIT_6:
                case DIGIT_7:
                case DIGIT_8:
                case DIGIT_9:
                    {
                    alt378=4;
                    }
                    break;
                case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
                    {
                    alt378=5;
                    }
                    break;

                }

                switch (alt378) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1821:9: s1= hexLetter
            	    {
            	    pushFollow(FOLLOW_hexLetter_in_rawWord16546);
            	    s1=hexLetter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s1.getTree());
            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s1!=null?input.toString(s1.start,s1.stop):null) ) ; 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1822:9: s2= nonHexLetter
            	    {
            	    pushFollow(FOLLOW_nonHexLetter_in_rawWord16562);
            	    s2=nonHexLetter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s2.getTree());
            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s2!=null?input.toString(s2.start,s2.stop):null) ) ; 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1823:9: s3= letterWithDiacritics
            	    {
            	    pushFollow(FOLLOW_letterWithDiacritics_in_rawWord16577);
            	    s3=letterWithDiacritics();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s3.getTree());
            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s3!=null?input.toString(s3.start,s3.stop):null) ) ; 
            	    }

            	    }
            	    break;
            	case 4 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1824:9: s4= digit
            	    {
            	    pushFollow(FOLLOW_digit_in_rawWord16593);
            	    s4=digit();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s4.getTree());
            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s4!=null?input.toString(s4.start,s4.stop):null) ) ; 
            	    }

            	    }
            	    break;
            	case 5 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1825:9: s5= escapedCharacter
            	    {
            	    pushFollow(FOLLOW_escapedCharacter_in_rawWord16609);
            	    s5=escapedCharacter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s5.getTree());
            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s5!=null?s5.unescaped:null) ) ; 
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt378 >= 1 ) break loop378;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(378, input);
                        throw eee;
                }
                cnt378++;
            } while (true);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1827:5: (s6= HYPHEN_MINUS (s7= hexLetter | s8= nonHexLetter | s9= letterWithDiacritics | s10= digit | s11= escapedCharacter )+ )*
            loop380:
            do {
                int alt380=2;
                int LA380_0 = input.LA(1);

                if ( (LA380_0==HYPHEN_MINUS) ) {
                    int LA380_2 = input.LA(2);

                    if ( ((LA380_2>=LATIN_SMALL_LETTER_F && LA380_2<=LATIN_SMALL_LETTER_S)||(LA380_2>=LATIN_SMALL_LETTER_N && LA380_2<=LATIN_SMALL_LETTER_V)||LA380_2==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA380_2>=LATIN_SMALL_LETTER_R && LA380_2<=LATIN_SMALL_LETTER_M)||(LA380_2>=DIGIT_0 && LA380_2<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                        alt380=1;
                    }


                }


                switch (alt380) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1827:7: s6= HYPHEN_MINUS (s7= hexLetter | s8= nonHexLetter | s9= letterWithDiacritics | s10= digit | s11= escapedCharacter )+
            	    {
            	    s6=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_rawWord16631); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    s6_tree = (Object)adaptor.create(s6);
            	    adaptor.addChild(root_0, s6_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s6!=null?s6.getText():null) ) ; 
            	    }
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1828:7: (s7= hexLetter | s8= nonHexLetter | s9= letterWithDiacritics | s10= digit | s11= escapedCharacter )+
            	    int cnt379=0;
            	    loop379:
            	    do {
            	        int alt379=6;
            	        switch ( input.LA(1) ) {
            	        case LATIN_SMALL_LETTER_F:
            	        case LATIN_SMALL_LETTER_E:
            	        case LATIN_SMALL_LETTER_C:
            	        case LATIN_SMALL_LETTER_A:
            	        case LATIN_SMALL_LETTER_D:
            	        case LATIN_SMALL_LETTER_B:
            	        case LATIN_CAPITAL_LETTER_A:
            	        case LATIN_CAPITAL_LETTER_B:
            	        case LATIN_CAPITAL_LETTER_C:
            	        case LATIN_CAPITAL_LETTER_D:
            	        case LATIN_CAPITAL_LETTER_E:
            	        case LATIN_CAPITAL_LETTER_F:
            	            {
            	            alt379=1;
            	            }
            	            break;
            	        case LATIN_SMALL_LETTER_I:
            	        case LATIN_SMALL_LETTER_L:
            	        case LATIN_SMALL_LETTER_H:
            	        case LATIN_SMALL_LETTER_T:
            	        case LATIN_SMALL_LETTER_P:
            	        case LATIN_SMALL_LETTER_S:
            	        case LATIN_SMALL_LETTER_N:
            	        case LATIN_SMALL_LETTER_G:
            	        case LATIN_SMALL_LETTER_J:
            	        case LATIN_SMALL_LETTER_V:
            	        case LATIN_SMALL_LETTER_R:
            	        case LATIN_SMALL_LETTER_U:
            	        case LATIN_SMALL_LETTER_O:
            	        case LATIN_SMALL_LETTER_Y:
            	        case LATIN_SMALL_LETTER_M:
            	        case LATIN_SMALL_LETTER_K:
            	        case LATIN_SMALL_LETTER_Q:
            	        case LATIN_SMALL_LETTER_W:
            	        case LATIN_SMALL_LETTER_X:
            	        case LATIN_SMALL_LETTER_Z:
            	        case LATIN_CAPITAL_LETTER_G:
            	        case LATIN_CAPITAL_LETTER_H:
            	        case LATIN_CAPITAL_LETTER_I:
            	        case LATIN_CAPITAL_LETTER_J:
            	        case LATIN_CAPITAL_LETTER_K:
            	        case LATIN_CAPITAL_LETTER_L:
            	        case LATIN_CAPITAL_LETTER_M:
            	        case LATIN_CAPITAL_LETTER_N:
            	        case LATIN_CAPITAL_LETTER_O:
            	        case LATIN_CAPITAL_LETTER_P:
            	        case LATIN_CAPITAL_LETTER_Q:
            	        case LATIN_CAPITAL_LETTER_R:
            	        case LATIN_CAPITAL_LETTER_S:
            	        case LATIN_CAPITAL_LETTER_T:
            	        case LATIN_CAPITAL_LETTER_U:
            	        case LATIN_CAPITAL_LETTER_V:
            	        case LATIN_CAPITAL_LETTER_W:
            	        case LATIN_CAPITAL_LETTER_X:
            	        case LATIN_CAPITAL_LETTER_Y:
            	        case LATIN_CAPITAL_LETTER_Z:
            	            {
            	            alt379=2;
            	            }
            	            break;
            	        case LATIN_SMALL_LETTER_A_WITH_GRAVE:
            	        case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
            	        case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
            	        case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
            	        case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
            	        case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
            	        case LATIN_SMALL_LETTER_A_WITH_ACUTE:
            	        case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
            	        case LATIN_SMALL_LETTER_AE:
            	        case LATIN_CAPITAL_LETTER_AE:
            	        case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
            	        case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
            	        case LATIN_SMALL_LETTER_E_WITH_GRAVE:
            	        case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
            	        case LATIN_SMALL_LETTER_E_WITH_ACUTE:
            	        case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
            	        case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
            	        case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
            	        case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
            	        case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
            	        case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
            	        case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
            	        case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
            	        case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
            	        case LATIN_SMALL_LETTER_I_WITH_ACUTE:
            	        case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
            	        case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
            	        case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
            	        case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
            	        case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
            	        case LATIN_SMALL_LETTER_O_WITH_ACUTE:
            	        case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
            	        case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
            	        case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
            	        case LATIN_SMALL_LETTER_U_WITH_GRAVE:
            	        case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
            	        case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
            	        case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
            	        case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
            	        case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
            	        case LATIN_SMALL_LETTER_U_WITH_ACUTE:
            	        case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
            	        case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
            	        case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
            	        case LATIN_SMALL_LIGATURE_OE:
            	        case LATIN_CAPITAL_LIGATURE_OE:
            	            {
            	            alt379=3;
            	            }
            	            break;
            	        case DIGIT_0:
            	        case DIGIT_1:
            	        case DIGIT_2:
            	        case DIGIT_3:
            	        case DIGIT_4:
            	        case DIGIT_5:
            	        case DIGIT_6:
            	        case DIGIT_7:
            	        case DIGIT_8:
            	        case DIGIT_9:
            	            {
            	            alt379=4;
            	            }
            	            break;
            	        case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
            	            {
            	            alt379=5;
            	            }
            	            break;

            	        }

            	        switch (alt379) {
            	    	case 1 :
            	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1828:10: s7= hexLetter
            	    	    {
            	    	    pushFollow(FOLLOW_hexLetter_in_rawWord16648);
            	    	    s7=hexLetter();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s7.getTree());
            	    	    if ( state.backtracking==0 ) {
            	    	       buffer.append( (s7!=null?input.toString(s7.start,s7.stop):null) ) ; 
            	    	    }

            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1829:10: s8= nonHexLetter
            	    	    {
            	    	    pushFollow(FOLLOW_nonHexLetter_in_rawWord16665);
            	    	    s8=nonHexLetter();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s8.getTree());
            	    	    if ( state.backtracking==0 ) {
            	    	       buffer.append( (s8!=null?input.toString(s8.start,s8.stop):null) ) ; 
            	    	    }

            	    	    }
            	    	    break;
            	    	case 3 :
            	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1830:10: s9= letterWithDiacritics
            	    	    {
            	    	    pushFollow(FOLLOW_letterWithDiacritics_in_rawWord16682);
            	    	    s9=letterWithDiacritics();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s9.getTree());
            	    	    if ( state.backtracking==0 ) {
            	    	       buffer.append( (s9!=null?input.toString(s9.start,s9.stop):null) ) ; 
            	    	    }

            	    	    }
            	    	    break;
            	    	case 4 :
            	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1831:10: s10= digit
            	    	    {
            	    	    pushFollow(FOLLOW_digit_in_rawWord16699);
            	    	    s10=digit();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s10.getTree());
            	    	    if ( state.backtracking==0 ) {
            	    	       buffer.append( (s10!=null?input.toString(s10.start,s10.stop):null) ) ; 
            	    	    }

            	    	    }
            	    	    break;
            	    	case 5 :
            	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1832:10: s11= escapedCharacter
            	    	    {
            	    	    pushFollow(FOLLOW_escapedCharacter_in_rawWord16716);
            	    	    s11=escapedCharacter();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s11.getTree());
            	    	    if ( state.backtracking==0 ) {
            	    	       buffer.append( (s11!=null?s11.unescaped:null) ) ; 
            	    	    }

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt379 >= 1 ) break loop379;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(379, input);
            	                throw eee;
            	        }
            	        cnt379++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop380;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               retval.text = buffer.toString() ; 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rawWord"

    public static class escapedCharacter_return extends ParserRuleReturnScope {
        public String unescaped;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapedCharacter"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1838:1: escapedCharacter returns [ String unescaped ] : LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK symbolicName RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK ;
    public final NovelangParser.escapedCharacter_return escapedCharacter() throws RecognitionException {
        NovelangParser.escapedCharacter_return retval = new NovelangParser.escapedCharacter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK730=null;
        Token RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK732=null;
        NovelangParser.symbolicName_return symbolicName731 = null;


        Object LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK730_tree=null;
        Object RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK732_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1839:3: ( LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK symbolicName RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1839:5: LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK symbolicName RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK
            {
            root_0 = (Object)adaptor.nil();

            LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK730=(Token)match(input,LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK,FOLLOW_LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK_in_escapedCharacter16762); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK730_tree = (Object)adaptor.create(LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK730);
            adaptor.addChild(root_0, LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK730_tree);
            }
            pushFollow(FOLLOW_symbolicName_in_escapedCharacter16769);
            symbolicName731=symbolicName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, symbolicName731.getTree());
            RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK732=(Token)match(input,RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK,FOLLOW_RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK_in_escapedCharacter16776); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK732_tree = (Object)adaptor.create(RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK732);
            adaptor.addChild(root_0, RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK732_tree);
            }
            if ( state.backtracking==0 ) {
               retval.unescaped = delegate.unescapeCharacter( 
                        (symbolicName731!=null?input.toString(symbolicName731.start,symbolicName731.stop):null), 
                        (symbolicName731!=null?((Token)symbolicName731.start):null).getLine(),
                        (symbolicName731!=null?((Token)symbolicName731.start):null).getCharPositionInLine() 
                    ) ;
                  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapedCharacter"

    public static class composium_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "composium"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1855:1: composium : ( mediumbreak | largebreak )? functionCall ( largebreak functionCall )* ( mediumbreak | largebreak )? EOF -> ^( COMPOSIUM ( functionCall )* ) ;
    public final NovelangParser.composium_return composium() throws RecognitionException {
        NovelangParser.composium_return retval = new NovelangParser.composium_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EOF740=null;
        NovelangParser.mediumbreak_return mediumbreak733 = null;

        NovelangParser.largebreak_return largebreak734 = null;

        NovelangParser.functionCall_return functionCall735 = null;

        NovelangParser.largebreak_return largebreak736 = null;

        NovelangParser.functionCall_return functionCall737 = null;

        NovelangParser.mediumbreak_return mediumbreak738 = null;

        NovelangParser.largebreak_return largebreak739 = null;


        Object EOF740_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_mediumbreak=new RewriteRuleSubtreeStream(adaptor,"rule mediumbreak");
        RewriteRuleSubtreeStream stream_functionCall=new RewriteRuleSubtreeStream(adaptor,"rule functionCall");
        RewriteRuleSubtreeStream stream_largebreak=new RewriteRuleSubtreeStream(adaptor,"rule largebreak");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1856:3: ( ( mediumbreak | largebreak )? functionCall ( largebreak functionCall )* ( mediumbreak | largebreak )? EOF -> ^( COMPOSIUM ( functionCall )* ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1856:5: ( mediumbreak | largebreak )? functionCall ( largebreak functionCall )* ( mediumbreak | largebreak )? EOF
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1856:5: ( mediumbreak | largebreak )?
            int alt381=3;
            int LA381_0 = input.LA(1);

            if ( (LA381_0==WHITESPACE) ) {
                int LA381_1 = input.LA(2);

                if ( (LA381_1==SOFTBREAK) ) {
                    switch ( input.LA(3) ) {
                        case WHITESPACE:
                            {
                            int LA381_5 = input.LA(4);

                            if ( (LA381_5==LATIN_SMALL_LETTER_I||LA381_5==LATIN_SMALL_LETTER_M) ) {
                                alt381=1;
                            }
                            else if ( (LA381_5==SOFTBREAK) ) {
                                alt381=2;
                            }
                            }
                            break;
                        case LATIN_SMALL_LETTER_I:
                        case LATIN_SMALL_LETTER_M:
                            {
                            alt381=1;
                            }
                            break;
                        case SOFTBREAK:
                            {
                            alt381=2;
                            }
                            break;
                    }

                }
                else if ( (LA381_1==LATIN_SMALL_LETTER_I||LA381_1==LATIN_SMALL_LETTER_M) ) {
                    alt381=1;
                }
            }
            else if ( (LA381_0==SOFTBREAK) ) {
                switch ( input.LA(2) ) {
                    case WHITESPACE:
                        {
                        int LA381_5 = input.LA(3);

                        if ( (LA381_5==LATIN_SMALL_LETTER_I||LA381_5==LATIN_SMALL_LETTER_M) ) {
                            alt381=1;
                        }
                        else if ( (LA381_5==SOFTBREAK) ) {
                            alt381=2;
                        }
                        }
                        break;
                    case LATIN_SMALL_LETTER_I:
                    case LATIN_SMALL_LETTER_M:
                        {
                        alt381=1;
                        }
                        break;
                    case SOFTBREAK:
                        {
                        alt381=2;
                        }
                        break;
                }

            }
            switch (alt381) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1856:7: mediumbreak
                    {
                    pushFollow(FOLLOW_mediumbreak_in_composium16806);
                    mediumbreak733=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak733.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1856:21: largebreak
                    {
                    pushFollow(FOLLOW_largebreak_in_composium16810);
                    largebreak734=largebreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_largebreak.add(largebreak734.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_functionCall_in_composium16819);
            functionCall735=functionCall();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_functionCall.add(functionCall735.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1858:5: ( largebreak functionCall )*
            loop382:
            do {
                int alt382=2;
                alt382 = dfa382.predict(input);
                switch (alt382) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1858:7: largebreak functionCall
            	    {
            	    pushFollow(FOLLOW_largebreak_in_composium16827);
            	    largebreak736=largebreak();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_largebreak.add(largebreak736.getTree());
            	    pushFollow(FOLLOW_functionCall_in_composium16829);
            	    functionCall737=functionCall();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_functionCall.add(functionCall737.getTree());

            	    }
            	    break;

            	default :
            	    break loop382;
                }
            } while (true);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1859:5: ( mediumbreak | largebreak )?
            int alt383=3;
            int LA383_0 = input.LA(1);

            if ( (LA383_0==WHITESPACE) ) {
                int LA383_1 = input.LA(2);

                if ( (LA383_1==EOF) ) {
                    alt383=1;
                }
                else if ( (LA383_1==SOFTBREAK) ) {
                    switch ( input.LA(3) ) {
                        case WHITESPACE:
                            {
                            int LA383_5 = input.LA(4);

                            if ( (LA383_5==SOFTBREAK) ) {
                                alt383=2;
                            }
                            else if ( (LA383_5==EOF) ) {
                                alt383=1;
                            }
                            }
                            break;
                        case EOF:
                            {
                            alt383=1;
                            }
                            break;
                        case SOFTBREAK:
                            {
                            alt383=2;
                            }
                            break;
                    }

                }
            }
            else if ( (LA383_0==SOFTBREAK) ) {
                switch ( input.LA(2) ) {
                    case WHITESPACE:
                        {
                        int LA383_5 = input.LA(3);

                        if ( (LA383_5==SOFTBREAK) ) {
                            alt383=2;
                        }
                        else if ( (LA383_5==EOF) ) {
                            alt383=1;
                        }
                        }
                        break;
                    case EOF:
                        {
                        alt383=1;
                        }
                        break;
                    case SOFTBREAK:
                        {
                        alt383=2;
                        }
                        break;
                }

            }
            switch (alt383) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1859:7: mediumbreak
                    {
                    pushFollow(FOLLOW_mediumbreak_in_composium16846);
                    mediumbreak738=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak738.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1859:21: largebreak
                    {
                    pushFollow(FOLLOW_largebreak_in_composium16850);
                    largebreak739=largebreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_largebreak.add(largebreak739.getTree());

                    }
                    break;

            }

            EOF740=(Token)match(input,EOF,FOLLOW_EOF_in_composium16859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF740);



            // AST REWRITE
            // elements: functionCall
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1861:5: -> ^( COMPOSIUM ( functionCall )* )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1861:8: ^( COMPOSIUM ( functionCall )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(COMPOSIUM, "COMPOSIUM"), root_1);

                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1861:21: ( functionCall )*
                while ( stream_functionCall.hasNext() ) {
                    adaptor.addChild(root_1, stream_functionCall.nextTree());

                }
                stream_functionCall.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "composium"

    public static class functionCall_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionCall"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1865:1: functionCall : ( functionCallInsert | functionCallMapstylesheet );
    public final NovelangParser.functionCall_return functionCall() throws RecognitionException {
        NovelangParser.functionCall_return retval = new NovelangParser.functionCall_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.functionCallInsert_return functionCallInsert741 = null;

        NovelangParser.functionCallMapstylesheet_return functionCallMapstylesheet742 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1866:3: ( functionCallInsert | functionCallMapstylesheet )
            int alt384=2;
            int LA384_0 = input.LA(1);

            if ( (LA384_0==LATIN_SMALL_LETTER_I) ) {
                alt384=1;
            }
            else if ( (LA384_0==LATIN_SMALL_LETTER_M) ) {
                alt384=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 384, 0, input);

                throw nvae;
            }
            switch (alt384) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1866:5: functionCallInsert
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_functionCallInsert_in_functionCall16891);
                    functionCallInsert741=functionCallInsert();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionCallInsert741.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1867:5: functionCallMapstylesheet
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_functionCallMapstylesheet_in_functionCall16898);
                    functionCallMapstylesheet742=functionCallMapstylesheet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionCallMapstylesheet742.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "functionCall"

    public static class functionCallInsert_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionCallInsert"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1870:1: functionCallInsert : ( keywordInsert whitespace p+= url ( mediumbreak p+= keywordRecurse )? ( mediumbreak p+= keywordSort )? ( mediumbreak p+= keywordCreateLevel | mediumbreak p+= keywordNoHead )? ( mediumbreak p+= parameterLevelAbove )? ( mediumbreak p+= parameterInsertStyle )? ( mediumbreak p+= compositeIdentifier )* ) -> ^( COMMAND_INSERT_ ( $p)+ ) ;
    public final NovelangParser.functionCallInsert_return functionCallInsert() throws RecognitionException {
        NovelangParser.functionCallInsert_return retval = new NovelangParser.functionCallInsert_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        List list_p=null;
        NovelangParser.keywordInsert_return keywordInsert743 = null;

        NovelangParser.whitespace_return whitespace744 = null;

        NovelangParser.mediumbreak_return mediumbreak745 = null;

        NovelangParser.mediumbreak_return mediumbreak746 = null;

        NovelangParser.mediumbreak_return mediumbreak747 = null;

        NovelangParser.mediumbreak_return mediumbreak748 = null;

        NovelangParser.mediumbreak_return mediumbreak749 = null;

        NovelangParser.mediumbreak_return mediumbreak750 = null;

        NovelangParser.mediumbreak_return mediumbreak751 = null;

        RuleReturnScope p = null;
        RewriteRuleSubtreeStream stream_compositeIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule compositeIdentifier");
        RewriteRuleSubtreeStream stream_mediumbreak=new RewriteRuleSubtreeStream(adaptor,"rule mediumbreak");
        RewriteRuleSubtreeStream stream_keywordSort=new RewriteRuleSubtreeStream(adaptor,"rule keywordSort");
        RewriteRuleSubtreeStream stream_keywordNoHead=new RewriteRuleSubtreeStream(adaptor,"rule keywordNoHead");
        RewriteRuleSubtreeStream stream_parameterInsertStyle=new RewriteRuleSubtreeStream(adaptor,"rule parameterInsertStyle");
        RewriteRuleSubtreeStream stream_keywordCreateLevel=new RewriteRuleSubtreeStream(adaptor,"rule keywordCreateLevel");
        RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
        RewriteRuleSubtreeStream stream_keywordRecurse=new RewriteRuleSubtreeStream(adaptor,"rule keywordRecurse");
        RewriteRuleSubtreeStream stream_keywordInsert=new RewriteRuleSubtreeStream(adaptor,"rule keywordInsert");
        RewriteRuleSubtreeStream stream_url=new RewriteRuleSubtreeStream(adaptor,"rule url");
        RewriteRuleSubtreeStream stream_parameterLevelAbove=new RewriteRuleSubtreeStream(adaptor,"rule parameterLevelAbove");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1871:3: ( ( keywordInsert whitespace p+= url ( mediumbreak p+= keywordRecurse )? ( mediumbreak p+= keywordSort )? ( mediumbreak p+= keywordCreateLevel | mediumbreak p+= keywordNoHead )? ( mediumbreak p+= parameterLevelAbove )? ( mediumbreak p+= parameterInsertStyle )? ( mediumbreak p+= compositeIdentifier )* ) -> ^( COMMAND_INSERT_ ( $p)+ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1871:5: ( keywordInsert whitespace p+= url ( mediumbreak p+= keywordRecurse )? ( mediumbreak p+= keywordSort )? ( mediumbreak p+= keywordCreateLevel | mediumbreak p+= keywordNoHead )? ( mediumbreak p+= parameterLevelAbove )? ( mediumbreak p+= parameterInsertStyle )? ( mediumbreak p+= compositeIdentifier )* )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1871:5: ( keywordInsert whitespace p+= url ( mediumbreak p+= keywordRecurse )? ( mediumbreak p+= keywordSort )? ( mediumbreak p+= keywordCreateLevel | mediumbreak p+= keywordNoHead )? ( mediumbreak p+= parameterLevelAbove )? ( mediumbreak p+= parameterInsertStyle )? ( mediumbreak p+= compositeIdentifier )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1871:7: keywordInsert whitespace p+= url ( mediumbreak p+= keywordRecurse )? ( mediumbreak p+= keywordSort )? ( mediumbreak p+= keywordCreateLevel | mediumbreak p+= keywordNoHead )? ( mediumbreak p+= parameterLevelAbove )? ( mediumbreak p+= parameterInsertStyle )? ( mediumbreak p+= compositeIdentifier )*
            {
            pushFollow(FOLLOW_keywordInsert_in_functionCallInsert16925);
            keywordInsert743=keywordInsert();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordInsert.add(keywordInsert743.getTree());
            pushFollow(FOLLOW_whitespace_in_functionCallInsert16933);
            whitespace744=whitespace();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_whitespace.add(whitespace744.getTree());
            pushFollow(FOLLOW_url_in_functionCallInsert16939);
            p=url();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_url.add(p.getTree());
            if (list_p==null) list_p=new ArrayList();
            list_p.add(p.getTree());

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1873:7: ( mediumbreak p+= keywordRecurse )?
            int alt385=2;
            int LA385_0 = input.LA(1);

            if ( (LA385_0==WHITESPACE) ) {
                int LA385_1 = input.LA(2);

                if ( (LA385_1==SOFTBREAK) ) {
                    int LA385_2 = input.LA(3);

                    if ( (LA385_2==WHITESPACE) ) {
                        int LA385_5 = input.LA(4);

                        if ( (LA385_5==LATIN_SMALL_LETTER_R) ) {
                            alt385=1;
                        }
                    }
                    else if ( (LA385_2==LATIN_SMALL_LETTER_R) ) {
                        alt385=1;
                    }
                }
                else if ( (LA385_1==LATIN_SMALL_LETTER_R) ) {
                    alt385=1;
                }
            }
            else if ( (LA385_0==SOFTBREAK) ) {
                int LA385_2 = input.LA(2);

                if ( (LA385_2==WHITESPACE) ) {
                    int LA385_5 = input.LA(3);

                    if ( (LA385_5==LATIN_SMALL_LETTER_R) ) {
                        alt385=1;
                    }
                }
                else if ( (LA385_2==LATIN_SMALL_LETTER_R) ) {
                    alt385=1;
                }
            }
            switch (alt385) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1873:9: mediumbreak p+= keywordRecurse
                    {
                    pushFollow(FOLLOW_mediumbreak_in_functionCallInsert16950);
                    mediumbreak745=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak745.getTree());
                    pushFollow(FOLLOW_keywordRecurse_in_functionCallInsert16956);
                    p=keywordRecurse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keywordRecurse.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1874:7: ( mediumbreak p+= keywordSort )?
            int alt386=2;
            int LA386_0 = input.LA(1);

            if ( (LA386_0==WHITESPACE) ) {
                int LA386_1 = input.LA(2);

                if ( (LA386_1==SOFTBREAK) ) {
                    int LA386_2 = input.LA(3);

                    if ( (LA386_2==WHITESPACE) ) {
                        int LA386_5 = input.LA(4);

                        if ( (LA386_5==LATIN_SMALL_LETTER_S) ) {
                            int LA386_4 = input.LA(5);

                            if ( (LA386_4==LATIN_SMALL_LETTER_O) ) {
                                alt386=1;
                            }
                        }
                    }
                    else if ( (LA386_2==LATIN_SMALL_LETTER_S) ) {
                        int LA386_4 = input.LA(4);

                        if ( (LA386_4==LATIN_SMALL_LETTER_O) ) {
                            alt386=1;
                        }
                    }
                }
                else if ( (LA386_1==LATIN_SMALL_LETTER_S) ) {
                    int LA386_4 = input.LA(3);

                    if ( (LA386_4==LATIN_SMALL_LETTER_O) ) {
                        alt386=1;
                    }
                }
            }
            else if ( (LA386_0==SOFTBREAK) ) {
                int LA386_2 = input.LA(2);

                if ( (LA386_2==WHITESPACE) ) {
                    int LA386_5 = input.LA(3);

                    if ( (LA386_5==LATIN_SMALL_LETTER_S) ) {
                        int LA386_4 = input.LA(4);

                        if ( (LA386_4==LATIN_SMALL_LETTER_O) ) {
                            alt386=1;
                        }
                    }
                }
                else if ( (LA386_2==LATIN_SMALL_LETTER_S) ) {
                    int LA386_4 = input.LA(3);

                    if ( (LA386_4==LATIN_SMALL_LETTER_O) ) {
                        alt386=1;
                    }
                }
            }
            switch (alt386) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1874:9: mediumbreak p+= keywordSort
                    {
                    pushFollow(FOLLOW_mediumbreak_in_functionCallInsert16969);
                    mediumbreak746=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak746.getTree());
                    pushFollow(FOLLOW_keywordSort_in_functionCallInsert16975);
                    p=keywordSort();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keywordSort.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1875:7: ( mediumbreak p+= keywordCreateLevel | mediumbreak p+= keywordNoHead )?
            int alt387=3;
            int LA387_0 = input.LA(1);

            if ( (LA387_0==WHITESPACE) ) {
                switch ( input.LA(2) ) {
                    case SOFTBREAK:
                        {
                        switch ( input.LA(3) ) {
                            case WHITESPACE:
                                {
                                int LA387_6 = input.LA(4);

                                if ( (LA387_6==LATIN_SMALL_LETTER_N) ) {
                                    alt387=2;
                                }
                                else if ( (LA387_6==LATIN_SMALL_LETTER_C) ) {
                                    alt387=1;
                                }
                                }
                                break;
                            case LATIN_SMALL_LETTER_C:
                                {
                                alt387=1;
                                }
                                break;
                            case LATIN_SMALL_LETTER_N:
                                {
                                alt387=2;
                                }
                                break;
                        }

                        }
                        break;
                    case LATIN_SMALL_LETTER_N:
                        {
                        alt387=2;
                        }
                        break;
                    case LATIN_SMALL_LETTER_C:
                        {
                        alt387=1;
                        }
                        break;
                }

            }
            else if ( (LA387_0==SOFTBREAK) ) {
                switch ( input.LA(2) ) {
                    case WHITESPACE:
                        {
                        int LA387_6 = input.LA(3);

                        if ( (LA387_6==LATIN_SMALL_LETTER_N) ) {
                            alt387=2;
                        }
                        else if ( (LA387_6==LATIN_SMALL_LETTER_C) ) {
                            alt387=1;
                        }
                        }
                        break;
                    case LATIN_SMALL_LETTER_C:
                        {
                        alt387=1;
                        }
                        break;
                    case LATIN_SMALL_LETTER_N:
                        {
                        alt387=2;
                        }
                        break;
                }

            }
            switch (alt387) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1875:9: mediumbreak p+= keywordCreateLevel
                    {
                    pushFollow(FOLLOW_mediumbreak_in_functionCallInsert16988);
                    mediumbreak747=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak747.getTree());
                    pushFollow(FOLLOW_keywordCreateLevel_in_functionCallInsert16994);
                    p=keywordCreateLevel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keywordCreateLevel.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1875:47: mediumbreak p+= keywordNoHead
                    {
                    pushFollow(FOLLOW_mediumbreak_in_functionCallInsert16998);
                    mediumbreak748=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak748.getTree());
                    pushFollow(FOLLOW_keywordNoHead_in_functionCallInsert17004);
                    p=keywordNoHead();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keywordNoHead.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1876:7: ( mediumbreak p+= parameterLevelAbove )?
            int alt388=2;
            int LA388_0 = input.LA(1);

            if ( (LA388_0==WHITESPACE) ) {
                int LA388_1 = input.LA(2);

                if ( (LA388_1==SOFTBREAK) ) {
                    int LA388_2 = input.LA(3);

                    if ( (LA388_2==WHITESPACE) ) {
                        int LA388_5 = input.LA(4);

                        if ( (LA388_5==LATIN_SMALL_LETTER_L) ) {
                            alt388=1;
                        }
                    }
                    else if ( (LA388_2==LATIN_SMALL_LETTER_L) ) {
                        alt388=1;
                    }
                }
                else if ( (LA388_1==LATIN_SMALL_LETTER_L) ) {
                    alt388=1;
                }
            }
            else if ( (LA388_0==SOFTBREAK) ) {
                int LA388_2 = input.LA(2);

                if ( (LA388_2==WHITESPACE) ) {
                    int LA388_5 = input.LA(3);

                    if ( (LA388_5==LATIN_SMALL_LETTER_L) ) {
                        alt388=1;
                    }
                }
                else if ( (LA388_2==LATIN_SMALL_LETTER_L) ) {
                    alt388=1;
                }
            }
            switch (alt388) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1876:9: mediumbreak p+= parameterLevelAbove
                    {
                    pushFollow(FOLLOW_mediumbreak_in_functionCallInsert17017);
                    mediumbreak749=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak749.getTree());
                    pushFollow(FOLLOW_parameterLevelAbove_in_functionCallInsert17023);
                    p=parameterLevelAbove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameterLevelAbove.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1877:7: ( mediumbreak p+= parameterInsertStyle )?
            int alt389=2;
            int LA389_0 = input.LA(1);

            if ( (LA389_0==WHITESPACE) ) {
                int LA389_1 = input.LA(2);

                if ( (LA389_1==SOFTBREAK) ) {
                    int LA389_2 = input.LA(3);

                    if ( (LA389_2==WHITESPACE) ) {
                        int LA389_5 = input.LA(4);

                        if ( (LA389_5==LATIN_SMALL_LETTER_S) ) {
                            alt389=1;
                        }
                    }
                    else if ( (LA389_2==LATIN_SMALL_LETTER_S) ) {
                        alt389=1;
                    }
                }
                else if ( (LA389_1==LATIN_SMALL_LETTER_S) ) {
                    alt389=1;
                }
            }
            else if ( (LA389_0==SOFTBREAK) ) {
                int LA389_2 = input.LA(2);

                if ( (LA389_2==WHITESPACE) ) {
                    int LA389_5 = input.LA(3);

                    if ( (LA389_5==LATIN_SMALL_LETTER_S) ) {
                        alt389=1;
                    }
                }
                else if ( (LA389_2==LATIN_SMALL_LETTER_S) ) {
                    alt389=1;
                }
            }
            switch (alt389) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1877:9: mediumbreak p+= parameterInsertStyle
                    {
                    pushFollow(FOLLOW_mediumbreak_in_functionCallInsert17036);
                    mediumbreak750=mediumbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak750.getTree());
                    pushFollow(FOLLOW_parameterInsertStyle_in_functionCallInsert17042);
                    p=parameterInsertStyle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameterInsertStyle.add(p.getTree());
                    if (list_p==null) list_p=new ArrayList();
                    list_p.add(p.getTree());


                    }
                    break;

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1878:7: ( mediumbreak p+= compositeIdentifier )*
            loop390:
            do {
                int alt390=2;
                int LA390_0 = input.LA(1);

                if ( (LA390_0==WHITESPACE) ) {
                    int LA390_1 = input.LA(2);

                    if ( (LA390_1==SOFTBREAK) ) {
                        int LA390_2 = input.LA(3);

                        if ( (LA390_2==WHITESPACE) ) {
                            int LA390_5 = input.LA(4);

                            if ( (LA390_5==REVERSE_SOLIDUS) ) {
                                alt390=1;
                            }


                        }
                        else if ( (LA390_2==REVERSE_SOLIDUS) ) {
                            alt390=1;
                        }


                    }
                    else if ( (LA390_1==REVERSE_SOLIDUS) ) {
                        alt390=1;
                    }


                }
                else if ( (LA390_0==SOFTBREAK) ) {
                    int LA390_2 = input.LA(2);

                    if ( (LA390_2==WHITESPACE) ) {
                        int LA390_5 = input.LA(3);

                        if ( (LA390_5==REVERSE_SOLIDUS) ) {
                            alt390=1;
                        }


                    }
                    else if ( (LA390_2==REVERSE_SOLIDUS) ) {
                        alt390=1;
                    }


                }


                switch (alt390) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1878:9: mediumbreak p+= compositeIdentifier
            	    {
            	    pushFollow(FOLLOW_mediumbreak_in_functionCallInsert17064);
            	    mediumbreak751=mediumbreak();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak751.getTree());
            	    pushFollow(FOLLOW_compositeIdentifier_in_functionCallInsert17070);
            	    p=compositeIdentifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_compositeIdentifier.add(p.getTree());
            	    if (list_p==null) list_p=new ArrayList();
            	    list_p.add(p.getTree());


            	    }
            	    break;

            	default :
            	    break loop390;
                }
            } while (true);


            }



            // AST REWRITE
            // elements: p
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: p
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"token p",list_p);
            root_0 = (Object)adaptor.nil();
            // 1880:5: -> ^( COMMAND_INSERT_ ( $p)+ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1880:8: ^( COMMAND_INSERT_ ( $p)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(COMMAND_INSERT_, "COMMAND_INSERT_"), root_1);

                if ( !(stream_p.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextTree());

                }
                stream_p.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "functionCallInsert"

    public static class keywordInsert_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordInsert"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1883:1: keywordInsert : LATIN_SMALL_LETTER_I LATIN_SMALL_LETTER_N LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_T ;
    public final NovelangParser.keywordInsert_return keywordInsert() throws RecognitionException {
        NovelangParser.keywordInsert_return retval = new NovelangParser.keywordInsert_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LATIN_SMALL_LETTER_I752=null;
        Token LATIN_SMALL_LETTER_N753=null;
        Token LATIN_SMALL_LETTER_S754=null;
        Token LATIN_SMALL_LETTER_E755=null;
        Token LATIN_SMALL_LETTER_R756=null;
        Token LATIN_SMALL_LETTER_T757=null;

        Object LATIN_SMALL_LETTER_I752_tree=null;
        Object LATIN_SMALL_LETTER_N753_tree=null;
        Object LATIN_SMALL_LETTER_S754_tree=null;
        Object LATIN_SMALL_LETTER_E755_tree=null;
        Object LATIN_SMALL_LETTER_R756_tree=null;
        Object LATIN_SMALL_LETTER_T757_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1884:3: ( LATIN_SMALL_LETTER_I LATIN_SMALL_LETTER_N LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_T )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1884:5: LATIN_SMALL_LETTER_I LATIN_SMALL_LETTER_N LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_T
            {
            root_0 = (Object)adaptor.nil();

            LATIN_SMALL_LETTER_I752=(Token)match(input,LATIN_SMALL_LETTER_I,FOLLOW_LATIN_SMALL_LETTER_I_in_keywordInsert17118); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_I752_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_I752);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_I752_tree);
            }
            LATIN_SMALL_LETTER_N753=(Token)match(input,LATIN_SMALL_LETTER_N,FOLLOW_LATIN_SMALL_LETTER_N_in_keywordInsert17120); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_N753_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_N753);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_N753_tree);
            }
            LATIN_SMALL_LETTER_S754=(Token)match(input,LATIN_SMALL_LETTER_S,FOLLOW_LATIN_SMALL_LETTER_S_in_keywordInsert17122); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_S754_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_S754);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_S754_tree);
            }
            LATIN_SMALL_LETTER_E755=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_keywordInsert17129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_E755_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_E755);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_E755_tree);
            }
            LATIN_SMALL_LETTER_R756=(Token)match(input,LATIN_SMALL_LETTER_R,FOLLOW_LATIN_SMALL_LETTER_R_in_keywordInsert17131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_R756_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_R756);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_R756_tree);
            }
            LATIN_SMALL_LETTER_T757=(Token)match(input,LATIN_SMALL_LETTER_T,FOLLOW_LATIN_SMALL_LETTER_T_in_keywordInsert17133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_T757_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_T757);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_T757_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordInsert"

    public static class keywordRecurse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordRecurse"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1888:1: keywordRecurse : ( LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_C LATIN_SMALL_LETTER_U LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_E ) -> ^( COMMAND_INSERT_RECURSE_ ) ;
    public final NovelangParser.keywordRecurse_return keywordRecurse() throws RecognitionException {
        NovelangParser.keywordRecurse_return retval = new NovelangParser.keywordRecurse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LATIN_SMALL_LETTER_R758=null;
        Token LATIN_SMALL_LETTER_E759=null;
        Token LATIN_SMALL_LETTER_C760=null;
        Token LATIN_SMALL_LETTER_U761=null;
        Token LATIN_SMALL_LETTER_R762=null;
        Token LATIN_SMALL_LETTER_S763=null;
        Token LATIN_SMALL_LETTER_E764=null;

        Object LATIN_SMALL_LETTER_R758_tree=null;
        Object LATIN_SMALL_LETTER_E759_tree=null;
        Object LATIN_SMALL_LETTER_C760_tree=null;
        Object LATIN_SMALL_LETTER_U761_tree=null;
        Object LATIN_SMALL_LETTER_R762_tree=null;
        Object LATIN_SMALL_LETTER_S763_tree=null;
        Object LATIN_SMALL_LETTER_E764_tree=null;
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_E=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_E");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_C=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_C");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_R=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_R");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_S=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_S");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_U=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_U");

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1889:3: ( ( LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_C LATIN_SMALL_LETTER_U LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_E ) -> ^( COMMAND_INSERT_RECURSE_ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1889:5: ( LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_C LATIN_SMALL_LETTER_U LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_E )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1889:5: ( LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_C LATIN_SMALL_LETTER_U LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_E )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1889:7: LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_C LATIN_SMALL_LETTER_U LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_E
            {
            LATIN_SMALL_LETTER_R758=(Token)match(input,LATIN_SMALL_LETTER_R,FOLLOW_LATIN_SMALL_LETTER_R_in_keywordRecurse17152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_R.add(LATIN_SMALL_LETTER_R758);

            LATIN_SMALL_LETTER_E759=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_keywordRecurse17154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_E.add(LATIN_SMALL_LETTER_E759);

            LATIN_SMALL_LETTER_C760=(Token)match(input,LATIN_SMALL_LETTER_C,FOLLOW_LATIN_SMALL_LETTER_C_in_keywordRecurse17156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_C.add(LATIN_SMALL_LETTER_C760);

            LATIN_SMALL_LETTER_U761=(Token)match(input,LATIN_SMALL_LETTER_U,FOLLOW_LATIN_SMALL_LETTER_U_in_keywordRecurse17165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_U.add(LATIN_SMALL_LETTER_U761);

            LATIN_SMALL_LETTER_R762=(Token)match(input,LATIN_SMALL_LETTER_R,FOLLOW_LATIN_SMALL_LETTER_R_in_keywordRecurse17167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_R.add(LATIN_SMALL_LETTER_R762);

            LATIN_SMALL_LETTER_S763=(Token)match(input,LATIN_SMALL_LETTER_S,FOLLOW_LATIN_SMALL_LETTER_S_in_keywordRecurse17169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_S.add(LATIN_SMALL_LETTER_S763);

            LATIN_SMALL_LETTER_E764=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_keywordRecurse17171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_E.add(LATIN_SMALL_LETTER_E764);


            }



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1892:5: -> ^( COMMAND_INSERT_RECURSE_ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1892:8: ^( COMMAND_INSERT_RECURSE_ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(COMMAND_INSERT_RECURSE_, "COMMAND_INSERT_RECURSE_"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordRecurse"

    public static class keywordSort_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordSort"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1895:1: keywordSort : ( LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_O LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_T EQUALS_SIGN s= sortOrder ) ->;
    public final NovelangParser.keywordSort_return keywordSort() throws RecognitionException {
        NovelangParser.keywordSort_return retval = new NovelangParser.keywordSort_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LATIN_SMALL_LETTER_S765=null;
        Token LATIN_SMALL_LETTER_O766=null;
        Token LATIN_SMALL_LETTER_R767=null;
        Token LATIN_SMALL_LETTER_T768=null;
        Token EQUALS_SIGN769=null;
        NovelangParser.sortOrder_return s = null;


        Object LATIN_SMALL_LETTER_S765_tree=null;
        Object LATIN_SMALL_LETTER_O766_tree=null;
        Object LATIN_SMALL_LETTER_R767_tree=null;
        Object LATIN_SMALL_LETTER_T768_tree=null;
        Object EQUALS_SIGN769_tree=null;
        RewriteRuleTokenStream stream_EQUALS_SIGN=new RewriteRuleTokenStream(adaptor,"token EQUALS_SIGN");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_O=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_O");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_R=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_R");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_S=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_S");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_T=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_T");
        RewriteRuleSubtreeStream stream_sortOrder=new RewriteRuleSubtreeStream(adaptor,"rule sortOrder");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1896:3: ( ( LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_O LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_T EQUALS_SIGN s= sortOrder ) ->)
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1896:5: ( LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_O LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_T EQUALS_SIGN s= sortOrder )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1896:5: ( LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_O LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_T EQUALS_SIGN s= sortOrder )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1896:7: LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_O LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_T EQUALS_SIGN s= sortOrder
            {
            LATIN_SMALL_LETTER_S765=(Token)match(input,LATIN_SMALL_LETTER_S,FOLLOW_LATIN_SMALL_LETTER_S_in_keywordSort17211); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_S.add(LATIN_SMALL_LETTER_S765);

            LATIN_SMALL_LETTER_O766=(Token)match(input,LATIN_SMALL_LETTER_O,FOLLOW_LATIN_SMALL_LETTER_O_in_keywordSort17213); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_O.add(LATIN_SMALL_LETTER_O766);

            LATIN_SMALL_LETTER_R767=(Token)match(input,LATIN_SMALL_LETTER_R,FOLLOW_LATIN_SMALL_LETTER_R_in_keywordSort17215); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_R.add(LATIN_SMALL_LETTER_R767);

            LATIN_SMALL_LETTER_T768=(Token)match(input,LATIN_SMALL_LETTER_T,FOLLOW_LATIN_SMALL_LETTER_T_in_keywordSort17217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_T.add(LATIN_SMALL_LETTER_T768);

            EQUALS_SIGN769=(Token)match(input,EQUALS_SIGN,FOLLOW_EQUALS_SIGN_in_keywordSort17226); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS_SIGN.add(EQUALS_SIGN769);

            pushFollow(FOLLOW_sortOrder_in_keywordSort17232);
            s=sortOrder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sortOrder.add(s.getTree());

            }



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1899:5: ->
            {
                adaptor.addChild(root_0,  delegate.createTree( COMMAND_INSERT_SORT_, (s!=null?input.toString(s.start,s.stop):null) ) );

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordSort"

    public static class sortOrder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sortOrder"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1903:1: sortOrder : ( letter | digit )+ ( PLUS_SIGN | HYPHEN_MINUS ) ;
    public final NovelangParser.sortOrder_return sortOrder() throws RecognitionException {
        NovelangParser.sortOrder_return retval = new NovelangParser.sortOrder_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set772=null;
        NovelangParser.letter_return letter770 = null;

        NovelangParser.digit_return digit771 = null;


        Object set772_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1904:3: ( ( letter | digit )+ ( PLUS_SIGN | HYPHEN_MINUS ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1904:5: ( letter | digit )+ ( PLUS_SIGN | HYPHEN_MINUS )
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1904:5: ( letter | digit )+
            int cnt391=0;
            loop391:
            do {
                int alt391=3;
                int LA391_0 = input.LA(1);

                if ( ((LA391_0>=LATIN_SMALL_LETTER_F && LA391_0<=LATIN_SMALL_LETTER_S)||(LA391_0>=LATIN_SMALL_LETTER_N && LA391_0<=LATIN_SMALL_LETTER_V)||(LA391_0>=LATIN_SMALL_LETTER_R && LA391_0<=LATIN_SMALL_LETTER_M)||(LA391_0>=LATIN_CAPITAL_LETTER_A && LA391_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    alt391=1;
                }
                else if ( ((LA391_0>=DIGIT_0 && LA391_0<=DIGIT_9)) ) {
                    alt391=2;
                }


                switch (alt391) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1904:7: letter
            	    {
            	    pushFollow(FOLLOW_letter_in_sortOrder17276);
            	    letter770=letter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, letter770.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1904:16: digit
            	    {
            	    pushFollow(FOLLOW_digit_in_sortOrder17280);
            	    digit771=digit();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, digit771.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt391 >= 1 ) break loop391;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(391, input);
                        throw eee;
                }
                cnt391++;
            } while (true);

            set772=(Token)input.LT(1);
            if ( input.LA(1)==HYPHEN_MINUS||input.LA(1)==PLUS_SIGN ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set772));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sortOrder"

    public static class keywordCreateLevel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordCreateLevel"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1907:1: keywordCreateLevel : ( LATIN_SMALL_LETTER_C LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_L ) -> ^( COMMAND_INSERT_CREATELEVEL_ ) ;
    public final NovelangParser.keywordCreateLevel_return keywordCreateLevel() throws RecognitionException {
        NovelangParser.keywordCreateLevel_return retval = new NovelangParser.keywordCreateLevel_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LATIN_SMALL_LETTER_C773=null;
        Token LATIN_SMALL_LETTER_R774=null;
        Token LATIN_SMALL_LETTER_E775=null;
        Token LATIN_SMALL_LETTER_A776=null;
        Token LATIN_SMALL_LETTER_T777=null;
        Token LATIN_SMALL_LETTER_E778=null;
        Token LATIN_SMALL_LETTER_L779=null;
        Token LATIN_SMALL_LETTER_E780=null;
        Token LATIN_SMALL_LETTER_V781=null;
        Token LATIN_SMALL_LETTER_E782=null;
        Token LATIN_SMALL_LETTER_L783=null;

        Object LATIN_SMALL_LETTER_C773_tree=null;
        Object LATIN_SMALL_LETTER_R774_tree=null;
        Object LATIN_SMALL_LETTER_E775_tree=null;
        Object LATIN_SMALL_LETTER_A776_tree=null;
        Object LATIN_SMALL_LETTER_T777_tree=null;
        Object LATIN_SMALL_LETTER_E778_tree=null;
        Object LATIN_SMALL_LETTER_L779_tree=null;
        Object LATIN_SMALL_LETTER_E780_tree=null;
        Object LATIN_SMALL_LETTER_V781_tree=null;
        Object LATIN_SMALL_LETTER_E782_tree=null;
        Object LATIN_SMALL_LETTER_L783_tree=null;
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_E=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_E");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_V=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_V");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_C=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_C");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_A=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_A");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_L=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_L");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_R=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_R");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_T=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_T");

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1908:3: ( ( LATIN_SMALL_LETTER_C LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_L ) -> ^( COMMAND_INSERT_CREATELEVEL_ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1908:5: ( LATIN_SMALL_LETTER_C LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_L )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1908:5: ( LATIN_SMALL_LETTER_C LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_L )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1908:7: LATIN_SMALL_LETTER_C LATIN_SMALL_LETTER_R LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_L
            {
            LATIN_SMALL_LETTER_C773=(Token)match(input,LATIN_SMALL_LETTER_C,FOLLOW_LATIN_SMALL_LETTER_C_in_keywordCreateLevel17311); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_C.add(LATIN_SMALL_LETTER_C773);

            LATIN_SMALL_LETTER_R774=(Token)match(input,LATIN_SMALL_LETTER_R,FOLLOW_LATIN_SMALL_LETTER_R_in_keywordCreateLevel17313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_R.add(LATIN_SMALL_LETTER_R774);

            LATIN_SMALL_LETTER_E775=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_keywordCreateLevel17315); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_E.add(LATIN_SMALL_LETTER_E775);

            LATIN_SMALL_LETTER_A776=(Token)match(input,LATIN_SMALL_LETTER_A,FOLLOW_LATIN_SMALL_LETTER_A_in_keywordCreateLevel17324); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_A.add(LATIN_SMALL_LETTER_A776);

            LATIN_SMALL_LETTER_T777=(Token)match(input,LATIN_SMALL_LETTER_T,FOLLOW_LATIN_SMALL_LETTER_T_in_keywordCreateLevel17326); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_T.add(LATIN_SMALL_LETTER_T777);

            LATIN_SMALL_LETTER_E778=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_keywordCreateLevel17328); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_E.add(LATIN_SMALL_LETTER_E778);

            LATIN_SMALL_LETTER_L779=(Token)match(input,LATIN_SMALL_LETTER_L,FOLLOW_LATIN_SMALL_LETTER_L_in_keywordCreateLevel17330); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_L.add(LATIN_SMALL_LETTER_L779);

            LATIN_SMALL_LETTER_E780=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_keywordCreateLevel17339); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_E.add(LATIN_SMALL_LETTER_E780);

            LATIN_SMALL_LETTER_V781=(Token)match(input,LATIN_SMALL_LETTER_V,FOLLOW_LATIN_SMALL_LETTER_V_in_keywordCreateLevel17341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_V.add(LATIN_SMALL_LETTER_V781);

            LATIN_SMALL_LETTER_E782=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_keywordCreateLevel17343); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_E.add(LATIN_SMALL_LETTER_E782);

            LATIN_SMALL_LETTER_L783=(Token)match(input,LATIN_SMALL_LETTER_L,FOLLOW_LATIN_SMALL_LETTER_L_in_keywordCreateLevel17345); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_L.add(LATIN_SMALL_LETTER_L783);


            }



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1912:5: -> ^( COMMAND_INSERT_CREATELEVEL_ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1912:8: ^( COMMAND_INSERT_CREATELEVEL_ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(COMMAND_INSERT_CREATELEVEL_, "COMMAND_INSERT_CREATELEVEL_"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordCreateLevel"

    public static class keywordNoHead_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordNoHead"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1915:1: keywordNoHead : ( LATIN_SMALL_LETTER_N LATIN_SMALL_LETTER_O LATIN_SMALL_LETTER_H LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_D ) -> ^( COMMAND_INSERT_NOHEAD_ ) ;
    public final NovelangParser.keywordNoHead_return keywordNoHead() throws RecognitionException {
        NovelangParser.keywordNoHead_return retval = new NovelangParser.keywordNoHead_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LATIN_SMALL_LETTER_N784=null;
        Token LATIN_SMALL_LETTER_O785=null;
        Token LATIN_SMALL_LETTER_H786=null;
        Token LATIN_SMALL_LETTER_E787=null;
        Token LATIN_SMALL_LETTER_A788=null;
        Token LATIN_SMALL_LETTER_D789=null;

        Object LATIN_SMALL_LETTER_N784_tree=null;
        Object LATIN_SMALL_LETTER_O785_tree=null;
        Object LATIN_SMALL_LETTER_H786_tree=null;
        Object LATIN_SMALL_LETTER_E787_tree=null;
        Object LATIN_SMALL_LETTER_A788_tree=null;
        Object LATIN_SMALL_LETTER_D789_tree=null;
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_D=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_D");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_E=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_E");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_H=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_H");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_A=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_A");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_N=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_N");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_O=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_O");

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1916:3: ( ( LATIN_SMALL_LETTER_N LATIN_SMALL_LETTER_O LATIN_SMALL_LETTER_H LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_D ) -> ^( COMMAND_INSERT_NOHEAD_ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1916:5: ( LATIN_SMALL_LETTER_N LATIN_SMALL_LETTER_O LATIN_SMALL_LETTER_H LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_D )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1916:5: ( LATIN_SMALL_LETTER_N LATIN_SMALL_LETTER_O LATIN_SMALL_LETTER_H LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_D )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1916:7: LATIN_SMALL_LETTER_N LATIN_SMALL_LETTER_O LATIN_SMALL_LETTER_H LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_D
            {
            LATIN_SMALL_LETTER_N784=(Token)match(input,LATIN_SMALL_LETTER_N,FOLLOW_LATIN_SMALL_LETTER_N_in_keywordNoHead17381); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_N.add(LATIN_SMALL_LETTER_N784);

            LATIN_SMALL_LETTER_O785=(Token)match(input,LATIN_SMALL_LETTER_O,FOLLOW_LATIN_SMALL_LETTER_O_in_keywordNoHead17383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_O.add(LATIN_SMALL_LETTER_O785);

            LATIN_SMALL_LETTER_H786=(Token)match(input,LATIN_SMALL_LETTER_H,FOLLOW_LATIN_SMALL_LETTER_H_in_keywordNoHead17385); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_H.add(LATIN_SMALL_LETTER_H786);

            LATIN_SMALL_LETTER_E787=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_keywordNoHead17393); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_E.add(LATIN_SMALL_LETTER_E787);

            LATIN_SMALL_LETTER_A788=(Token)match(input,LATIN_SMALL_LETTER_A,FOLLOW_LATIN_SMALL_LETTER_A_in_keywordNoHead17395); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_A.add(LATIN_SMALL_LETTER_A788);

            LATIN_SMALL_LETTER_D789=(Token)match(input,LATIN_SMALL_LETTER_D,FOLLOW_LATIN_SMALL_LETTER_D_in_keywordNoHead17397); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_D.add(LATIN_SMALL_LETTER_D789);


            }



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1919:5: -> ^( COMMAND_INSERT_NOHEAD_ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1919:8: ^( COMMAND_INSERT_NOHEAD_ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(COMMAND_INSERT_NOHEAD_, "COMMAND_INSERT_NOHEAD_"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordNoHead"

    public static class parameterLevelAbove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameterLevelAbove"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1922:1: parameterLevelAbove : ( LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_B LATIN_SMALL_LETTER_O LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_E EQUALS_SIGN (s= digit )+ ) ->;
    public final NovelangParser.parameterLevelAbove_return parameterLevelAbove() throws RecognitionException {
        NovelangParser.parameterLevelAbove_return retval = new NovelangParser.parameterLevelAbove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LATIN_SMALL_LETTER_L790=null;
        Token LATIN_SMALL_LETTER_E791=null;
        Token LATIN_SMALL_LETTER_V792=null;
        Token LATIN_SMALL_LETTER_E793=null;
        Token LATIN_SMALL_LETTER_L794=null;
        Token LATIN_SMALL_LETTER_A795=null;
        Token LATIN_SMALL_LETTER_B796=null;
        Token LATIN_SMALL_LETTER_O797=null;
        Token LATIN_SMALL_LETTER_V798=null;
        Token LATIN_SMALL_LETTER_E799=null;
        Token EQUALS_SIGN800=null;
        NovelangParser.digit_return s = null;


        Object LATIN_SMALL_LETTER_L790_tree=null;
        Object LATIN_SMALL_LETTER_E791_tree=null;
        Object LATIN_SMALL_LETTER_V792_tree=null;
        Object LATIN_SMALL_LETTER_E793_tree=null;
        Object LATIN_SMALL_LETTER_L794_tree=null;
        Object LATIN_SMALL_LETTER_A795_tree=null;
        Object LATIN_SMALL_LETTER_B796_tree=null;
        Object LATIN_SMALL_LETTER_O797_tree=null;
        Object LATIN_SMALL_LETTER_V798_tree=null;
        Object LATIN_SMALL_LETTER_E799_tree=null;
        Object EQUALS_SIGN800_tree=null;
        RewriteRuleTokenStream stream_EQUALS_SIGN=new RewriteRuleTokenStream(adaptor,"token EQUALS_SIGN");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_E=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_E");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_V=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_V");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_B=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_B");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_A=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_A");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_L=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_L");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_O=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_O");
        RewriteRuleSubtreeStream stream_digit=new RewriteRuleSubtreeStream(adaptor,"rule digit");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1923:3: ( ( LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_B LATIN_SMALL_LETTER_O LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_E EQUALS_SIGN (s= digit )+ ) ->)
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1923:5: ( LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_B LATIN_SMALL_LETTER_O LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_E EQUALS_SIGN (s= digit )+ )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1923:5: ( LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_B LATIN_SMALL_LETTER_O LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_E EQUALS_SIGN (s= digit )+ )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1923:7: LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_B LATIN_SMALL_LETTER_O LATIN_SMALL_LETTER_V LATIN_SMALL_LETTER_E EQUALS_SIGN (s= digit )+
            {
            LATIN_SMALL_LETTER_L790=(Token)match(input,LATIN_SMALL_LETTER_L,FOLLOW_LATIN_SMALL_LETTER_L_in_parameterLevelAbove17430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_L.add(LATIN_SMALL_LETTER_L790);

            LATIN_SMALL_LETTER_E791=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_parameterLevelAbove17432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_E.add(LATIN_SMALL_LETTER_E791);

            LATIN_SMALL_LETTER_V792=(Token)match(input,LATIN_SMALL_LETTER_V,FOLLOW_LATIN_SMALL_LETTER_V_in_parameterLevelAbove17434); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_V.add(LATIN_SMALL_LETTER_V792);

            LATIN_SMALL_LETTER_E793=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_parameterLevelAbove17436); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_E.add(LATIN_SMALL_LETTER_E793);

            LATIN_SMALL_LETTER_L794=(Token)match(input,LATIN_SMALL_LETTER_L,FOLLOW_LATIN_SMALL_LETTER_L_in_parameterLevelAbove17445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_L.add(LATIN_SMALL_LETTER_L794);

            LATIN_SMALL_LETTER_A795=(Token)match(input,LATIN_SMALL_LETTER_A,FOLLOW_LATIN_SMALL_LETTER_A_in_parameterLevelAbove17447); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_A.add(LATIN_SMALL_LETTER_A795);

            LATIN_SMALL_LETTER_B796=(Token)match(input,LATIN_SMALL_LETTER_B,FOLLOW_LATIN_SMALL_LETTER_B_in_parameterLevelAbove17449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_B.add(LATIN_SMALL_LETTER_B796);

            LATIN_SMALL_LETTER_O797=(Token)match(input,LATIN_SMALL_LETTER_O,FOLLOW_LATIN_SMALL_LETTER_O_in_parameterLevelAbove17451); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_O.add(LATIN_SMALL_LETTER_O797);

            LATIN_SMALL_LETTER_V798=(Token)match(input,LATIN_SMALL_LETTER_V,FOLLOW_LATIN_SMALL_LETTER_V_in_parameterLevelAbove17460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_V.add(LATIN_SMALL_LETTER_V798);

            LATIN_SMALL_LETTER_E799=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_parameterLevelAbove17462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_E.add(LATIN_SMALL_LETTER_E799);

            EQUALS_SIGN800=(Token)match(input,EQUALS_SIGN,FOLLOW_EQUALS_SIGN_in_parameterLevelAbove17464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS_SIGN.add(EQUALS_SIGN800);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1925:63: (s= digit )+
            int cnt392=0;
            loop392:
            do {
                int alt392=2;
                int LA392_0 = input.LA(1);

                if ( ((LA392_0>=DIGIT_0 && LA392_0<=DIGIT_9)) ) {
                    alt392=1;
                }


                switch (alt392) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1925:63: s= digit
            	    {
            	    pushFollow(FOLLOW_digit_in_parameterLevelAbove17470);
            	    s=digit();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_digit.add(s.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt392 >= 1 ) break loop392;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(392, input);
                        throw eee;
                }
                cnt392++;
            } while (true);


            }



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1927:5: ->
            {
                adaptor.addChild(root_0,  delegate.createTree( COMMAND_INSERT_LEVELABOVE_, (s!=null?input.toString(s.start,s.stop):null) ) );

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameterLevelAbove"

    public static class parameterInsertStyle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameterInsertStyle"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1931:1: parameterInsertStyle : ( LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_Y LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E EQUALS_SIGN s= rawExtendedWord ) ->;
    public final NovelangParser.parameterInsertStyle_return parameterInsertStyle() throws RecognitionException {
        NovelangParser.parameterInsertStyle_return retval = new NovelangParser.parameterInsertStyle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LATIN_SMALL_LETTER_S801=null;
        Token LATIN_SMALL_LETTER_T802=null;
        Token LATIN_SMALL_LETTER_Y803=null;
        Token LATIN_SMALL_LETTER_L804=null;
        Token LATIN_SMALL_LETTER_E805=null;
        Token EQUALS_SIGN806=null;
        NovelangParser.rawExtendedWord_return s = null;


        Object LATIN_SMALL_LETTER_S801_tree=null;
        Object LATIN_SMALL_LETTER_T802_tree=null;
        Object LATIN_SMALL_LETTER_Y803_tree=null;
        Object LATIN_SMALL_LETTER_L804_tree=null;
        Object LATIN_SMALL_LETTER_E805_tree=null;
        Object EQUALS_SIGN806_tree=null;
        RewriteRuleTokenStream stream_EQUALS_SIGN=new RewriteRuleTokenStream(adaptor,"token EQUALS_SIGN");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_E=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_E");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_Y=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_Y");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_L=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_L");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_S=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_S");
        RewriteRuleTokenStream stream_LATIN_SMALL_LETTER_T=new RewriteRuleTokenStream(adaptor,"token LATIN_SMALL_LETTER_T");
        RewriteRuleSubtreeStream stream_rawExtendedWord=new RewriteRuleSubtreeStream(adaptor,"rule rawExtendedWord");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1932:3: ( ( LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_Y LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E EQUALS_SIGN s= rawExtendedWord ) ->)
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1932:5: ( LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_Y LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E EQUALS_SIGN s= rawExtendedWord )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1932:5: ( LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_Y LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E EQUALS_SIGN s= rawExtendedWord )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1932:7: LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_Y LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E EQUALS_SIGN s= rawExtendedWord
            {
            LATIN_SMALL_LETTER_S801=(Token)match(input,LATIN_SMALL_LETTER_S,FOLLOW_LATIN_SMALL_LETTER_S_in_parameterInsertStyle17519); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_S.add(LATIN_SMALL_LETTER_S801);

            LATIN_SMALL_LETTER_T802=(Token)match(input,LATIN_SMALL_LETTER_T,FOLLOW_LATIN_SMALL_LETTER_T_in_parameterInsertStyle17521); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_T.add(LATIN_SMALL_LETTER_T802);

            LATIN_SMALL_LETTER_Y803=(Token)match(input,LATIN_SMALL_LETTER_Y,FOLLOW_LATIN_SMALL_LETTER_Y_in_parameterInsertStyle17523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_Y.add(LATIN_SMALL_LETTER_Y803);

            LATIN_SMALL_LETTER_L804=(Token)match(input,LATIN_SMALL_LETTER_L,FOLLOW_LATIN_SMALL_LETTER_L_in_parameterInsertStyle17532); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_L.add(LATIN_SMALL_LETTER_L804);

            LATIN_SMALL_LETTER_E805=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_parameterInsertStyle17534); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LATIN_SMALL_LETTER_E.add(LATIN_SMALL_LETTER_E805);

            EQUALS_SIGN806=(Token)match(input,EQUALS_SIGN,FOLLOW_EQUALS_SIGN_in_parameterInsertStyle17536); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS_SIGN.add(EQUALS_SIGN806);

            pushFollow(FOLLOW_rawExtendedWord_in_parameterInsertStyle17548);
            s=rawExtendedWord();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rawExtendedWord.add(s.getTree());

            }



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1936:5: ->
            {
                adaptor.addChild(root_0,  delegate.createTree( COMMAND_INSERT_STYLE_, (s!=null?s.text:null) ) );

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameterInsertStyle"

    public static class functionCallMapstylesheet_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionCallMapstylesheet"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1940:1: functionCallMapstylesheet : ( keywordMapstylesheet ( mediumbreak assignmentArgument )+ ) -> ^( COMMAND_MAPSTYLESHEET_ ( assignmentArgument )+ ) ;
    public final NovelangParser.functionCallMapstylesheet_return functionCallMapstylesheet() throws RecognitionException {
        NovelangParser.functionCallMapstylesheet_return retval = new NovelangParser.functionCallMapstylesheet_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.keywordMapstylesheet_return keywordMapstylesheet807 = null;

        NovelangParser.mediumbreak_return mediumbreak808 = null;

        NovelangParser.assignmentArgument_return assignmentArgument809 = null;


        RewriteRuleSubtreeStream stream_mediumbreak=new RewriteRuleSubtreeStream(adaptor,"rule mediumbreak");
        RewriteRuleSubtreeStream stream_assignmentArgument=new RewriteRuleSubtreeStream(adaptor,"rule assignmentArgument");
        RewriteRuleSubtreeStream stream_keywordMapstylesheet=new RewriteRuleSubtreeStream(adaptor,"rule keywordMapstylesheet");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1941:3: ( ( keywordMapstylesheet ( mediumbreak assignmentArgument )+ ) -> ^( COMMAND_MAPSTYLESHEET_ ( assignmentArgument )+ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1941:5: ( keywordMapstylesheet ( mediumbreak assignmentArgument )+ )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1941:5: ( keywordMapstylesheet ( mediumbreak assignmentArgument )+ )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1941:7: keywordMapstylesheet ( mediumbreak assignmentArgument )+
            {
            pushFollow(FOLLOW_keywordMapstylesheet_in_functionCallMapstylesheet17583);
            keywordMapstylesheet807=keywordMapstylesheet();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordMapstylesheet.add(keywordMapstylesheet807.getTree());
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1941:28: ( mediumbreak assignmentArgument )+
            int cnt393=0;
            loop393:
            do {
                int alt393=2;
                int LA393_0 = input.LA(1);

                if ( (LA393_0==WHITESPACE) ) {
                    int LA393_1 = input.LA(2);

                    if ( (LA393_1==SOFTBREAK) ) {
                        int LA393_2 = input.LA(3);

                        if ( (LA393_2==WHITESPACE) ) {
                            int LA393_5 = input.LA(4);

                            if ( ((LA393_5>=LATIN_SMALL_LETTER_F && LA393_5<=LATIN_SMALL_LETTER_S)||(LA393_5>=LATIN_SMALL_LETTER_N && LA393_5<=LATIN_SMALL_LETTER_V)||(LA393_5>=LATIN_SMALL_LETTER_R && LA393_5<=LATIN_SMALL_LETTER_M)||(LA393_5>=DIGIT_0 && LA393_5<=LATIN_CAPITAL_LETTER_Z)) ) {
                                alt393=1;
                            }


                        }
                        else if ( ((LA393_2>=LATIN_SMALL_LETTER_F && LA393_2<=LATIN_SMALL_LETTER_S)||(LA393_2>=LATIN_SMALL_LETTER_N && LA393_2<=LATIN_SMALL_LETTER_V)||(LA393_2>=LATIN_SMALL_LETTER_R && LA393_2<=LATIN_SMALL_LETTER_M)||(LA393_2>=DIGIT_0 && LA393_2<=LATIN_CAPITAL_LETTER_Z)) ) {
                            alt393=1;
                        }


                    }
                    else if ( ((LA393_1>=LATIN_SMALL_LETTER_F && LA393_1<=LATIN_SMALL_LETTER_S)||(LA393_1>=LATIN_SMALL_LETTER_N && LA393_1<=LATIN_SMALL_LETTER_V)||(LA393_1>=LATIN_SMALL_LETTER_R && LA393_1<=LATIN_SMALL_LETTER_M)||(LA393_1>=DIGIT_0 && LA393_1<=LATIN_CAPITAL_LETTER_Z)) ) {
                        alt393=1;
                    }


                }
                else if ( (LA393_0==SOFTBREAK) ) {
                    int LA393_2 = input.LA(2);

                    if ( (LA393_2==WHITESPACE) ) {
                        int LA393_5 = input.LA(3);

                        if ( ((LA393_5>=LATIN_SMALL_LETTER_F && LA393_5<=LATIN_SMALL_LETTER_S)||(LA393_5>=LATIN_SMALL_LETTER_N && LA393_5<=LATIN_SMALL_LETTER_V)||(LA393_5>=LATIN_SMALL_LETTER_R && LA393_5<=LATIN_SMALL_LETTER_M)||(LA393_5>=DIGIT_0 && LA393_5<=LATIN_CAPITAL_LETTER_Z)) ) {
                            alt393=1;
                        }


                    }
                    else if ( ((LA393_2>=LATIN_SMALL_LETTER_F && LA393_2<=LATIN_SMALL_LETTER_S)||(LA393_2>=LATIN_SMALL_LETTER_N && LA393_2<=LATIN_SMALL_LETTER_V)||(LA393_2>=LATIN_SMALL_LETTER_R && LA393_2<=LATIN_SMALL_LETTER_M)||(LA393_2>=DIGIT_0 && LA393_2<=LATIN_CAPITAL_LETTER_Z)) ) {
                        alt393=1;
                    }


                }


                switch (alt393) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1941:30: mediumbreak assignmentArgument
            	    {
            	    pushFollow(FOLLOW_mediumbreak_in_functionCallMapstylesheet17587);
            	    mediumbreak808=mediumbreak();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mediumbreak.add(mediumbreak808.getTree());
            	    pushFollow(FOLLOW_assignmentArgument_in_functionCallMapstylesheet17589);
            	    assignmentArgument809=assignmentArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_assignmentArgument.add(assignmentArgument809.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt393 >= 1 ) break loop393;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(393, input);
                        throw eee;
                }
                cnt393++;
            } while (true);


            }



            // AST REWRITE
            // elements: assignmentArgument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1942:5: -> ^( COMMAND_MAPSTYLESHEET_ ( assignmentArgument )+ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1942:8: ^( COMMAND_MAPSTYLESHEET_ ( assignmentArgument )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(COMMAND_MAPSTYLESHEET_, "COMMAND_MAPSTYLESHEET_"), root_1);

                if ( !(stream_assignmentArgument.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_assignmentArgument.hasNext() ) {
                    adaptor.addChild(root_1, stream_assignmentArgument.nextTree());

                }
                stream_assignmentArgument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "functionCallMapstylesheet"

    public static class keywordMapstylesheet_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordMapstylesheet"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1945:1: keywordMapstylesheet : LATIN_SMALL_LETTER_M LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_Y LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_H LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_T ;
    public final NovelangParser.keywordMapstylesheet_return keywordMapstylesheet() throws RecognitionException {
        NovelangParser.keywordMapstylesheet_return retval = new NovelangParser.keywordMapstylesheet_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LATIN_SMALL_LETTER_M810=null;
        Token LATIN_SMALL_LETTER_A811=null;
        Token LATIN_SMALL_LETTER_P812=null;
        Token LATIN_SMALL_LETTER_S813=null;
        Token LATIN_SMALL_LETTER_T814=null;
        Token LATIN_SMALL_LETTER_Y815=null;
        Token LATIN_SMALL_LETTER_L816=null;
        Token LATIN_SMALL_LETTER_E817=null;
        Token LATIN_SMALL_LETTER_S818=null;
        Token LATIN_SMALL_LETTER_H819=null;
        Token LATIN_SMALL_LETTER_E820=null;
        Token LATIN_SMALL_LETTER_E821=null;
        Token LATIN_SMALL_LETTER_T822=null;

        Object LATIN_SMALL_LETTER_M810_tree=null;
        Object LATIN_SMALL_LETTER_A811_tree=null;
        Object LATIN_SMALL_LETTER_P812_tree=null;
        Object LATIN_SMALL_LETTER_S813_tree=null;
        Object LATIN_SMALL_LETTER_T814_tree=null;
        Object LATIN_SMALL_LETTER_Y815_tree=null;
        Object LATIN_SMALL_LETTER_L816_tree=null;
        Object LATIN_SMALL_LETTER_E817_tree=null;
        Object LATIN_SMALL_LETTER_S818_tree=null;
        Object LATIN_SMALL_LETTER_H819_tree=null;
        Object LATIN_SMALL_LETTER_E820_tree=null;
        Object LATIN_SMALL_LETTER_E821_tree=null;
        Object LATIN_SMALL_LETTER_T822_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1946:3: ( LATIN_SMALL_LETTER_M LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_Y LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_H LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_T )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1946:5: LATIN_SMALL_LETTER_M LATIN_SMALL_LETTER_A LATIN_SMALL_LETTER_P LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_T LATIN_SMALL_LETTER_Y LATIN_SMALL_LETTER_L LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_S LATIN_SMALL_LETTER_H LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_E LATIN_SMALL_LETTER_T
            {
            root_0 = (Object)adaptor.nil();

            LATIN_SMALL_LETTER_M810=(Token)match(input,LATIN_SMALL_LETTER_M,FOLLOW_LATIN_SMALL_LETTER_M_in_keywordMapstylesheet17624); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_M810_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_M810);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_M810_tree);
            }
            LATIN_SMALL_LETTER_A811=(Token)match(input,LATIN_SMALL_LETTER_A,FOLLOW_LATIN_SMALL_LETTER_A_in_keywordMapstylesheet17627); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_A811_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_A811);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_A811_tree);
            }
            LATIN_SMALL_LETTER_P812=(Token)match(input,LATIN_SMALL_LETTER_P,FOLLOW_LATIN_SMALL_LETTER_P_in_keywordMapstylesheet17629); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_P812_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_P812);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_P812_tree);
            }
            LATIN_SMALL_LETTER_S813=(Token)match(input,LATIN_SMALL_LETTER_S,FOLLOW_LATIN_SMALL_LETTER_S_in_keywordMapstylesheet17635); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_S813_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_S813);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_S813_tree);
            }
            LATIN_SMALL_LETTER_T814=(Token)match(input,LATIN_SMALL_LETTER_T,FOLLOW_LATIN_SMALL_LETTER_T_in_keywordMapstylesheet17637); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_T814_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_T814);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_T814_tree);
            }
            LATIN_SMALL_LETTER_Y815=(Token)match(input,LATIN_SMALL_LETTER_Y,FOLLOW_LATIN_SMALL_LETTER_Y_in_keywordMapstylesheet17639); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_Y815_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_Y815);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_Y815_tree);
            }
            LATIN_SMALL_LETTER_L816=(Token)match(input,LATIN_SMALL_LETTER_L,FOLLOW_LATIN_SMALL_LETTER_L_in_keywordMapstylesheet17646); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_L816_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_L816);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_L816_tree);
            }
            LATIN_SMALL_LETTER_E817=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_keywordMapstylesheet17648); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_E817_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_E817);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_E817_tree);
            }
            LATIN_SMALL_LETTER_S818=(Token)match(input,LATIN_SMALL_LETTER_S,FOLLOW_LATIN_SMALL_LETTER_S_in_keywordMapstylesheet17650); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_S818_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_S818);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_S818_tree);
            }
            LATIN_SMALL_LETTER_H819=(Token)match(input,LATIN_SMALL_LETTER_H,FOLLOW_LATIN_SMALL_LETTER_H_in_keywordMapstylesheet17656); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_H819_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_H819);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_H819_tree);
            }
            LATIN_SMALL_LETTER_E820=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_keywordMapstylesheet17658); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_E820_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_E820);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_E820_tree);
            }
            LATIN_SMALL_LETTER_E821=(Token)match(input,LATIN_SMALL_LETTER_E,FOLLOW_LATIN_SMALL_LETTER_E_in_keywordMapstylesheet17660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_E821_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_E821);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_E821_tree);
            }
            LATIN_SMALL_LETTER_T822=(Token)match(input,LATIN_SMALL_LETTER_T,FOLLOW_LATIN_SMALL_LETTER_T_in_keywordMapstylesheet17666); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LATIN_SMALL_LETTER_T822_tree = (Object)adaptor.create(LATIN_SMALL_LETTER_T822);
            adaptor.addChild(root_0, LATIN_SMALL_LETTER_T822_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordMapstylesheet"

    public static class assignmentArgument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentArgument"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1954:1: assignmentArgument : (key= rawExtendedWord EQUALS_SIGN value= rawExtendedWord ) -> ^( COMMAND_MAPSTYLESHEET_ASSIGNMENT_ ) ;
    public final NovelangParser.assignmentArgument_return assignmentArgument() throws RecognitionException {
        NovelangParser.assignmentArgument_return retval = new NovelangParser.assignmentArgument_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS_SIGN823=null;
        NovelangParser.rawExtendedWord_return key = null;

        NovelangParser.rawExtendedWord_return value = null;


        Object EQUALS_SIGN823_tree=null;
        RewriteRuleTokenStream stream_EQUALS_SIGN=new RewriteRuleTokenStream(adaptor,"token EQUALS_SIGN");
        RewriteRuleSubtreeStream stream_rawExtendedWord=new RewriteRuleSubtreeStream(adaptor,"rule rawExtendedWord");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1955:3: ( (key= rawExtendedWord EQUALS_SIGN value= rawExtendedWord ) -> ^( COMMAND_MAPSTYLESHEET_ASSIGNMENT_ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1955:5: (key= rawExtendedWord EQUALS_SIGN value= rawExtendedWord )
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1955:5: (key= rawExtendedWord EQUALS_SIGN value= rawExtendedWord )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1955:7: key= rawExtendedWord EQUALS_SIGN value= rawExtendedWord
            {
            pushFollow(FOLLOW_rawExtendedWord_in_assignmentArgument17693);
            key=rawExtendedWord();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rawExtendedWord.add(key.getTree());
            EQUALS_SIGN823=(Token)match(input,EQUALS_SIGN,FOLLOW_EQUALS_SIGN_in_assignmentArgument17695); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS_SIGN.add(EQUALS_SIGN823);

            pushFollow(FOLLOW_rawExtendedWord_in_assignmentArgument17701);
            value=rawExtendedWord();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rawExtendedWord.add(value.getTree());

            }



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1956:7: -> ^( COMMAND_MAPSTYLESHEET_ASSIGNMENT_ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1956:10: ^( COMMAND_MAPSTYLESHEET_ASSIGNMENT_ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(COMMAND_MAPSTYLESHEET_ASSIGNMENT_, "COMMAND_MAPSTYLESHEET_ASSIGNMENT_"), root_1);

                adaptor.addChild(root_1,  delegate.createTree( (key!=null?key.text:null) ) );
                adaptor.addChild(root_1,  delegate.createTree( (value!=null?value.text:null) ) );

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assignmentArgument"

    public static class extendedWord_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extendedWord"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1962:1: extendedWord : w= rawExtendedWord ->;
    public final NovelangParser.extendedWord_return extendedWord() throws RecognitionException {
        NovelangParser.extendedWord_return retval = new NovelangParser.extendedWord_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.rawExtendedWord_return w = null;


        RewriteRuleSubtreeStream stream_rawExtendedWord=new RewriteRuleSubtreeStream(adaptor,"rule rawExtendedWord");
        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1963:3: (w= rawExtendedWord ->)
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1963:5: w= rawExtendedWord
            {
            pushFollow(FOLLOW_rawExtendedWord_in_extendedWord17783);
            w=rawExtendedWord();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rawExtendedWord.add(w.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1964:5: ->
            {
                adaptor.addChild(root_0,  delegate.createTree( EXTENDED_WORD_, (w!=null?w.text:null) ) );

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extendedWord"

    public static class rawExtendedWord_return extends ParserRuleReturnScope {
        public String text;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rawExtendedWord"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1967:1: rawExtendedWord returns [ String text ] : (s1= hexLetter | s2= nonHexLetter | s3= digit )+ ( (s5= HYPHEN_MINUS | s5= SOLIDUS | s5= FULL_STOP ) (s6= hexLetter | s7= nonHexLetter | s8= digit )+ )* ;
    public final NovelangParser.rawExtendedWord_return rawExtendedWord() throws RecognitionException {
        NovelangParser.rawExtendedWord_return retval = new NovelangParser.rawExtendedWord_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token s5=null;
        NovelangParser.hexLetter_return s1 = null;

        NovelangParser.nonHexLetter_return s2 = null;

        NovelangParser.digit_return s3 = null;

        NovelangParser.hexLetter_return s6 = null;

        NovelangParser.nonHexLetter_return s7 = null;

        NovelangParser.digit_return s8 = null;


        Object s5_tree=null;


          final StringBuffer buffer = new StringBuffer() ;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1974:3: ( (s1= hexLetter | s2= nonHexLetter | s3= digit )+ ( (s5= HYPHEN_MINUS | s5= SOLIDUS | s5= FULL_STOP ) (s6= hexLetter | s7= nonHexLetter | s8= digit )+ )* )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1974:5: (s1= hexLetter | s2= nonHexLetter | s3= digit )+ ( (s5= HYPHEN_MINUS | s5= SOLIDUS | s5= FULL_STOP ) (s6= hexLetter | s7= nonHexLetter | s8= digit )+ )*
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1974:5: (s1= hexLetter | s2= nonHexLetter | s3= digit )+
            int cnt394=0;
            loop394:
            do {
                int alt394=4;
                switch ( input.LA(1) ) {
                case LATIN_SMALL_LETTER_F:
                case LATIN_SMALL_LETTER_E:
                case LATIN_SMALL_LETTER_C:
                case LATIN_SMALL_LETTER_A:
                case LATIN_SMALL_LETTER_D:
                case LATIN_SMALL_LETTER_B:
                case LATIN_CAPITAL_LETTER_A:
                case LATIN_CAPITAL_LETTER_B:
                case LATIN_CAPITAL_LETTER_C:
                case LATIN_CAPITAL_LETTER_D:
                case LATIN_CAPITAL_LETTER_E:
                case LATIN_CAPITAL_LETTER_F:
                    {
                    alt394=1;
                    }
                    break;
                case LATIN_SMALL_LETTER_I:
                case LATIN_SMALL_LETTER_L:
                case LATIN_SMALL_LETTER_H:
                case LATIN_SMALL_LETTER_T:
                case LATIN_SMALL_LETTER_P:
                case LATIN_SMALL_LETTER_S:
                case LATIN_SMALL_LETTER_N:
                case LATIN_SMALL_LETTER_G:
                case LATIN_SMALL_LETTER_J:
                case LATIN_SMALL_LETTER_V:
                case LATIN_SMALL_LETTER_R:
                case LATIN_SMALL_LETTER_U:
                case LATIN_SMALL_LETTER_O:
                case LATIN_SMALL_LETTER_Y:
                case LATIN_SMALL_LETTER_M:
                case LATIN_SMALL_LETTER_K:
                case LATIN_SMALL_LETTER_Q:
                case LATIN_SMALL_LETTER_W:
                case LATIN_SMALL_LETTER_X:
                case LATIN_SMALL_LETTER_Z:
                case LATIN_CAPITAL_LETTER_G:
                case LATIN_CAPITAL_LETTER_H:
                case LATIN_CAPITAL_LETTER_I:
                case LATIN_CAPITAL_LETTER_J:
                case LATIN_CAPITAL_LETTER_K:
                case LATIN_CAPITAL_LETTER_L:
                case LATIN_CAPITAL_LETTER_M:
                case LATIN_CAPITAL_LETTER_N:
                case LATIN_CAPITAL_LETTER_O:
                case LATIN_CAPITAL_LETTER_P:
                case LATIN_CAPITAL_LETTER_Q:
                case LATIN_CAPITAL_LETTER_R:
                case LATIN_CAPITAL_LETTER_S:
                case LATIN_CAPITAL_LETTER_T:
                case LATIN_CAPITAL_LETTER_U:
                case LATIN_CAPITAL_LETTER_V:
                case LATIN_CAPITAL_LETTER_W:
                case LATIN_CAPITAL_LETTER_X:
                case LATIN_CAPITAL_LETTER_Y:
                case LATIN_CAPITAL_LETTER_Z:
                    {
                    alt394=2;
                    }
                    break;
                case DIGIT_0:
                case DIGIT_1:
                case DIGIT_2:
                case DIGIT_3:
                case DIGIT_4:
                case DIGIT_5:
                case DIGIT_6:
                case DIGIT_7:
                case DIGIT_8:
                case DIGIT_9:
                    {
                    alt394=3;
                    }
                    break;

                }

                switch (alt394) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1974:9: s1= hexLetter
            	    {
            	    pushFollow(FOLLOW_hexLetter_in_rawExtendedWord17828);
            	    s1=hexLetter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s1.getTree());
            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s1!=null?input.toString(s1.start,s1.stop):null) ) ; 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1975:9: s2= nonHexLetter
            	    {
            	    pushFollow(FOLLOW_nonHexLetter_in_rawExtendedWord17844);
            	    s2=nonHexLetter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s2.getTree());
            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s2!=null?input.toString(s2.start,s2.stop):null) ) ; 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1976:9: s3= digit
            	    {
            	    pushFollow(FOLLOW_digit_in_rawExtendedWord17860);
            	    s3=digit();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s3.getTree());
            	    if ( state.backtracking==0 ) {
            	       buffer.append( (s3!=null?input.toString(s3.start,s3.stop):null) ) ; 
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt394 >= 1 ) break loop394;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(394, input);
                        throw eee;
                }
                cnt394++;
            } while (true);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1978:5: ( (s5= HYPHEN_MINUS | s5= SOLIDUS | s5= FULL_STOP ) (s6= hexLetter | s7= nonHexLetter | s8= digit )+ )*
            loop397:
            do {
                int alt397=2;
                int LA397_0 = input.LA(1);

                if ( ((LA397_0>=SOLIDUS && LA397_0<=HYPHEN_MINUS)||LA397_0==FULL_STOP) ) {
                    alt397=1;
                }


                switch (alt397) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1978:7: (s5= HYPHEN_MINUS | s5= SOLIDUS | s5= FULL_STOP ) (s6= hexLetter | s7= nonHexLetter | s8= digit )+
            	    {
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1978:7: (s5= HYPHEN_MINUS | s5= SOLIDUS | s5= FULL_STOP )
            	    int alt395=3;
            	    switch ( input.LA(1) ) {
            	    case HYPHEN_MINUS:
            	        {
            	        alt395=1;
            	        }
            	        break;
            	    case SOLIDUS:
            	        {
            	        alt395=2;
            	        }
            	        break;
            	    case FULL_STOP:
            	        {
            	        alt395=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 395, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt395) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1978:11: s5= HYPHEN_MINUS
            	            {
            	            s5=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_rawExtendedWord17885); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            s5_tree = (Object)adaptor.create(s5);
            	            adaptor.addChild(root_0, s5_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	               buffer.append( (s5!=null?s5.getText():null) ) ; 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1979:11: s5= SOLIDUS
            	            {
            	            s5=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_rawExtendedWord17903); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            s5_tree = (Object)adaptor.create(s5);
            	            adaptor.addChild(root_0, s5_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	               buffer.append( (s5!=null?s5.getText():null) ) ; 
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1980:11: s5= FULL_STOP
            	            {
            	            s5=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_rawExtendedWord17921); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            s5_tree = (Object)adaptor.create(s5);
            	            adaptor.addChild(root_0, s5_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	               buffer.append( (s5!=null?s5.getText():null) ) ; 
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1982:7: (s6= hexLetter | s7= nonHexLetter | s8= digit )+
            	    int cnt396=0;
            	    loop396:
            	    do {
            	        int alt396=4;
            	        switch ( input.LA(1) ) {
            	        case LATIN_SMALL_LETTER_F:
            	        case LATIN_SMALL_LETTER_E:
            	        case LATIN_SMALL_LETTER_C:
            	        case LATIN_SMALL_LETTER_A:
            	        case LATIN_SMALL_LETTER_D:
            	        case LATIN_SMALL_LETTER_B:
            	        case LATIN_CAPITAL_LETTER_A:
            	        case LATIN_CAPITAL_LETTER_B:
            	        case LATIN_CAPITAL_LETTER_C:
            	        case LATIN_CAPITAL_LETTER_D:
            	        case LATIN_CAPITAL_LETTER_E:
            	        case LATIN_CAPITAL_LETTER_F:
            	            {
            	            alt396=1;
            	            }
            	            break;
            	        case LATIN_SMALL_LETTER_I:
            	        case LATIN_SMALL_LETTER_L:
            	        case LATIN_SMALL_LETTER_H:
            	        case LATIN_SMALL_LETTER_T:
            	        case LATIN_SMALL_LETTER_P:
            	        case LATIN_SMALL_LETTER_S:
            	        case LATIN_SMALL_LETTER_N:
            	        case LATIN_SMALL_LETTER_G:
            	        case LATIN_SMALL_LETTER_J:
            	        case LATIN_SMALL_LETTER_V:
            	        case LATIN_SMALL_LETTER_R:
            	        case LATIN_SMALL_LETTER_U:
            	        case LATIN_SMALL_LETTER_O:
            	        case LATIN_SMALL_LETTER_Y:
            	        case LATIN_SMALL_LETTER_M:
            	        case LATIN_SMALL_LETTER_K:
            	        case LATIN_SMALL_LETTER_Q:
            	        case LATIN_SMALL_LETTER_W:
            	        case LATIN_SMALL_LETTER_X:
            	        case LATIN_SMALL_LETTER_Z:
            	        case LATIN_CAPITAL_LETTER_G:
            	        case LATIN_CAPITAL_LETTER_H:
            	        case LATIN_CAPITAL_LETTER_I:
            	        case LATIN_CAPITAL_LETTER_J:
            	        case LATIN_CAPITAL_LETTER_K:
            	        case LATIN_CAPITAL_LETTER_L:
            	        case LATIN_CAPITAL_LETTER_M:
            	        case LATIN_CAPITAL_LETTER_N:
            	        case LATIN_CAPITAL_LETTER_O:
            	        case LATIN_CAPITAL_LETTER_P:
            	        case LATIN_CAPITAL_LETTER_Q:
            	        case LATIN_CAPITAL_LETTER_R:
            	        case LATIN_CAPITAL_LETTER_S:
            	        case LATIN_CAPITAL_LETTER_T:
            	        case LATIN_CAPITAL_LETTER_U:
            	        case LATIN_CAPITAL_LETTER_V:
            	        case LATIN_CAPITAL_LETTER_W:
            	        case LATIN_CAPITAL_LETTER_X:
            	        case LATIN_CAPITAL_LETTER_Y:
            	        case LATIN_CAPITAL_LETTER_Z:
            	            {
            	            alt396=2;
            	            }
            	            break;
            	        case DIGIT_0:
            	        case DIGIT_1:
            	        case DIGIT_2:
            	        case DIGIT_3:
            	        case DIGIT_4:
            	        case DIGIT_5:
            	        case DIGIT_6:
            	        case DIGIT_7:
            	        case DIGIT_8:
            	        case DIGIT_9:
            	            {
            	            alt396=3;
            	            }
            	            break;

            	        }

            	        switch (alt396) {
            	    	case 1 :
            	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1982:10: s6= hexLetter
            	    	    {
            	    	    pushFollow(FOLLOW_hexLetter_in_rawExtendedWord17946);
            	    	    s6=hexLetter();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s6.getTree());
            	    	    if ( state.backtracking==0 ) {
            	    	       buffer.append( (s6!=null?input.toString(s6.start,s6.stop):null) ) ; 
            	    	    }

            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1983:10: s7= nonHexLetter
            	    	    {
            	    	    pushFollow(FOLLOW_nonHexLetter_in_rawExtendedWord17963);
            	    	    s7=nonHexLetter();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s7.getTree());
            	    	    if ( state.backtracking==0 ) {
            	    	       buffer.append( (s7!=null?input.toString(s7.start,s7.stop):null) ) ; 
            	    	    }

            	    	    }
            	    	    break;
            	    	case 3 :
            	    	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1984:10: s8= digit
            	    	    {
            	    	    pushFollow(FOLLOW_digit_in_rawExtendedWord17980);
            	    	    s8=digit();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s8.getTree());
            	    	    if ( state.backtracking==0 ) {
            	    	       buffer.append( (s8!=null?input.toString(s8.start,s8.stop):null) ) ; 
            	    	    }

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt396 >= 1 ) break loop396;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(396, input);
            	                throw eee;
            	        }
            	        cnt396++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop397;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               retval.text = buffer.toString() ; 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rawExtendedWord"

    public static class softbreak_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "softbreak"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1998:1: softbreak : SOFTBREAK -> ^( LINE_BREAK_ ) ;
    public final NovelangParser.softbreak_return softbreak() throws RecognitionException {
        NovelangParser.softbreak_return retval = new NovelangParser.softbreak_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SOFTBREAK824=null;

        Object SOFTBREAK824_tree=null;
        RewriteRuleTokenStream stream_SOFTBREAK=new RewriteRuleTokenStream(adaptor,"token SOFTBREAK");

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1998:11: ( SOFTBREAK -> ^( LINE_BREAK_ ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1998:13: SOFTBREAK
            {
            SOFTBREAK824=(Token)match(input,SOFTBREAK,FOLLOW_SOFTBREAK_in_softbreak18026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SOFTBREAK.add(SOFTBREAK824);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1998:23: -> ^( LINE_BREAK_ )
            {
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1998:26: ^( LINE_BREAK_ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LINE_BREAK_, "LINE_BREAK_"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "softbreak"

    public static class whitespace_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whitespace"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2000:1: whitespace : WHITESPACE ->;
    public final NovelangParser.whitespace_return whitespace() throws RecognitionException {
        NovelangParser.whitespace_return retval = new NovelangParser.whitespace_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHITESPACE825=null;

        Object WHITESPACE825_tree=null;
        RewriteRuleTokenStream stream_WHITESPACE=new RewriteRuleTokenStream(adaptor,"token WHITESPACE");

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2000:12: ( WHITESPACE ->)
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2001:3: WHITESPACE
            {
            WHITESPACE825=(Token)match(input,WHITESPACE,FOLLOW_WHITESPACE_in_whitespace18047); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHITESPACE.add(WHITESPACE825);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2002:3: ->
            {
                adaptor.addChild(root_0,  delegate.createTree( WHITESPACE_, input.toString(retval.start,input.LT(-1)) ) );

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whitespace"

    public static class levelIntroducerIndent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "levelIntroducerIndent"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2005:1: levelIntroducerIndent : EQUALS_SIGN ( EQUALS_SIGN )+ ->;
    public final NovelangParser.levelIntroducerIndent_return levelIntroducerIndent() throws RecognitionException {
        NovelangParser.levelIntroducerIndent_return retval = new NovelangParser.levelIntroducerIndent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS_SIGN826=null;
        Token EQUALS_SIGN827=null;

        Object EQUALS_SIGN826_tree=null;
        Object EQUALS_SIGN827_tree=null;
        RewriteRuleTokenStream stream_EQUALS_SIGN=new RewriteRuleTokenStream(adaptor,"token EQUALS_SIGN");

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2006:3: ( EQUALS_SIGN ( EQUALS_SIGN )+ ->)
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2006:5: EQUALS_SIGN ( EQUALS_SIGN )+
            {
            EQUALS_SIGN826=(Token)match(input,EQUALS_SIGN,FOLLOW_EQUALS_SIGN_in_levelIntroducerIndent18067); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS_SIGN.add(EQUALS_SIGN826);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2006:17: ( EQUALS_SIGN )+
            int cnt398=0;
            loop398:
            do {
                int alt398=2;
                int LA398_0 = input.LA(1);

                if ( (LA398_0==EQUALS_SIGN) ) {
                    alt398=1;
                }


                switch (alt398) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2006:17: EQUALS_SIGN
            	    {
            	    EQUALS_SIGN827=(Token)match(input,EQUALS_SIGN,FOLLOW_EQUALS_SIGN_in_levelIntroducerIndent18069); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_EQUALS_SIGN.add(EQUALS_SIGN827);


            	    }
            	    break;

            	default :
            	    if ( cnt398 >= 1 ) break loop398;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(398, input);
                        throw eee;
                }
                cnt398++;
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2007:5: ->
            {
                adaptor.addChild(root_0,  delegate.createTree( LEVEL_INTRODUCER_INDENT_, input.toString(retval.start,input.LT(-1)) ) );

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "levelIntroducerIndent"

    public static class mediumbreak_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mediumbreak"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2010:1: mediumbreak : ( whitespace | ( ( whitespace )? softbreak ( whitespace )? ) ) ;
    public final NovelangParser.mediumbreak_return mediumbreak() throws RecognitionException {
        NovelangParser.mediumbreak_return retval = new NovelangParser.mediumbreak_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.whitespace_return whitespace828 = null;

        NovelangParser.whitespace_return whitespace829 = null;

        NovelangParser.softbreak_return softbreak830 = null;

        NovelangParser.whitespace_return whitespace831 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2011:3: ( ( whitespace | ( ( whitespace )? softbreak ( whitespace )? ) ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2011:5: ( whitespace | ( ( whitespace )? softbreak ( whitespace )? ) )
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2011:5: ( whitespace | ( ( whitespace )? softbreak ( whitespace )? ) )
            int alt401=2;
            int LA401_0 = input.LA(1);

            if ( (LA401_0==WHITESPACE) ) {
                int LA401_1 = input.LA(2);

                if ( (LA401_1==SOFTBREAK) ) {
                    alt401=2;
                }
                else if ( (LA401_1==EOF||(LA401_1>=COMMERCIAL_AT && LA401_1<=LEFT_PARENTHESIS)||LA401_1==LEFT_SQUARE_BRACKET||(LA401_1>=DOUBLE_QUOTE && LA401_1<=HYPHEN_MINUS)||(LA401_1>=VERTICAL_LINE && LA401_1<=LATIN_SMALL_LETTER_S)||(LA401_1>=EQUALS_SIGN && LA401_1<=TILDE)||(LA401_1>=LATIN_SMALL_LETTER_N && LA401_1<=LATIN_SMALL_LETTER_V)||LA401_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA401_1>=LATIN_SMALL_LETTER_R && LA401_1<=LATIN_SMALL_LETTER_M)||(LA401_1>=DIGIT_0 && LA401_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    alt401=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 401, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA401_0==SOFTBREAK) ) {
                alt401=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 401, 0, input);

                throw nvae;
            }
            switch (alt401) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2011:7: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_mediumbreak18094);
                    whitespace828=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace828.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2012:9: ( ( whitespace )? softbreak ( whitespace )? )
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2012:9: ( ( whitespace )? softbreak ( whitespace )? )
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2012:11: ( whitespace )? softbreak ( whitespace )?
                    {
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2012:11: ( whitespace )?
                    int alt399=2;
                    int LA399_0 = input.LA(1);

                    if ( (LA399_0==WHITESPACE) ) {
                        alt399=1;
                    }
                    switch (alt399) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2012:11: whitespace
                            {
                            pushFollow(FOLLOW_whitespace_in_mediumbreak18106);
                            whitespace829=whitespace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace829.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_softbreak_in_mediumbreak18109);
                    softbreak830=softbreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak830.getTree());
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2012:33: ( whitespace )?
                    int alt400=2;
                    int LA400_0 = input.LA(1);

                    if ( (LA400_0==WHITESPACE) ) {
                        alt400=1;
                    }
                    switch (alt400) {
                        case 1 :
                            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2012:33: whitespace
                            {
                            pushFollow(FOLLOW_whitespace_in_mediumbreak18111);
                            whitespace831=whitespace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace831.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mediumbreak"

    public static class largebreak_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "largebreak"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2016:1: largebreak : ( ( ( whitespace )? softbreak ) ( ( whitespace )? softbreak )+ ( whitespace )? ) ;
    public final NovelangParser.largebreak_return largebreak() throws RecognitionException {
        NovelangParser.largebreak_return retval = new NovelangParser.largebreak_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.whitespace_return whitespace832 = null;

        NovelangParser.softbreak_return softbreak833 = null;

        NovelangParser.whitespace_return whitespace834 = null;

        NovelangParser.softbreak_return softbreak835 = null;

        NovelangParser.whitespace_return whitespace836 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2019:3: ( ( ( ( whitespace )? softbreak ) ( ( whitespace )? softbreak )+ ( whitespace )? ) )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2019:5: ( ( ( whitespace )? softbreak ) ( ( whitespace )? softbreak )+ ( whitespace )? )
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2019:5: ( ( ( whitespace )? softbreak ) ( ( whitespace )? softbreak )+ ( whitespace )? )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2019:7: ( ( whitespace )? softbreak ) ( ( whitespace )? softbreak )+ ( whitespace )?
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2019:7: ( ( whitespace )? softbreak )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2019:9: ( whitespace )? softbreak
            {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2019:9: ( whitespace )?
            int alt402=2;
            int LA402_0 = input.LA(1);

            if ( (LA402_0==WHITESPACE) ) {
                alt402=1;
            }
            switch (alt402) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2019:9: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_largebreak18142);
                    whitespace832=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace832.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_softbreak_in_largebreak18145);
            softbreak833=softbreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak833.getTree());

            }

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2019:33: ( ( whitespace )? softbreak )+
            int cnt404=0;
            loop404:
            do {
                int alt404=2;
                int LA404_0 = input.LA(1);

                if ( (LA404_0==WHITESPACE) ) {
                    int LA404_1 = input.LA(2);

                    if ( (LA404_1==SOFTBREAK) ) {
                        alt404=1;
                    }


                }
                else if ( (LA404_0==SOFTBREAK) ) {
                    alt404=1;
                }


                switch (alt404) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2019:35: ( whitespace )? softbreak
            	    {
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2019:35: ( whitespace )?
            	    int alt403=2;
            	    int LA403_0 = input.LA(1);

            	    if ( (LA403_0==WHITESPACE) ) {
            	        alt403=1;
            	    }
            	    switch (alt403) {
            	        case 1 :
            	            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2019:35: whitespace
            	            {
            	            pushFollow(FOLLOW_whitespace_in_largebreak18151);
            	            whitespace834=whitespace();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace834.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_softbreak_in_largebreak18154);
            	    softbreak835=softbreak();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, softbreak835.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt404 >= 1 ) break loop404;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(404, input);
                        throw eee;
                }
                cnt404++;
            } while (true);

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2019:60: ( whitespace )?
            int alt405=2;
            int LA405_0 = input.LA(1);

            if ( (LA405_0==WHITESPACE) ) {
                alt405=1;
            }
            switch (alt405) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2019:60: whitespace
                    {
                    pushFollow(FOLLOW_whitespace_in_largebreak18159);
                    whitespace836=whitespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whitespace836.getTree());

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "largebreak"

    public static class anySymbolExceptGreaterthansignAndGraveAccent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anySymbolExceptGreaterthansignAndGraveAccent"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2022:1: anySymbolExceptGreaterthansignAndGraveAccent : ( digit | hexLetter | nonHexLetter | letterWithDiacritics | AMPERSAND | APOSTROPHE | ASTERISK | CIRCUMFLEX_ACCENT | COLON | COPYRIGHT_SIGN | COMMA | COMMERCIAL_AT | DEGREE_SIGN | DOLLAR_SIGN | DOUBLE_QUOTE | EURO_SIGN | EQUALS_SIGN | EXCLAMATION_MARK | FULL_STOP | HYPHEN_MINUS | LEFT_CURLY_BRACKET | LEFT_PARENTHESIS | LEFT_SINGLE_QUOTATION_MARK | LEFT_SQUARE_BRACKET | LESS_THAN_SIGN | LOW_LINE | MULTIPLICATION_SIGN | NUMBER_SIGN | POUND_SIGN | PLUS_SIGN | PERCENT_SIGN | QUESTION_MARK | REGISTERED_SIGN | REVERSE_SOLIDUS | RIGHT_CURLY_BRACKET | RIGHT_PARENTHESIS | RIGHT_SINGLE_QUOTATION_MARK | RIGHT_SQUARE_BRACKET | SECTION_SIGN | SEMICOLON | SOLIDUS | TILDE | VERTICAL_LINE );
    public final NovelangParser.anySymbolExceptGreaterthansignAndGraveAccent_return anySymbolExceptGreaterthansignAndGraveAccent() throws RecognitionException {
        NovelangParser.anySymbolExceptGreaterthansignAndGraveAccent_return retval = new NovelangParser.anySymbolExceptGreaterthansignAndGraveAccent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AMPERSAND841=null;
        Token APOSTROPHE842=null;
        Token ASTERISK843=null;
        Token CIRCUMFLEX_ACCENT844=null;
        Token COLON845=null;
        Token COPYRIGHT_SIGN846=null;
        Token COMMA847=null;
        Token COMMERCIAL_AT848=null;
        Token DEGREE_SIGN849=null;
        Token DOLLAR_SIGN850=null;
        Token DOUBLE_QUOTE851=null;
        Token EURO_SIGN852=null;
        Token EQUALS_SIGN853=null;
        Token EXCLAMATION_MARK854=null;
        Token FULL_STOP855=null;
        Token HYPHEN_MINUS856=null;
        Token LEFT_CURLY_BRACKET857=null;
        Token LEFT_PARENTHESIS858=null;
        Token LEFT_SINGLE_QUOTATION_MARK859=null;
        Token LEFT_SQUARE_BRACKET860=null;
        Token LESS_THAN_SIGN861=null;
        Token LOW_LINE862=null;
        Token MULTIPLICATION_SIGN863=null;
        Token NUMBER_SIGN864=null;
        Token POUND_SIGN865=null;
        Token PLUS_SIGN866=null;
        Token PERCENT_SIGN867=null;
        Token QUESTION_MARK868=null;
        Token REGISTERED_SIGN869=null;
        Token REVERSE_SOLIDUS870=null;
        Token RIGHT_CURLY_BRACKET871=null;
        Token RIGHT_PARENTHESIS872=null;
        Token RIGHT_SINGLE_QUOTATION_MARK873=null;
        Token RIGHT_SQUARE_BRACKET874=null;
        Token SECTION_SIGN875=null;
        Token SEMICOLON876=null;
        Token SOLIDUS877=null;
        Token TILDE878=null;
        Token VERTICAL_LINE879=null;
        NovelangParser.digit_return digit837 = null;

        NovelangParser.hexLetter_return hexLetter838 = null;

        NovelangParser.nonHexLetter_return nonHexLetter839 = null;

        NovelangParser.letterWithDiacritics_return letterWithDiacritics840 = null;


        Object AMPERSAND841_tree=null;
        Object APOSTROPHE842_tree=null;
        Object ASTERISK843_tree=null;
        Object CIRCUMFLEX_ACCENT844_tree=null;
        Object COLON845_tree=null;
        Object COPYRIGHT_SIGN846_tree=null;
        Object COMMA847_tree=null;
        Object COMMERCIAL_AT848_tree=null;
        Object DEGREE_SIGN849_tree=null;
        Object DOLLAR_SIGN850_tree=null;
        Object DOUBLE_QUOTE851_tree=null;
        Object EURO_SIGN852_tree=null;
        Object EQUALS_SIGN853_tree=null;
        Object EXCLAMATION_MARK854_tree=null;
        Object FULL_STOP855_tree=null;
        Object HYPHEN_MINUS856_tree=null;
        Object LEFT_CURLY_BRACKET857_tree=null;
        Object LEFT_PARENTHESIS858_tree=null;
        Object LEFT_SINGLE_QUOTATION_MARK859_tree=null;
        Object LEFT_SQUARE_BRACKET860_tree=null;
        Object LESS_THAN_SIGN861_tree=null;
        Object LOW_LINE862_tree=null;
        Object MULTIPLICATION_SIGN863_tree=null;
        Object NUMBER_SIGN864_tree=null;
        Object POUND_SIGN865_tree=null;
        Object PLUS_SIGN866_tree=null;
        Object PERCENT_SIGN867_tree=null;
        Object QUESTION_MARK868_tree=null;
        Object REGISTERED_SIGN869_tree=null;
        Object REVERSE_SOLIDUS870_tree=null;
        Object RIGHT_CURLY_BRACKET871_tree=null;
        Object RIGHT_PARENTHESIS872_tree=null;
        Object RIGHT_SINGLE_QUOTATION_MARK873_tree=null;
        Object RIGHT_SQUARE_BRACKET874_tree=null;
        Object SECTION_SIGN875_tree=null;
        Object SEMICOLON876_tree=null;
        Object SOLIDUS877_tree=null;
        Object TILDE878_tree=null;
        Object VERTICAL_LINE879_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2023:3: ( digit | hexLetter | nonHexLetter | letterWithDiacritics | AMPERSAND | APOSTROPHE | ASTERISK | CIRCUMFLEX_ACCENT | COLON | COPYRIGHT_SIGN | COMMA | COMMERCIAL_AT | DEGREE_SIGN | DOLLAR_SIGN | DOUBLE_QUOTE | EURO_SIGN | EQUALS_SIGN | EXCLAMATION_MARK | FULL_STOP | HYPHEN_MINUS | LEFT_CURLY_BRACKET | LEFT_PARENTHESIS | LEFT_SINGLE_QUOTATION_MARK | LEFT_SQUARE_BRACKET | LESS_THAN_SIGN | LOW_LINE | MULTIPLICATION_SIGN | NUMBER_SIGN | POUND_SIGN | PLUS_SIGN | PERCENT_SIGN | QUESTION_MARK | REGISTERED_SIGN | REVERSE_SOLIDUS | RIGHT_CURLY_BRACKET | RIGHT_PARENTHESIS | RIGHT_SINGLE_QUOTATION_MARK | RIGHT_SQUARE_BRACKET | SECTION_SIGN | SEMICOLON | SOLIDUS | TILDE | VERTICAL_LINE )
            int alt406=43;
            switch ( input.LA(1) ) {
            case DIGIT_0:
            case DIGIT_1:
            case DIGIT_2:
            case DIGIT_3:
            case DIGIT_4:
            case DIGIT_5:
            case DIGIT_6:
            case DIGIT_7:
            case DIGIT_8:
            case DIGIT_9:
                {
                alt406=1;
                }
                break;
            case LATIN_SMALL_LETTER_F:
            case LATIN_SMALL_LETTER_E:
            case LATIN_SMALL_LETTER_C:
            case LATIN_SMALL_LETTER_A:
            case LATIN_SMALL_LETTER_D:
            case LATIN_SMALL_LETTER_B:
            case LATIN_CAPITAL_LETTER_A:
            case LATIN_CAPITAL_LETTER_B:
            case LATIN_CAPITAL_LETTER_C:
            case LATIN_CAPITAL_LETTER_D:
            case LATIN_CAPITAL_LETTER_E:
            case LATIN_CAPITAL_LETTER_F:
                {
                alt406=2;
                }
                break;
            case LATIN_SMALL_LETTER_I:
            case LATIN_SMALL_LETTER_L:
            case LATIN_SMALL_LETTER_H:
            case LATIN_SMALL_LETTER_T:
            case LATIN_SMALL_LETTER_P:
            case LATIN_SMALL_LETTER_S:
            case LATIN_SMALL_LETTER_N:
            case LATIN_SMALL_LETTER_G:
            case LATIN_SMALL_LETTER_J:
            case LATIN_SMALL_LETTER_V:
            case LATIN_SMALL_LETTER_R:
            case LATIN_SMALL_LETTER_U:
            case LATIN_SMALL_LETTER_O:
            case LATIN_SMALL_LETTER_Y:
            case LATIN_SMALL_LETTER_M:
            case LATIN_SMALL_LETTER_K:
            case LATIN_SMALL_LETTER_Q:
            case LATIN_SMALL_LETTER_W:
            case LATIN_SMALL_LETTER_X:
            case LATIN_SMALL_LETTER_Z:
            case LATIN_CAPITAL_LETTER_G:
            case LATIN_CAPITAL_LETTER_H:
            case LATIN_CAPITAL_LETTER_I:
            case LATIN_CAPITAL_LETTER_J:
            case LATIN_CAPITAL_LETTER_K:
            case LATIN_CAPITAL_LETTER_L:
            case LATIN_CAPITAL_LETTER_M:
            case LATIN_CAPITAL_LETTER_N:
            case LATIN_CAPITAL_LETTER_O:
            case LATIN_CAPITAL_LETTER_P:
            case LATIN_CAPITAL_LETTER_Q:
            case LATIN_CAPITAL_LETTER_R:
            case LATIN_CAPITAL_LETTER_S:
            case LATIN_CAPITAL_LETTER_T:
            case LATIN_CAPITAL_LETTER_U:
            case LATIN_CAPITAL_LETTER_V:
            case LATIN_CAPITAL_LETTER_W:
            case LATIN_CAPITAL_LETTER_X:
            case LATIN_CAPITAL_LETTER_Y:
            case LATIN_CAPITAL_LETTER_Z:
                {
                alt406=3;
                }
                break;
            case LATIN_SMALL_LETTER_A_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
            case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_A_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
            case LATIN_SMALL_LETTER_AE:
            case LATIN_CAPITAL_LETTER_AE:
            case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
            case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
            case LATIN_SMALL_LETTER_E_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
            case LATIN_SMALL_LETTER_E_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
            case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_I_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
            case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_O_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
            case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
            case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
            case LATIN_SMALL_LETTER_U_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
            case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_U_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
            case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
            case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
            case LATIN_SMALL_LIGATURE_OE:
            case LATIN_CAPITAL_LIGATURE_OE:
                {
                alt406=4;
                }
                break;
            case AMPERSAND:
                {
                alt406=5;
                }
                break;
            case APOSTROPHE:
                {
                alt406=6;
                }
                break;
            case ASTERISK:
                {
                alt406=7;
                }
                break;
            case CIRCUMFLEX_ACCENT:
                {
                alt406=8;
                }
                break;
            case COLON:
                {
                alt406=9;
                }
                break;
            case COPYRIGHT_SIGN:
                {
                alt406=10;
                }
                break;
            case COMMA:
                {
                alt406=11;
                }
                break;
            case COMMERCIAL_AT:
                {
                alt406=12;
                }
                break;
            case DEGREE_SIGN:
                {
                alt406=13;
                }
                break;
            case DOLLAR_SIGN:
                {
                alt406=14;
                }
                break;
            case DOUBLE_QUOTE:
                {
                alt406=15;
                }
                break;
            case EURO_SIGN:
                {
                alt406=16;
                }
                break;
            case EQUALS_SIGN:
                {
                alt406=17;
                }
                break;
            case EXCLAMATION_MARK:
                {
                alt406=18;
                }
                break;
            case FULL_STOP:
                {
                alt406=19;
                }
                break;
            case HYPHEN_MINUS:
                {
                alt406=20;
                }
                break;
            case LEFT_CURLY_BRACKET:
                {
                alt406=21;
                }
                break;
            case LEFT_PARENTHESIS:
                {
                alt406=22;
                }
                break;
            case LEFT_SINGLE_QUOTATION_MARK:
                {
                alt406=23;
                }
                break;
            case LEFT_SQUARE_BRACKET:
                {
                alt406=24;
                }
                break;
            case LESS_THAN_SIGN:
                {
                alt406=25;
                }
                break;
            case LOW_LINE:
                {
                alt406=26;
                }
                break;
            case MULTIPLICATION_SIGN:
                {
                alt406=27;
                }
                break;
            case NUMBER_SIGN:
                {
                alt406=28;
                }
                break;
            case POUND_SIGN:
                {
                alt406=29;
                }
                break;
            case PLUS_SIGN:
                {
                alt406=30;
                }
                break;
            case PERCENT_SIGN:
                {
                alt406=31;
                }
                break;
            case QUESTION_MARK:
                {
                alt406=32;
                }
                break;
            case REGISTERED_SIGN:
                {
                alt406=33;
                }
                break;
            case REVERSE_SOLIDUS:
                {
                alt406=34;
                }
                break;
            case RIGHT_CURLY_BRACKET:
                {
                alt406=35;
                }
                break;
            case RIGHT_PARENTHESIS:
                {
                alt406=36;
                }
                break;
            case RIGHT_SINGLE_QUOTATION_MARK:
                {
                alt406=37;
                }
                break;
            case RIGHT_SQUARE_BRACKET:
                {
                alt406=38;
                }
                break;
            case SECTION_SIGN:
                {
                alt406=39;
                }
                break;
            case SEMICOLON:
                {
                alt406=40;
                }
                break;
            case SOLIDUS:
                {
                alt406=41;
                }
                break;
            case TILDE:
                {
                alt406=42;
                }
                break;
            case VERTICAL_LINE:
                {
                alt406=43;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 406, 0, input);

                throw nvae;
            }

            switch (alt406) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2023:9: digit
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_digit_in_anySymbolExceptGreaterthansignAndGraveAccent18181);
                    digit837=digit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, digit837.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2024:9: hexLetter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_hexLetter_in_anySymbolExceptGreaterthansignAndGraveAccent18191);
                    hexLetter838=hexLetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hexLetter838.getTree());

                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2025:9: nonHexLetter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonHexLetter_in_anySymbolExceptGreaterthansignAndGraveAccent18201);
                    nonHexLetter839=nonHexLetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonHexLetter839.getTree());

                    }
                    break;
                case 4 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2026:9: letterWithDiacritics
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_letterWithDiacritics_in_anySymbolExceptGreaterthansignAndGraveAccent18212);
                    letterWithDiacritics840=letterWithDiacritics();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, letterWithDiacritics840.getTree());

                    }
                    break;
                case 5 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2027:9: AMPERSAND
                    {
                    root_0 = (Object)adaptor.nil();

                    AMPERSAND841=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_anySymbolExceptGreaterthansignAndGraveAccent18222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AMPERSAND841_tree = (Object)adaptor.create(AMPERSAND841);
                    adaptor.addChild(root_0, AMPERSAND841_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2028:9: APOSTROPHE
                    {
                    root_0 = (Object)adaptor.nil();

                    APOSTROPHE842=(Token)match(input,APOSTROPHE,FOLLOW_APOSTROPHE_in_anySymbolExceptGreaterthansignAndGraveAccent18233); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    APOSTROPHE842_tree = (Object)adaptor.create(APOSTROPHE842);
                    adaptor.addChild(root_0, APOSTROPHE842_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2029:9: ASTERISK
                    {
                    root_0 = (Object)adaptor.nil();

                    ASTERISK843=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_anySymbolExceptGreaterthansignAndGraveAccent18246); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASTERISK843_tree = (Object)adaptor.create(ASTERISK843);
                    adaptor.addChild(root_0, ASTERISK843_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2030:9: CIRCUMFLEX_ACCENT
                    {
                    root_0 = (Object)adaptor.nil();

                    CIRCUMFLEX_ACCENT844=(Token)match(input,CIRCUMFLEX_ACCENT,FOLLOW_CIRCUMFLEX_ACCENT_in_anySymbolExceptGreaterthansignAndGraveAccent18256); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CIRCUMFLEX_ACCENT844_tree = (Object)adaptor.create(CIRCUMFLEX_ACCENT844);
                    adaptor.addChild(root_0, CIRCUMFLEX_ACCENT844_tree);
                    }

                    }
                    break;
                case 9 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2031:9: COLON
                    {
                    root_0 = (Object)adaptor.nil();

                    COLON845=(Token)match(input,COLON,FOLLOW_COLON_in_anySymbolExceptGreaterthansignAndGraveAccent18266); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON845_tree = (Object)adaptor.create(COLON845);
                    adaptor.addChild(root_0, COLON845_tree);
                    }

                    }
                    break;
                case 10 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2032:9: COPYRIGHT_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    COPYRIGHT_SIGN846=(Token)match(input,COPYRIGHT_SIGN,FOLLOW_COPYRIGHT_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18276); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COPYRIGHT_SIGN846_tree = (Object)adaptor.create(COPYRIGHT_SIGN846);
                    adaptor.addChild(root_0, COPYRIGHT_SIGN846_tree);
                    }

                    }
                    break;
                case 11 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2033:9: COMMA
                    {
                    root_0 = (Object)adaptor.nil();

                    COMMA847=(Token)match(input,COMMA,FOLLOW_COMMA_in_anySymbolExceptGreaterthansignAndGraveAccent18286); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA847_tree = (Object)adaptor.create(COMMA847);
                    adaptor.addChild(root_0, COMMA847_tree);
                    }

                    }
                    break;
                case 12 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2034:9: COMMERCIAL_AT
                    {
                    root_0 = (Object)adaptor.nil();

                    COMMERCIAL_AT848=(Token)match(input,COMMERCIAL_AT,FOLLOW_COMMERCIAL_AT_in_anySymbolExceptGreaterthansignAndGraveAccent18297); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMERCIAL_AT848_tree = (Object)adaptor.create(COMMERCIAL_AT848);
                    adaptor.addChild(root_0, COMMERCIAL_AT848_tree);
                    }

                    }
                    break;
                case 13 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2035:9: DEGREE_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    DEGREE_SIGN849=(Token)match(input,DEGREE_SIGN,FOLLOW_DEGREE_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18307); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEGREE_SIGN849_tree = (Object)adaptor.create(DEGREE_SIGN849);
                    adaptor.addChild(root_0, DEGREE_SIGN849_tree);
                    }

                    }
                    break;
                case 14 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2036:9: DOLLAR_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    DOLLAR_SIGN850=(Token)match(input,DOLLAR_SIGN,FOLLOW_DOLLAR_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR_SIGN850_tree = (Object)adaptor.create(DOLLAR_SIGN850);
                    adaptor.addChild(root_0, DOLLAR_SIGN850_tree);
                    }

                    }
                    break;
                case 15 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2037:9: DOUBLE_QUOTE
                    {
                    root_0 = (Object)adaptor.nil();

                    DOUBLE_QUOTE851=(Token)match(input,DOUBLE_QUOTE,FOLLOW_DOUBLE_QUOTE_in_anySymbolExceptGreaterthansignAndGraveAccent18327); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLE_QUOTE851_tree = (Object)adaptor.create(DOUBLE_QUOTE851);
                    adaptor.addChild(root_0, DOUBLE_QUOTE851_tree);
                    }

                    }
                    break;
                case 16 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2039:9: EURO_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    EURO_SIGN852=(Token)match(input,EURO_SIGN,FOLLOW_EURO_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18338); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EURO_SIGN852_tree = (Object)adaptor.create(EURO_SIGN852);
                    adaptor.addChild(root_0, EURO_SIGN852_tree);
                    }

                    }
                    break;
                case 17 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2040:9: EQUALS_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    EQUALS_SIGN853=(Token)match(input,EQUALS_SIGN,FOLLOW_EQUALS_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18348); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_SIGN853_tree = (Object)adaptor.create(EQUALS_SIGN853);
                    adaptor.addChild(root_0, EQUALS_SIGN853_tree);
                    }

                    }
                    break;
                case 18 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2041:9: EXCLAMATION_MARK
                    {
                    root_0 = (Object)adaptor.nil();

                    EXCLAMATION_MARK854=(Token)match(input,EXCLAMATION_MARK,FOLLOW_EXCLAMATION_MARK_in_anySymbolExceptGreaterthansignAndGraveAccent18358); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXCLAMATION_MARK854_tree = (Object)adaptor.create(EXCLAMATION_MARK854);
                    adaptor.addChild(root_0, EXCLAMATION_MARK854_tree);
                    }

                    }
                    break;
                case 19 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2042:9: FULL_STOP
                    {
                    root_0 = (Object)adaptor.nil();

                    FULL_STOP855=(Token)match(input,FULL_STOP,FOLLOW_FULL_STOP_in_anySymbolExceptGreaterthansignAndGraveAccent18368); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL_STOP855_tree = (Object)adaptor.create(FULL_STOP855);
                    adaptor.addChild(root_0, FULL_STOP855_tree);
                    }

                    }
                    break;
                case 20 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2045:9: HYPHEN_MINUS
                    {
                    root_0 = (Object)adaptor.nil();

                    HYPHEN_MINUS856=(Token)match(input,HYPHEN_MINUS,FOLLOW_HYPHEN_MINUS_in_anySymbolExceptGreaterthansignAndGraveAccent18380); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HYPHEN_MINUS856_tree = (Object)adaptor.create(HYPHEN_MINUS856);
                    adaptor.addChild(root_0, HYPHEN_MINUS856_tree);
                    }

                    }
                    break;
                case 21 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2046:9: LEFT_CURLY_BRACKET
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_CURLY_BRACKET857=(Token)match(input,LEFT_CURLY_BRACKET,FOLLOW_LEFT_CURLY_BRACKET_in_anySymbolExceptGreaterthansignAndGraveAccent18390); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_CURLY_BRACKET857_tree = (Object)adaptor.create(LEFT_CURLY_BRACKET857);
                    adaptor.addChild(root_0, LEFT_CURLY_BRACKET857_tree);
                    }

                    }
                    break;
                case 22 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2047:9: LEFT_PARENTHESIS
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PARENTHESIS858=(Token)match(input,LEFT_PARENTHESIS,FOLLOW_LEFT_PARENTHESIS_in_anySymbolExceptGreaterthansignAndGraveAccent18400); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PARENTHESIS858_tree = (Object)adaptor.create(LEFT_PARENTHESIS858);
                    adaptor.addChild(root_0, LEFT_PARENTHESIS858_tree);
                    }

                    }
                    break;
                case 23 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2048:9: LEFT_SINGLE_QUOTATION_MARK
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_SINGLE_QUOTATION_MARK859=(Token)match(input,LEFT_SINGLE_QUOTATION_MARK,FOLLOW_LEFT_SINGLE_QUOTATION_MARK_in_anySymbolExceptGreaterthansignAndGraveAccent18410); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_SINGLE_QUOTATION_MARK859_tree = (Object)adaptor.create(LEFT_SINGLE_QUOTATION_MARK859);
                    adaptor.addChild(root_0, LEFT_SINGLE_QUOTATION_MARK859_tree);
                    }

                    }
                    break;
                case 24 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2049:9: LEFT_SQUARE_BRACKET
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_SQUARE_BRACKET860=(Token)match(input,LEFT_SQUARE_BRACKET,FOLLOW_LEFT_SQUARE_BRACKET_in_anySymbolExceptGreaterthansignAndGraveAccent18420); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_SQUARE_BRACKET860_tree = (Object)adaptor.create(LEFT_SQUARE_BRACKET860);
                    adaptor.addChild(root_0, LEFT_SQUARE_BRACKET860_tree);
                    }

                    }
                    break;
                case 25 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2050:9: LESS_THAN_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    LESS_THAN_SIGN861=(Token)match(input,LESS_THAN_SIGN,FOLLOW_LESS_THAN_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18430); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS_THAN_SIGN861_tree = (Object)adaptor.create(LESS_THAN_SIGN861);
                    adaptor.addChild(root_0, LESS_THAN_SIGN861_tree);
                    }

                    }
                    break;
                case 26 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2051:9: LOW_LINE
                    {
                    root_0 = (Object)adaptor.nil();

                    LOW_LINE862=(Token)match(input,LOW_LINE,FOLLOW_LOW_LINE_in_anySymbolExceptGreaterthansignAndGraveAccent18440); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOW_LINE862_tree = (Object)adaptor.create(LOW_LINE862);
                    adaptor.addChild(root_0, LOW_LINE862_tree);
                    }

                    }
                    break;
                case 27 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2052:9: MULTIPLICATION_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MULTIPLICATION_SIGN863=(Token)match(input,MULTIPLICATION_SIGN,FOLLOW_MULTIPLICATION_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18450); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MULTIPLICATION_SIGN863_tree = (Object)adaptor.create(MULTIPLICATION_SIGN863);
                    adaptor.addChild(root_0, MULTIPLICATION_SIGN863_tree);
                    }

                    }
                    break;
                case 28 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2053:9: NUMBER_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    NUMBER_SIGN864=(Token)match(input,NUMBER_SIGN,FOLLOW_NUMBER_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18460); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_SIGN864_tree = (Object)adaptor.create(NUMBER_SIGN864);
                    adaptor.addChild(root_0, NUMBER_SIGN864_tree);
                    }

                    }
                    break;
                case 29 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2054:9: POUND_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    POUND_SIGN865=(Token)match(input,POUND_SIGN,FOLLOW_POUND_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18470); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    POUND_SIGN865_tree = (Object)adaptor.create(POUND_SIGN865);
                    adaptor.addChild(root_0, POUND_SIGN865_tree);
                    }

                    }
                    break;
                case 30 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2055:9: PLUS_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    PLUS_SIGN866=(Token)match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18480); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS_SIGN866_tree = (Object)adaptor.create(PLUS_SIGN866);
                    adaptor.addChild(root_0, PLUS_SIGN866_tree);
                    }

                    }
                    break;
                case 31 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2056:9: PERCENT_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    PERCENT_SIGN867=(Token)match(input,PERCENT_SIGN,FOLLOW_PERCENT_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18490); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PERCENT_SIGN867_tree = (Object)adaptor.create(PERCENT_SIGN867);
                    adaptor.addChild(root_0, PERCENT_SIGN867_tree);
                    }

                    }
                    break;
                case 32 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2057:9: QUESTION_MARK
                    {
                    root_0 = (Object)adaptor.nil();

                    QUESTION_MARK868=(Token)match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_anySymbolExceptGreaterthansignAndGraveAccent18500); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION_MARK868_tree = (Object)adaptor.create(QUESTION_MARK868);
                    adaptor.addChild(root_0, QUESTION_MARK868_tree);
                    }

                    }
                    break;
                case 33 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2058:9: REGISTERED_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    REGISTERED_SIGN869=(Token)match(input,REGISTERED_SIGN,FOLLOW_REGISTERED_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18510); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REGISTERED_SIGN869_tree = (Object)adaptor.create(REGISTERED_SIGN869);
                    adaptor.addChild(root_0, REGISTERED_SIGN869_tree);
                    }

                    }
                    break;
                case 34 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2059:9: REVERSE_SOLIDUS
                    {
                    root_0 = (Object)adaptor.nil();

                    REVERSE_SOLIDUS870=(Token)match(input,REVERSE_SOLIDUS,FOLLOW_REVERSE_SOLIDUS_in_anySymbolExceptGreaterthansignAndGraveAccent18520); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REVERSE_SOLIDUS870_tree = (Object)adaptor.create(REVERSE_SOLIDUS870);
                    adaptor.addChild(root_0, REVERSE_SOLIDUS870_tree);
                    }

                    }
                    break;
                case 35 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2060:9: RIGHT_CURLY_BRACKET
                    {
                    root_0 = (Object)adaptor.nil();

                    RIGHT_CURLY_BRACKET871=(Token)match(input,RIGHT_CURLY_BRACKET,FOLLOW_RIGHT_CURLY_BRACKET_in_anySymbolExceptGreaterthansignAndGraveAccent18530); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_CURLY_BRACKET871_tree = (Object)adaptor.create(RIGHT_CURLY_BRACKET871);
                    adaptor.addChild(root_0, RIGHT_CURLY_BRACKET871_tree);
                    }

                    }
                    break;
                case 36 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2061:9: RIGHT_PARENTHESIS
                    {
                    root_0 = (Object)adaptor.nil();

                    RIGHT_PARENTHESIS872=(Token)match(input,RIGHT_PARENTHESIS,FOLLOW_RIGHT_PARENTHESIS_in_anySymbolExceptGreaterthansignAndGraveAccent18540); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PARENTHESIS872_tree = (Object)adaptor.create(RIGHT_PARENTHESIS872);
                    adaptor.addChild(root_0, RIGHT_PARENTHESIS872_tree);
                    }

                    }
                    break;
                case 37 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2062:9: RIGHT_SINGLE_QUOTATION_MARK
                    {
                    root_0 = (Object)adaptor.nil();

                    RIGHT_SINGLE_QUOTATION_MARK873=(Token)match(input,RIGHT_SINGLE_QUOTATION_MARK,FOLLOW_RIGHT_SINGLE_QUOTATION_MARK_in_anySymbolExceptGreaterthansignAndGraveAccent18550); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SINGLE_QUOTATION_MARK873_tree = (Object)adaptor.create(RIGHT_SINGLE_QUOTATION_MARK873);
                    adaptor.addChild(root_0, RIGHT_SINGLE_QUOTATION_MARK873_tree);
                    }

                    }
                    break;
                case 38 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2063:9: RIGHT_SQUARE_BRACKET
                    {
                    root_0 = (Object)adaptor.nil();

                    RIGHT_SQUARE_BRACKET874=(Token)match(input,RIGHT_SQUARE_BRACKET,FOLLOW_RIGHT_SQUARE_BRACKET_in_anySymbolExceptGreaterthansignAndGraveAccent18560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE_BRACKET874_tree = (Object)adaptor.create(RIGHT_SQUARE_BRACKET874);
                    adaptor.addChild(root_0, RIGHT_SQUARE_BRACKET874_tree);
                    }

                    }
                    break;
                case 39 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2064:9: SECTION_SIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SECTION_SIGN875=(Token)match(input,SECTION_SIGN,FOLLOW_SECTION_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18570); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SECTION_SIGN875_tree = (Object)adaptor.create(SECTION_SIGN875);
                    adaptor.addChild(root_0, SECTION_SIGN875_tree);
                    }

                    }
                    break;
                case 40 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2065:9: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    SEMICOLON876=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_anySymbolExceptGreaterthansignAndGraveAccent18580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON876_tree = (Object)adaptor.create(SEMICOLON876);
                    adaptor.addChild(root_0, SEMICOLON876_tree);
                    }

                    }
                    break;
                case 41 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2066:9: SOLIDUS
                    {
                    root_0 = (Object)adaptor.nil();

                    SOLIDUS877=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_anySymbolExceptGreaterthansignAndGraveAccent18590); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SOLIDUS877_tree = (Object)adaptor.create(SOLIDUS877);
                    adaptor.addChild(root_0, SOLIDUS877_tree);
                    }

                    }
                    break;
                case 42 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2067:9: TILDE
                    {
                    root_0 = (Object)adaptor.nil();

                    TILDE878=(Token)match(input,TILDE,FOLLOW_TILDE_in_anySymbolExceptGreaterthansignAndGraveAccent18600); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TILDE878_tree = (Object)adaptor.create(TILDE878);
                    adaptor.addChild(root_0, TILDE878_tree);
                    }

                    }
                    break;
                case 43 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2068:9: VERTICAL_LINE
                    {
                    root_0 = (Object)adaptor.nil();

                    VERTICAL_LINE879=(Token)match(input,VERTICAL_LINE,FOLLOW_VERTICAL_LINE_in_anySymbolExceptGreaterthansignAndGraveAccent18612); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VERTICAL_LINE879_tree = (Object)adaptor.create(VERTICAL_LINE879);
                    adaptor.addChild(root_0, VERTICAL_LINE879_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "anySymbolExceptGreaterthansignAndGraveAccent"

    public static class letters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "letters"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2071:1: letters : ( letter )+ ;
    public final NovelangParser.letters_return letters() throws RecognitionException {
        NovelangParser.letters_return retval = new NovelangParser.letters_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.letter_return letter880 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2071:9: ( ( letter )+ )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2071:11: ( letter )+
            {
            root_0 = (Object)adaptor.nil();

            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2071:11: ( letter )+
            int cnt407=0;
            loop407:
            do {
                int alt407=2;
                int LA407_0 = input.LA(1);

                if ( ((LA407_0>=LATIN_SMALL_LETTER_F && LA407_0<=LATIN_SMALL_LETTER_S)||(LA407_0>=LATIN_SMALL_LETTER_N && LA407_0<=LATIN_SMALL_LETTER_V)||(LA407_0>=LATIN_SMALL_LETTER_R && LA407_0<=LATIN_SMALL_LETTER_M)||(LA407_0>=LATIN_CAPITAL_LETTER_A && LA407_0<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    alt407=1;
                }


                switch (alt407) {
            	case 1 :
            	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2071:11: letter
            	    {
            	    pushFollow(FOLLOW_letter_in_letters18624);
            	    letter880=letter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, letter880.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt407 >= 1 ) break loop407;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(407, input);
                        throw eee;
                }
                cnt407++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "letters"

    public static class letter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "letter"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2073:1: letter : ( hexLetter | nonHexLetter | letterWithDiacritics );
    public final NovelangParser.letter_return letter() throws RecognitionException {
        NovelangParser.letter_return retval = new NovelangParser.letter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.hexLetter_return hexLetter881 = null;

        NovelangParser.nonHexLetter_return nonHexLetter882 = null;

        NovelangParser.letterWithDiacritics_return letterWithDiacritics883 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2073:8: ( hexLetter | nonHexLetter | letterWithDiacritics )
            int alt408=3;
            switch ( input.LA(1) ) {
            case LATIN_SMALL_LETTER_F:
            case LATIN_SMALL_LETTER_E:
            case LATIN_SMALL_LETTER_C:
            case LATIN_SMALL_LETTER_A:
            case LATIN_SMALL_LETTER_D:
            case LATIN_SMALL_LETTER_B:
            case LATIN_CAPITAL_LETTER_A:
            case LATIN_CAPITAL_LETTER_B:
            case LATIN_CAPITAL_LETTER_C:
            case LATIN_CAPITAL_LETTER_D:
            case LATIN_CAPITAL_LETTER_E:
            case LATIN_CAPITAL_LETTER_F:
                {
                alt408=1;
                }
                break;
            case LATIN_SMALL_LETTER_I:
            case LATIN_SMALL_LETTER_L:
            case LATIN_SMALL_LETTER_H:
            case LATIN_SMALL_LETTER_T:
            case LATIN_SMALL_LETTER_P:
            case LATIN_SMALL_LETTER_S:
            case LATIN_SMALL_LETTER_N:
            case LATIN_SMALL_LETTER_G:
            case LATIN_SMALL_LETTER_J:
            case LATIN_SMALL_LETTER_V:
            case LATIN_SMALL_LETTER_R:
            case LATIN_SMALL_LETTER_U:
            case LATIN_SMALL_LETTER_O:
            case LATIN_SMALL_LETTER_Y:
            case LATIN_SMALL_LETTER_M:
            case LATIN_SMALL_LETTER_K:
            case LATIN_SMALL_LETTER_Q:
            case LATIN_SMALL_LETTER_W:
            case LATIN_SMALL_LETTER_X:
            case LATIN_SMALL_LETTER_Z:
            case LATIN_CAPITAL_LETTER_G:
            case LATIN_CAPITAL_LETTER_H:
            case LATIN_CAPITAL_LETTER_I:
            case LATIN_CAPITAL_LETTER_J:
            case LATIN_CAPITAL_LETTER_K:
            case LATIN_CAPITAL_LETTER_L:
            case LATIN_CAPITAL_LETTER_M:
            case LATIN_CAPITAL_LETTER_N:
            case LATIN_CAPITAL_LETTER_O:
            case LATIN_CAPITAL_LETTER_P:
            case LATIN_CAPITAL_LETTER_Q:
            case LATIN_CAPITAL_LETTER_R:
            case LATIN_CAPITAL_LETTER_S:
            case LATIN_CAPITAL_LETTER_T:
            case LATIN_CAPITAL_LETTER_U:
            case LATIN_CAPITAL_LETTER_V:
            case LATIN_CAPITAL_LETTER_W:
            case LATIN_CAPITAL_LETTER_X:
            case LATIN_CAPITAL_LETTER_Y:
            case LATIN_CAPITAL_LETTER_Z:
                {
                alt408=2;
                }
                break;
            case LATIN_SMALL_LETTER_A_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_A_WITH_GRAVE:
            case LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_A_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_A_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_A_WITH_ACUTE:
            case LATIN_SMALL_LETTER_AE:
            case LATIN_CAPITAL_LETTER_AE:
            case LATIN_SMALL_LETTER_C_WITH_CEDILLA:
            case LATIN_CAPITAL_LETTER_C_WITH_CEDILLA:
            case LATIN_SMALL_LETTER_E_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_E_WITH_GRAVE:
            case LATIN_SMALL_LETTER_E_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_E_WITH_ACUTE:
            case LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_E_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_I_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_I_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_I_WITH_ACUTE:
            case LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_O_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_O_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_O_WITH_ACUTE:
            case LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE:
            case LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE:
            case LATIN_SMALL_LETTER_U_WITH_GRAVE:
            case LATIN_CAPITAL_LETTER_U_WITH_GRAVE:
            case LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX:
            case LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX:
            case LATIN_SMALL_LETTER_U_WITH_DIAERESIS:
            case LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS:
            case LATIN_SMALL_LETTER_U_WITH_ACUTE:
            case LATIN_CAPITAL_LETTER_U_WITH_ACUTE:
            case LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE:
            case LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE:
            case LATIN_SMALL_LIGATURE_OE:
            case LATIN_CAPITAL_LIGATURE_OE:
                {
                alt408=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 408, 0, input);

                throw nvae;
            }

            switch (alt408) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2073:10: hexLetter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_hexLetter_in_letter18634);
                    hexLetter881=hexLetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hexLetter881.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2073:22: nonHexLetter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonHexLetter_in_letter18638);
                    nonHexLetter882=nonHexLetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonHexLetter882.getTree());

                    }
                    break;
                case 3 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2073:37: letterWithDiacritics
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_letterWithDiacritics_in_letter18642);
                    letterWithDiacritics883=letterWithDiacritics();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, letterWithDiacritics883.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "letter"

    public static class asciiLetter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asciiLetter"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2075:1: asciiLetter : ( hexLetter | nonHexLetter );
    public final NovelangParser.asciiLetter_return asciiLetter() throws RecognitionException {
        NovelangParser.asciiLetter_return retval = new NovelangParser.asciiLetter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        NovelangParser.hexLetter_return hexLetter884 = null;

        NovelangParser.nonHexLetter_return nonHexLetter885 = null;



        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2075:13: ( hexLetter | nonHexLetter )
            int alt409=2;
            int LA409_0 = input.LA(1);

            if ( (LA409_0==LATIN_SMALL_LETTER_F||LA409_0==LATIN_SMALL_LETTER_E||LA409_0==LATIN_SMALL_LETTER_C||(LA409_0>=LATIN_SMALL_LETTER_A && LA409_0<=LATIN_SMALL_LETTER_B)||(LA409_0>=LATIN_CAPITAL_LETTER_A && LA409_0<=LATIN_CAPITAL_LETTER_F)) ) {
                alt409=1;
            }
            else if ( ((LA409_0>=LATIN_SMALL_LETTER_I && LA409_0<=LATIN_SMALL_LETTER_L)||(LA409_0>=LATIN_SMALL_LETTER_H && LA409_0<=LATIN_SMALL_LETTER_S)||(LA409_0>=LATIN_SMALL_LETTER_N && LA409_0<=LATIN_SMALL_LETTER_V)||LA409_0==LATIN_SMALL_LETTER_R||(LA409_0>=LATIN_SMALL_LETTER_U && LA409_0<=LATIN_SMALL_LETTER_O)||(LA409_0>=LATIN_SMALL_LETTER_Y && LA409_0<=LATIN_SMALL_LETTER_M)||(LA409_0>=LATIN_SMALL_LETTER_K && LA409_0<=LATIN_CAPITAL_LETTER_Z)) ) {
                alt409=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 409, 0, input);

                throw nvae;
            }
            switch (alt409) {
                case 1 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2075:15: hexLetter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_hexLetter_in_asciiLetter18651);
                    hexLetter884=hexLetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hexLetter884.getTree());

                    }
                    break;
                case 2 :
                    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2075:27: nonHexLetter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonHexLetter_in_asciiLetter18655);
                    nonHexLetter885=nonHexLetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonHexLetter885.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "asciiLetter"

    public static class digit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "digit"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2077:1: digit : ( DIGIT_0 | DIGIT_1 | DIGIT_2 | DIGIT_3 | DIGIT_4 | DIGIT_5 | DIGIT_6 | DIGIT_7 | DIGIT_8 | DIGIT_9 );
    public final NovelangParser.digit_return digit() throws RecognitionException {
        NovelangParser.digit_return retval = new NovelangParser.digit_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set886=null;

        Object set886_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2078:3: ( DIGIT_0 | DIGIT_1 | DIGIT_2 | DIGIT_3 | DIGIT_4 | DIGIT_5 | DIGIT_6 | DIGIT_7 | DIGIT_8 | DIGIT_9 )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:
            {
            root_0 = (Object)adaptor.nil();

            set886=(Token)input.LT(1);
            if ( (input.LA(1)>=DIGIT_0 && input.LA(1)<=DIGIT_9) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set886));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "digit"

    public static class hexLetter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hexLetter"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2082:1: hexLetter : ( LATIN_SMALL_LETTER_A | LATIN_SMALL_LETTER_B | LATIN_SMALL_LETTER_C | LATIN_SMALL_LETTER_D | LATIN_SMALL_LETTER_E | LATIN_SMALL_LETTER_F | LATIN_CAPITAL_LETTER_A | LATIN_CAPITAL_LETTER_B | LATIN_CAPITAL_LETTER_C | LATIN_CAPITAL_LETTER_D | LATIN_CAPITAL_LETTER_E | LATIN_CAPITAL_LETTER_F );
    public final NovelangParser.hexLetter_return hexLetter() throws RecognitionException {
        NovelangParser.hexLetter_return retval = new NovelangParser.hexLetter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set887=null;

        Object set887_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2083:3: ( LATIN_SMALL_LETTER_A | LATIN_SMALL_LETTER_B | LATIN_SMALL_LETTER_C | LATIN_SMALL_LETTER_D | LATIN_SMALL_LETTER_E | LATIN_SMALL_LETTER_F | LATIN_CAPITAL_LETTER_A | LATIN_CAPITAL_LETTER_B | LATIN_CAPITAL_LETTER_C | LATIN_CAPITAL_LETTER_D | LATIN_CAPITAL_LETTER_E | LATIN_CAPITAL_LETTER_F )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:
            {
            root_0 = (Object)adaptor.nil();

            set887=(Token)input.LT(1);
            if ( input.LA(1)==LATIN_SMALL_LETTER_F||input.LA(1)==LATIN_SMALL_LETTER_E||input.LA(1)==LATIN_SMALL_LETTER_C||(input.LA(1)>=LATIN_SMALL_LETTER_A && input.LA(1)<=LATIN_SMALL_LETTER_B)||(input.LA(1)>=LATIN_CAPITAL_LETTER_A && input.LA(1)<=LATIN_CAPITAL_LETTER_F) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set887));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hexLetter"

    public static class nonHexLetter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonHexLetter"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2089:1: nonHexLetter : ( LATIN_SMALL_LETTER_G | LATIN_SMALL_LETTER_H | LATIN_SMALL_LETTER_I | LATIN_SMALL_LETTER_J | LATIN_SMALL_LETTER_K | LATIN_SMALL_LETTER_L | LATIN_SMALL_LETTER_M | LATIN_SMALL_LETTER_N | LATIN_SMALL_LETTER_O | LATIN_SMALL_LETTER_P | LATIN_SMALL_LETTER_Q | LATIN_SMALL_LETTER_R | LATIN_SMALL_LETTER_S | LATIN_SMALL_LETTER_T | LATIN_SMALL_LETTER_U | LATIN_SMALL_LETTER_V | LATIN_SMALL_LETTER_W | LATIN_SMALL_LETTER_X | LATIN_SMALL_LETTER_Y | LATIN_SMALL_LETTER_Z | LATIN_CAPITAL_LETTER_G | LATIN_CAPITAL_LETTER_H | LATIN_CAPITAL_LETTER_I | LATIN_CAPITAL_LETTER_J | LATIN_CAPITAL_LETTER_K | LATIN_CAPITAL_LETTER_L | LATIN_CAPITAL_LETTER_M | LATIN_CAPITAL_LETTER_N | LATIN_CAPITAL_LETTER_O | LATIN_CAPITAL_LETTER_P | LATIN_CAPITAL_LETTER_Q | LATIN_CAPITAL_LETTER_R | LATIN_CAPITAL_LETTER_S | LATIN_CAPITAL_LETTER_T | LATIN_CAPITAL_LETTER_U | LATIN_CAPITAL_LETTER_V | LATIN_CAPITAL_LETTER_W | LATIN_CAPITAL_LETTER_X | LATIN_CAPITAL_LETTER_Y | LATIN_CAPITAL_LETTER_Z );
    public final NovelangParser.nonHexLetter_return nonHexLetter() throws RecognitionException {
        NovelangParser.nonHexLetter_return retval = new NovelangParser.nonHexLetter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set888=null;

        Object set888_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2090:3: ( LATIN_SMALL_LETTER_G | LATIN_SMALL_LETTER_H | LATIN_SMALL_LETTER_I | LATIN_SMALL_LETTER_J | LATIN_SMALL_LETTER_K | LATIN_SMALL_LETTER_L | LATIN_SMALL_LETTER_M | LATIN_SMALL_LETTER_N | LATIN_SMALL_LETTER_O | LATIN_SMALL_LETTER_P | LATIN_SMALL_LETTER_Q | LATIN_SMALL_LETTER_R | LATIN_SMALL_LETTER_S | LATIN_SMALL_LETTER_T | LATIN_SMALL_LETTER_U | LATIN_SMALL_LETTER_V | LATIN_SMALL_LETTER_W | LATIN_SMALL_LETTER_X | LATIN_SMALL_LETTER_Y | LATIN_SMALL_LETTER_Z | LATIN_CAPITAL_LETTER_G | LATIN_CAPITAL_LETTER_H | LATIN_CAPITAL_LETTER_I | LATIN_CAPITAL_LETTER_J | LATIN_CAPITAL_LETTER_K | LATIN_CAPITAL_LETTER_L | LATIN_CAPITAL_LETTER_M | LATIN_CAPITAL_LETTER_N | LATIN_CAPITAL_LETTER_O | LATIN_CAPITAL_LETTER_P | LATIN_CAPITAL_LETTER_Q | LATIN_CAPITAL_LETTER_R | LATIN_CAPITAL_LETTER_S | LATIN_CAPITAL_LETTER_T | LATIN_CAPITAL_LETTER_U | LATIN_CAPITAL_LETTER_V | LATIN_CAPITAL_LETTER_W | LATIN_CAPITAL_LETTER_X | LATIN_CAPITAL_LETTER_Y | LATIN_CAPITAL_LETTER_Z )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:
            {
            root_0 = (Object)adaptor.nil();

            set888=(Token)input.LT(1);
            if ( (input.LA(1)>=LATIN_SMALL_LETTER_I && input.LA(1)<=LATIN_SMALL_LETTER_L)||(input.LA(1)>=LATIN_SMALL_LETTER_H && input.LA(1)<=LATIN_SMALL_LETTER_S)||(input.LA(1)>=LATIN_SMALL_LETTER_N && input.LA(1)<=LATIN_SMALL_LETTER_V)||input.LA(1)==LATIN_SMALL_LETTER_R||(input.LA(1)>=LATIN_SMALL_LETTER_U && input.LA(1)<=LATIN_SMALL_LETTER_O)||(input.LA(1)>=LATIN_SMALL_LETTER_Y && input.LA(1)<=LATIN_SMALL_LETTER_M)||(input.LA(1)>=LATIN_SMALL_LETTER_K && input.LA(1)<=LATIN_CAPITAL_LETTER_Z) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set888));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nonHexLetter"

    public static class letterWithDiacritics_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "letterWithDiacritics"
    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2107:1: letterWithDiacritics : ( LATIN_SMALL_LETTER_A_WITH_GRAVE | LATIN_CAPITAL_LETTER_A_WITH_GRAVE | LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX | LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX | LATIN_SMALL_LETTER_A_WITH_DIAERESIS | LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS | LATIN_SMALL_LETTER_A_WITH_ACUTE | LATIN_CAPITAL_LETTER_A_WITH_ACUTE | LATIN_SMALL_LETTER_AE | LATIN_CAPITAL_LETTER_AE | LATIN_SMALL_LETTER_C_WITH_CEDILLA | LATIN_CAPITAL_LETTER_C_WITH_CEDILLA | LATIN_SMALL_LETTER_E_WITH_GRAVE | LATIN_CAPITAL_LETTER_E_WITH_GRAVE | LATIN_SMALL_LETTER_E_WITH_ACUTE | LATIN_CAPITAL_LETTER_E_WITH_ACUTE | LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX | LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX | LATIN_SMALL_LETTER_E_WITH_DIAERESIS | LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS | LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX | LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX | LATIN_SMALL_LETTER_I_WITH_DIAERESIS | LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS | LATIN_SMALL_LETTER_I_WITH_ACUTE | LATIN_CAPITAL_LETTER_I_WITH_ACUTE | LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX | LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX | LATIN_SMALL_LETTER_O_WITH_DIAERESIS | LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS | LATIN_SMALL_LETTER_O_WITH_ACUTE | LATIN_CAPITAL_LETTER_O_WITH_ACUTE | LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE | LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE | LATIN_SMALL_LETTER_U_WITH_GRAVE | LATIN_CAPITAL_LETTER_U_WITH_GRAVE | LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX | LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX | LATIN_SMALL_LETTER_U_WITH_DIAERESIS | LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS | LATIN_SMALL_LETTER_U_WITH_ACUTE | LATIN_CAPITAL_LETTER_U_WITH_ACUTE | LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE | LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE | LATIN_SMALL_LIGATURE_OE | LATIN_CAPITAL_LIGATURE_OE );
    public final NovelangParser.letterWithDiacritics_return letterWithDiacritics() throws RecognitionException {
        NovelangParser.letterWithDiacritics_return retval = new NovelangParser.letterWithDiacritics_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set889=null;

        Object set889_tree=null;

        try {
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:2108:3: ( LATIN_SMALL_LETTER_A_WITH_GRAVE | LATIN_CAPITAL_LETTER_A_WITH_GRAVE | LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX | LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX | LATIN_SMALL_LETTER_A_WITH_DIAERESIS | LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS | LATIN_SMALL_LETTER_A_WITH_ACUTE | LATIN_CAPITAL_LETTER_A_WITH_ACUTE | LATIN_SMALL_LETTER_AE | LATIN_CAPITAL_LETTER_AE | LATIN_SMALL_LETTER_C_WITH_CEDILLA | LATIN_CAPITAL_LETTER_C_WITH_CEDILLA | LATIN_SMALL_LETTER_E_WITH_GRAVE | LATIN_CAPITAL_LETTER_E_WITH_GRAVE | LATIN_SMALL_LETTER_E_WITH_ACUTE | LATIN_CAPITAL_LETTER_E_WITH_ACUTE | LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX | LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX | LATIN_SMALL_LETTER_E_WITH_DIAERESIS | LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS | LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX | LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX | LATIN_SMALL_LETTER_I_WITH_DIAERESIS | LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS | LATIN_SMALL_LETTER_I_WITH_ACUTE | LATIN_CAPITAL_LETTER_I_WITH_ACUTE | LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX | LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX | LATIN_SMALL_LETTER_O_WITH_DIAERESIS | LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS | LATIN_SMALL_LETTER_O_WITH_ACUTE | LATIN_CAPITAL_LETTER_O_WITH_ACUTE | LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE | LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE | LATIN_SMALL_LETTER_U_WITH_GRAVE | LATIN_CAPITAL_LETTER_U_WITH_GRAVE | LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX | LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX | LATIN_SMALL_LETTER_U_WITH_DIAERESIS | LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS | LATIN_SMALL_LETTER_U_WITH_ACUTE | LATIN_CAPITAL_LETTER_U_WITH_ACUTE | LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE | LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE | LATIN_SMALL_LIGATURE_OE | LATIN_CAPITAL_LIGATURE_OE )
            // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:
            {
            root_0 = (Object)adaptor.nil();

            set889=(Token)input.LT(1);
            if ( (input.LA(1)>=LATIN_SMALL_LETTER_A_WITH_GRAVE && input.LA(1)<=LATIN_CAPITAL_LIGATURE_OE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set889));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "letterWithDiacritics"

    // $ANTLR start synpred1_Novelang
    public final void synpred1_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:300:12: ( url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:300:14: url
        {
        pushFollow(FOLLOW_url_in_synpred1_Novelang1396);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_Novelang

    // $ANTLR start synpred2_Novelang
    public final void synpred2_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:301:12: ( smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:301:14: smallDashedListItem
        {
        pushFollow(FOLLOW_smallDashedListItem_in_synpred2_Novelang1421);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_Novelang

    // $ANTLR start synpred3_Novelang
    public final void synpred3_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:317:10: ( url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:317:12: url
        {
        pushFollow(FOLLOW_url_in_synpred3_Novelang1619);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_Novelang

    // $ANTLR start synpred4_Novelang
    public final void synpred4_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:318:10: ( smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:318:12: smallDashedListItem
        {
        pushFollow(FOLLOW_smallDashedListItem_in_synpred4_Novelang1642);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_Novelang

    // $ANTLR start synpred5_Novelang
    public final void synpred5_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:324:12: ( url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:324:14: url
        {
        pushFollow(FOLLOW_url_in_synpred5_Novelang1752);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_Novelang

    // $ANTLR start synpred6_Novelang
    public final void synpred6_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:325:12: ( ( whitespace )? smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:325:14: ( whitespace )? smallDashedListItem
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:325:14: ( whitespace )?
        int alt410=2;
        int LA410_0 = input.LA(1);

        if ( (LA410_0==WHITESPACE) ) {
            alt410=1;
        }
        switch (alt410) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:325:14: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred6_Novelang1777);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_smallDashedListItem_in_synpred6_Novelang1780);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_Novelang

    // $ANTLR start synpred7_Novelang
    public final void synpred7_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:403:13: ( softbreak url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:403:15: softbreak url
        {
        pushFollow(FOLLOW_softbreak_in_synpred7_Novelang2365);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_url_in_synpred7_Novelang2367);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_Novelang

    // $ANTLR start synpred8_Novelang
    public final void synpred8_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:405:13: ( softbreak ( whitespace )? smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:405:15: softbreak ( whitespace )? smallDashedListItem
        {
        pushFollow(FOLLOW_softbreak_in_synpred8_Novelang2409);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:405:25: ( whitespace )?
        int alt411=2;
        int LA411_0 = input.LA(1);

        if ( (LA411_0==WHITESPACE) ) {
            alt411=1;
        }
        switch (alt411) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:405:25: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred8_Novelang2411);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_smallDashedListItem_in_synpred8_Novelang2414);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_Novelang

    // $ANTLR start synpred9_Novelang
    public final void synpred9_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:411:15: ( ( whitespace )? softbreak url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:411:17: ( whitespace )? softbreak url
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:411:17: ( whitespace )?
        int alt412=2;
        int LA412_0 = input.LA(1);

        if ( (LA412_0==WHITESPACE) ) {
            alt412=1;
        }
        switch (alt412) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:411:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred9_Novelang2504);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred9_Novelang2507);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_url_in_synpred9_Novelang2509);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_Novelang

    // $ANTLR start synpred10_Novelang
    public final void synpred10_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:413:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:413:17: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:413:17: ( whitespace )?
        int alt413=2;
        int LA413_0 = input.LA(1);

        if ( (LA413_0==WHITESPACE) ) {
            alt413=1;
        }
        switch (alt413) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:413:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred10_Novelang2558);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred10_Novelang2561);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:413:39: ( whitespace )?
        int alt414=2;
        int LA414_0 = input.LA(1);

        if ( (LA414_0==WHITESPACE) ) {
            alt414=1;
        }
        switch (alt414) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:413:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred10_Novelang2563);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_smallDashedListItem_in_synpred10_Novelang2566);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_Novelang

    // $ANTLR start synpred11_Novelang
    public final void synpred11_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:417:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:418:17: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:418:17: ( whitespace )?
        int alt415=2;
        int LA415_0 = input.LA(1);

        if ( (LA415_0==WHITESPACE) ) {
            alt415=1;
        }
        switch (alt415) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:418:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred11_Novelang2665);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred11_Novelang2668);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:418:39: ( whitespace )?
        int alt416=2;
        int LA416_0 = input.LA(1);

        if ( (LA416_0==WHITESPACE) ) {
            alt416=1;
        }
        switch (alt416) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:418:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred11_Novelang2670);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_synpred11_Novelang2673);
        mixedDelimitedSpreadBlock();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:419:17: ( whitespace mixedDelimitedSpreadBlock )*
        loop417:
        do {
            int alt417=2;
            int LA417_0 = input.LA(1);

            if ( (LA417_0==WHITESPACE) ) {
                int LA417_1 = input.LA(2);

                if ( (LA417_1==LEFT_PARENTHESIS||LA417_1==LEFT_SQUARE_BRACKET||(LA417_1>=DOUBLE_QUOTE && LA417_1<=HYPHEN_MINUS)||(LA417_1>=GRAVE_ACCENT && LA417_1<=LATIN_SMALL_LETTER_S)||LA417_1==TILDE||(LA417_1>=LATIN_SMALL_LETTER_N && LA417_1<=LATIN_SMALL_LETTER_V)||LA417_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA417_1>=LATIN_SMALL_LETTER_R && LA417_1<=LATIN_SMALL_LETTER_M)||(LA417_1>=DIGIT_0 && LA417_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    alt417=1;
                }


            }


            switch (alt417) {
        	case 1 :
        	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:419:19: whitespace mixedDelimitedSpreadBlock
        	    {
        	    pushFollow(FOLLOW_whitespace_in_synpred11_Novelang2694);
        	    whitespace();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_synpred11_Novelang2696);
        	    mixedDelimitedSpreadBlock();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop417;
            }
        } while (true);

        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:420:17: ( whitespace )?
        int alt418=2;
        int LA418_0 = input.LA(1);

        if ( (LA418_0==WHITESPACE) ) {
            alt418=1;
        }
        switch (alt418) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:420:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred11_Novelang2718);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred11_Novelang2721);
        softbreak();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_Novelang

    // $ANTLR start synpred12_Novelang
    public final void synpred12_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:443:15: ( ( whitespace )? softbreak url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:443:17: ( whitespace )? softbreak url
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:443:17: ( whitespace )?
        int alt419=2;
        int LA419_0 = input.LA(1);

        if ( (LA419_0==WHITESPACE) ) {
            alt419=1;
        }
        switch (alt419) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:443:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred12_Novelang3048);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred12_Novelang3051);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_url_in_synpred12_Novelang3053);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_Novelang

    // $ANTLR start synpred13_Novelang
    public final void synpred13_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:445:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:445:17: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:445:17: ( whitespace )?
        int alt420=2;
        int LA420_0 = input.LA(1);

        if ( (LA420_0==WHITESPACE) ) {
            alt420=1;
        }
        switch (alt420) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:445:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred13_Novelang3102);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred13_Novelang3105);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:445:39: ( whitespace )?
        int alt421=2;
        int LA421_0 = input.LA(1);

        if ( (LA421_0==WHITESPACE) ) {
            alt421=1;
        }
        switch (alt421) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:445:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred13_Novelang3107);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_smallDashedListItem_in_synpred13_Novelang3110);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_Novelang

    // $ANTLR start synpred14_Novelang
    public final void synpred14_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:449:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:450:17: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlock ( whitespace mixedDelimitedSpreadBlock )* ( whitespace )? softbreak
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:450:17: ( whitespace )?
        int alt422=2;
        int LA422_0 = input.LA(1);

        if ( (LA422_0==WHITESPACE) ) {
            alt422=1;
        }
        switch (alt422) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:450:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred14_Novelang3209);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred14_Novelang3212);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:450:39: ( whitespace )?
        int alt423=2;
        int LA423_0 = input.LA(1);

        if ( (LA423_0==WHITESPACE) ) {
            alt423=1;
        }
        switch (alt423) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:450:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred14_Novelang3214);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_synpred14_Novelang3217);
        mixedDelimitedSpreadBlock();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:451:17: ( whitespace mixedDelimitedSpreadBlock )*
        loop424:
        do {
            int alt424=2;
            int LA424_0 = input.LA(1);

            if ( (LA424_0==WHITESPACE) ) {
                int LA424_1 = input.LA(2);

                if ( (LA424_1==LEFT_PARENTHESIS||LA424_1==LEFT_SQUARE_BRACKET||(LA424_1>=DOUBLE_QUOTE && LA424_1<=HYPHEN_MINUS)||(LA424_1>=GRAVE_ACCENT && LA424_1<=LATIN_SMALL_LETTER_S)||LA424_1==TILDE||(LA424_1>=LATIN_SMALL_LETTER_N && LA424_1<=LATIN_SMALL_LETTER_V)||LA424_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA424_1>=LATIN_SMALL_LETTER_R && LA424_1<=LATIN_SMALL_LETTER_M)||(LA424_1>=DIGIT_0 && LA424_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    alt424=1;
                }


            }


            switch (alt424) {
        	case 1 :
        	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:451:19: whitespace mixedDelimitedSpreadBlock
        	    {
        	    pushFollow(FOLLOW_whitespace_in_synpred14_Novelang3238);
        	    whitespace();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_mixedDelimitedSpreadBlock_in_synpred14_Novelang3240);
        	    mixedDelimitedSpreadBlock();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop424;
            }
        } while (true);

        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:452:17: ( whitespace )?
        int alt425=2;
        int LA425_0 = input.LA(1);

        if ( (LA425_0==WHITESPACE) ) {
            alt425=1;
        }
        switch (alt425) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:452:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred14_Novelang3262);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred14_Novelang3265);
        softbreak();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_Novelang

    // $ANTLR start synpred15_Novelang
    public final void synpred15_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:648:13: ( softbreak url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:648:15: softbreak url
        {
        pushFollow(FOLLOW_softbreak_in_synpred15_Novelang4896);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_url_in_synpred15_Novelang4898);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_Novelang

    // $ANTLR start synpred16_Novelang
    public final void synpred16_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:650:13: ( softbreak ( whitespace )? smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:650:15: softbreak ( whitespace )? smallDashedListItem
        {
        pushFollow(FOLLOW_softbreak_in_synpred16_Novelang4940);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:650:25: ( whitespace )?
        int alt426=2;
        int LA426_0 = input.LA(1);

        if ( (LA426_0==WHITESPACE) ) {
            alt426=1;
        }
        switch (alt426) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:650:25: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred16_Novelang4942);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_smallDashedListItem_in_synpred16_Novelang4945);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_Novelang

    // $ANTLR start synpred17_Novelang
    public final void synpred17_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:656:15: ( ( whitespace )? softbreak url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:656:17: ( whitespace )? softbreak url
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:656:17: ( whitespace )?
        int alt427=2;
        int LA427_0 = input.LA(1);

        if ( (LA427_0==WHITESPACE) ) {
            alt427=1;
        }
        switch (alt427) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:656:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred17_Novelang5035);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred17_Novelang5038);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_url_in_synpred17_Novelang5040);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_Novelang

    // $ANTLR start synpred18_Novelang
    public final void synpred18_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:658:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:658:17: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:658:17: ( whitespace )?
        int alt428=2;
        int LA428_0 = input.LA(1);

        if ( (LA428_0==WHITESPACE) ) {
            alt428=1;
        }
        switch (alt428) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:658:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred18_Novelang5089);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred18_Novelang5092);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:658:39: ( whitespace )?
        int alt429=2;
        int LA429_0 = input.LA(1);

        if ( (LA429_0==WHITESPACE) ) {
            alt429=1;
        }
        switch (alt429) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:658:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred18_Novelang5094);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_smallDashedListItem_in_synpred18_Novelang5097);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_Novelang

    // $ANTLR start synpred19_Novelang
    public final void synpred19_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:662:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:663:17: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:663:17: ( whitespace )?
        int alt430=2;
        int LA430_0 = input.LA(1);

        if ( (LA430_0==WHITESPACE) ) {
            alt430=1;
        }
        switch (alt430) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:663:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred19_Novelang5196);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred19_Novelang5199);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:663:39: ( whitespace )?
        int alt431=2;
        int LA431_0 = input.LA(1);

        if ( (LA431_0==WHITESPACE) ) {
            alt431=1;
        }
        switch (alt431) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:663:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred19_Novelang5201);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_synpred19_Novelang5204);
        mixedDelimitedSpreadBlockNoDoubleQuotes();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:664:17: ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )*
        loop432:
        do {
            int alt432=2;
            int LA432_0 = input.LA(1);

            if ( (LA432_0==WHITESPACE) ) {
                int LA432_1 = input.LA(2);

                if ( (LA432_1==LEFT_PARENTHESIS||LA432_1==LEFT_SQUARE_BRACKET||(LA432_1>=SOLIDUS && LA432_1<=HYPHEN_MINUS)||(LA432_1>=GRAVE_ACCENT && LA432_1<=LATIN_SMALL_LETTER_S)||LA432_1==TILDE||(LA432_1>=LATIN_SMALL_LETTER_N && LA432_1<=LATIN_SMALL_LETTER_V)||LA432_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA432_1>=LATIN_SMALL_LETTER_R && LA432_1<=LATIN_SMALL_LETTER_M)||(LA432_1>=DIGIT_0 && LA432_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    alt432=1;
                }


            }


            switch (alt432) {
        	case 1 :
        	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:664:19: whitespace mixedDelimitedSpreadBlockNoDoubleQuotes
        	    {
        	    pushFollow(FOLLOW_whitespace_in_synpred19_Novelang5225);
        	    whitespace();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_synpred19_Novelang5227);
        	    mixedDelimitedSpreadBlockNoDoubleQuotes();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop432;
            }
        } while (true);

        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:665:17: ( whitespace )?
        int alt433=2;
        int LA433_0 = input.LA(1);

        if ( (LA433_0==WHITESPACE) ) {
            alt433=1;
        }
        switch (alt433) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:665:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred19_Novelang5249);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred19_Novelang5252);
        softbreak();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_Novelang

    // $ANTLR start synpred20_Novelang
    public final void synpred20_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:688:15: ( ( whitespace )? softbreak url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:688:17: ( whitespace )? softbreak url
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:688:17: ( whitespace )?
        int alt434=2;
        int LA434_0 = input.LA(1);

        if ( (LA434_0==WHITESPACE) ) {
            alt434=1;
        }
        switch (alt434) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:688:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred20_Novelang5579);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred20_Novelang5582);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_url_in_synpred20_Novelang5584);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_Novelang

    // $ANTLR start synpred21_Novelang
    public final void synpred21_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:690:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:690:17: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:690:17: ( whitespace )?
        int alt435=2;
        int LA435_0 = input.LA(1);

        if ( (LA435_0==WHITESPACE) ) {
            alt435=1;
        }
        switch (alt435) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:690:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred21_Novelang5633);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred21_Novelang5636);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:690:39: ( whitespace )?
        int alt436=2;
        int LA436_0 = input.LA(1);

        if ( (LA436_0==WHITESPACE) ) {
            alt436=1;
        }
        switch (alt436) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:690:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred21_Novelang5638);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_smallDashedListItem_in_synpred21_Novelang5641);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_Novelang

    // $ANTLR start synpred22_Novelang
    public final void synpred22_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:694:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:695:17: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoDoubleQuotes ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )* ( whitespace )? softbreak
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:695:17: ( whitespace )?
        int alt437=2;
        int LA437_0 = input.LA(1);

        if ( (LA437_0==WHITESPACE) ) {
            alt437=1;
        }
        switch (alt437) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:695:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred22_Novelang5740);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred22_Novelang5743);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:695:39: ( whitespace )?
        int alt438=2;
        int LA438_0 = input.LA(1);

        if ( (LA438_0==WHITESPACE) ) {
            alt438=1;
        }
        switch (alt438) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:695:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred22_Novelang5745);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_synpred22_Novelang5748);
        mixedDelimitedSpreadBlockNoDoubleQuotes();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:696:17: ( whitespace mixedDelimitedSpreadBlockNoDoubleQuotes )*
        loop439:
        do {
            int alt439=2;
            int LA439_0 = input.LA(1);

            if ( (LA439_0==WHITESPACE) ) {
                int LA439_1 = input.LA(2);

                if ( (LA439_1==LEFT_PARENTHESIS||LA439_1==LEFT_SQUARE_BRACKET||(LA439_1>=SOLIDUS && LA439_1<=HYPHEN_MINUS)||(LA439_1>=GRAVE_ACCENT && LA439_1<=LATIN_SMALL_LETTER_S)||LA439_1==TILDE||(LA439_1>=LATIN_SMALL_LETTER_N && LA439_1<=LATIN_SMALL_LETTER_V)||LA439_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA439_1>=LATIN_SMALL_LETTER_R && LA439_1<=LATIN_SMALL_LETTER_M)||(LA439_1>=DIGIT_0 && LA439_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    alt439=1;
                }


            }


            switch (alt439) {
        	case 1 :
        	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:696:19: whitespace mixedDelimitedSpreadBlockNoDoubleQuotes
        	    {
        	    pushFollow(FOLLOW_whitespace_in_synpred22_Novelang5769);
        	    whitespace();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_synpred22_Novelang5771);
        	    mixedDelimitedSpreadBlockNoDoubleQuotes();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop439;
            }
        } while (true);

        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:697:17: ( whitespace )?
        int alt440=2;
        int LA440_0 = input.LA(1);

        if ( (LA440_0==WHITESPACE) ) {
            alt440=1;
        }
        switch (alt440) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:697:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred22_Novelang5793);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred22_Novelang5796);
        softbreak();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_Novelang

    // $ANTLR start synpred23_Novelang
    public final void synpred23_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:836:13: ( softbreak url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:836:15: softbreak url
        {
        pushFollow(FOLLOW_softbreak_in_synpred23_Novelang7079);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_url_in_synpred23_Novelang7081);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_Novelang

    // $ANTLR start synpred24_Novelang
    public final void synpred24_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:838:13: ( softbreak ( whitespace )? smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:838:15: softbreak ( whitespace )? smallDashedListItem
        {
        pushFollow(FOLLOW_softbreak_in_synpred24_Novelang7123);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:838:25: ( whitespace )?
        int alt441=2;
        int LA441_0 = input.LA(1);

        if ( (LA441_0==WHITESPACE) ) {
            alt441=1;
        }
        switch (alt441) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:838:25: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred24_Novelang7125);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_smallDashedListItem_in_synpred24_Novelang7128);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_Novelang

    // $ANTLR start synpred25_Novelang
    public final void synpred25_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:844:15: ( ( whitespace )? softbreak url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:844:17: ( whitespace )? softbreak url
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:844:17: ( whitespace )?
        int alt442=2;
        int LA442_0 = input.LA(1);

        if ( (LA442_0==WHITESPACE) ) {
            alt442=1;
        }
        switch (alt442) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:844:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred25_Novelang7218);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred25_Novelang7221);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_url_in_synpred25_Novelang7223);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_Novelang

    // $ANTLR start synpred26_Novelang
    public final void synpred26_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:846:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:846:17: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:846:17: ( whitespace )?
        int alt443=2;
        int LA443_0 = input.LA(1);

        if ( (LA443_0==WHITESPACE) ) {
            alt443=1;
        }
        switch (alt443) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:846:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred26_Novelang7272);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred26_Novelang7275);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:846:39: ( whitespace )?
        int alt444=2;
        int LA444_0 = input.LA(1);

        if ( (LA444_0==WHITESPACE) ) {
            alt444=1;
        }
        switch (alt444) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:846:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred26_Novelang7277);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_smallDashedListItem_in_synpred26_Novelang7280);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_Novelang

    // $ANTLR start synpred27_Novelang
    public final void synpred27_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:850:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:851:17: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:851:17: ( whitespace )?
        int alt445=2;
        int LA445_0 = input.LA(1);

        if ( (LA445_0==WHITESPACE) ) {
            alt445=1;
        }
        switch (alt445) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:851:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred27_Novelang7379);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred27_Novelang7382);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:851:39: ( whitespace )?
        int alt446=2;
        int LA446_0 = input.LA(1);

        if ( (LA446_0==WHITESPACE) ) {
            alt446=1;
        }
        switch (alt446) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:851:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred27_Novelang7384);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_synpred27_Novelang7387);
        mixedDelimitedSpreadBlockNoEmphasis();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:852:17: ( whitespace mixedDelimitedSpreadBlockNoEmphasis )*
        loop447:
        do {
            int alt447=2;
            int LA447_0 = input.LA(1);

            if ( (LA447_0==WHITESPACE) ) {
                int LA447_1 = input.LA(2);

                if ( (LA447_1==LEFT_PARENTHESIS||LA447_1==LEFT_SQUARE_BRACKET||LA447_1==DOUBLE_QUOTE||LA447_1==HYPHEN_MINUS||(LA447_1>=GRAVE_ACCENT && LA447_1<=LATIN_SMALL_LETTER_S)||LA447_1==TILDE||(LA447_1>=LATIN_SMALL_LETTER_N && LA447_1<=LATIN_SMALL_LETTER_V)||LA447_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA447_1>=LATIN_SMALL_LETTER_R && LA447_1<=LATIN_SMALL_LETTER_M)||(LA447_1>=DIGIT_0 && LA447_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    alt447=1;
                }


            }


            switch (alt447) {
        	case 1 :
        	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:852:19: whitespace mixedDelimitedSpreadBlockNoEmphasis
        	    {
        	    pushFollow(FOLLOW_whitespace_in_synpred27_Novelang7408);
        	    whitespace();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_synpred27_Novelang7410);
        	    mixedDelimitedSpreadBlockNoEmphasis();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop447;
            }
        } while (true);

        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:853:17: ( whitespace )?
        int alt448=2;
        int LA448_0 = input.LA(1);

        if ( (LA448_0==WHITESPACE) ) {
            alt448=1;
        }
        switch (alt448) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:853:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred27_Novelang7432);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred27_Novelang7435);
        softbreak();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_Novelang

    // $ANTLR start synpred28_Novelang
    public final void synpred28_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:876:15: ( ( whitespace )? softbreak url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:876:17: ( whitespace )? softbreak url
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:876:17: ( whitespace )?
        int alt449=2;
        int LA449_0 = input.LA(1);

        if ( (LA449_0==WHITESPACE) ) {
            alt449=1;
        }
        switch (alt449) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:876:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred28_Novelang7762);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred28_Novelang7765);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_url_in_synpred28_Novelang7767);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_Novelang

    // $ANTLR start synpred29_Novelang
    public final void synpred29_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:878:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:878:17: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:878:17: ( whitespace )?
        int alt450=2;
        int LA450_0 = input.LA(1);

        if ( (LA450_0==WHITESPACE) ) {
            alt450=1;
        }
        switch (alt450) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:878:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred29_Novelang7816);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred29_Novelang7819);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:878:39: ( whitespace )?
        int alt451=2;
        int LA451_0 = input.LA(1);

        if ( (LA451_0==WHITESPACE) ) {
            alt451=1;
        }
        switch (alt451) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:878:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred29_Novelang7821);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_smallDashedListItem_in_synpred29_Novelang7824);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_Novelang

    // $ANTLR start synpred30_Novelang
    public final void synpred30_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:882:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:883:17: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoEmphasis ( whitespace mixedDelimitedSpreadBlockNoEmphasis )* ( whitespace )? softbreak
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:883:17: ( whitespace )?
        int alt452=2;
        int LA452_0 = input.LA(1);

        if ( (LA452_0==WHITESPACE) ) {
            alt452=1;
        }
        switch (alt452) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:883:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred30_Novelang7923);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred30_Novelang7926);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:883:39: ( whitespace )?
        int alt453=2;
        int LA453_0 = input.LA(1);

        if ( (LA453_0==WHITESPACE) ) {
            alt453=1;
        }
        switch (alt453) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:883:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred30_Novelang7928);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_synpred30_Novelang7931);
        mixedDelimitedSpreadBlockNoEmphasis();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:884:17: ( whitespace mixedDelimitedSpreadBlockNoEmphasis )*
        loop454:
        do {
            int alt454=2;
            int LA454_0 = input.LA(1);

            if ( (LA454_0==WHITESPACE) ) {
                int LA454_1 = input.LA(2);

                if ( (LA454_1==LEFT_PARENTHESIS||LA454_1==LEFT_SQUARE_BRACKET||LA454_1==DOUBLE_QUOTE||LA454_1==HYPHEN_MINUS||(LA454_1>=GRAVE_ACCENT && LA454_1<=LATIN_SMALL_LETTER_S)||LA454_1==TILDE||(LA454_1>=LATIN_SMALL_LETTER_N && LA454_1<=LATIN_SMALL_LETTER_V)||LA454_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA454_1>=LATIN_SMALL_LETTER_R && LA454_1<=LATIN_SMALL_LETTER_M)||(LA454_1>=DIGIT_0 && LA454_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    alt454=1;
                }


            }


            switch (alt454) {
        	case 1 :
        	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:884:19: whitespace mixedDelimitedSpreadBlockNoEmphasis
        	    {
        	    pushFollow(FOLLOW_whitespace_in_synpred30_Novelang7952);
        	    whitespace();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_synpred30_Novelang7954);
        	    mixedDelimitedSpreadBlockNoEmphasis();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop454;
            }
        } while (true);

        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:885:17: ( whitespace )?
        int alt455=2;
        int LA455_0 = input.LA(1);

        if ( (LA455_0==WHITESPACE) ) {
            alt455=1;
        }
        switch (alt455) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:885:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred30_Novelang7976);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred30_Novelang7979);
        softbreak();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_Novelang

    // $ANTLR start synpred31_Novelang
    public final void synpred31_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1079:13: ( softbreak url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1079:15: softbreak url
        {
        pushFollow(FOLLOW_softbreak_in_synpred31_Novelang9699);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_url_in_synpred31_Novelang9701);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_Novelang

    // $ANTLR start synpred32_Novelang
    public final void synpred32_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1081:13: ( softbreak ( whitespace )? smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1081:15: softbreak ( whitespace )? smallDashedListItem
        {
        pushFollow(FOLLOW_softbreak_in_synpred32_Novelang9743);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1081:25: ( whitespace )?
        int alt456=2;
        int LA456_0 = input.LA(1);

        if ( (LA456_0==WHITESPACE) ) {
            alt456=1;
        }
        switch (alt456) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1081:25: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred32_Novelang9745);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_smallDashedListItem_in_synpred32_Novelang9748);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_Novelang

    // $ANTLR start synpred33_Novelang
    public final void synpred33_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1087:15: ( ( whitespace )? softbreak url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1087:17: ( whitespace )? softbreak url
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1087:17: ( whitespace )?
        int alt457=2;
        int LA457_0 = input.LA(1);

        if ( (LA457_0==WHITESPACE) ) {
            alt457=1;
        }
        switch (alt457) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1087:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred33_Novelang9838);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred33_Novelang9841);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_url_in_synpred33_Novelang9843);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_Novelang

    // $ANTLR start synpred34_Novelang
    public final void synpred34_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1089:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1089:17: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1089:17: ( whitespace )?
        int alt458=2;
        int LA458_0 = input.LA(1);

        if ( (LA458_0==WHITESPACE) ) {
            alt458=1;
        }
        switch (alt458) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1089:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred34_Novelang9892);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred34_Novelang9895);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1089:39: ( whitespace )?
        int alt459=2;
        int LA459_0 = input.LA(1);

        if ( (LA459_0==WHITESPACE) ) {
            alt459=1;
        }
        switch (alt459) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1089:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred34_Novelang9897);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_smallDashedListItem_in_synpred34_Novelang9900);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_Novelang

    // $ANTLR start synpred35_Novelang
    public final void synpred35_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1093:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1094:17: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1094:17: ( whitespace )?
        int alt460=2;
        int LA460_0 = input.LA(1);

        if ( (LA460_0==WHITESPACE) ) {
            alt460=1;
        }
        switch (alt460) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1094:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred35_Novelang9999);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred35_Novelang10002);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1094:39: ( whitespace )?
        int alt461=2;
        int LA461_0 = input.LA(1);

        if ( (LA461_0==WHITESPACE) ) {
            alt461=1;
        }
        switch (alt461) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1094:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred35_Novelang10004);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_synpred35_Novelang10007);
        mixedDelimitedSpreadBlockNoHyphenPair();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1095:17: ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )*
        loop462:
        do {
            int alt462=2;
            int LA462_0 = input.LA(1);

            if ( (LA462_0==WHITESPACE) ) {
                int LA462_1 = input.LA(2);

                if ( (LA462_1==LEFT_PARENTHESIS||LA462_1==LEFT_SQUARE_BRACKET||(LA462_1>=DOUBLE_QUOTE && LA462_1<=SOLIDUS)||(LA462_1>=GRAVE_ACCENT && LA462_1<=LATIN_SMALL_LETTER_S)||LA462_1==TILDE||(LA462_1>=LATIN_SMALL_LETTER_N && LA462_1<=LATIN_SMALL_LETTER_V)||LA462_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA462_1>=LATIN_SMALL_LETTER_R && LA462_1<=LATIN_SMALL_LETTER_M)||(LA462_1>=DIGIT_0 && LA462_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    alt462=1;
                }


            }


            switch (alt462) {
        	case 1 :
        	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1095:19: whitespace mixedDelimitedSpreadBlockNoHyphenPair
        	    {
        	    pushFollow(FOLLOW_whitespace_in_synpred35_Novelang10028);
        	    whitespace();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_synpred35_Novelang10030);
        	    mixedDelimitedSpreadBlockNoHyphenPair();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop462;
            }
        } while (true);

        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1096:17: ( whitespace )?
        int alt463=2;
        int LA463_0 = input.LA(1);

        if ( (LA463_0==WHITESPACE) ) {
            alt463=1;
        }
        switch (alt463) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1096:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred35_Novelang10052);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred35_Novelang10055);
        softbreak();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_Novelang

    // $ANTLR start synpred36_Novelang
    public final void synpred36_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1119:15: ( ( whitespace )? softbreak url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1119:17: ( whitespace )? softbreak url
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1119:17: ( whitespace )?
        int alt464=2;
        int LA464_0 = input.LA(1);

        if ( (LA464_0==WHITESPACE) ) {
            alt464=1;
        }
        switch (alt464) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1119:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred36_Novelang10382);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred36_Novelang10385);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_url_in_synpred36_Novelang10387);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_Novelang

    // $ANTLR start synpred37_Novelang
    public final void synpred37_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1121:15: ( ( whitespace )? softbreak ( whitespace )? smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1121:17: ( whitespace )? softbreak ( whitespace )? smallDashedListItem
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1121:17: ( whitespace )?
        int alt465=2;
        int LA465_0 = input.LA(1);

        if ( (LA465_0==WHITESPACE) ) {
            alt465=1;
        }
        switch (alt465) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1121:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred37_Novelang10436);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred37_Novelang10439);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1121:39: ( whitespace )?
        int alt466=2;
        int LA466_0 = input.LA(1);

        if ( (LA466_0==WHITESPACE) ) {
            alt466=1;
        }
        switch (alt466) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1121:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred37_Novelang10441);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_smallDashedListItem_in_synpred37_Novelang10444);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_Novelang

    // $ANTLR start synpred38_Novelang
    public final void synpred38_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1125:15: ( ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1126:17: ( whitespace )? softbreak ( whitespace )? mixedDelimitedSpreadBlockNoHyphenPair ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )* ( whitespace )? softbreak
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1126:17: ( whitespace )?
        int alt467=2;
        int LA467_0 = input.LA(1);

        if ( (LA467_0==WHITESPACE) ) {
            alt467=1;
        }
        switch (alt467) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1126:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred38_Novelang10543);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred38_Novelang10546);
        softbreak();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1126:39: ( whitespace )?
        int alt468=2;
        int LA468_0 = input.LA(1);

        if ( (LA468_0==WHITESPACE) ) {
            alt468=1;
        }
        switch (alt468) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1126:39: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred38_Novelang10548);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_synpred38_Novelang10551);
        mixedDelimitedSpreadBlockNoHyphenPair();

        state._fsp--;
        if (state.failed) return ;
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1127:17: ( whitespace mixedDelimitedSpreadBlockNoHyphenPair )*
        loop469:
        do {
            int alt469=2;
            int LA469_0 = input.LA(1);

            if ( (LA469_0==WHITESPACE) ) {
                int LA469_1 = input.LA(2);

                if ( (LA469_1==LEFT_PARENTHESIS||LA469_1==LEFT_SQUARE_BRACKET||(LA469_1>=DOUBLE_QUOTE && LA469_1<=SOLIDUS)||(LA469_1>=GRAVE_ACCENT && LA469_1<=LATIN_SMALL_LETTER_S)||LA469_1==TILDE||(LA469_1>=LATIN_SMALL_LETTER_N && LA469_1<=LATIN_SMALL_LETTER_V)||LA469_1==LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK||(LA469_1>=LATIN_SMALL_LETTER_R && LA469_1<=LATIN_SMALL_LETTER_M)||(LA469_1>=DIGIT_0 && LA469_1<=LATIN_CAPITAL_LIGATURE_OE)) ) {
                    alt469=1;
                }


            }


            switch (alt469) {
        	case 1 :
        	    // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1127:19: whitespace mixedDelimitedSpreadBlockNoHyphenPair
        	    {
        	    pushFollow(FOLLOW_whitespace_in_synpred38_Novelang10572);
        	    whitespace();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_synpred38_Novelang10574);
        	    mixedDelimitedSpreadBlockNoHyphenPair();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop469;
            }
        } while (true);

        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1128:17: ( whitespace )?
        int alt470=2;
        int LA470_0 = input.LA(1);

        if ( (LA470_0==WHITESPACE) ) {
            alt470=1;
        }
        switch (alt470) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1128:17: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred38_Novelang10596);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_softbreak_in_synpred38_Novelang10599);
        softbreak();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_Novelang

    // $ANTLR start synpred39_Novelang
    public final void synpred39_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1254:13: ( url )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1254:15: url
        {
        pushFollow(FOLLOW_url_in_synpred39_Novelang11815);
        url();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_Novelang

    // $ANTLR start synpred40_Novelang
    public final void synpred40_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1256:13: ( ( whitespace )? smallDashedListItem )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1256:15: ( whitespace )? smallDashedListItem
        {
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1256:15: ( whitespace )?
        int alt471=2;
        int LA471_0 = input.LA(1);

        if ( (LA471_0==WHITESPACE) ) {
            alt471=1;
        }
        switch (alt471) {
            case 1 :
                // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1256:15: whitespace
                {
                pushFollow(FOLLOW_whitespace_in_synpred40_Novelang11842);
                whitespace();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_smallDashedListItem_in_synpred40_Novelang11845);
        smallDashedListItem();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_Novelang

    // $ANTLR start synpred41_Novelang
    public final void synpred41_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1457:5: ( FULL_STOP FULL_STOP FULL_STOP )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1457:7: FULL_STOP FULL_STOP FULL_STOP
        {
        match(input,FULL_STOP,FOLLOW_FULL_STOP_in_synpred41_Novelang13707); if (state.failed) return ;
        match(input,FULL_STOP,FOLLOW_FULL_STOP_in_synpred41_Novelang13709); if (state.failed) return ;
        match(input,FULL_STOP,FOLLOW_FULL_STOP_in_synpred41_Novelang13711); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_Novelang

    // $ANTLR start synpred43_Novelang
    public final void synpred43_Novelang_fragment() throws RecognitionException {   
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1597:7: ( SOLIDUS httpUrlPath )
        // /Users/Shared/Novelang/projects/antlr-parser/src/main/antlr3/novelang/parser/antlr/Novelang.g:1597:9: SOLIDUS httpUrlPath
        {
        match(input,SOLIDUS,FOLLOW_SOLIDUS_in_synpred43_Novelang14874); if (state.failed) return ;
        pushFollow(FOLLOW_httpUrlPath_in_synpred43_Novelang14876);
        httpUrlPath();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred43_Novelang

    // Delegated rules

    public final boolean synpred7_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_Novelang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_Novelang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA190 dfa190 = new DFA190(this);
    protected DFA209 dfa209 = new DFA209(this);
    protected DFA218 dfa218 = new DFA218(this);
    protected DFA259 dfa259 = new DFA259(this);
    protected DFA277 dfa277 = new DFA277(this);
    protected DFA286 dfa286 = new DFA286(this);
    protected DFA300 dfa300 = new DFA300(this);
    protected DFA302 dfa302 = new DFA302(this);
    protected DFA301 dfa301 = new DFA301(this);
    protected DFA321 dfa321 = new DFA321(this);
    protected DFA329 dfa329 = new DFA329(this);
    protected DFA331 dfa331 = new DFA331(this);
    protected DFA332 dfa332 = new DFA332(this);
    protected DFA360 dfa360 = new DFA360(this);
    protected DFA370 dfa370 = new DFA370(this);
    protected DFA373 dfa373 = new DFA373(this);
    protected DFA382 dfa382 = new DFA382(this);
    static final String DFA2_eotS =
        "\46\uffff";
    static final String DFA2_eofS =
        "\5\uffff\1\3\7\uffff\1\3\11\uffff\1\35\16\uffff";
    static final String DFA2_minS =
        "\1\72\1\121\2\uffff\1\102\1\74\1\72\1\107\1\uffff\3\102\2\74\1\72"+
        "\1\uffff\1\72\1\121\3\102\2\72\1\102\1\72\1\104\1\uffff\1\121\1"+
        "\72\2\uffff\3\102\1\121\3\102";
    static final String DFA2_maxS =
        "\1\u00d2\1\u00a4\2\uffff\1\104\2\u00d2\1\107\1\uffff\3\u00a4\3\u00d2"+
        "\1\uffff\1\u00d2\4\u00a4\2\u00d2\1\105\1\u00d2\1\107\1\uffff\1\u00a4"+
        "\1\u00d2\2\uffff\7\u00a4";
    static final String DFA2_acceptS =
        "\2\uffff\1\1\1\2\4\uffff\1\7\6\uffff\1\3\12\uffff\1\4\2\uffff\1"+
        "\6\1\5\7\uffff";
    static final String DFA2_specialS =
        "\46\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\1\1\2\1\3\1\uffff\1\3\1\uffff\1\3\1\6\1\4\3\uffff\1\10\1"+
            "\7\1\uffff\1\3\1\5\16\3\2\uffff\1\2\1\3\4\uffff\4\3\1\uffff"+
            "\1\3\1\uffff\11\3\13\uffff\127\3",
            "\1\11\2\12\1\11\4\12\10\uffff\4\12\3\uffff\1\12\1\11\2\12\3"+
            "\11\2\12\13\uffff\12\13\6\11\31\12",
            "",
            "",
            "\1\14\1\uffff\1\3",
            "\1\3\1\uffff\1\3\1\uffff\1\3\1\16\1\3\1\uffff\2\3\3\uffff\1"+
            "\3\1\15\16\3\10\uffff\4\3\1\uffff\1\3\1\uffff\11\3\13\uffff"+
            "\127\3",
            "\1\17\6\uffff\1\3\2\17\7\uffff\1\17\5\uffff\10\17\2\uffff\1"+
            "\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\20",
            "",
            "\2\21\1\25\1\26\13\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23"+
            "\3\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\2\21\1\25\1\26\13\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23"+
            "\3\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\2\21\1\25\1\26\13\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23"+
            "\3\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\1\3\1\uffff\1\3\1\uffff\2\3\1\27\1\uffff\2\3\3\uffff\20\3"+
            "\3\uffff\1\3\4\uffff\4\3\1\uffff\1\3\1\uffff\11\3\13\uffff\127"+
            "\3",
            "\1\3\1\uffff\1\3\1\uffff\1\3\1\30\1\3\1\uffff\2\3\3\uffff\20"+
            "\3\10\uffff\4\3\1\uffff\1\3\1\uffff\11\3\13\uffff\127\3",
            "\1\17\6\uffff\1\3\2\17\7\uffff\1\17\5\uffff\10\17\2\uffff\1"+
            "\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "",
            "\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\3\32\1\uffff\2\32\1"+
            "\uffff\1\31\1\uffff\20\32\3\uffff\1\32\4\uffff\4\32\1\uffff"+
            "\1\32\1\uffff\11\32\13\uffff\127\32",
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\3\uffff\1\23\1\22\2\23\3"+
            "\22\2\23\13\uffff\12\24\6\22\31\23",
            "\2\21\1\25\1\26\13\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23"+
            "\3\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\2\21\1\25\1\26\13\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23"+
            "\3\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\2\21\1\25\1\26\13\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23"+
            "\3\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\1\33\1\2\1\3\1\uffff\1\3\1\uffff\2\3\1\4\2\uffff\1\26\1\10"+
            "\1\7\1\uffff\20\3\2\uffff\1\2\1\3\4\uffff\4\3\1\uffff\1\3\1"+
            "\uffff\11\3\13\uffff\127\3",
            "\1\33\1\2\1\3\1\uffff\1\3\1\uffff\2\3\1\4\1\uffff\1\34\1\uffff"+
            "\1\10\1\7\1\uffff\20\3\2\uffff\1\2\1\3\4\uffff\4\3\1\uffff\1"+
            "\3\1\uffff\11\3\13\uffff\127\3",
            "\2\3\2\35",
            "\1\17\6\uffff\1\3\2\17\6\uffff\2\17\5\uffff\10\17\2\uffff\1"+
            "\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\2\36\1\uffff\1\32",
            "",
            "\1\37\2\40\1\37\4\40\10\uffff\4\40\3\uffff\1\40\1\37\2\40\3"+
            "\37\2\40\13\uffff\12\41\6\37\31\40",
            "\1\33\1\2\1\3\1\uffff\1\3\1\uffff\2\3\1\4\3\uffff\1\10\1\7"+
            "\1\uffff\20\3\2\uffff\1\2\1\3\4\uffff\4\3\1\uffff\1\3\1\uffff"+
            "\11\3\13\uffff\127\3",
            "",
            "",
            "\2\42\1\25\1\26\13\uffff\1\43\2\44\1\43\4\44\10\uffff\4\44"+
            "\3\uffff\1\44\1\43\2\44\3\43\2\44\13\uffff\12\45\6\43\31\44",
            "\2\42\1\25\1\26\13\uffff\1\43\2\44\1\43\4\44\10\uffff\4\44"+
            "\3\uffff\1\44\1\43\2\44\3\43\2\44\13\uffff\12\45\6\43\31\44",
            "\2\42\1\25\1\26\13\uffff\1\43\2\44\1\43\4\44\10\uffff\4\44"+
            "\3\uffff\1\44\1\43\2\44\3\43\2\44\13\uffff\12\45\6\43\31\44",
            "\1\43\2\44\1\43\4\44\10\uffff\4\44\3\uffff\1\44\1\43\2\44\3"+
            "\43\2\44\13\uffff\12\45\6\43\31\44",
            "\2\42\1\25\1\26\13\uffff\1\43\2\44\1\43\4\44\10\uffff\4\44"+
            "\3\uffff\1\44\1\43\2\44\3\43\2\44\13\uffff\12\45\6\43\31\44",
            "\2\42\1\25\1\26\13\uffff\1\43\2\44\1\43\4\44\10\uffff\4\44"+
            "\3\uffff\1\44\1\43\2\44\3\43\2\44\13\uffff\12\45\6\43\31\44",
            "\2\42\1\25\1\26\13\uffff\1\43\2\44\1\43\4\44\10\uffff\4\44"+
            "\3\uffff\1\44\1\43\2\44\3\43\2\44\13\uffff\12\45\6\43\31\44"
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "192:5: (p+= levelIntroducer | p+= paragraph | p+= embeddableResource | p+= blockQuote | p+= literal | p+= bigDashedListItem | p+= cellRowSequence )";
        }
    }
    static final String DFA4_eotS =
        "\10\uffff";
    static final String DFA4_eofS =
        "\3\3\1\uffff\3\3\1\uffff";
    static final String DFA4_minS =
        "\1\104\1\105\1\104\1\uffff\1\105\2\72\1\uffff";
    static final String DFA4_maxS =
        "\3\105\1\uffff\1\105\2\u00d2\1\uffff";
    static final String DFA4_acceptS =
        "\3\uffff\1\2\3\uffff\1\1";
    static final String DFA4_specialS =
        "\10\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\1\1\2",
            "\1\2",
            "\1\4\1\5",
            "",
            "\1\5",
            "\3\7\1\uffff\1\7\1\uffff\3\7\1\uffff\1\6\1\5\2\7\1\uffff\20"+
            "\7\2\uffff\2\7\4\uffff\4\7\1\uffff\1\7\1\uffff\11\7\13\uffff"+
            "\127\7",
            "\3\7\1\uffff\1\7\1\uffff\3\7\2\uffff\1\5\2\7\1\uffff\20\7\2"+
            "\uffff\2\7\4\uffff\4\7\1\uffff\1\7\1\uffff\11\7\13\uffff\127"+
            "\7",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()* loopback of 200:5: (p+= largebreak (p+= levelIntroducer | p+= paragraph | p+= embeddableResource | p+= blockQuote | p+= literal | p+= bigDashedListItem | p+= cellRowSequence ) )*";
        }
    }
    static final String DFA3_eotS =
        "\46\uffff";
    static final String DFA3_eofS =
        "\5\uffff\1\3\7\uffff\1\3\11\uffff\1\35\16\uffff";
    static final String DFA3_minS =
        "\1\72\1\121\2\uffff\1\102\1\74\1\72\1\107\1\uffff\3\102\2\74\1\72"+
        "\1\uffff\1\72\1\121\3\102\2\72\1\102\1\72\1\104\1\uffff\1\121\1"+
        "\72\2\uffff\3\102\1\121\3\102";
    static final String DFA3_maxS =
        "\1\u00d2\1\u00a4\2\uffff\1\104\2\u00d2\1\107\1\uffff\3\u00a4\3\u00d2"+
        "\1\uffff\1\u00d2\4\u00a4\2\u00d2\1\105\1\u00d2\1\107\1\uffff\1\u00a4"+
        "\1\u00d2\2\uffff\7\u00a4";
    static final String DFA3_acceptS =
        "\2\uffff\1\1\1\2\4\uffff\1\7\6\uffff\1\3\12\uffff\1\4\2\uffff\1"+
        "\6\1\5\7\uffff";
    static final String DFA3_specialS =
        "\46\uffff}>";
    static final String[] DFA3_transitionS = {
            "\1\1\1\2\1\3\1\uffff\1\3\1\uffff\1\3\1\6\1\4\3\uffff\1\10\1"+
            "\7\1\uffff\1\3\1\5\16\3\2\uffff\1\2\1\3\4\uffff\4\3\1\uffff"+
            "\1\3\1\uffff\11\3\13\uffff\127\3",
            "\1\11\2\12\1\11\4\12\10\uffff\4\12\3\uffff\1\12\1\11\2\12\3"+
            "\11\2\12\13\uffff\12\13\6\11\31\12",
            "",
            "",
            "\1\14\1\uffff\1\3",
            "\1\3\1\uffff\1\3\1\uffff\1\3\1\16\1\3\1\uffff\2\3\3\uffff\1"+
            "\3\1\15\16\3\10\uffff\4\3\1\uffff\1\3\1\uffff\11\3\13\uffff"+
            "\127\3",
            "\1\17\6\uffff\1\3\2\17\7\uffff\1\17\5\uffff\10\17\2\uffff\1"+
            "\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\20",
            "",
            "\2\21\1\25\1\26\13\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23"+
            "\3\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\2\21\1\25\1\26\13\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23"+
            "\3\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\2\21\1\25\1\26\13\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23"+
            "\3\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\1\3\1\uffff\1\3\1\uffff\2\3\1\27\1\uffff\2\3\3\uffff\20\3"+
            "\3\uffff\1\3\4\uffff\4\3\1\uffff\1\3\1\uffff\11\3\13\uffff\127"+
            "\3",
            "\1\3\1\uffff\1\3\1\uffff\1\3\1\30\1\3\1\uffff\2\3\3\uffff\20"+
            "\3\10\uffff\4\3\1\uffff\1\3\1\uffff\11\3\13\uffff\127\3",
            "\1\17\6\uffff\1\3\2\17\7\uffff\1\17\5\uffff\10\17\2\uffff\1"+
            "\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "",
            "\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\3\32\1\uffff\2\32\1"+
            "\uffff\1\31\1\uffff\20\32\3\uffff\1\32\4\uffff\4\32\1\uffff"+
            "\1\32\1\uffff\11\32\13\uffff\127\32",
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\3\uffff\1\23\1\22\2\23\3"+
            "\22\2\23\13\uffff\12\24\6\22\31\23",
            "\2\21\1\25\1\26\13\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23"+
            "\3\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\2\21\1\25\1\26\13\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23"+
            "\3\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\2\21\1\25\1\26\13\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23"+
            "\3\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\1\33\1\2\1\3\1\uffff\1\3\1\uffff\2\3\1\4\2\uffff\1\26\1\10"+
            "\1\7\1\uffff\20\3\2\uffff\1\2\1\3\4\uffff\4\3\1\uffff\1\3\1"+
            "\uffff\11\3\13\uffff\127\3",
            "\1\33\1\2\1\3\1\uffff\1\3\1\uffff\2\3\1\4\1\uffff\1\34\1\uffff"+
            "\1\10\1\7\1\uffff\20\3\2\uffff\1\2\1\3\4\uffff\4\3\1\uffff\1"+
            "\3\1\uffff\11\3\13\uffff\127\3",
            "\2\3\2\35",
            "\1\17\6\uffff\1\3\2\17\6\uffff\2\17\5\uffff\10\17\2\uffff\1"+
            "\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\2\36\1\uffff\1\32",
            "",
            "\1\37\2\40\1\37\4\40\10\uffff\4\40\3\uffff\1\40\1\37\2\40\3"+
            "\37\2\40\13\uffff\12\41\6\37\31\40",
            "\1\33\1\2\1\3\1\uffff\1\3\1\uffff\2\3\1\4\3\uffff\1\10\1\7"+
            "\1\uffff\20\3\2\uffff\1\2\1\3\4\uffff\4\3\1\uffff\1\3\1\uffff"+
            "\11\3\13\uffff\127\3",
            "",
            "",
            "\2\42\1\25\1\26\13\uffff\1\43\2\44\1\43\4\44\10\uffff\4\44"+
            "\3\uffff\1\44\1\43\2\44\3\43\2\44\13\uffff\12\45\6\43\31\44",
            "\2\42\1\25\1\26\13\uffff\1\43\2\44\1\43\4\44\10\uffff\4\44"+
            "\3\uffff\1\44\1\43\2\44\3\43\2\44\13\uffff\12\45\6\43\31\44",
            "\2\42\1\25\1\26\13\uffff\1\43\2\44\1\43\4\44\10\uffff\4\44"+
            "\3\uffff\1\44\1\43\2\44\3\43\2\44\13\uffff\12\45\6\43\31\44",
            "\1\43\2\44\1\43\4\44\10\uffff\4\44\3\uffff\1\44\1\43\2\44\3"+
            "\43\2\44\13\uffff\12\45\6\43\31\44",
            "\2\42\1\25\1\26\13\uffff\1\43\2\44\1\43\4\44\10\uffff\4\44"+
            "\3\uffff\1\44\1\43\2\44\3\43\2\44\13\uffff\12\45\6\43\31\44",
            "\2\42\1\25\1\26\13\uffff\1\43\2\44\1\43\4\44\10\uffff\4\44"+
            "\3\uffff\1\44\1\43\2\44\3\43\2\44\13\uffff\12\45\6\43\31\44",
            "\2\42\1\25\1\26\13\uffff\1\43\2\44\1\43\4\44\10\uffff\4\44"+
            "\3\uffff\1\44\1\43\2\44\3\43\2\44\13\uffff\12\45\6\43\31\44"
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "200:23: (p+= levelIntroducer | p+= paragraph | p+= embeddableResource | p+= blockQuote | p+= literal | p+= bigDashedListItem | p+= cellRowSequence )";
        }
    }
    static final String DFA18_eotS =
        "\31\uffff";
    static final String DFA18_eofS =
        "\31\uffff";
    static final String DFA18_minS =
        "\1\74\3\0\25\uffff";
    static final String DFA18_maxS =
        "\1\u00d2\3\0\25\uffff";
    static final String DFA18_acceptS =
        "\4\uffff\1\3\22\uffff\1\1\1\2";
    static final String DFA18_specialS =
        "\1\uffff\1\0\1\1\1\2\25\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\4\1\uffff\1\4\1\uffff\2\4\1\3\1\uffff\1\4\4\uffff\10\4\1"+
            "\2\3\4\1\1\3\4\3\uffff\1\4\4\uffff\4\4\1\uffff\1\4\1\uffff\11"+
            "\4\13\uffff\127\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "300:8: ( ( url )=>t+= url | ( smallDashedListItem )=>t+= smallDashedListItem | ( (t+= whitespace )? t+= mixedDelimitedSpreadBlock (t+= whitespace t+= mixedDelimitedSpreadBlock )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Novelang()) ) {s = 23;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index18_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Novelang()) ) {s = 23;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Novelang()) ) {s = 24;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA22_eotS =
        "\30\uffff";
    static final String DFA22_eofS =
        "\30\uffff";
    static final String DFA22_minS =
        "\1\74\3\0\24\uffff";
    static final String DFA22_maxS =
        "\1\u00d2\3\0\24\uffff";
    static final String DFA22_acceptS =
        "\4\uffff\1\3\21\uffff\1\1\1\2";
    static final String DFA22_specialS =
        "\1\uffff\1\0\1\1\1\2\24\uffff}>";
    static final String[] DFA22_transitionS = {
            "\1\4\1\uffff\1\4\1\uffff\2\4\1\3\6\uffff\10\4\1\2\3\4\1\1\3"+
            "\4\3\uffff\1\4\4\uffff\4\4\1\uffff\1\4\1\uffff\11\4\13\uffff"+
            "\127\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "317:6: ( ( url )=>p+= url | ( smallDashedListItem )=>p+= smallDashedListItem | (p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA22_1 = input.LA(1);

                         
                        int index22_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_Novelang()) ) {s = 22;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index22_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA22_2 = input.LA(1);

                         
                        int index22_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_Novelang()) ) {s = 22;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index22_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA22_3 = input.LA(1);

                         
                        int index22_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Novelang()) ) {s = 23;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index22_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA27_eotS =
        "\31\uffff";
    static final String DFA27_eofS =
        "\31\uffff";
    static final String DFA27_minS =
        "\1\74\4\0\24\uffff";
    static final String DFA27_maxS =
        "\1\u00d2\4\0\24\uffff";
    static final String DFA27_acceptS =
        "\5\uffff\1\3\21\uffff\1\1\1\2";
    static final String DFA27_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\24\uffff}>";
    static final String[] DFA27_transitionS = {
            "\1\5\1\uffff\1\5\1\uffff\2\5\1\4\1\uffff\1\3\4\uffff\10\5\1"+
            "\2\3\5\1\1\3\5\3\uffff\1\5\4\uffff\4\5\1\uffff\1\5\1\uffff\11"+
            "\5\13\uffff\127\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "324:8: ( ( url )=>p+= url | ( ( whitespace )? smallDashedListItem )=> (p+= whitespace )? p+= smallDashedListItem | ( (p+= whitespace )? p+= mixedDelimitedSpreadBlock (p+= whitespace p+= mixedDelimitedSpreadBlock )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA27_1 = input.LA(1);

                         
                        int index27_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Novelang()) ) {s = 23;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index27_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA27_2 = input.LA(1);

                         
                        int index27_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Novelang()) ) {s = 23;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index27_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA27_3 = input.LA(1);

                         
                        int index27_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_Novelang()) ) {s = 24;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index27_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA27_4 = input.LA(1);

                         
                        int index27_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_Novelang()) ) {s = 24;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index27_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA38_eotS =
        "\72\uffff";
    static final String DFA38_eofS =
        "\5\6\10\uffff\4\6\1\uffff\4\6\5\uffff\1\6\13\uffff\5\6\5\uffff\1"+
        "\6\7\uffff\1\6";
    static final String DFA38_minS =
        "\5\74\1\121\2\uffff\1\102\1\121\3\102\4\74\1\121\4\74\2\121\3\102"+
        "\1\74\7\102\1\121\3\102\5\74\2\121\3\102\1\74\3\102\1\121\3\102"+
        "\1\74";
    static final String DFA38_maxS =
        "\5\u00d2\1\u00a4\2\uffff\2\u00d2\3\u00a4\4\u00d2\1\u00a4\4\u00d2"+
        "\5\u00a4\1\u00d2\3\u00a4\1\u00d2\7\u00a4\5\u00d2\5\u00a4\1\u00d2"+
        "\7\u00a4\1\u00d2";
    static final String DFA38_acceptS =
        "\6\uffff\1\2\1\1\62\uffff";
    static final String DFA38_specialS =
        "\72\uffff}>";
    static final String[] DFA38_transitionS = {
            "\1\7\1\6\1\7\1\6\3\7\1\uffff\2\6\2\uffff\1\6\10\7\1\1\2\2\1"+
            "\1\4\2\10\uffff\4\2\1\uffff\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2"+
            "\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\2\6\2\uffff\1\6\10\7\1\1"+
            "\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2"+
            "\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\2\6\2\uffff\1\6\10\7\1\1"+
            "\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2"+
            "\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\2\6\2\uffff\1\6\10\7\1\1"+
            "\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2"+
            "\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\2\6\2\uffff\1\6\10\7\1\1"+
            "\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2"+
            "\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\12\2\13\1\12\4\13\10\uffff\4\13\3\uffff\1\13\1\12\2\13\3"+
            "\12\2\13\13\uffff\12\14\6\12\31\13",
            "",
            "",
            "\1\7\16\uffff\1\15\2\16\1\15\4\16\10\uffff\4\16\1\uffff\1\21"+
            "\1\uffff\1\16\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16"+
            "\56\17",
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\2\6\2\uffff\1\6\10\7\1\15"+
            "\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1\15\2"+
            "\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\2\6\2\uffff\1\6\10\7\1\15"+
            "\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1\15\2"+
            "\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\2\6\2\uffff\1\6\10\7\1\15"+
            "\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1\15\2"+
            "\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\2\6\2\uffff\1\6\10\7\1\15"+
            "\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1\15\2"+
            "\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\34\2\35\1\34\4\35\10\uffff\4\35\3\uffff\1\35\1\34\2\35\3"+
            "\34\2\35\13\uffff\12\36\6\34\31\35",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\2\6\2\uffff\1\6\10\7\1\22"+
            "\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23\1\22"+
            "\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\2\6\2\uffff\1\6\10\7\1\22"+
            "\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23\1\22"+
            "\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\2\6\2\uffff\1\6\10\7\1\22"+
            "\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23\1\22"+
            "\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\2\6\2\uffff\1\6\10\7\1\22"+
            "\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23\1\22"+
            "\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\40\2\41\1\40\4\41\10\uffff\4\41\3\uffff\1\41\1\40\2\41\3"+
            "\40\2\41\13\uffff\12\42\6\40\31\41",
            "\1\30\2\31\1\30\4\31\10\uffff\4\31\3\uffff\1\31\1\30\2\31\3"+
            "\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\2\6\2\uffff\1\6\10\7\1\1"+
            "\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2"+
            "\2\13\uffff\12\4\6\1\31\2\56\3",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\16\uffff\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54"+
            "\1\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51"+
            "\56\52",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\44\2\45\1\44\4\45\10\uffff\4\45\3\uffff\1\45\1\44\2\45\3"+
            "\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\2\6\2\uffff\1\6\10\7\1\15"+
            "\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1\15\2"+
            "\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\2\6\2\uffff\1\6\10\7\1\50"+
            "\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51\1\50"+
            "\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\2\6\2\uffff\1\6\10\7\1\50"+
            "\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51\1\50"+
            "\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\2\6\2\uffff\1\6\10\7\1\50"+
            "\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51\1\50"+
            "\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\2\6\2\uffff\1\6\10\7\1\50"+
            "\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51\1\50"+
            "\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\62\2\63\1\62\4\63\10\uffff\4\63\3\uffff\1\63\1\62\2\63\3"+
            "\62\2\63\13\uffff\12\64\6\62\31\63",
            "\1\56\2\57\1\56\4\57\10\uffff\4\57\3\uffff\1\57\1\56\2\57\3"+
            "\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\2\6\2\uffff\1\6\10\7\1\22"+
            "\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23\1\22"+
            "\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\66\2\67\1\66\4\67\10\uffff\4\67\3\uffff\1\67\1\66\2\67\3"+
            "\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\2\6\2\uffff\1\6\10\7\1\50"+
            "\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51\1\50"+
            "\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52"
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "()* loopback of 384:7: ( ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) )*";
        }
    }
    static final String DFA75_eotS =
        "\72\uffff";
    static final String DFA75_eofS =
        "\72\uffff";
    static final String DFA75_minS =
        "\5\74\1\121\2\uffff\2\121\3\102\4\74\1\121\4\74\2\121\3\102\1\74"+
        "\3\102\1\121\3\102\1\121\3\102\5\74\2\121\3\102\1\74\3\102\1\121"+
        "\3\102\1\74";
    static final String DFA75_maxS =
        "\5\u00d2\1\u00a4\2\uffff\2\u00d2\3\u00a4\4\u00d2\1\u00a4\4\u00d2"+
        "\5\u00a4\1\u00d2\3\u00a4\1\u00d2\7\u00a4\5\u00d2\5\u00a4\1\u00d2"+
        "\7\u00a4\1\u00d2";
    static final String DFA75_acceptS =
        "\6\uffff\1\2\1\1\62\uffff";
    static final String DFA75_specialS =
        "\72\uffff}>";
    static final String[] DFA75_transitionS = {
            "\1\7\1\6\3\uffff\1\7\7\uffff\10\7\1\1\2\2\1\1\4\2\10\uffff\4"+
            "\2\1\uffff\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1"+
            "\31\2\56\3",
            "\1\7\1\6\3\uffff\1\7\1\10\6\uffff\10\7\1\1\2\2\1\1\4\2\10\uffff"+
            "\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1"+
            "\31\2\56\3",
            "\1\7\1\6\3\uffff\1\7\1\10\6\uffff\10\7\1\1\2\2\1\1\4\2\10\uffff"+
            "\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1"+
            "\31\2\56\3",
            "\1\7\1\6\3\uffff\1\7\1\10\6\uffff\10\7\1\1\2\2\1\1\4\2\10\uffff"+
            "\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1"+
            "\31\2\56\3",
            "\1\7\1\6\3\uffff\1\7\1\10\6\uffff\10\7\1\1\2\2\1\1\4\2\10\uffff"+
            "\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1"+
            "\31\2\56\3",
            "\1\12\2\13\1\12\4\13\10\uffff\4\13\3\uffff\1\13\1\12\2\13\3"+
            "\12\2\13\13\uffff\12\14\6\12\31\13",
            "",
            "",
            "\1\15\2\16\1\15\4\16\10\uffff\4\16\1\uffff\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\6\3\uffff\1\7\1\10\6\uffff\10\7\1\15\2\16\1\15\4\16"+
            "\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1\15\2\16\3\15\2\16\13"+
            "\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\3\uffff\1\7\1\10\6\uffff\10\7\1\15\2\16\1\15\4\16"+
            "\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1\15\2\16\3\15\2\16\13"+
            "\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\3\uffff\1\7\1\10\6\uffff\10\7\1\15\2\16\1\15\4\16"+
            "\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1\15\2\16\3\15\2\16\13"+
            "\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\3\uffff\1\7\1\10\6\uffff\10\7\1\15\2\16\1\15\4\16"+
            "\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1\15\2\16\3\15\2\16\13"+
            "\uffff\12\20\6\15\31\16\56\17",
            "\1\34\2\35\1\34\4\35\10\uffff\4\35\3\uffff\1\35\1\34\2\35\3"+
            "\34\2\35\13\uffff\12\36\6\34\31\35",
            "\1\7\1\6\3\uffff\1\7\1\37\6\uffff\10\7\1\22\2\23\1\22\4\23"+
            "\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23\1\22\2\23\3\22\2\23"+
            "\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\6\3\uffff\1\7\1\37\6\uffff\10\7\1\22\2\23\1\22\4\23"+
            "\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23\1\22\2\23\3\22\2\23"+
            "\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\6\3\uffff\1\7\1\37\6\uffff\10\7\1\22\2\23\1\22\4\23"+
            "\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23\1\22\2\23\3\22\2\23"+
            "\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\6\3\uffff\1\7\1\37\6\uffff\10\7\1\22\2\23\1\22\4\23"+
            "\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23\1\22\2\23\3\22\2\23"+
            "\13\uffff\12\25\6\22\31\23\56\24",
            "\1\40\2\41\1\40\4\41\10\uffff\4\41\3\uffff\1\41\1\40\2\41\3"+
            "\40\2\41\13\uffff\12\42\6\40\31\41",
            "\1\30\2\31\1\30\4\31\10\uffff\4\31\3\uffff\1\31\1\30\2\31\3"+
            "\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\6\3\uffff\1\7\1\10\6\uffff\10\7\1\1\2\2\1\1\4\2\10\uffff"+
            "\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1"+
            "\31\2\56\3",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51"+
            "\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\44\2\45\1\44\4\45\10\uffff\4\45\3\uffff\1\45\1\44\2\45\3"+
            "\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\1\6\3\uffff\1\7\1\10\6\uffff\10\7\1\15\2\16\1\15\4\16"+
            "\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1\15\2\16\3\15\2\16\13"+
            "\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\3\uffff\1\7\1\37\6\uffff\10\7\1\50\2\51\1\50\4\51"+
            "\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51\1\50\2\51\3\50\2\51"+
            "\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\6\3\uffff\1\7\1\37\6\uffff\10\7\1\50\2\51\1\50\4\51"+
            "\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51\1\50\2\51\3\50\2\51"+
            "\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\6\3\uffff\1\7\1\37\6\uffff\10\7\1\50\2\51\1\50\4\51"+
            "\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51\1\50\2\51\3\50\2\51"+
            "\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\6\3\uffff\1\7\1\37\6\uffff\10\7\1\50\2\51\1\50\4\51"+
            "\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51\1\50\2\51\3\50\2\51"+
            "\13\uffff\12\53\6\50\31\51\56\52",
            "\1\62\2\63\1\62\4\63\10\uffff\4\63\3\uffff\1\63\1\62\2\63\3"+
            "\62\2\63\13\uffff\12\64\6\62\31\63",
            "\1\56\2\57\1\56\4\57\10\uffff\4\57\3\uffff\1\57\1\56\2\57\3"+
            "\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\7\1\6\3\uffff\1\7\1\37\6\uffff\10\7\1\22\2\23\1\22\4\23"+
            "\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23\1\22\2\23\3\22\2\23"+
            "\13\uffff\12\25\6\22\31\23\56\24",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\66\2\67\1\66\4\67\10\uffff\4\67\3\uffff\1\67\1\66\2\67\3"+
            "\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\7\1\6\3\uffff\1\7\1\37\6\uffff\10\7\1\50\2\51\1\50\4\51"+
            "\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51\1\50\2\51\3\50\2\51"+
            "\13\uffff\12\53\6\50\31\51\56\52"
    };

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "()* loopback of 494:7: ( ( word )? ( punctuationSign | delimitedMonoblockNoSeparator | softInlineLiteral | hardInlineLiteral ) )*";
        }
    }
    static final String DFA86_eotS =
        "\12\uffff";
    static final String DFA86_eofS =
        "\3\uffff\1\2\2\uffff\1\2\3\uffff";
    static final String DFA86_minS =
        "\1\74\2\uffff\1\74\1\72\1\uffff\1\74\1\72\1\uffff\1\72";
    static final String DFA86_maxS =
        "\1\u00d2\2\uffff\2\u00d2\1\uffff\2\u00d2\1\uffff\1\u00d2";
    static final String DFA86_acceptS =
        "\1\uffff\1\1\1\2\2\uffff\1\4\2\uffff\1\3\1\uffff";
    static final String DFA86_specialS =
        "\12\uffff}>";
    static final String[] DFA86_transitionS = {
            "\1\2\1\uffff\1\2\1\uffff\1\2\1\4\1\2\6\uffff\1\2\1\3\6\2\10"+
            "\1\3\uffff\1\5\4\uffff\4\1\1\uffff\1\1\1\uffff\11\1\13\uffff"+
            "\127\1",
            "",
            "",
            "\5\2\1\7\1\2\1\uffff\3\2\1\uffff\2\2\1\6\16\2\10\uffff\4\2"+
            "\1\uffff\1\2\1\uffff\11\2\13\uffff\127\2",
            "\1\10\6\uffff\1\2\2\10\7\uffff\1\10\5\uffff\10\10\2\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\5\10\3\uffff\11\10\13\uffff\127\10",
            "",
            "\5\2\1\11\1\2\1\uffff\3\2\1\uffff\21\2\10\uffff\4\2\1\uffff"+
            "\1\2\1\uffff\11\2\13\uffff\127\2",
            "\1\10\6\uffff\1\2\2\10\7\uffff\1\10\5\uffff\10\10\2\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\5\10\3\uffff\11\10\13\uffff\127\10",
            "",
            "\1\10\6\uffff\1\2\2\10\6\uffff\2\10\5\uffff\10\10\2\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\5\10\3\uffff\11\10\13\uffff\127\10"
    };

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "506:1: mixedDelimitedMonoblock : ( ( word ( ( punctuationSign | delimitedMonoblock | softInlineLiteral | hardInlineLiteral ) ( word )? )* ) | ( ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) ( ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) )* ( word )? ) | embeddableResource | blockAfterTilde );";
        }
    }
    static final String DFA84_eotS =
        "\72\uffff";
    static final String DFA84_eofS =
        "\5\6\10\uffff\4\6\1\uffff\4\6\5\uffff\1\6\13\uffff\5\6\5\uffff\1"+
        "\6\7\uffff\1\6";
    static final String DFA84_minS =
        "\5\74\1\121\2\uffff\1\102\1\121\3\102\4\74\1\121\4\74\2\121\3\102"+
        "\1\74\7\102\1\121\3\102\5\74\2\121\3\102\1\74\3\102\1\121\3\102"+
        "\1\74";
    static final String DFA84_maxS =
        "\5\u00d2\1\u00a4\2\uffff\2\u00d2\3\u00a4\4\u00d2\1\u00a4\4\u00d2"+
        "\5\u00a4\1\u00d2\3\u00a4\1\u00d2\7\u00a4\5\u00d2\5\u00a4\1\u00d2"+
        "\7\u00a4\1\u00d2";
    static final String DFA84_acceptS =
        "\6\uffff\1\2\1\1\62\uffff";
    static final String DFA84_specialS =
        "\72\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\7\1\6\1\7\1\6\3\7\1\uffff\3\6\1\uffff\1\6\10\7\1\1\2\2\1"+
            "\1\4\2\10\uffff\4\2\1\uffff\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2"+
            "\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7\1\1"+
            "\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2"+
            "\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7\1\1"+
            "\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2"+
            "\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7\1\1"+
            "\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2"+
            "\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7\1\1"+
            "\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2"+
            "\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\12\2\13\1\12\4\13\10\uffff\4\13\3\uffff\1\13\1\12\2\13\3"+
            "\12\2\13\13\uffff\12\14\6\12\31\13",
            "",
            "",
            "\1\7\16\uffff\1\15\2\16\1\15\4\16\10\uffff\4\16\1\uffff\1\21"+
            "\1\uffff\1\16\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16"+
            "\56\17",
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7\1\15"+
            "\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1\15\2"+
            "\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7\1\15"+
            "\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1\15\2"+
            "\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7\1\15"+
            "\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1\15\2"+
            "\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7\1\15"+
            "\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1\15\2"+
            "\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\34\2\35\1\34\4\35\10\uffff\4\35\3\uffff\1\35\1\34\2\35\3"+
            "\34\2\35\13\uffff\12\36\6\34\31\35",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7\1\22"+
            "\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23\1\22"+
            "\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7\1\22"+
            "\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23\1\22"+
            "\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7\1\22"+
            "\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23\1\22"+
            "\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7\1\22"+
            "\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23\1\22"+
            "\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\40\2\41\1\40\4\41\10\uffff\4\41\3\uffff\1\41\1\40\2\41\3"+
            "\40\2\41\13\uffff\12\42\6\40\31\41",
            "\1\30\2\31\1\30\4\31\10\uffff\4\31\3\uffff\1\31\1\30\2\31\3"+
            "\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7\1\1"+
            "\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2"+
            "\2\13\uffff\12\4\6\1\31\2\56\3",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\16\uffff\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54"+
            "\1\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51"+
            "\56\52",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\44\2\45\1\44\4\45\10\uffff\4\45\3\uffff\1\45\1\44\2\45\3"+
            "\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\1\6\1\7\1\6\2\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7\1\15"+
            "\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1\15\2"+
            "\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7\1\50"+
            "\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51\1\50"+
            "\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7\1\50"+
            "\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51\1\50"+
            "\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7\1\50"+
            "\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51\1\50"+
            "\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7\1\50"+
            "\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51\1\50"+
            "\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\62\2\63\1\62\4\63\10\uffff\4\63\3\uffff\1\63\1\62\2\63\3"+
            "\62\2\63\13\uffff\12\64\6\62\31\63",
            "\1\56\2\57\1\56\4\57\10\uffff\4\57\3\uffff\1\57\1\56\2\57\3"+
            "\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7\1\22"+
            "\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23\1\22"+
            "\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\66\2\67\1\66\4\67\10\uffff\4\67\3\uffff\1\67\1\66\2\67\3"+
            "\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\7\1\6\1\7\1\6\2\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7\1\50"+
            "\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51\1\50"+
            "\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52"
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "()* loopback of 522:7: ( ( word )? ( punctuationSign | delimitedSpreadblock | softInlineLiteral | hardInlineLiteral ) )*";
        }
    }
    static final String DFA132_eotS =
        "\72\uffff";
    static final String DFA132_eofS =
        "\72\uffff";
    static final String DFA132_minS =
        "\5\74\1\121\2\uffff\1\102\1\121\3\102\4\74\1\121\4\74\2\121\3\102"+
        "\1\74\7\102\1\121\3\102\5\74\2\121\3\102\1\74\3\102\1\121\3\102"+
        "\1\74";
    static final String DFA132_maxS =
        "\5\u00d2\1\u00a4\2\uffff\2\u00d2\3\u00a4\4\u00d2\1\u00a4\4\u00d2"+
        "\5\u00a4\1\u00d2\3\u00a4\1\u00d2\7\u00a4\5\u00d2\5\u00a4\1\u00d2"+
        "\7\u00a4\1\u00d2";
    static final String DFA132_acceptS =
        "\6\uffff\1\2\1\1\62\uffff";
    static final String DFA132_specialS =
        "\72\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\7\1\uffff\1\7\1\uffff\1\6\2\7\1\uffff\2\6\3\uffff\10\7\1"+
            "\1\2\2\1\1\4\2\10\uffff\4\2\1\uffff\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\12\2\13\1\12\4\13\10\uffff\4\13\3\uffff\1\13\1\12\2\13\3"+
            "\12\2\13\13\uffff\12\14\6\12\31\13",
            "",
            "",
            "\1\7\16\uffff\1\15\2\16\1\15\4\16\10\uffff\4\16\1\uffff\1\21"+
            "\1\uffff\1\16\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16"+
            "\56\17",
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\34\2\35\1\34\4\35\10\uffff\4\35\3\uffff\1\35\1\34\2\35\3"+
            "\34\2\35\13\uffff\12\36\6\34\31\35",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\40\2\41\1\40\4\41\10\uffff\4\41\3\uffff\1\41\1\40\2\41\3"+
            "\40\2\41\13\uffff\12\42\6\40\31\41",
            "\1\30\2\31\1\30\4\31\10\uffff\4\31\3\uffff\1\31\1\30\2\31\3"+
            "\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\16\uffff\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54"+
            "\1\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51"+
            "\56\52",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\44\2\45\1\44\4\45\10\uffff\4\45\3\uffff\1\45\1\44\2\45\3"+
            "\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\62\2\63\1\62\4\63\10\uffff\4\63\3\uffff\1\63\1\62\2\63\3"+
            "\62\2\63\13\uffff\12\64\6\62\31\63",
            "\1\56\2\57\1\56\4\57\10\uffff\4\57\3\uffff\1\57\1\56\2\57\3"+
            "\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\66\2\67\1\66\4\67\10\uffff\4\67\3\uffff\1\67\1\66\2\67\3"+
            "\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52"
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "()* loopback of 730:7: ( ( word )? ( punctuationSign | delimitedSpreadblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) )*";
        }
    }
    static final String DFA150_eotS =
        "\72\uffff";
    static final String DFA150_eofS =
        "\72\uffff";
    static final String DFA150_minS =
        "\5\74\1\121\2\uffff\2\121\3\102\4\74\1\121\4\74\2\121\3\102\1\74"+
        "\3\102\1\121\3\102\1\121\3\102\5\74\2\121\3\102\1\74\3\102\1\121"+
        "\3\102\1\74";
    static final String DFA150_maxS =
        "\5\u00d2\1\u00a4\2\uffff\2\u00d2\3\u00a4\4\u00d2\1\u00a4\4\u00d2"+
        "\5\u00a4\1\u00d2\3\u00a4\1\u00d2\7\u00a4\5\u00d2\5\u00a4\1\u00d2"+
        "\7\u00a4\1\u00d2";
    static final String DFA150_acceptS =
        "\6\uffff\1\2\1\1\62\uffff";
    static final String DFA150_specialS =
        "\72\uffff}>";
    static final String[] DFA150_transitionS = {
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\2\uffff\2\6\3\uffff\10\7\1"+
            "\1\2\2\1\1\4\2\10\uffff\4\2\1\uffff\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\12\2\13\1\12\4\13\10\uffff\4\13\3\uffff\1\13\1\12\2\13\3"+
            "\12\2\13\13\uffff\12\14\6\12\31\13",
            "",
            "",
            "\1\15\2\16\1\15\4\16\10\uffff\4\16\1\uffff\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\34\2\35\1\34\4\35\10\uffff\4\35\3\uffff\1\35\1\34\2\35\3"+
            "\34\2\35\13\uffff\12\36\6\34\31\35",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\40\2\41\1\40\4\41\10\uffff\4\41\3\uffff\1\41\1\40\2\41\3"+
            "\40\2\41\13\uffff\12\42\6\40\31\41",
            "\1\30\2\31\1\30\4\31\10\uffff\4\31\3\uffff\1\31\1\30\2\31\3"+
            "\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51"+
            "\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\44\2\45\1\44\4\45\10\uffff\4\45\3\uffff\1\45\1\44\2\45\3"+
            "\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\62\2\63\1\62\4\63\10\uffff\4\63\3\uffff\1\63\1\62\2\63\3"+
            "\62\2\63\13\uffff\12\64\6\62\31\63",
            "\1\56\2\57\1\56\4\57\10\uffff\4\57\3\uffff\1\57\1\56\2\57\3"+
            "\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\66\2\67\1\66\4\67\10\uffff\4\67\3\uffff\1\67\1\66\2\67\3"+
            "\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\7\1\uffff\1\7\1\uffff\1\6\1\7\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52"
    };

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "()* loopback of 792:7: ( ( word )? ( punctuationSign | delimitedMonoblockNoDoubleQuotes | softInlineLiteral | hardInlineLiteral ) )*";
        }
    }
    static final String DFA190_eotS =
        "\72\uffff";
    static final String DFA190_eofS =
        "\72\uffff";
    static final String DFA190_minS =
        "\5\74\1\121\2\uffff\1\102\1\121\3\102\4\74\1\121\4\74\2\121\3\102"+
        "\1\74\7\102\1\121\3\102\5\74\2\121\3\102\1\74\3\102\1\121\3\102"+
        "\1\74";
    static final String DFA190_maxS =
        "\5\u00d2\1\u00a4\2\uffff\2\u00d2\3\u00a4\4\u00d2\1\u00a4\4\u00d2"+
        "\5\u00a4\1\u00d2\3\u00a4\1\u00d2\7\u00a4\5\u00d2\5\u00a4\1\u00d2"+
        "\7\u00a4\1\u00d2";
    static final String DFA190_acceptS =
        "\6\uffff\1\2\1\1\62\uffff";
    static final String DFA190_specialS =
        "\72\uffff}>";
    static final String[] DFA190_transitionS = {
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\7\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\uffff\1\5\1\uffff\1\2\1\1"+
            "\2\2\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\12\2\13\1\12\4\13\10\uffff\4\13\3\uffff\1\13\1\12\2\13\3"+
            "\12\2\13\13\uffff\12\14\6\12\31\13",
            "",
            "",
            "\1\7\16\uffff\1\15\2\16\1\15\4\16\10\uffff\4\16\1\uffff\1\21"+
            "\1\uffff\1\16\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16"+
            "\56\17",
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\34\2\35\1\34\4\35\10\uffff\4\35\3\uffff\1\35\1\34\2\35\3"+
            "\34\2\35\13\uffff\12\36\6\34\31\35",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\40\2\41\1\40\4\41\10\uffff\4\41\3\uffff\1\41\1\40\2\41\3"+
            "\40\2\41\13\uffff\12\42\6\40\31\41",
            "\1\30\2\31\1\30\4\31\10\uffff\4\31\3\uffff\1\31\1\30\2\31\3"+
            "\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\16\uffff\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54"+
            "\1\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51"+
            "\56\52",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\44\2\45\1\44\4\45\10\uffff\4\45\3\uffff\1\45\1\44\2\45\3"+
            "\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\62\2\63\1\62\4\63\10\uffff\4\63\3\uffff\1\63\1\62\2\63\3"+
            "\62\2\63\13\uffff\12\64\6\62\31\63",
            "\1\56\2\57\1\56\4\57\10\uffff\4\57\3\uffff\1\57\1\56\2\57\3"+
            "\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\66\2\67\1\66\4\67\10\uffff\4\67\3\uffff\1\67\1\66\2\67\3"+
            "\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52"
    };

    static final short[] DFA190_eot = DFA.unpackEncodedString(DFA190_eotS);
    static final short[] DFA190_eof = DFA.unpackEncodedString(DFA190_eofS);
    static final char[] DFA190_min = DFA.unpackEncodedStringToUnsignedChars(DFA190_minS);
    static final char[] DFA190_max = DFA.unpackEncodedStringToUnsignedChars(DFA190_maxS);
    static final short[] DFA190_accept = DFA.unpackEncodedString(DFA190_acceptS);
    static final short[] DFA190_special = DFA.unpackEncodedString(DFA190_specialS);
    static final short[][] DFA190_transition;

    static {
        int numStates = DFA190_transitionS.length;
        DFA190_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA190_transition[i] = DFA.unpackEncodedString(DFA190_transitionS[i]);
        }
    }

    class DFA190 extends DFA {

        public DFA190(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 190;
            this.eot = DFA190_eot;
            this.eof = DFA190_eof;
            this.min = DFA190_min;
            this.max = DFA190_max;
            this.accept = DFA190_accept;
            this.special = DFA190_special;
            this.transition = DFA190_transition;
        }
        public String getDescription() {
            return "()* loopback of 921:7: ( ( word )? ( punctuationSign | delimitedSpreadblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) )*";
        }
    }
    static final String DFA209_eotS =
        "\72\uffff";
    static final String DFA209_eofS =
        "\72\uffff";
    static final String DFA209_minS =
        "\5\74\1\121\2\uffff\1\102\1\121\3\102\4\74\1\121\4\74\2\121\3\102"+
        "\1\74\7\102\1\121\3\102\5\74\2\121\3\102\1\74\3\102\1\121\3\102"+
        "\1\74";
    static final String DFA209_maxS =
        "\5\u00d2\1\u00a4\2\uffff\2\u00d2\3\u00a4\4\u00d2\1\u00a4\4\u00d2"+
        "\5\u00a4\1\u00d2\3\u00a4\1\u00d2\7\u00a4\5\u00d2\5\u00a4\1\u00d2"+
        "\7\u00a4\1\u00d2";
    static final String DFA209_acceptS =
        "\6\uffff\1\2\1\1\62\uffff";
    static final String DFA209_specialS =
        "\72\uffff}>";
    static final String[] DFA209_transitionS = {
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\7\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\uffff\1\5\1\uffff\1\2\1\1"+
            "\2\2\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\12\2\13\1\12\4\13\10\uffff\4\13\3\uffff\1\13\1\12\2\13\3"+
            "\12\2\13\13\uffff\12\14\6\12\31\13",
            "",
            "",
            "\1\7\16\uffff\1\15\2\16\1\15\4\16\10\uffff\4\16\1\uffff\1\21"+
            "\1\uffff\1\16\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16"+
            "\56\17",
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\34\2\35\1\34\4\35\10\uffff\4\35\3\uffff\1\35\1\34\2\35\3"+
            "\34\2\35\13\uffff\12\36\6\34\31\35",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\40\2\41\1\40\4\41\10\uffff\4\41\3\uffff\1\41\1\40\2\41\3"+
            "\40\2\41\13\uffff\12\42\6\40\31\41",
            "\1\30\2\31\1\30\4\31\10\uffff\4\31\3\uffff\1\31\1\30\2\31\3"+
            "\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\16\uffff\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54"+
            "\1\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51"+
            "\56\52",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\44\2\45\1\44\4\45\10\uffff\4\45\3\uffff\1\45\1\44\2\45\3"+
            "\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\10\1\uffff\2\6\3\uffff\10"+
            "\7\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\62\2\63\1\62\4\63\10\uffff\4\63\3\uffff\1\63\1\62\2\63\3"+
            "\62\2\63\13\uffff\12\64\6\62\31\63",
            "\1\56\2\57\1\56\4\57\10\uffff\4\57\3\uffff\1\57\1\56\2\57\3"+
            "\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1"+
            "\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\66\2\67\1\66\4\67\10\uffff\4\67\3\uffff\1\67\1\66\2\67\3"+
            "\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\6\1\37\1\uffff\2\6\3\uffff\10"+
            "\7\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1"+
            "\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52"
    };

    static final short[] DFA209_eot = DFA.unpackEncodedString(DFA209_eotS);
    static final short[] DFA209_eof = DFA.unpackEncodedString(DFA209_eofS);
    static final char[] DFA209_min = DFA.unpackEncodedStringToUnsignedChars(DFA209_minS);
    static final char[] DFA209_max = DFA.unpackEncodedStringToUnsignedChars(DFA209_maxS);
    static final short[] DFA209_accept = DFA.unpackEncodedString(DFA209_acceptS);
    static final short[] DFA209_special = DFA.unpackEncodedString(DFA209_specialS);
    static final short[][] DFA209_transition;

    static {
        int numStates = DFA209_transitionS.length;
        DFA209_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA209_transition[i] = DFA.unpackEncodedString(DFA209_transitionS[i]);
        }
    }

    class DFA209 extends DFA {

        public DFA209(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 209;
            this.eot = DFA209_eot;
            this.eof = DFA209_eof;
            this.min = DFA209_min;
            this.max = DFA209_max;
            this.accept = DFA209_accept;
            this.special = DFA209_special;
            this.transition = DFA209_transition;
        }
        public String getDescription() {
            return "()* loopback of 1008:7: ( ( word )? ( punctuationSign | delimitedMonoblockNoEmphasis | softInlineLiteral | hardInlineLiteral ) )*";
        }
    }
    static final String DFA218_eotS =
        "\72\uffff";
    static final String DFA218_eofS =
        "\72\uffff";
    static final String DFA218_minS =
        "\5\74\1\121\2\uffff\2\121\3\102\4\74\1\121\4\74\2\121\3\102\1\74"+
        "\3\102\1\121\3\102\1\121\3\102\5\74\2\121\3\102\1\74\3\102\1\121"+
        "\3\102\1\74";
    static final String DFA218_maxS =
        "\5\u00d2\1\u00a4\2\uffff\2\u00d2\3\u00a4\4\u00d2\1\u00a4\4\u00d2"+
        "\5\u00a4\1\u00d2\3\u00a4\1\u00d2\7\u00a4\5\u00d2\5\u00a4\1\u00d2"+
        "\7\u00a4\1\u00d2";
    static final String DFA218_acceptS =
        "\6\uffff\1\2\1\1\62\uffff";
    static final String DFA218_specialS =
        "\72\uffff}>";
    static final String[] DFA218_transitionS = {
            "\1\7\4\uffff\1\6\7\uffff\10\7\1\1\2\2\1\1\4\2\10\uffff\4\2\1"+
            "\uffff\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1\31"+
            "\2\56\3",
            "\1\7\4\uffff\1\6\1\10\6\uffff\10\7\1\1\2\2\1\1\4\2\10\uffff"+
            "\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1"+
            "\31\2\56\3",
            "\1\7\4\uffff\1\6\1\10\6\uffff\10\7\1\1\2\2\1\1\4\2\10\uffff"+
            "\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1"+
            "\31\2\56\3",
            "\1\7\4\uffff\1\6\1\10\6\uffff\10\7\1\1\2\2\1\1\4\2\10\uffff"+
            "\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1"+
            "\31\2\56\3",
            "\1\7\4\uffff\1\6\1\10\6\uffff\10\7\1\1\2\2\1\1\4\2\10\uffff"+
            "\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1"+
            "\31\2\56\3",
            "\1\12\2\13\1\12\4\13\10\uffff\4\13\3\uffff\1\13\1\12\2\13\3"+
            "\12\2\13\13\uffff\12\14\6\12\31\13",
            "",
            "",
            "\1\15\2\16\1\15\4\16\10\uffff\4\16\1\uffff\1\21\1\uffff\1\16"+
            "\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\4\uffff\1\6\1\10\6\uffff\10\7\1\15\2\16\1\15\4\16\10\uffff"+
            "\4\16\1\11\1\21\1\uffff\1\16\1\15\2\16\3\15\2\16\13\uffff\12"+
            "\20\6\15\31\16\56\17",
            "\1\7\4\uffff\1\6\1\10\6\uffff\10\7\1\15\2\16\1\15\4\16\10\uffff"+
            "\4\16\1\11\1\21\1\uffff\1\16\1\15\2\16\3\15\2\16\13\uffff\12"+
            "\20\6\15\31\16\56\17",
            "\1\7\4\uffff\1\6\1\10\6\uffff\10\7\1\15\2\16\1\15\4\16\10\uffff"+
            "\4\16\1\11\1\21\1\uffff\1\16\1\15\2\16\3\15\2\16\13\uffff\12"+
            "\20\6\15\31\16\56\17",
            "\1\7\4\uffff\1\6\1\10\6\uffff\10\7\1\15\2\16\1\15\4\16\10\uffff"+
            "\4\16\1\11\1\21\1\uffff\1\16\1\15\2\16\3\15\2\16\13\uffff\12"+
            "\20\6\15\31\16\56\17",
            "\1\34\2\35\1\34\4\35\10\uffff\4\35\3\uffff\1\35\1\34\2\35\3"+
            "\34\2\35\13\uffff\12\36\6\34\31\35",
            "\1\7\4\uffff\1\6\1\37\6\uffff\10\7\1\22\2\23\1\22\4\23\10\uffff"+
            "\4\23\1\uffff\1\26\1\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff"+
            "\12\25\6\22\31\23\56\24",
            "\1\7\4\uffff\1\6\1\37\6\uffff\10\7\1\22\2\23\1\22\4\23\10\uffff"+
            "\4\23\1\uffff\1\26\1\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff"+
            "\12\25\6\22\31\23\56\24",
            "\1\7\4\uffff\1\6\1\37\6\uffff\10\7\1\22\2\23\1\22\4\23\10\uffff"+
            "\4\23\1\uffff\1\26\1\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff"+
            "\12\25\6\22\31\23\56\24",
            "\1\7\4\uffff\1\6\1\37\6\uffff\10\7\1\22\2\23\1\22\4\23\10\uffff"+
            "\4\23\1\uffff\1\26\1\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff"+
            "\12\25\6\22\31\23\56\24",
            "\1\40\2\41\1\40\4\41\10\uffff\4\41\3\uffff\1\41\1\40\2\41\3"+
            "\40\2\41\13\uffff\12\42\6\40\31\41",
            "\1\30\2\31\1\30\4\31\10\uffff\4\31\3\uffff\1\31\1\30\2\31\3"+
            "\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\4\uffff\1\6\1\10\6\uffff\10\7\1\1\2\2\1\1\4\2\10\uffff"+
            "\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1"+
            "\31\2\56\3",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51"+
            "\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\44\2\45\1\44\4\45\10\uffff\4\45\3\uffff\1\45\1\44\2\45\3"+
            "\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\4\uffff\1\6\1\10\6\uffff\10\7\1\15\2\16\1\15\4\16\10\uffff"+
            "\4\16\1\11\1\21\1\uffff\1\16\1\15\2\16\3\15\2\16\13\uffff\12"+
            "\20\6\15\31\16\56\17",
            "\1\7\4\uffff\1\6\1\37\6\uffff\10\7\1\50\2\51\1\50\4\51\10\uffff"+
            "\4\51\1\uffff\1\54\1\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff"+
            "\12\53\6\50\31\51\56\52",
            "\1\7\4\uffff\1\6\1\37\6\uffff\10\7\1\50\2\51\1\50\4\51\10\uffff"+
            "\4\51\1\uffff\1\54\1\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff"+
            "\12\53\6\50\31\51\56\52",
            "\1\7\4\uffff\1\6\1\37\6\uffff\10\7\1\50\2\51\1\50\4\51\10\uffff"+
            "\4\51\1\uffff\1\54\1\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff"+
            "\12\53\6\50\31\51\56\52",
            "\1\7\4\uffff\1\6\1\37\6\uffff\10\7\1\50\2\51\1\50\4\51\10\uffff"+
            "\4\51\1\uffff\1\54\1\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff"+
            "\12\53\6\50\31\51\56\52",
            "\1\62\2\63\1\62\4\63\10\uffff\4\63\3\uffff\1\63\1\62\2\63\3"+
            "\62\2\63\13\uffff\12\64\6\62\31\63",
            "\1\56\2\57\1\56\4\57\10\uffff\4\57\3\uffff\1\57\1\56\2\57\3"+
            "\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\7\4\uffff\1\6\1\37\6\uffff\10\7\1\22\2\23\1\22\4\23\10\uffff"+
            "\4\23\1\uffff\1\26\1\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff"+
            "\12\25\6\22\31\23\56\24",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\66\2\67\1\66\4\67\10\uffff\4\67\3\uffff\1\67\1\66\2\67\3"+
            "\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\7\4\uffff\1\6\1\37\6\uffff\10\7\1\50\2\51\1\50\4\51\10\uffff"+
            "\4\51\1\uffff\1\54\1\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff"+
            "\12\53\6\50\31\51\56\52"
    };

    static final short[] DFA218_eot = DFA.unpackEncodedString(DFA218_eotS);
    static final short[] DFA218_eof = DFA.unpackEncodedString(DFA218_eofS);
    static final char[] DFA218_min = DFA.unpackEncodedStringToUnsignedChars(DFA218_minS);
    static final char[] DFA218_max = DFA.unpackEncodedStringToUnsignedChars(DFA218_maxS);
    static final short[] DFA218_accept = DFA.unpackEncodedString(DFA218_acceptS);
    static final short[] DFA218_special = DFA.unpackEncodedString(DFA218_specialS);
    static final short[][] DFA218_transition;

    static {
        int numStates = DFA218_transitionS.length;
        DFA218_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA218_transition[i] = DFA.unpackEncodedString(DFA218_transitionS[i]);
        }
    }

    class DFA218 extends DFA {

        public DFA218(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 218;
            this.eot = DFA218_eot;
            this.eof = DFA218_eof;
            this.min = DFA218_min;
            this.max = DFA218_max;
            this.accept = DFA218_accept;
            this.special = DFA218_special;
            this.transition = DFA218_transition;
        }
        public String getDescription() {
            return "()* loopback of 1033:7: ( ( word )? ( punctuationSign | delimitedMonoblockNoEmphasisNoSeparator | softInlineLiteral | hardInlineLiteral ) )*";
        }
    }
    static final String DFA259_eotS =
        "\72\uffff";
    static final String DFA259_eofS =
        "\72\uffff";
    static final String DFA259_minS =
        "\5\74\1\121\2\uffff\1\102\1\121\3\102\4\74\1\121\4\74\2\121\3\102"+
        "\1\74\7\102\1\121\3\102\5\74\2\121\3\102\1\74\3\102\1\121\3\102"+
        "\1\74";
    static final String DFA259_maxS =
        "\5\u00d2\1\u00a4\2\uffff\2\u00d2\3\u00a4\4\u00d2\1\u00a4\4\u00d2"+
        "\5\u00a4\1\u00d2\3\u00a4\1\u00d2\7\u00a4\5\u00d2\5\u00a4\1\u00d2"+
        "\7\u00a4\1\u00d2";
    static final String DFA259_acceptS =
        "\6\uffff\1\2\1\1\62\uffff";
    static final String DFA259_specialS =
        "\72\uffff}>";
    static final String[] DFA259_transitionS = {
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\6\1\uffff\2\6\3\uffff\10\7\1"+
            "\1\2\2\1\1\4\2\10\uffff\4\2\1\uffff\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3"+
            "\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3"+
            "\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3"+
            "\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3"+
            "\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\12\2\13\1\12\4\13\10\uffff\4\13\3\uffff\1\13\1\12\2\13\3"+
            "\12\2\13\13\uffff\12\14\6\12\31\13",
            "",
            "",
            "\2\6\15\uffff\1\15\2\16\1\15\4\16\10\uffff\4\16\1\uffff\1\21"+
            "\1\uffff\1\16\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16"+
            "\56\17",
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1"+
            "\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1"+
            "\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1"+
            "\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1"+
            "\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\34\2\35\1\34\4\35\10\uffff\4\35\3\uffff\1\35\1\34\2\35\3"+
            "\34\2\35\13\uffff\12\36\6\34\31\35",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\40\2\41\1\40\4\41\10\uffff\4\41\3\uffff\1\41\1\40\2\41\3"+
            "\40\2\41\13\uffff\12\42\6\40\31\41",
            "\1\30\2\31\1\30\4\31\10\uffff\4\31\3\uffff\1\31\1\30\2\31\3"+
            "\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3"+
            "\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\6\15\uffff\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54"+
            "\1\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51"+
            "\56\52",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\44\2\45\1\44\4\45\10\uffff\4\45\3\uffff\1\45\1\44\2\45\3"+
            "\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1"+
            "\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51"+
            "\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51"+
            "\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51"+
            "\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51"+
            "\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\62\2\63\1\62\4\63\10\uffff\4\63\3\uffff\1\63\1\62\2\63\3"+
            "\62\2\63\13\uffff\12\64\6\62\31\63",
            "\1\56\2\57\1\56\4\57\10\uffff\4\57\3\uffff\1\57\1\56\2\57\3"+
            "\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\66\2\67\1\66\4\67\10\uffff\4\67\3\uffff\1\67\1\66\2\67\3"+
            "\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51"+
            "\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52"
    };

    static final short[] DFA259_eot = DFA.unpackEncodedString(DFA259_eotS);
    static final short[] DFA259_eof = DFA.unpackEncodedString(DFA259_eofS);
    static final char[] DFA259_min = DFA.unpackEncodedStringToUnsignedChars(DFA259_minS);
    static final char[] DFA259_max = DFA.unpackEncodedStringToUnsignedChars(DFA259_maxS);
    static final short[] DFA259_accept = DFA.unpackEncodedString(DFA259_acceptS);
    static final short[] DFA259_special = DFA.unpackEncodedString(DFA259_specialS);
    static final short[][] DFA259_transition;

    static {
        int numStates = DFA259_transitionS.length;
        DFA259_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA259_transition[i] = DFA.unpackEncodedString(DFA259_transitionS[i]);
        }
    }

    class DFA259 extends DFA {

        public DFA259(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 259;
            this.eot = DFA259_eot;
            this.eof = DFA259_eof;
            this.min = DFA259_min;
            this.max = DFA259_max;
            this.accept = DFA259_accept;
            this.special = DFA259_special;
            this.transition = DFA259_transition;
        }
        public String getDescription() {
            return "()* loopback of 1161:7: ( ( word )? ( punctuationSign | delimitedSpreadblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) )*";
        }
    }
    static final String DFA277_eotS =
        "\72\uffff";
    static final String DFA277_eofS =
        "\72\uffff";
    static final String DFA277_minS =
        "\5\74\1\121\2\uffff\1\102\1\121\3\102\4\74\1\121\4\74\2\121\3\102"+
        "\1\74\7\102\1\121\3\102\5\74\2\121\3\102\1\74\3\102\1\121\3\102"+
        "\1\74";
    static final String DFA277_maxS =
        "\5\u00d2\1\u00a4\2\uffff\2\u00d2\3\u00a4\4\u00d2\1\u00a4\4\u00d2"+
        "\5\u00a4\1\u00d2\3\u00a4\1\u00d2\7\u00a4\5\u00d2\5\u00a4\1\u00d2"+
        "\7\u00a4\1\u00d2";
    static final String DFA277_acceptS =
        "\6\uffff\1\2\1\1\62\uffff";
    static final String DFA277_specialS =
        "\72\uffff}>";
    static final String[] DFA277_transitionS = {
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\6\1\uffff\2\6\3\uffff\10\7\1"+
            "\1\2\2\1\1\4\2\10\uffff\4\2\1\uffff\1\5\1\uffff\1\2\1\1\2\2"+
            "\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3"+
            "\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3"+
            "\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3"+
            "\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3"+
            "\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\12\2\13\1\12\4\13\10\uffff\4\13\3\uffff\1\13\1\12\2\13\3"+
            "\12\2\13\13\uffff\12\14\6\12\31\13",
            "",
            "",
            "\1\6\16\uffff\1\15\2\16\1\15\4\16\10\uffff\4\16\1\uffff\1\21"+
            "\1\uffff\1\16\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16"+
            "\56\17",
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1"+
            "\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1"+
            "\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1"+
            "\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1"+
            "\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\34\2\35\1\34\4\35\10\uffff\4\35\3\uffff\1\35\1\34\2\35\3"+
            "\34\2\35\13\uffff\12\36\6\34\31\35",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\1\40\2\41\1\40\4\41\10\uffff\4\41\3\uffff\1\41\1\40\2\41\3"+
            "\40\2\41\13\uffff\12\42\6\40\31\41",
            "\1\30\2\31\1\30\4\31\10\uffff\4\31\3\uffff\1\31\1\30\2\31\3"+
            "\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\1\2\2\1\1\4\2\10\uffff\4\2\1\11\1\5\1\uffff\1\2\1\1\2\2\3"+
            "\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\6\16\uffff\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54"+
            "\1\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51"+
            "\56\52",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\44\2\45\1\44\4\45\10\uffff\4\45\3\uffff\1\45\1\44\2\45\3"+
            "\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\10\1\uffff\2\6\3\uffff\10\7"+
            "\1\15\2\16\1\15\4\16\10\uffff\4\16\1\11\1\21\1\uffff\1\16\1"+
            "\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51"+
            "\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51"+
            "\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51"+
            "\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51"+
            "\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52",
            "\1\62\2\63\1\62\4\63\10\uffff\4\63\3\uffff\1\63\1\62\2\63\3"+
            "\62\2\63\13\uffff\12\64\6\62\31\63",
            "\1\56\2\57\1\56\4\57\10\uffff\4\57\3\uffff\1\57\1\56\2\57\3"+
            "\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\66\2\67\1\66\4\67\10\uffff\4\67\3\uffff\1\67\1\66\2\67\3"+
            "\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\37\1\uffff\2\6\3\uffff\10\7"+
            "\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54\1\uffff\1\51"+
            "\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56\52"
    };

    static final short[] DFA277_eot = DFA.unpackEncodedString(DFA277_eotS);
    static final short[] DFA277_eof = DFA.unpackEncodedString(DFA277_eofS);
    static final char[] DFA277_min = DFA.unpackEncodedStringToUnsignedChars(DFA277_minS);
    static final char[] DFA277_max = DFA.unpackEncodedStringToUnsignedChars(DFA277_maxS);
    static final short[] DFA277_accept = DFA.unpackEncodedString(DFA277_acceptS);
    static final short[] DFA277_special = DFA.unpackEncodedString(DFA277_specialS);
    static final short[][] DFA277_transition;

    static {
        int numStates = DFA277_transitionS.length;
        DFA277_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA277_transition[i] = DFA.unpackEncodedString(DFA277_transitionS[i]);
        }
    }

    class DFA277 extends DFA {

        public DFA277(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 277;
            this.eot = DFA277_eot;
            this.eof = DFA277_eof;
            this.min = DFA277_min;
            this.max = DFA277_max;
            this.accept = DFA277_accept;
            this.special = DFA277_special;
            this.transition = DFA277_transition;
        }
        public String getDescription() {
            return "()* loopback of 1225:7: ( ( word )? ( punctuationSign | delimitedMonoblockNoHyphenPair | softInlineLiteral | hardInlineLiteral ) )*";
        }
    }
    static final String DFA286_eotS =
        "\31\uffff";
    static final String DFA286_eofS =
        "\31\uffff";
    static final String DFA286_minS =
        "\1\74\4\0\24\uffff";
    static final String DFA286_maxS =
        "\1\u00d2\4\0\24\uffff";
    static final String DFA286_acceptS =
        "\5\uffff\1\3\21\uffff\1\1\1\2";
    static final String DFA286_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\24\uffff}>";
    static final String[] DFA286_transitionS = {
            "\1\5\1\uffff\1\5\1\uffff\2\5\1\4\1\uffff\1\3\4\uffff\10\5\1"+
            "\2\3\5\1\1\3\5\3\uffff\1\5\4\uffff\4\5\1\uffff\1\5\1\uffff\11"+
            "\5\13\uffff\127\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA286_eot = DFA.unpackEncodedString(DFA286_eotS);
    static final short[] DFA286_eof = DFA.unpackEncodedString(DFA286_eofS);
    static final char[] DFA286_min = DFA.unpackEncodedStringToUnsignedChars(DFA286_minS);
    static final char[] DFA286_max = DFA.unpackEncodedStringToUnsignedChars(DFA286_maxS);
    static final short[] DFA286_accept = DFA.unpackEncodedString(DFA286_acceptS);
    static final short[] DFA286_special = DFA.unpackEncodedString(DFA286_specialS);
    static final short[][] DFA286_transition;

    static {
        int numStates = DFA286_transitionS.length;
        DFA286_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA286_transition[i] = DFA.unpackEncodedString(DFA286_transitionS[i]);
        }
    }

    class DFA286 extends DFA {

        public DFA286(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 286;
            this.eot = DFA286_eot;
            this.eof = DFA286_eof;
            this.min = DFA286_min;
            this.max = DFA286_max;
            this.accept = DFA286_accept;
            this.special = DFA286_special;
            this.transition = DFA286_transition;
        }
        public String getDescription() {
            return "1253:9: ( ( url )=>i+= url | ( ( whitespace )? smallDashedListItem )=> (i+= whitespace )? i+= smallDashedListItem | ( (i+= whitespace )? i+= mixedDelimitedSpreadBlock (i+= whitespace i+= mixedDelimitedSpreadBlock )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA286_1 = input.LA(1);

                         
                        int index286_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Novelang()) ) {s = 23;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index286_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA286_2 = input.LA(1);

                         
                        int index286_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Novelang()) ) {s = 23;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index286_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA286_3 = input.LA(1);

                         
                        int index286_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_Novelang()) ) {s = 24;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index286_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA286_4 = input.LA(1);

                         
                        int index286_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_Novelang()) ) {s = 24;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index286_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 286, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA300_eotS =
        "\26\uffff";
    static final String DFA300_eofS =
        "\26\uffff";
    static final String DFA300_minS =
        "\1\72\1\121\2\uffff\3\102\1\121\3\102\2\72\1\121\1\72\3\102\1\121"+
        "\3\102";
    static final String DFA300_maxS =
        "\1\u00d2\1\u00a4\2\uffff\7\u00a4\2\u00d2\1\u00a4\1\u00d2\7\u00a4";
    static final String DFA300_acceptS =
        "\2\uffff\1\1\1\2\22\uffff";
    static final String DFA300_specialS =
        "\26\uffff}>";
    static final String[] DFA300_transitionS = {
            "\1\1\1\uffff\1\2\1\uffff\1\2\1\uffff\3\2\4\uffff\1\3\1\uffff"+
            "\20\2\3\uffff\1\2\4\uffff\4\2\1\uffff\1\2\1\uffff\11\2\13\uffff"+
            "\127\2",
            "\1\4\2\5\1\4\4\5\10\uffff\4\5\3\uffff\1\5\1\4\2\5\3\4\2\5\13"+
            "\uffff\12\6\6\4\31\5",
            "",
            "",
            "\2\7\1\13\1\14\13\uffff\1\10\2\11\1\10\4\11\10\uffff\4\11\3"+
            "\uffff\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\2\7\1\13\1\14\13\uffff\1\10\2\11\1\10\4\11\10\uffff\4\11\3"+
            "\uffff\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\2\7\1\13\1\14\13\uffff\1\10\2\11\1\10\4\11\10\uffff\4\11\3"+
            "\uffff\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\1\10\2\11\1\10\4\11\10\uffff\4\11\3\uffff\1\11\1\10\2\11\3"+
            "\10\2\11\13\uffff\12\12\6\10\31\11",
            "\2\7\1\13\1\14\13\uffff\1\10\2\11\1\10\4\11\10\uffff\4\11\3"+
            "\uffff\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\2\7\1\13\1\14\13\uffff\1\10\2\11\1\10\4\11\10\uffff\4\11\3"+
            "\uffff\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\2\7\1\13\1\14\13\uffff\1\10\2\11\1\10\4\11\10\uffff\4\11\3"+
            "\uffff\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\1\15\1\uffff\1\2\1\uffff\1\2\1\uffff\3\2\2\uffff\1\14\1\uffff"+
            "\1\3\1\uffff\20\2\3\uffff\1\2\4\uffff\4\2\1\uffff\1\2\1\uffff"+
            "\11\2\13\uffff\127\2",
            "\1\15\1\uffff\1\2\1\uffff\1\2\1\uffff\3\2\1\uffff\1\16\2\uffff"+
            "\1\3\1\uffff\20\2\3\uffff\1\2\4\uffff\4\2\1\uffff\1\2\1\uffff"+
            "\11\2\13\uffff\127\2",
            "\1\17\2\20\1\17\4\20\10\uffff\4\20\3\uffff\1\20\1\17\2\20\3"+
            "\17\2\20\13\uffff\12\21\6\17\31\20",
            "\1\15\1\uffff\1\2\1\uffff\1\2\1\uffff\3\2\4\uffff\1\3\1\uffff"+
            "\20\2\3\uffff\1\2\4\uffff\4\2\1\uffff\1\2\1\uffff\11\2\13\uffff"+
            "\127\2",
            "\2\22\1\13\1\14\13\uffff\1\23\2\24\1\23\4\24\10\uffff\4\24"+
            "\3\uffff\1\24\1\23\2\24\3\23\2\24\13\uffff\12\25\6\23\31\24",
            "\2\22\1\13\1\14\13\uffff\1\23\2\24\1\23\4\24\10\uffff\4\24"+
            "\3\uffff\1\24\1\23\2\24\3\23\2\24\13\uffff\12\25\6\23\31\24",
            "\2\22\1\13\1\14\13\uffff\1\23\2\24\1\23\4\24\10\uffff\4\24"+
            "\3\uffff\1\24\1\23\2\24\3\23\2\24\13\uffff\12\25\6\23\31\24",
            "\1\23\2\24\1\23\4\24\10\uffff\4\24\3\uffff\1\24\1\23\2\24\3"+
            "\23\2\24\13\uffff\12\25\6\23\31\24",
            "\2\22\1\13\1\14\13\uffff\1\23\2\24\1\23\4\24\10\uffff\4\24"+
            "\3\uffff\1\24\1\23\2\24\3\23\2\24\13\uffff\12\25\6\23\31\24",
            "\2\22\1\13\1\14\13\uffff\1\23\2\24\1\23\4\24\10\uffff\4\24"+
            "\3\uffff\1\24\1\23\2\24\3\23\2\24\13\uffff\12\25\6\23\31\24",
            "\2\22\1\13\1\14\13\uffff\1\23\2\24\1\23\4\24\10\uffff\4\24"+
            "\3\uffff\1\24\1\23\2\24\3\23\2\24\13\uffff\12\25\6\23\31\24"
    };

    static final short[] DFA300_eot = DFA.unpackEncodedString(DFA300_eotS);
    static final short[] DFA300_eof = DFA.unpackEncodedString(DFA300_eofS);
    static final char[] DFA300_min = DFA.unpackEncodedStringToUnsignedChars(DFA300_minS);
    static final char[] DFA300_max = DFA.unpackEncodedStringToUnsignedChars(DFA300_maxS);
    static final short[] DFA300_accept = DFA.unpackEncodedString(DFA300_acceptS);
    static final short[] DFA300_special = DFA.unpackEncodedString(DFA300_specialS);
    static final short[][] DFA300_transition;

    static {
        int numStates = DFA300_transitionS.length;
        DFA300_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA300_transition[i] = DFA.unpackEncodedString(DFA300_transitionS[i]);
        }
    }

    class DFA300 extends DFA {

        public DFA300(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 300;
            this.eot = DFA300_eot;
            this.eof = DFA300_eof;
            this.min = DFA300_min;
            this.max = DFA300_max;
            this.accept = DFA300_accept;
            this.special = DFA300_special;
            this.transition = DFA300_transition;
        }
        public String getDescription() {
            return "1311:7: (p+= paragraph | p+= literal )";
        }
    }
    static final String DFA302_eotS =
        "\10\uffff";
    static final String DFA302_eofS =
        "\10\uffff";
    static final String DFA302_minS =
        "\1\104\1\105\1\104\1\uffff\1\105\2\72\1\uffff";
    static final String DFA302_maxS =
        "\3\110\1\uffff\1\110\2\u00d2\1\uffff";
    static final String DFA302_acceptS =
        "\3\uffff\1\2\3\uffff\1\1";
    static final String DFA302_specialS =
        "\10\uffff}>";
    static final String[] DFA302_transitionS = {
            "\1\1\1\2\2\uffff\1\3",
            "\1\2\2\uffff\1\3",
            "\1\4\1\5\2\uffff\1\3",
            "",
            "\1\5\2\uffff\1\3",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\uffff\3\7\1\uffff\1\6\1\5\1"+
            "\uffff\1\7\1\3\20\7\3\uffff\1\7\4\uffff\4\7\1\uffff\1\7\1\uffff"+
            "\11\7\13\uffff\127\7",
            "\1\7\1\uffff\1\7\1\uffff\1\7\1\uffff\3\7\2\uffff\1\5\1\uffff"+
            "\1\7\1\3\20\7\3\uffff\1\7\4\uffff\4\7\1\uffff\1\7\1\uffff\11"+
            "\7\13\uffff\127\7",
            ""
    };

    static final short[] DFA302_eot = DFA.unpackEncodedString(DFA302_eotS);
    static final short[] DFA302_eof = DFA.unpackEncodedString(DFA302_eofS);
    static final char[] DFA302_min = DFA.unpackEncodedStringToUnsignedChars(DFA302_minS);
    static final char[] DFA302_max = DFA.unpackEncodedStringToUnsignedChars(DFA302_maxS);
    static final short[] DFA302_accept = DFA.unpackEncodedString(DFA302_acceptS);
    static final short[] DFA302_special = DFA.unpackEncodedString(DFA302_specialS);
    static final short[][] DFA302_transition;

    static {
        int numStates = DFA302_transitionS.length;
        DFA302_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA302_transition[i] = DFA.unpackEncodedString(DFA302_transitionS[i]);
        }
    }

    class DFA302 extends DFA {

        public DFA302(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 302;
            this.eot = DFA302_eot;
            this.eof = DFA302_eof;
            this.min = DFA302_min;
            this.max = DFA302_max;
            this.accept = DFA302_accept;
            this.special = DFA302_special;
            this.transition = DFA302_transition;
        }
        public String getDescription() {
            return "()* loopback of 1312:7: ( largebreak (p+= paragraph | p+= literal ) )*";
        }
    }
    static final String DFA301_eotS =
        "\26\uffff";
    static final String DFA301_eofS =
        "\26\uffff";
    static final String DFA301_minS =
        "\1\72\1\121\2\uffff\3\102\1\121\3\102\2\72\1\121\1\72\3\102\1\121"+
        "\3\102";
    static final String DFA301_maxS =
        "\1\u00d2\1\u00a4\2\uffff\7\u00a4\2\u00d2\1\u00a4\1\u00d2\7\u00a4";
    static final String DFA301_acceptS =
        "\2\uffff\1\1\1\2\22\uffff";
    static final String DFA301_specialS =
        "\26\uffff}>";
    static final String[] DFA301_transitionS = {
            "\1\1\1\uffff\1\2\1\uffff\1\2\1\uffff\3\2\4\uffff\1\3\1\uffff"+
            "\20\2\3\uffff\1\2\4\uffff\4\2\1\uffff\1\2\1\uffff\11\2\13\uffff"+
            "\127\2",
            "\1\4\2\5\1\4\4\5\10\uffff\4\5\3\uffff\1\5\1\4\2\5\3\4\2\5\13"+
            "\uffff\12\6\6\4\31\5",
            "",
            "",
            "\2\7\1\13\1\14\13\uffff\1\10\2\11\1\10\4\11\10\uffff\4\11\3"+
            "\uffff\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\2\7\1\13\1\14\13\uffff\1\10\2\11\1\10\4\11\10\uffff\4\11\3"+
            "\uffff\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\2\7\1\13\1\14\13\uffff\1\10\2\11\1\10\4\11\10\uffff\4\11\3"+
            "\uffff\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\1\10\2\11\1\10\4\11\10\uffff\4\11\3\uffff\1\11\1\10\2\11\3"+
            "\10\2\11\13\uffff\12\12\6\10\31\11",
            "\2\7\1\13\1\14\13\uffff\1\10\2\11\1\10\4\11\10\uffff\4\11\3"+
            "\uffff\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\2\7\1\13\1\14\13\uffff\1\10\2\11\1\10\4\11\10\uffff\4\11\3"+
            "\uffff\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\2\7\1\13\1\14\13\uffff\1\10\2\11\1\10\4\11\10\uffff\4\11\3"+
            "\uffff\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\1\15\1\uffff\1\2\1\uffff\1\2\1\uffff\3\2\2\uffff\1\14\1\uffff"+
            "\1\3\1\uffff\20\2\3\uffff\1\2\4\uffff\4\2\1\uffff\1\2\1\uffff"+
            "\11\2\13\uffff\127\2",
            "\1\15\1\uffff\1\2\1\uffff\1\2\1\uffff\3\2\1\uffff\1\16\2\uffff"+
            "\1\3\1\uffff\20\2\3\uffff\1\2\4\uffff\4\2\1\uffff\1\2\1\uffff"+
            "\11\2\13\uffff\127\2",
            "\1\17\2\20\1\17\4\20\10\uffff\4\20\3\uffff\1\20\1\17\2\20\3"+
            "\17\2\20\13\uffff\12\21\6\17\31\20",
            "\1\15\1\uffff\1\2\1\uffff\1\2\1\uffff\3\2\4\uffff\1\3\1\uffff"+
            "\20\2\3\uffff\1\2\4\uffff\4\2\1\uffff\1\2\1\uffff\11\2\13\uffff"+
            "\127\2",
            "\2\22\1\13\1\14\13\uffff\1\23\2\24\1\23\4\24\10\uffff\4\24"+
            "\3\uffff\1\24\1\23\2\24\3\23\2\24\13\uffff\12\25\6\23\31\24",
            "\2\22\1\13\1\14\13\uffff\1\23\2\24\1\23\4\24\10\uffff\4\24"+
            "\3\uffff\1\24\1\23\2\24\3\23\2\24\13\uffff\12\25\6\23\31\24",
            "\2\22\1\13\1\14\13\uffff\1\23\2\24\1\23\4\24\10\uffff\4\24"+
            "\3\uffff\1\24\1\23\2\24\3\23\2\24\13\uffff\12\25\6\23\31\24",
            "\1\23\2\24\1\23\4\24\10\uffff\4\24\3\uffff\1\24\1\23\2\24\3"+
            "\23\2\24\13\uffff\12\25\6\23\31\24",
            "\2\22\1\13\1\14\13\uffff\1\23\2\24\1\23\4\24\10\uffff\4\24"+
            "\3\uffff\1\24\1\23\2\24\3\23\2\24\13\uffff\12\25\6\23\31\24",
            "\2\22\1\13\1\14\13\uffff\1\23\2\24\1\23\4\24\10\uffff\4\24"+
            "\3\uffff\1\24\1\23\2\24\3\23\2\24\13\uffff\12\25\6\23\31\24",
            "\2\22\1\13\1\14\13\uffff\1\23\2\24\1\23\4\24\10\uffff\4\24"+
            "\3\uffff\1\24\1\23\2\24\3\23\2\24\13\uffff\12\25\6\23\31\24"
    };

    static final short[] DFA301_eot = DFA.unpackEncodedString(DFA301_eotS);
    static final short[] DFA301_eof = DFA.unpackEncodedString(DFA301_eofS);
    static final char[] DFA301_min = DFA.unpackEncodedStringToUnsignedChars(DFA301_minS);
    static final char[] DFA301_max = DFA.unpackEncodedStringToUnsignedChars(DFA301_maxS);
    static final short[] DFA301_accept = DFA.unpackEncodedString(DFA301_acceptS);
    static final short[] DFA301_special = DFA.unpackEncodedString(DFA301_specialS);
    static final short[][] DFA301_transition;

    static {
        int numStates = DFA301_transitionS.length;
        DFA301_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA301_transition[i] = DFA.unpackEncodedString(DFA301_transitionS[i]);
        }
    }

    class DFA301 extends DFA {

        public DFA301(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 301;
            this.eot = DFA301_eot;
            this.eof = DFA301_eof;
            this.min = DFA301_min;
            this.max = DFA301_max;
            this.accept = DFA301_accept;
            this.special = DFA301_special;
            this.transition = DFA301_transition;
        }
        public String getDescription() {
            return "1312:20: (p+= paragraph | p+= literal )";
        }
    }
    static final String DFA321_eotS =
        "\14\uffff";
    static final String DFA321_eofS =
        "\2\uffff\1\11\5\uffff\1\11\3\uffff";
    static final String DFA321_minS =
        "\1\112\1\uffff\1\74\5\uffff\1\74\1\uffff\1\0\1\uffff";
    static final String DFA321_maxS =
        "\1\120\1\uffff\1\u00d2\5\uffff\1\u00d2\1\uffff\1\0\1\uffff";
    static final String DFA321_acceptS =
        "\1\uffff\1\1\1\uffff\1\4\1\5\1\6\1\7\1\10\1\uffff\1\3\1\uffff\1"+
        "\2";
    static final String DFA321_specialS =
        "\12\uffff\1\0\1\uffff}>";
    static final String[] DFA321_transitionS = {
            "\1\2\1\1\1\3\1\4\1\5\1\6\1\7",
            "",
            "\7\11\1\uffff\3\11\1\uffff\2\11\1\10\16\11\3\uffff\1\11\4\uffff"+
            "\4\11\1\uffff\1\11\1\uffff\11\11\13\uffff\127\11",
            "",
            "",
            "",
            "",
            "",
            "\7\11\1\uffff\3\11\1\uffff\2\11\1\12\16\11\3\uffff\1\11\4\uffff"+
            "\4\11\1\uffff\1\11\1\uffff\11\11\13\uffff\127\11",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA321_eot = DFA.unpackEncodedString(DFA321_eotS);
    static final short[] DFA321_eof = DFA.unpackEncodedString(DFA321_eofS);
    static final char[] DFA321_min = DFA.unpackEncodedStringToUnsignedChars(DFA321_minS);
    static final char[] DFA321_max = DFA.unpackEncodedStringToUnsignedChars(DFA321_maxS);
    static final short[] DFA321_accept = DFA.unpackEncodedString(DFA321_acceptS);
    static final short[] DFA321_special = DFA.unpackEncodedString(DFA321_specialS);
    static final short[][] DFA321_transition;

    static {
        int numStates = DFA321_transitionS.length;
        DFA321_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA321_transition[i] = DFA.unpackEncodedString(DFA321_transitionS[i]);
        }
    }

    class DFA321 extends DFA {

        public DFA321(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 321;
            this.eot = DFA321_eot;
            this.eof = DFA321_eof;
            this.min = DFA321_min;
            this.max = DFA321_max;
            this.accept = DFA321_accept;
            this.special = DFA321_special;
            this.transition = DFA321_transition;
        }
        public String getDescription() {
            return "1454:1: punctuationSign : (s1= COMMA -> ^( PUNCTUATION_SIGN ) | ( FULL_STOP FULL_STOP FULL_STOP )=> FULL_STOP FULL_STOP FULL_STOP -> ^( PUNCTUATION_SIGN ) | s3= FULL_STOP -> ^( PUNCTUATION_SIGN ) | s4= QUESTION_MARK -> ^( PUNCTUATION_SIGN ) | s5= EXCLAMATION_MARK -> ^( PUNCTUATION_SIGN ) | s6= SEMICOLON -> ^( PUNCTUATION_SIGN ) | s7= COLON -> ^( PUNCTUATION_SIGN ) | s8= APOSTROPHE ->);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA321_10 = input.LA(1);

                         
                        int index321_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Novelang()) ) {s = 11;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index321_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 321, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA329_eotS =
        "\34\uffff";
    static final String DFA329_eofS =
        "\34\uffff";
    static final String DFA329_minS =
        "\4\72\1\uffff\2\72\1\uffff\24\72";
    static final String DFA329_maxS =
        "\4\u00a4\1\uffff\2\u00a4\1\uffff\24\u00a4";
    static final String DFA329_acceptS =
        "\4\uffff\1\1\2\uffff\1\2\24\uffff";
    static final String DFA329_specialS =
        "\34\uffff}>";
    static final String[] DFA329_transitionS = {
            "\1\4\1\uffff\2\4\4\uffff\2\4\6\uffff\7\4\1\1\2\2\1\1\4\2\1\uffff"+
            "\2\4\1\uffff\4\4\4\2\3\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff\12"+
            "\3\6\1\31\2",
            "\1\4\1\uffff\2\4\3\uffff\1\7\1\13\1\4\6\uffff\1\5\4\4\1\6\1"+
            "\4\1\10\2\11\1\10\4\11\1\uffff\2\4\1\uffff\4\4\4\11\3\uffff"+
            "\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\1\4\1\uffff\2\4\3\uffff\1\7\1\13\1\4\6\uffff\1\5\4\4\1\6\1"+
            "\4\1\10\2\11\1\10\4\11\1\uffff\2\4\1\uffff\4\4\4\11\3\uffff"+
            "\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\1\4\1\uffff\2\4\4\uffff\1\17\1\4\6\uffff\1\20\6\4\1\14\2\15"+
            "\1\14\4\15\1\uffff\2\4\1\uffff\4\4\4\15\3\uffff\1\15\1\14\2"+
            "\15\3\14\2\15\13\uffff\12\16\6\14\31\15",
            "",
            "\1\4\1\uffff\2\4\4\uffff\2\4\6\uffff\7\4\1\1\2\2\1\1\4\2\1"+
            "\uffff\2\4\1\uffff\4\4\4\2\3\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff"+
            "\12\21\6\1\31\2",
            "\1\4\1\uffff\2\4\4\uffff\2\4\6\uffff\5\4\1\uffff\11\4\1\uffff"+
            "\2\4\1\uffff\10\4\3\uffff\11\4\13\uffff\12\22\37\4",
            "",
            "\1\4\1\uffff\2\4\3\uffff\1\7\1\13\1\4\6\uffff\1\5\4\4\1\6\1"+
            "\4\1\10\2\11\1\10\4\11\1\uffff\2\4\1\uffff\4\4\4\11\3\uffff"+
            "\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\1\4\1\uffff\2\4\3\uffff\1\7\1\13\1\4\6\uffff\1\5\4\4\1\6\1"+
            "\4\1\10\2\11\1\10\4\11\1\uffff\2\4\1\uffff\4\4\4\11\3\uffff"+
            "\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\1\4\1\uffff\2\4\3\uffff\1\7\1\13\1\4\6\uffff\1\5\4\4\1\6\1"+
            "\4\1\10\2\11\1\10\4\11\1\uffff\2\4\1\uffff\4\4\4\11\3\uffff"+
            "\1\11\1\10\2\11\3\10\2\11\13\uffff\12\12\6\10\31\11",
            "\1\4\1\uffff\2\4\4\uffff\1\13\1\4\6\uffff\7\4\1\10\2\11\1\10"+
            "\4\11\1\uffff\2\4\1\uffff\4\4\4\11\3\uffff\1\11\1\10\2\11\3"+
            "\10\2\11\13\uffff\12\12\6\10\31\11",
            "\1\4\1\uffff\2\4\4\uffff\1\17\1\4\6\uffff\1\5\6\4\1\14\2\15"+
            "\1\14\4\15\1\uffff\2\4\1\uffff\4\4\4\15\3\uffff\1\15\1\14\2"+
            "\15\3\14\2\15\13\uffff\12\23\6\14\31\15",
            "\1\4\1\uffff\2\4\4\uffff\1\17\1\4\6\uffff\1\5\6\4\1\14\2\15"+
            "\1\14\4\15\1\uffff\2\4\1\uffff\4\4\4\15\3\uffff\1\15\1\14\2"+
            "\15\3\14\2\15\13\uffff\12\23\6\14\31\15",
            "\1\4\1\uffff\2\4\4\uffff\1\17\1\4\6\uffff\1\20\6\4\1\14\2\15"+
            "\1\14\4\15\1\uffff\2\4\1\uffff\4\4\4\15\3\uffff\1\15\1\14\2"+
            "\15\3\14\2\15\13\uffff\12\16\6\14\31\15",
            "\1\4\1\uffff\2\4\4\uffff\1\17\1\4\6\uffff\7\4\1\14\2\15\1\14"+
            "\4\15\1\uffff\2\4\1\uffff\4\4\4\15\3\uffff\1\15\1\14\2\15\3"+
            "\14\2\15\13\uffff\12\23\6\14\31\15",
            "\1\4\1\uffff\2\4\4\uffff\2\4\6\uffff\7\4\1\1\2\2\1\1\4\2\1"+
            "\uffff\2\4\1\uffff\4\4\4\2\3\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff"+
            "\12\24\6\1\31\2",
            "\1\4\1\uffff\2\4\4\uffff\1\17\1\4\6\uffff\1\5\6\4\1\14\2\15"+
            "\1\14\4\15\1\uffff\2\4\1\uffff\4\4\4\15\3\uffff\1\15\1\14\2"+
            "\15\3\14\2\15\13\uffff\12\23\6\14\31\15",
            "\1\4\1\uffff\2\4\3\uffff\1\7\2\4\6\uffff\5\4\1\uffff\11\4\1"+
            "\uffff\2\4\1\uffff\10\4\3\uffff\11\4\13\uffff\12\22\37\4",
            "\1\4\1\uffff\2\4\4\uffff\1\17\1\4\6\uffff\1\5\6\4\1\14\2\15"+
            "\1\14\4\15\1\uffff\2\4\1\uffff\4\4\4\15\3\uffff\1\15\1\14\2"+
            "\15\3\14\2\15\13\uffff\12\23\6\14\31\15",
            "\1\4\1\uffff\2\4\4\uffff\1\17\1\4\6\uffff\1\25\6\4\1\14\2\15"+
            "\1\14\4\15\1\uffff\2\4\1\uffff\4\4\4\15\3\uffff\1\15\1\14\2"+
            "\15\3\14\2\15\13\uffff\12\26\6\14\31\15",
            "\1\4\1\uffff\2\4\4\uffff\2\4\6\uffff\7\4\1\1\2\2\1\1\4\2\1"+
            "\uffff\2\4\1\uffff\4\4\4\2\3\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff"+
            "\12\27\6\1\31\2",
            "\1\4\1\uffff\2\4\4\uffff\1\17\1\4\6\uffff\1\25\6\4\1\14\2\15"+
            "\1\14\4\15\1\uffff\2\4\1\uffff\4\4\4\15\3\uffff\1\15\1\14\2"+
            "\15\3\14\2\15\13\uffff\12\26\6\14\31\15",
            "\1\4\1\uffff\2\4\4\uffff\1\17\1\4\6\uffff\1\31\6\4\1\14\2\15"+
            "\1\14\4\15\1\uffff\2\4\1\uffff\4\4\4\15\3\uffff\1\15\1\14\2"+
            "\15\3\14\2\15\13\uffff\12\30\6\14\31\15",
            "\1\4\1\uffff\2\4\4\uffff\1\17\1\4\6\uffff\1\31\6\4\1\14\2\15"+
            "\1\14\4\15\1\uffff\2\4\1\uffff\4\4\4\15\3\uffff\1\15\1\14\2"+
            "\15\3\14\2\15\13\uffff\12\30\6\14\31\15",
            "\1\4\1\uffff\2\4\4\uffff\2\4\6\uffff\7\4\1\1\2\2\1\1\4\2\1"+
            "\uffff\2\4\1\uffff\4\4\4\2\3\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff"+
            "\12\32\6\1\31\2",
            "\1\4\1\uffff\2\4\3\uffff\1\7\1\17\1\4\6\uffff\1\5\4\4\1\6\1"+
            "\4\1\14\2\15\1\14\4\15\1\uffff\2\4\1\uffff\4\4\4\15\3\uffff"+
            "\1\15\1\14\2\15\3\14\2\15\13\uffff\12\33\6\14\31\15",
            "\1\4\1\uffff\2\4\3\uffff\1\7\1\17\1\4\6\uffff\1\5\4\4\1\6\1"+
            "\4\1\14\2\15\1\14\4\15\1\uffff\2\4\1\uffff\4\4\4\15\3\uffff"+
            "\1\15\1\14\2\15\3\14\2\15\13\uffff\12\33\6\14\31\15"
    };

    static final short[] DFA329_eot = DFA.unpackEncodedString(DFA329_eotS);
    static final short[] DFA329_eof = DFA.unpackEncodedString(DFA329_eofS);
    static final char[] DFA329_min = DFA.unpackEncodedStringToUnsignedChars(DFA329_minS);
    static final char[] DFA329_max = DFA.unpackEncodedStringToUnsignedChars(DFA329_maxS);
    static final short[] DFA329_accept = DFA.unpackEncodedString(DFA329_acceptS);
    static final short[] DFA329_special = DFA.unpackEncodedString(DFA329_specialS);
    static final short[][] DFA329_transition;

    static {
        int numStates = DFA329_transitionS.length;
        DFA329_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA329_transition[i] = DFA.unpackEncodedString(DFA329_transitionS[i]);
        }
    }

    class DFA329 extends DFA {

        public DFA329(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 329;
            this.eot = DFA329_eot;
            this.eof = DFA329_eof;
            this.min = DFA329_min;
            this.max = DFA329_max;
            this.accept = DFA329_accept;
            this.special = DFA329_special;
            this.transition = DFA329_transition;
        }
        public String getDescription() {
            return "1522:5: ( urlUser ( COLON urlPassword )? COMMERCIAL_AT )?";
        }
    }
    static final String DFA331_eotS =
        "\16\uffff";
    static final String DFA331_eofS =
        "\13\uffff\2\15\1\uffff";
    static final String DFA331_minS =
        "\1\121\1\uffff\1\102\1\121\2\102\1\121\2\102\1\121\1\102\2\101\1"+
        "\uffff";
    static final String DFA331_maxS =
        "\1\u00a4\1\uffff\13\u00a4\1\uffff";
    static final String DFA331_acceptS =
        "\1\uffff\1\1\13\uffff\1\2";
    static final String DFA331_specialS =
        "\16\uffff}>";
    static final String[] DFA331_transitionS = {
            "\10\1\10\uffff\4\1\3\uffff\11\1\13\uffff\12\2\37\1",
            "",
            "\1\1\7\uffff\1\3\6\uffff\10\1\10\uffff\4\1\3\uffff\11\1\13"+
            "\uffff\12\4\37\1",
            "\10\1\10\uffff\4\1\3\uffff\11\1\13\uffff\12\5\37\1",
            "\1\1\7\uffff\1\3\6\uffff\10\1\10\uffff\4\1\3\uffff\11\1\13"+
            "\uffff\12\4\37\1",
            "\1\1\7\uffff\1\6\6\uffff\10\1\10\uffff\4\1\3\uffff\11\1\13"+
            "\uffff\12\7\37\1",
            "\10\1\10\uffff\4\1\3\uffff\11\1\13\uffff\12\10\37\1",
            "\1\1\7\uffff\1\6\6\uffff\10\1\10\uffff\4\1\3\uffff\11\1\13"+
            "\uffff\12\7\37\1",
            "\1\1\7\uffff\1\11\6\uffff\10\1\10\uffff\4\1\3\uffff\11\1\13"+
            "\uffff\12\12\37\1",
            "\10\1\10\uffff\4\1\3\uffff\11\1\13\uffff\12\13\37\1",
            "\1\1\7\uffff\1\11\6\uffff\10\1\10\uffff\4\1\3\uffff\11\1\13"+
            "\uffff\12\12\37\1",
            "\1\15\1\1\1\uffff\2\15\2\uffff\1\15\1\uffff\1\1\4\uffff\1\15"+
            "\1\uffff\10\1\1\15\7\uffff\4\1\3\uffff\11\1\13\uffff\12\14\37"+
            "\1",
            "\1\15\1\1\1\uffff\2\15\2\uffff\1\15\1\uffff\1\1\4\uffff\1\15"+
            "\1\uffff\10\1\1\15\7\uffff\4\1\3\uffff\11\1\13\uffff\12\14\37"+
            "\1",
            ""
    };

    static final short[] DFA331_eot = DFA.unpackEncodedString(DFA331_eotS);
    static final short[] DFA331_eof = DFA.unpackEncodedString(DFA331_eofS);
    static final char[] DFA331_min = DFA.unpackEncodedStringToUnsignedChars(DFA331_minS);
    static final char[] DFA331_max = DFA.unpackEncodedStringToUnsignedChars(DFA331_maxS);
    static final short[] DFA331_accept = DFA.unpackEncodedString(DFA331_acceptS);
    static final short[] DFA331_special = DFA.unpackEncodedString(DFA331_specialS);
    static final short[][] DFA331_transition;

    static {
        int numStates = DFA331_transitionS.length;
        DFA331_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA331_transition[i] = DFA.unpackEncodedString(DFA331_transitionS[i]);
        }
    }

    class DFA331 extends DFA {

        public DFA331(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 331;
            this.eot = DFA331_eot;
            this.eof = DFA331_eof;
            this.min = DFA331_min;
            this.max = DFA331_max;
            this.accept = DFA331_accept;
            this.special = DFA331_special;
            this.transition = DFA331_transition;
        }
        public String getDescription() {
            return "1529:1: urlHost : ( urlHostName | urlHostNumber );";
        }
    }
    static final String DFA332_eotS =
        "\11\uffff";
    static final String DFA332_eofS =
        "\1\uffff\2\10\1\uffff\3\10\2\uffff";
    static final String DFA332_minS =
        "\1\121\2\101\1\uffff\3\101\1\102\1\uffff";
    static final String DFA332_maxS =
        "\3\u00a4\1\uffff\4\u00a4\1\uffff";
    static final String DFA332_acceptS =
        "\3\uffff\1\1\4\uffff\1\2";
    static final String DFA332_specialS =
        "\11\uffff}>";
    static final String[] DFA332_transitionS = {
            "\1\1\2\2\1\1\4\2\10\uffff\4\2\3\uffff\1\2\1\1\2\2\3\1\2\2\13"+
            "\uffff\12\3\6\1\31\2",
            "\1\10\1\7\1\uffff\2\10\2\uffff\1\10\1\uffff\1\3\4\uffff\1\10"+
            "\1\uffff\1\4\2\5\1\4\4\5\1\10\7\uffff\4\5\3\uffff\1\5\1\4\2"+
            "\5\3\4\2\5\13\uffff\12\6\6\4\31\5",
            "\1\10\1\7\1\uffff\2\10\2\uffff\1\10\1\uffff\1\3\4\uffff\1\10"+
            "\1\uffff\1\4\2\5\1\4\4\5\1\10\7\uffff\4\5\3\uffff\1\5\1\4\2"+
            "\5\3\4\2\5\13\uffff\12\6\6\4\31\5",
            "",
            "\1\10\1\7\1\uffff\2\10\2\uffff\1\10\1\uffff\1\3\4\uffff\1\10"+
            "\1\uffff\1\4\2\5\1\4\4\5\1\10\7\uffff\4\5\3\uffff\1\5\1\4\2"+
            "\5\3\4\2\5\13\uffff\12\6\6\4\31\5",
            "\1\10\1\7\1\uffff\2\10\2\uffff\1\10\1\uffff\1\3\4\uffff\1\10"+
            "\1\uffff\1\4\2\5\1\4\4\5\1\10\7\uffff\4\5\3\uffff\1\5\1\4\2"+
            "\5\3\4\2\5\13\uffff\12\6\6\4\31\5",
            "\1\10\1\7\1\uffff\2\10\2\uffff\1\10\1\uffff\1\3\4\uffff\1\10"+
            "\1\uffff\1\4\2\5\1\4\4\5\1\10\7\uffff\4\5\3\uffff\1\5\1\4\2"+
            "\5\3\4\2\5\13\uffff\12\6\6\4\31\5",
            "\1\7\16\uffff\1\4\2\5\1\4\4\5\10\uffff\4\5\3\uffff\1\5\1\4"+
            "\2\5\3\4\2\5\13\uffff\12\6\6\4\31\5",
            ""
    };

    static final short[] DFA332_eot = DFA.unpackEncodedString(DFA332_eotS);
    static final short[] DFA332_eof = DFA.unpackEncodedString(DFA332_eofS);
    static final char[] DFA332_min = DFA.unpackEncodedStringToUnsignedChars(DFA332_minS);
    static final char[] DFA332_max = DFA.unpackEncodedStringToUnsignedChars(DFA332_maxS);
    static final short[] DFA332_accept = DFA.unpackEncodedString(DFA332_acceptS);
    static final short[] DFA332_special = DFA.unpackEncodedString(DFA332_specialS);
    static final short[][] DFA332_transition;

    static {
        int numStates = DFA332_transitionS.length;
        DFA332_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA332_transition[i] = DFA.unpackEncodedString(DFA332_transitionS[i]);
        }
    }

    class DFA332 extends DFA {

        public DFA332(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 332;
            this.eot = DFA332_eot;
            this.eof = DFA332_eof;
            this.min = DFA332_min;
            this.max = DFA332_max;
            this.accept = DFA332_accept;
            this.special = DFA332_special;
            this.transition = DFA332_transition;
        }
        public String getDescription() {
            return "()* loopback of 1535:5: ( urlDomainLabel FULL_STOP )*";
        }
    }
    static final String DFA360_eotS =
        "\34\uffff";
    static final String DFA360_eofS =
        "\30\uffff\4\15";
    static final String DFA360_minS =
        "\15\72\1\uffff\1\72\1\uffff\14\72";
    static final String DFA360_maxS =
        "\15\u00d2\1\uffff\1\u00d2\1\uffff\14\u00d2";
    static final String DFA360_acceptS =
        "\15\uffff\1\2\1\uffff\1\1\14\uffff";
    static final String DFA360_specialS =
        "\34\uffff}>";
    static final String[] DFA360_transitionS = {
            "\1\12\7\uffff\1\5\1\13\7\uffff\1\11\5\uffff\1\1\2\2\1\1\4\2"+
            "\2\uffff\1\6\1\uffff\1\14\1\7\1\uffff\1\10\4\2\3\uffff\1\2\1"+
            "\1\2\2\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\17\6\uffff\1\15\2\17\6\uffff\1\16\1\17\5\uffff\10\17\2\uffff"+
            "\1\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\6\uffff\1\15\2\17\6\uffff\1\16\1\17\5\uffff\10\17\2\uffff"+
            "\1\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\6\uffff\1\15\2\17\6\uffff\1\16\1\17\5\uffff\10\17\2\uffff"+
            "\1\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\6\uffff\1\15\2\17\6\uffff\1\16\1\17\5\uffff\10\17\2\uffff"+
            "\1\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\6\uffff\1\15\2\17\6\uffff\1\16\1\17\5\uffff\10\17\2\uffff"+
            "\1\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\6\uffff\1\15\2\17\6\uffff\1\16\1\17\5\uffff\10\17\2\uffff"+
            "\1\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\6\uffff\1\15\2\17\6\uffff\1\16\1\17\5\uffff\10\17\2\uffff"+
            "\1\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\6\uffff\1\15\2\17\6\uffff\1\16\1\17\5\uffff\10\17\2\uffff"+
            "\1\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\6\uffff\1\15\2\17\6\uffff\1\16\1\17\5\uffff\10\17\2\uffff"+
            "\1\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\6\uffff\1\15\2\17\6\uffff\1\16\1\17\5\uffff\10\17\2\uffff"+
            "\1\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\6\uffff\1\15\2\17\6\uffff\1\16\1\17\5\uffff\10\17\2\uffff"+
            "\1\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\6\uffff\1\15\2\17\6\uffff\1\16\1\17\5\uffff\10\17\2\uffff"+
            "\1\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "",
            "\1\17\7\uffff\2\17\6\uffff\2\17\5\uffff\6\17\1\20\1\23\2\uffff"+
            "\1\17\1\uffff\2\17\1\uffff\2\17\1\22\1\21\1\17\3\uffff\11\17"+
            "\13\uffff\127\17",
            "",
            "\1\17\6\uffff\3\17\6\uffff\2\17\5\uffff\10\17\2\uffff\1\17"+
            "\1\uffff\2\17\1\uffff\1\17\1\24\3\17\3\uffff\11\17\13\uffff"+
            "\127\17",
            "\1\17\6\uffff\3\17\6\uffff\2\17\5\uffff\6\17\1\25\1\17\2\uffff"+
            "\1\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\6\uffff\3\17\6\uffff\2\17\5\uffff\1\17\1\26\6\17\2\uffff"+
            "\1\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\6\uffff\3\17\6\uffff\2\17\5\uffff\10\17\2\uffff\1\17"+
            "\1\uffff\2\17\1\uffff\4\17\1\27\3\uffff\11\17\13\uffff\127\17",
            "\1\17\6\uffff\3\17\6\uffff\2\17\5\uffff\10\17\2\uffff\1\17"+
            "\1\uffff\2\17\1\uffff\2\17\1\30\2\17\3\uffff\11\17\13\uffff"+
            "\127\17",
            "\1\17\6\uffff\3\17\6\uffff\2\17\5\uffff\10\17\2\uffff\1\17"+
            "\1\uffff\2\17\1\uffff\2\17\1\31\2\17\3\uffff\11\17\13\uffff"+
            "\127\17",
            "\1\17\6\uffff\3\17\6\uffff\2\17\5\uffff\1\32\7\17\2\uffff\1"+
            "\17\1\uffff\2\17\1\uffff\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\6\uffff\3\17\6\uffff\2\17\5\uffff\10\17\2\uffff\1\17"+
            "\1\uffff\2\17\1\uffff\2\17\1\33\2\17\3\uffff\11\17\13\uffff"+
            "\127\17",
            "\1\17\2\uffff\1\15\1\uffff\1\15\1\uffff\3\17\3\15\1\uffff\1"+
            "\15\1\uffff\2\17\5\uffff\10\17\2\uffff\1\17\1\uffff\2\17\1\uffff"+
            "\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\2\uffff\1\15\1\uffff\1\15\1\uffff\3\17\3\15\1\uffff\1"+
            "\15\1\uffff\2\17\5\uffff\10\17\2\uffff\1\17\1\uffff\2\17\1\uffff"+
            "\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\2\uffff\1\15\1\uffff\1\15\1\uffff\3\17\3\15\1\uffff\1"+
            "\15\1\uffff\2\17\5\uffff\10\17\2\uffff\1\17\1\uffff\2\17\1\uffff"+
            "\5\17\3\uffff\11\17\13\uffff\127\17",
            "\1\17\2\uffff\1\15\1\uffff\1\15\1\uffff\3\17\3\15\1\uffff\1"+
            "\15\1\uffff\2\17\5\uffff\10\17\2\uffff\1\17\1\uffff\2\17\1\uffff"+
            "\5\17\3\uffff\11\17\13\uffff\127\17"
    };

    static final short[] DFA360_eot = DFA.unpackEncodedString(DFA360_eotS);
    static final short[] DFA360_eof = DFA.unpackEncodedString(DFA360_eofS);
    static final char[] DFA360_min = DFA.unpackEncodedStringToUnsignedChars(DFA360_minS);
    static final char[] DFA360_max = DFA.unpackEncodedStringToUnsignedChars(DFA360_maxS);
    static final short[] DFA360_accept = DFA.unpackEncodedString(DFA360_acceptS);
    static final short[] DFA360_special = DFA.unpackEncodedString(DFA360_specialS);
    static final short[][] DFA360_transition;

    static {
        int numStates = DFA360_transitionS.length;
        DFA360_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA360_transition[i] = DFA.unpackEncodedString(DFA360_transitionS[i]);
        }
    }

    class DFA360 extends DFA {

        public DFA360(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 360;
            this.eot = DFA360_eot;
            this.eof = DFA360_eof;
            this.min = DFA360_min;
            this.max = DFA360_max;
            this.accept = DFA360_accept;
            this.special = DFA360_special;
            this.transition = DFA360_transition;
        }
        public String getDescription() {
            return "()* loopback of 1725:5: ( externalResourceCharacter ( FULL_STOP ( FULL_STOP )? )? )*";
        }
    }
    static final String DFA370_eotS =
        "\72\uffff";
    static final String DFA370_eofS =
        "\5\6\10\uffff\4\6\1\uffff\4\6\5\uffff\1\6\13\uffff\5\6\5\uffff\1"+
        "\6\7\uffff\1\6";
    static final String DFA370_minS =
        "\5\74\1\121\2\uffff\1\102\1\121\3\102\4\74\1\121\4\74\2\121\3\102"+
        "\1\74\7\102\1\121\3\102\5\74\2\121\3\102\1\74\3\102\1\121\3\102"+
        "\1\74";
    static final String DFA370_maxS =
        "\5\u00d2\1\u00a4\2\uffff\2\u00d2\3\u00a4\4\u00d2\1\u00a4\4\u00d2"+
        "\5\u00a4\1\u00d2\3\u00a4\1\u00d2\7\u00a4\5\u00d2\5\u00a4\1\u00d2"+
        "\7\u00a4\1\u00d2";
    static final String DFA370_acceptS =
        "\6\uffff\1\2\1\1\62\uffff";
    static final String DFA370_specialS =
        "\72\uffff}>";
    static final String[] DFA370_transitionS = {
            "\1\7\1\6\1\uffff\2\6\1\7\1\6\1\uffff\3\6\1\uffff\1\6\10\7\1"+
            "\1\2\2\1\1\4\2\3\uffff\1\6\4\uffff\4\2\1\uffff\1\5\1\uffff\1"+
            "\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\6\1\uffff\2\6\1\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\1\2\2\1\1\4\2\3\uffff\1\6\4\uffff\4\2\1\11\1\5\1\uffff\1"+
            "\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\6\1\uffff\2\6\1\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\1\2\2\1\1\4\2\3\uffff\1\6\4\uffff\4\2\1\11\1\5\1\uffff\1"+
            "\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\6\1\uffff\2\6\1\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\1\2\2\1\1\4\2\3\uffff\1\6\4\uffff\4\2\1\11\1\5\1\uffff\1"+
            "\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\7\1\6\1\uffff\2\6\1\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\1\2\2\1\1\4\2\3\uffff\1\6\4\uffff\4\2\1\11\1\5\1\uffff\1"+
            "\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\1\12\2\13\1\12\4\13\10\uffff\4\13\3\uffff\1\13\1\12\2\13\3"+
            "\12\2\13\13\uffff\12\14\6\12\31\13",
            "",
            "",
            "\2\6\15\uffff\1\15\2\16\1\15\4\16\10\uffff\4\16\1\uffff\1\21"+
            "\1\uffff\1\16\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16"+
            "\56\17",
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\1\uffff\1\26\1\uffff\1\23"+
            "\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56\24",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\6\1\uffff\2\6\1\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\15\2\16\1\15\4\16\3\uffff\1\6\4\uffff\4\16\1\11\1\21\1\uffff"+
            "\1\16\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\1\uffff\2\6\1\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\15\2\16\1\15\4\16\3\uffff\1\6\4\uffff\4\16\1\11\1\21\1\uffff"+
            "\1\16\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\1\uffff\2\6\1\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\15\2\16\1\15\4\16\3\uffff\1\6\4\uffff\4\16\1\11\1\21\1\uffff"+
            "\1\16\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\1\uffff\2\6\1\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\15\2\16\1\15\4\16\3\uffff\1\6\4\uffff\4\16\1\11\1\21\1\uffff"+
            "\1\16\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\34\2\35\1\34\4\35\10\uffff\4\35\3\uffff\1\35\1\34\2\35\3"+
            "\34\2\35\13\uffff\12\36\6\34\31\35",
            "\1\7\1\6\1\uffff\2\6\1\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\22\2\23\1\22\4\23\3\uffff\1\6\4\uffff\4\23\1\uffff\1\26\1"+
            "\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56"+
            "\24",
            "\1\7\1\6\1\uffff\2\6\1\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\22\2\23\1\22\4\23\3\uffff\1\6\4\uffff\4\23\1\uffff\1\26\1"+
            "\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56"+
            "\24",
            "\1\7\1\6\1\uffff\2\6\1\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\22\2\23\1\22\4\23\3\uffff\1\6\4\uffff\4\23\1\uffff\1\26\1"+
            "\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56"+
            "\24",
            "\1\7\1\6\1\uffff\2\6\1\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\22\2\23\1\22\4\23\3\uffff\1\6\4\uffff\4\23\1\uffff\1\26\1"+
            "\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56"+
            "\24",
            "\1\40\2\41\1\40\4\41\10\uffff\4\41\3\uffff\1\41\1\40\2\41\3"+
            "\40\2\41\13\uffff\12\42\6\40\31\41",
            "\1\30\2\31\1\30\4\31\10\uffff\4\31\3\uffff\1\31\1\30\2\31\3"+
            "\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\2\27\15\uffff\1\30\2\31\1\30\4\31\10\uffff\4\31\2\uffff\1"+
            "\33\1\31\1\30\2\31\3\30\2\31\13\uffff\12\32\6\30\31\31",
            "\1\7\1\6\1\uffff\2\6\1\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\1\2\2\1\1\4\2\3\uffff\1\6\4\uffff\4\2\1\11\1\5\1\uffff\1"+
            "\2\1\1\2\2\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\6\15\uffff\1\50\2\51\1\50\4\51\10\uffff\4\51\1\uffff\1\54"+
            "\1\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51"+
            "\56\52",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\44\2\45\1\44\4\45\10\uffff\4\45\3\uffff\1\45\1\44\2\45\3"+
            "\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\2\43\15\uffff\1\44\2\45\1\44\4\45\10\uffff\4\45\2\uffff\1"+
            "\47\1\45\1\44\2\45\3\44\2\45\13\uffff\12\46\6\44\31\45",
            "\1\7\1\6\1\uffff\2\6\1\7\1\10\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\15\2\16\1\15\4\16\3\uffff\1\6\4\uffff\4\16\1\11\1\21\1\uffff"+
            "\1\16\1\15\2\16\3\15\2\16\13\uffff\12\20\6\15\31\16\56\17",
            "\1\7\1\6\1\uffff\2\6\1\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\50\2\51\1\50\4\51\3\uffff\1\6\4\uffff\4\51\1\uffff\1\54\1"+
            "\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56"+
            "\52",
            "\1\7\1\6\1\uffff\2\6\1\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\50\2\51\1\50\4\51\3\uffff\1\6\4\uffff\4\51\1\uffff\1\54\1"+
            "\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56"+
            "\52",
            "\1\7\1\6\1\uffff\2\6\1\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\50\2\51\1\50\4\51\3\uffff\1\6\4\uffff\4\51\1\uffff\1\54\1"+
            "\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56"+
            "\52",
            "\1\7\1\6\1\uffff\2\6\1\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\50\2\51\1\50\4\51\3\uffff\1\6\4\uffff\4\51\1\uffff\1\54\1"+
            "\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56"+
            "\52",
            "\1\62\2\63\1\62\4\63\10\uffff\4\63\3\uffff\1\63\1\62\2\63\3"+
            "\62\2\63\13\uffff\12\64\6\62\31\63",
            "\1\56\2\57\1\56\4\57\10\uffff\4\57\3\uffff\1\57\1\56\2\57\3"+
            "\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\2\55\15\uffff\1\56\2\57\1\56\4\57\10\uffff\4\57\2\uffff\1"+
            "\61\1\57\1\56\2\57\3\56\2\57\13\uffff\12\60\6\56\31\57",
            "\1\7\1\6\1\uffff\2\6\1\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\22\2\23\1\22\4\23\3\uffff\1\6\4\uffff\4\23\1\uffff\1\26\1"+
            "\uffff\1\23\1\22\2\23\3\22\2\23\13\uffff\12\25\6\22\31\23\56"+
            "\24",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\66\2\67\1\66\4\67\10\uffff\4\67\3\uffff\1\67\1\66\2\67\3"+
            "\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\2\65\15\uffff\1\66\2\67\1\66\4\67\10\uffff\4\67\2\uffff\1"+
            "\71\1\67\1\66\2\67\3\66\2\67\13\uffff\12\70\6\66\31\67",
            "\1\7\1\6\1\uffff\2\6\1\7\1\37\1\uffff\3\6\1\uffff\1\6\10\7"+
            "\1\50\2\51\1\50\4\51\3\uffff\1\6\4\uffff\4\51\1\uffff\1\54\1"+
            "\uffff\1\51\1\50\2\51\3\50\2\51\13\uffff\12\53\6\50\31\51\56"+
            "\52"
    };

    static final short[] DFA370_eot = DFA.unpackEncodedString(DFA370_eotS);
    static final short[] DFA370_eof = DFA.unpackEncodedString(DFA370_eofS);
    static final char[] DFA370_min = DFA.unpackEncodedStringToUnsignedChars(DFA370_minS);
    static final char[] DFA370_max = DFA.unpackEncodedStringToUnsignedChars(DFA370_maxS);
    static final short[] DFA370_accept = DFA.unpackEncodedString(DFA370_acceptS);
    static final short[] DFA370_special = DFA.unpackEncodedString(DFA370_specialS);
    static final short[][] DFA370_transition;

    static {
        int numStates = DFA370_transitionS.length;
        DFA370_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA370_transition[i] = DFA.unpackEncodedString(DFA370_transitionS[i]);
        }
    }

    class DFA370 extends DFA {

        public DFA370(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 370;
            this.eot = DFA370_eot;
            this.eof = DFA370_eof;
            this.min = DFA370_min;
            this.max = DFA370_max;
            this.accept = DFA370_accept;
            this.special = DFA370_special;
            this.transition = DFA370_transition;
        }
        public String getDescription() {
            return "()* loopback of 1787:8: ( (s+= word )? (s+= punctuationSign | s+= delimitedMonoblockNoSeparator | s+= softInlineLiteral | s+= hardInlineLiteral ) )*";
        }
    }
    static final String DFA373_eotS =
        "\36\uffff";
    static final String DFA373_eofS =
        "\1\uffff\4\10\7\uffff\4\10\5\uffff\1\10\7\uffff\1\10";
    static final String DFA373_minS =
        "\1\121\4\74\1\121\1\102\2\uffff\3\102\4\74\2\121\3\102\1\74\3\102"+
        "\1\121\3\102\1\74";
    static final String DFA373_maxS =
        "\5\u00d2\1\u00a4\1\u00d2\2\uffff\3\u00a4\4\u00d2\5\u00a4\1\u00d2"+
        "\7\u00a4\1\u00d2";
    static final String DFA373_acceptS =
        "\7\uffff\1\1\1\2\25\uffff";
    static final String DFA373_specialS =
        "\36\uffff}>";
    static final String[] DFA373_transitionS = {
            "\1\1\2\2\1\1\4\2\10\uffff\4\2\1\uffff\1\5\1\uffff\1\2\1\1\2"+
            "\2\3\1\2\2\13\uffff\12\4\6\1\31\2\56\3",
            "\6\10\1\6\1\uffff\3\10\1\uffff\11\10\1\1\2\2\1\1\4\2\3\uffff"+
            "\1\10\4\uffff\4\2\1\7\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff"+
            "\12\4\6\1\31\2\56\3",
            "\6\10\1\6\1\uffff\3\10\1\uffff\11\10\1\1\2\2\1\1\4\2\3\uffff"+
            "\1\10\4\uffff\4\2\1\7\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff"+
            "\12\4\6\1\31\2\56\3",
            "\6\10\1\6\1\uffff\3\10\1\uffff\11\10\1\1\2\2\1\1\4\2\3\uffff"+
            "\1\10\4\uffff\4\2\1\7\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff"+
            "\12\4\6\1\31\2\56\3",
            "\6\10\1\6\1\uffff\3\10\1\uffff\11\10\1\1\2\2\1\1\4\2\3\uffff"+
            "\1\10\4\uffff\4\2\1\7\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff"+
            "\12\4\6\1\31\2\56\3",
            "\1\11\2\12\1\11\4\12\10\uffff\4\12\3\uffff\1\12\1\11\2\12\3"+
            "\11\2\12\13\uffff\12\13\6\11\31\12",
            "\2\10\15\uffff\1\14\2\15\1\14\4\15\10\uffff\4\15\1\uffff\1"+
            "\20\1\uffff\1\15\1\14\2\15\3\14\2\15\13\uffff\12\17\6\14\31"+
            "\15\56\16",
            "",
            "",
            "\2\21\15\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23\2\uffff\1"+
            "\25\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\2\21\15\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23\2\uffff\1"+
            "\25\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\2\21\15\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23\2\uffff\1"+
            "\25\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\6\10\1\6\1\uffff\3\10\1\uffff\11\10\1\14\2\15\1\14\4\15\3"+
            "\uffff\1\10\4\uffff\4\15\1\7\1\20\1\uffff\1\15\1\14\2\15\3\14"+
            "\2\15\13\uffff\12\17\6\14\31\15\56\16",
            "\6\10\1\6\1\uffff\3\10\1\uffff\11\10\1\14\2\15\1\14\4\15\3"+
            "\uffff\1\10\4\uffff\4\15\1\7\1\20\1\uffff\1\15\1\14\2\15\3\14"+
            "\2\15\13\uffff\12\17\6\14\31\15\56\16",
            "\6\10\1\6\1\uffff\3\10\1\uffff\11\10\1\14\2\15\1\14\4\15\3"+
            "\uffff\1\10\4\uffff\4\15\1\7\1\20\1\uffff\1\15\1\14\2\15\3\14"+
            "\2\15\13\uffff\12\17\6\14\31\15\56\16",
            "\6\10\1\6\1\uffff\3\10\1\uffff\11\10\1\14\2\15\1\14\4\15\3"+
            "\uffff\1\10\4\uffff\4\15\1\7\1\20\1\uffff\1\15\1\14\2\15\3\14"+
            "\2\15\13\uffff\12\17\6\14\31\15\56\16",
            "\1\26\2\27\1\26\4\27\10\uffff\4\27\3\uffff\1\27\1\26\2\27\3"+
            "\26\2\27\13\uffff\12\30\6\26\31\27",
            "\1\22\2\23\1\22\4\23\10\uffff\4\23\3\uffff\1\23\1\22\2\23\3"+
            "\22\2\23\13\uffff\12\24\6\22\31\23",
            "\2\21\15\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23\2\uffff\1"+
            "\25\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\2\21\15\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23\2\uffff\1"+
            "\25\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\2\21\15\uffff\1\22\2\23\1\22\4\23\10\uffff\4\23\2\uffff\1"+
            "\25\1\23\1\22\2\23\3\22\2\23\13\uffff\12\24\6\22\31\23",
            "\6\10\1\6\1\uffff\3\10\1\uffff\11\10\1\1\2\2\1\1\4\2\3\uffff"+
            "\1\10\4\uffff\4\2\1\7\1\5\1\uffff\1\2\1\1\2\2\3\1\2\2\13\uffff"+
            "\12\4\6\1\31\2\56\3",
            "\2\31\15\uffff\1\32\2\33\1\32\4\33\10\uffff\4\33\2\uffff\1"+
            "\35\1\33\1\32\2\33\3\32\2\33\13\uffff\12\34\6\32\31\33",
            "\2\31\15\uffff\1\32\2\33\1\32\4\33\10\uffff\4\33\2\uffff\1"+
            "\35\1\33\1\32\2\33\3\32\2\33\13\uffff\12\34\6\32\31\33",
            "\2\31\15\uffff\1\32\2\33\1\32\4\33\10\uffff\4\33\2\uffff\1"+
            "\35\1\33\1\32\2\33\3\32\2\33\13\uffff\12\34\6\32\31\33",
            "\1\32\2\33\1\32\4\33\10\uffff\4\33\3\uffff\1\33\1\32\2\33\3"+
            "\32\2\33\13\uffff\12\34\6\32\31\33",
            "\2\31\15\uffff\1\32\2\33\1\32\4\33\10\uffff\4\33\2\uffff\1"+
            "\35\1\33\1\32\2\33\3\32\2\33\13\uffff\12\34\6\32\31\33",
            "\2\31\15\uffff\1\32\2\33\1\32\4\33\10\uffff\4\33\2\uffff\1"+
            "\35\1\33\1\32\2\33\3\32\2\33\13\uffff\12\34\6\32\31\33",
            "\2\31\15\uffff\1\32\2\33\1\32\4\33\10\uffff\4\33\2\uffff\1"+
            "\35\1\33\1\32\2\33\3\32\2\33\13\uffff\12\34\6\32\31\33",
            "\6\10\1\6\1\uffff\3\10\1\uffff\11\10\1\14\2\15\1\14\4\15\3"+
            "\uffff\1\10\4\uffff\4\15\1\7\1\20\1\uffff\1\15\1\14\2\15\3\14"+
            "\2\15\13\uffff\12\17\6\14\31\15\56\16"
    };

    static final short[] DFA373_eot = DFA.unpackEncodedString(DFA373_eotS);
    static final short[] DFA373_eof = DFA.unpackEncodedString(DFA373_eofS);
    static final char[] DFA373_min = DFA.unpackEncodedStringToUnsignedChars(DFA373_minS);
    static final char[] DFA373_max = DFA.unpackEncodedStringToUnsignedChars(DFA373_maxS);
    static final short[] DFA373_accept = DFA.unpackEncodedString(DFA373_acceptS);
    static final short[] DFA373_special = DFA.unpackEncodedString(DFA373_specialS);
    static final short[][] DFA373_transition;

    static {
        int numStates = DFA373_transitionS.length;
        DFA373_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA373_transition[i] = DFA.unpackEncodedString(DFA373_transitionS[i]);
        }
    }

    class DFA373 extends DFA {

        public DFA373(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 373;
            this.eot = DFA373_eot;
            this.eof = DFA373_eof;
            this.min = DFA373_min;
            this.max = DFA373_max;
            this.accept = DFA373_accept;
            this.special = DFA373_special;
            this.transition = DFA373_transition;
        }
        public String getDescription() {
            return "1800:1: word : ( (w1= rawWord ( CIRCUMFLEX_ACCENT w2= rawWord ) ) -> ^( WORD_ ^( WORD_AFTER_CIRCUMFLEX_ACCENT ) ) | (w= rawWord ) ->);";
        }
    }
    static final String DFA382_eotS =
        "\10\uffff";
    static final String DFA382_eofS =
        "\3\3\1\uffff\3\3\1\uffff";
    static final String DFA382_minS =
        "\1\104\1\105\1\104\1\uffff\1\105\1\104\1\105\1\uffff";
    static final String DFA382_maxS =
        "\3\105\1\uffff\1\105\2\160\1\uffff";
    static final String DFA382_acceptS =
        "\3\uffff\1\2\3\uffff\1\1";
    static final String DFA382_specialS =
        "\10\uffff}>";
    static final String[] DFA382_transitionS = {
            "\1\1\1\2",
            "\1\2",
            "\1\4\1\5",
            "",
            "\1\5",
            "\1\6\1\5\14\uffff\1\7\35\uffff\1\7",
            "\1\5\14\uffff\1\7\35\uffff\1\7",
            ""
    };

    static final short[] DFA382_eot = DFA.unpackEncodedString(DFA382_eotS);
    static final short[] DFA382_eof = DFA.unpackEncodedString(DFA382_eofS);
    static final char[] DFA382_min = DFA.unpackEncodedStringToUnsignedChars(DFA382_minS);
    static final char[] DFA382_max = DFA.unpackEncodedStringToUnsignedChars(DFA382_maxS);
    static final short[] DFA382_accept = DFA.unpackEncodedString(DFA382_acceptS);
    static final short[] DFA382_special = DFA.unpackEncodedString(DFA382_specialS);
    static final short[][] DFA382_transition;

    static {
        int numStates = DFA382_transitionS.length;
        DFA382_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA382_transition[i] = DFA.unpackEncodedString(DFA382_transitionS[i]);
        }
    }

    class DFA382 extends DFA {

        public DFA382(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 382;
            this.eot = DFA382_eot;
            this.eof = DFA382_eof;
            this.min = DFA382_min;
            this.max = DFA382_max;
            this.accept = DFA382_accept;
            this.special = DFA382_special;
            this.transition = DFA382_transition;
        }
        public String getDescription() {
            return "()* loopback of 1858:5: ( largebreak functionCall )*";
        }
    }
 

    public static final BitSet FOLLOW_mediumbreak_in_novella638 = new BitSet(new long[]{0x5C00000000000000L,0xF001FF5E19FFFEC7L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_largebreak_in_novella646 = new BitSet(new long[]{0x5C00000000000000L,0xF001FF5E19FFFEC7L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_levelIntroducer_in_novella666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_paragraph_in_novella680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_embeddableResource_in_novella695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_blockQuote_in_novella709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_literal_in_novella724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_bigDashedListItem_in_novella738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_cellRowSequence_in_novella752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_largebreak_in_novella770 = new BitSet(new long[]{0x5C00000000000000L,0xF001FF5E19FFFEC7L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_levelIntroducer_in_novella786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_paragraph_in_novella801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_embeddableResource_in_novella816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_blockQuote_in_novella830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_literal_in_novella845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_bigDashedListItem_in_novella859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_cellRowSequence_in_novella873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_novella896 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_largebreak_in_novella900 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_novella910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tags_in_levelIntroducer956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_levelIntroducer958 = new BitSet(new long[]{0x0C00000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_relativeIdentifier_in_levelIntroducer973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_absoluteIdentifier_in_levelIntroducer977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_levelIntroducer981 = new BitSet(new long[]{0x0C00000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_levelIntroducerIndent_in_levelIntroducer992 = new BitSet(new long[]{0x5400000000000002L,0xF001FF5E11FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_levelIntroducer1002 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_levelTitle_in_levelIntroducer1005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMERCIAL_AT_in_tag1065 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_symbolicName_in_tag1071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tag_in_tags1101 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_tags1105 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_tag_in_tags1107 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_REVERSE_SOLIDUS_in_compositeIdentifier1129 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_REVERSE_SOLIDUS_in_compositeIdentifier1133 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_identifierSegment_in_compositeIdentifier1135 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_REVERSE_SOLIDUS_in_relativeIdentifier1171 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_identifierSegment_in_relativeIdentifier1173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REVERSE_SOLIDUS_in_absoluteIdentifier1204 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_REVERSE_SOLIDUS_in_absoluteIdentifier1208 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_identifierSegment_in_absoluteIdentifier1210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_symbolicName_in_identifierSegment1242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_smallDashedListItem_in_levelTitle1295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_levelTitle1312 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_levelTitle1332 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_levelTitle1338 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_levelTitle1373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_levelTitle1380 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_url_in_levelTitle1406 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_smallDashedListItem_in_levelTitle1431 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_levelTitle1450 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_levelTitle1457 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_levelTitle1479 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_levelTitle1485 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_tags_in_paragraph1593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_paragraph1595 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_url_in_paragraph1629 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_smallDashedListItem_in_paragraph1652 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_paragraph1669 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_paragraph1689 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_paragraph1694 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_paragraph1729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_paragraph1736 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_url_in_paragraph1762 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_paragraph1790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_paragraph1797 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_paragraph1816 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_paragraph1823 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_paragraph1845 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_paragraph1850 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_parenthesizedSpreadblock_in_delimitedSpreadblock1936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_squarebracketsSpreadblock_in_delimitedSpreadblock1942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_doubleQuotedSpreadBlock_in_delimitedSpreadblock1948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_emphasizedSpreadBlock_in_delimitedSpreadblock1954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyphenPairSpreadBlock_in_delimitedSpreadblock1960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedMonoblock_in_delimitedMonoblock1973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_squarebracketsMonoblock_in_delimitedMonoblock1979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_doubleQuotedMonoblock_in_delimitedMonoblock1985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_emphasizedMonoblock_in_delimitedMonoblock1991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyphenPairMonoblock_in_delimitedMonoblock1997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedMonoblockNoSeparator_in_delimitedMonoblockNoSeparator2010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_emphasizedMonoblockNoSeparator_in_delimitedMonoblockNoSeparator2016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlock2033 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlock2048 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedSpreadblock_in_mixedDelimitedSpreadBlock2063 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlock2078 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlock2093 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlock2104 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlock2126 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedSpreadblock_in_mixedDelimitedSpreadBlock2139 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlock2152 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlock2165 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlock2184 = new BitSet(new long[]{0x5000000000000000L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlock2200 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedSpreadblock_in_mixedDelimitedSpreadBlock2215 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlock2230 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlock2245 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlock2287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blockAfterTilde_in_mixedDelimitedSpreadBlock2301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBody2375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_spreadBlockBody2377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBody2441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody2443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_spreadBlockBody2446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody2517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBody2520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_spreadBlockBody2522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody2590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBody2593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody2595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_spreadBlockBody2598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody2778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBody2781 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody2783 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody2786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody2809 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody2811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody2890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBody2893 = new BitSet(new long[]{0x5400000000000002L,0xF001FF5E11FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody2921 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody2924 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody2935 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody2937 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody2995 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody3006 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody3008 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody3061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBody3064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_spreadBlockBody3066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody3134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBody3137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody3139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_spreadBlockBody3142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody3322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBody3325 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody3327 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody3330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody3353 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody3355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody3434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBody3437 = new BitSet(new long[]{0x5400000000000002L,0xF001FF5E11FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody3465 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody3468 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBody3479 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_spreadBlockBody3481 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_mixedDelimitedMonoblock_in_monoblockBody3532 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_monoblockBody3540 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedMonoblock_in_monoblockBody3542 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_word_in_monoblockBodyNoSeparator3567 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_monoblockBodyNoSeparator3582 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoSeparator_in_monoblockBodyNoSeparator3597 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_monoblockBodyNoSeparator3612 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_monoblockBodyNoSeparator3627 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_monoblockBodyNoSeparator3638 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_monoblockBodyNoSeparator3668 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoSeparator_in_monoblockBodyNoSeparator3681 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_monoblockBodyNoSeparator3693 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_monoblockBodyNoSeparator3706 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_monoblockBodyNoSeparator3725 = new BitSet(new long[]{0x5000000000000000L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_monoblockBodyNoSeparator3741 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoSeparator_in_monoblockBodyNoSeparator3756 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_monoblockBodyNoSeparator3770 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_monoblockBodyNoSeparator3785 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_monoblockBodyNoSeparator3827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblock3863 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedMonoblock3878 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblock_in_mixedDelimitedMonoblock3893 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblock3908 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblock3923 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblock3934 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedMonoblock3964 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedSpreadblock_in_mixedDelimitedMonoblock3977 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblock3990 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblock4003 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblock4022 = new BitSet(new long[]{0x5000000000000000L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedMonoblock4038 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedSpreadblock_in_mixedDelimitedMonoblock4053 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblock4068 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblock4083 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblock4125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_embeddableResource_in_mixedDelimitedMonoblock4140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blockAfterTilde_in_mixedDelimitedMonoblock4146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_parenthesizedSpreadblock4202 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_parenthesizedSpreadblock4204 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_spreadBlockBody_in_parenthesizedSpreadblock4215 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_parenthesizedSpreadblock4226 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_parenthesizedSpreadblock4252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_parenthesizedMonoblock4313 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_parenthesizedMonoblock4315 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_monoblockBody_in_parenthesizedMonoblock4326 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_parenthesizedMonoblock4337 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_parenthesizedMonoblock4363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_parenthesizedMonoblockNoSeparator4424 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_monoblockBodyNoSeparator_in_parenthesizedMonoblockNoSeparator4426 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_parenthesizedMonoblockNoSeparator4442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_BRACKET_in_squarebracketsSpreadblock4509 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_squarebracketsSpreadblock4511 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_spreadBlockBody_in_squarebracketsSpreadblock4522 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_squarebracketsSpreadblock4533 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_BRACKET_in_squarebracketsSpreadblock4559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_BRACKET_in_squarebracketsMonoblock4620 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_squarebracketsMonoblock4622 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_monoblockBody_in_squarebracketsMonoblock4633 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_squarebracketsMonoblock4644 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_BRACKET_in_squarebracketsMonoblock4670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_QUOTE_in_doubleQuotedSpreadBlock4735 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_doubleQuotedSpreadBlock4737 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_spreadBlockBodyNoDoubleQuotes_in_doubleQuotedSpreadBlock4751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_whitespace_in_doubleQuotedSpreadBlock4761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_DOUBLE_QUOTE_in_doubleQuotedSpreadBlock4785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedSpreadblock_in_delimitedSpreadblockNoDoubleQuotes4831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_squarebracketsSpreadblock_in_delimitedSpreadblockNoDoubleQuotes4837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_emphasizedSpreadBlock_in_delimitedSpreadblockNoDoubleQuotes4843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyphenPairSpreadBlock_in_delimitedSpreadblockNoDoubleQuotes4849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes4906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_spreadBlockBodyNoDoubleQuotes4908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes4972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes4974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_spreadBlockBodyNoDoubleQuotes4977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_spreadBlockBodyNoDoubleQuotes5053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_spreadBlockBodyNoDoubleQuotes5129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5312 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5314 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5340 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5424 = new BitSet(new long[]{0x5400000000000002L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5452 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5455 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5466 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5468 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5526 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5537 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5539 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_spreadBlockBodyNoDoubleQuotes5597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_spreadBlockBodyNoDoubleQuotes5673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5856 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5858 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5884 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoDoubleQuotes5968 = new BitSet(new long[]{0x5400000000000002L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes5996 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes5999 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoDoubleQuotes6010 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_spreadBlockBodyNoDoubleQuotes6012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlockNoDoubleQuotes6064 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoDoubleQuotes6079 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedSpreadblockNoDoubleQuotes_in_mixedDelimitedSpreadBlockNoDoubleQuotes6094 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoDoubleQuotes6109 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoDoubleQuotes6124 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlockNoDoubleQuotes6135 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoDoubleQuotes6157 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedSpreadblockNoDoubleQuotes_in_mixedDelimitedSpreadBlockNoDoubleQuotes6170 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoDoubleQuotes6183 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoDoubleQuotes6196 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlockNoDoubleQuotes6215 = new BitSet(new long[]{0x5000000000000000L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoDoubleQuotes6231 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedSpreadblockNoDoubleQuotes_in_mixedDelimitedSpreadBlockNoDoubleQuotes6246 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoDoubleQuotes6261 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoDoubleQuotes6276 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlockNoDoubleQuotes6318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blockAfterTilde_in_mixedDelimitedSpreadBlockNoDoubleQuotes6332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_QUOTE_in_doubleQuotedMonoblock6365 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_doubleQuotedMonoblock6367 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_monoblockBodyNoDoubleQuotes_in_doubleQuotedMonoblock6381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_whitespace_in_doubleQuotedMonoblock6391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_DOUBLE_QUOTE_in_doubleQuotedMonoblock6415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedMonoblock_in_delimitedMonoblockNoDoubleQuotes6463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_squarebracketsMonoblock_in_delimitedMonoblockNoDoubleQuotes6469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_emphasizedMonoblock_in_delimitedMonoblockNoDoubleQuotes6475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixedDelimitedMonoblockNoDoubleQuotes_in_monoblockBodyNoDoubleQuotes6490 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_monoblockBodyNoDoubleQuotes6500 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedMonoblockNoDoubleQuotes_in_monoblockBodyNoDoubleQuotes6502 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_monoblockBodyNoDoubleQuotes6519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_monoblockBodyNoDoubleQuotes6522 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_monoblockBodyNoDoubleQuotes6524 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedMonoblockNoDoubleQuotes_in_monoblockBodyNoDoubleQuotes6534 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_monoblockBodyNoDoubleQuotes6544 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedMonoblockNoDoubleQuotes_in_monoblockBodyNoDoubleQuotes6555 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoDoubleQuotes6611 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoDoubleQuotes6626 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoDoubleQuotes_in_mixedDelimitedMonoblockNoDoubleQuotes6641 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoDoubleQuotes6656 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoDoubleQuotes6671 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoDoubleQuotes6682 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoDoubleQuotes6704 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoDoubleQuotes_in_mixedDelimitedMonoblockNoDoubleQuotes6717 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoDoubleQuotes6730 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoDoubleQuotes6743 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoDoubleQuotes6762 = new BitSet(new long[]{0x5000000000000000L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoDoubleQuotes6778 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoDoubleQuotes_in_mixedDelimitedMonoblockNoDoubleQuotes6793 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoDoubleQuotes6808 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoDoubleQuotes6823 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoDoubleQuotes6865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_emphasizedSpreadBlock6912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_emphasizedSpreadBlock6914 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_emphasizedSpreadBlock6916 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_spreadBlockBodyNoEmphasis_in_emphasizedSpreadBlock6930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_whitespace_in_emphasizedSpreadBlock6940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_emphasizedSpreadBlock6964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_emphasizedSpreadBlock6966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedSpreadblock_in_delimitedSpreadblockNoEmphasis7011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_squarebracketsSpreadblock_in_delimitedSpreadblockNoEmphasis7017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_doubleQuotedSpreadBlock_in_delimitedSpreadblockNoEmphasis7023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyphenPairSpreadBlock_in_delimitedSpreadblockNoEmphasis7029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_spreadBlockBodyNoEmphasis7091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_spreadBlockBodyNoEmphasis7160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_spreadBlockBodyNoEmphasis7236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_spreadBlockBodyNoEmphasis7312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7495 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7497 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis7500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7523 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis7525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7607 = new BitSet(new long[]{0x5400000000000002L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7635 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis7638 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7649 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis7651 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis7709 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7720 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis7722 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_spreadBlockBodyNoEmphasis7780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis7851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis7853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_spreadBlockBodyNoEmphasis7856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis8036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis8039 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis8041 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis8044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis8067 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis8069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis8148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoEmphasis8151 = new BitSet(new long[]{0x5400000000000002L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis8179 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis8182 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoEmphasis8193 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_spreadBlockBodyNoEmphasis8195 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlockNoEmphasis8250 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoEmphasis8265 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedSpreadblockNoEmphasis_in_mixedDelimitedSpreadBlockNoEmphasis8280 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoEmphasis8295 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoEmphasis8310 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlockNoEmphasis8321 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoEmphasis8343 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedSpreadblockNoEmphasis_in_mixedDelimitedSpreadBlockNoEmphasis8356 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoEmphasis8369 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoEmphasis8382 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlockNoEmphasis8401 = new BitSet(new long[]{0x5000000000000000L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoEmphasis8417 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedSpreadblockNoEmphasis_in_mixedDelimitedSpreadBlockNoEmphasis8432 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoEmphasis8447 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoEmphasis8462 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlockNoEmphasis8504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blockAfterTilde_in_mixedDelimitedSpreadBlockNoEmphasis8517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_mixedDelimitedSpreadBlockNoEmphasis8520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_emphasizedMonoblock8552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_emphasizedMonoblock8554 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_emphasizedMonoblock8556 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_monoblockBodyNoEmphasis_in_emphasizedMonoblock8570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_whitespace_in_emphasizedMonoblock8580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_emphasizedMonoblock8604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_emphasizedMonoblock8606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_emphasizedMonoblockNoSeparator8669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_emphasizedMonoblockNoSeparator8671 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_monoblockBodyNoEmphasisNoSeparator_in_emphasizedMonoblockNoSeparator8685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_emphasizedMonoblockNoSeparator8702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_emphasizedMonoblockNoSeparator8704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedMonoblock_in_delimitedMonoblockNoEmphasis8752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_squarebracketsMonoblock_in_delimitedMonoblockNoEmphasis8758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_doubleQuotedMonoblock_in_delimitedMonoblockNoEmphasis8764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyphenPairMonoblock_in_delimitedMonoblockNoEmphasis8770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedMonoblockNoSeparator_in_delimitedMonoblockNoEmphasisNoSeparator8783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixedDelimitedMonoblockNoEmphasis_in_monoblockBodyNoEmphasis8798 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_monoblockBodyNoEmphasis8808 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedMonoblockNoEmphasis_in_monoblockBodyNoEmphasis8810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_monoblockBodyNoEmphasis8827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_monoblockBodyNoEmphasis8830 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_monoblockBodyNoEmphasis8832 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedMonoblockNoEmphasis_in_monoblockBodyNoEmphasis8842 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_monoblockBodyNoEmphasis8852 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedMonoblockNoEmphasis_in_monoblockBodyNoEmphasis8863 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_mixedDelimitedMonoblockNoEmphasisNoSeparator_in_monoblockBodyNoEmphasisNoSeparator8914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasis8934 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoEmphasis8949 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoEmphasis_in_mixedDelimitedMonoblockNoEmphasis8964 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoEmphasis8979 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoEmphasis8994 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasis9005 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoEmphasis9027 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoEmphasis_in_mixedDelimitedMonoblockNoEmphasis9040 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoEmphasis9053 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoEmphasis9066 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasis9085 = new BitSet(new long[]{0x5000000000000000L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoEmphasis9101 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoEmphasis_in_mixedDelimitedMonoblockNoEmphasis9116 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoEmphasis9131 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoEmphasis9146 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasis9188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9212 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9227 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoEmphasisNoSeparator_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9242 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9258 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9273 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9284 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9306 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoEmphasisNoSeparator_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9319 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9331 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9344 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9363 = new BitSet(new long[]{0x5000000000000000L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9379 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoEmphasisNoSeparator_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9394 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9409 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9424 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoEmphasisNoSeparator9466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_hyphenPairSpreadBlock9505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_hyphenPairSpreadBlock9507 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_hyphenPairSpreadBlock9509 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_spreadBlockBodyNoHyphenPair_in_hyphenPairSpreadBlock9522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_hyphenPairSpreadBlock9530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_hyphenPairSpreadBlock9551 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_hyphenPairSpreadBlock9562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOW_LINE_in_hyphenPairSpreadBlock9585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedSpreadblock_in_delimitedSpreadblockNoHyphenPair9634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_squarebracketsSpreadblock_in_delimitedSpreadblockNoHyphenPair9640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_emphasizedSpreadBlock_in_delimitedSpreadblockNoHyphenPair9647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_doubleQuotedSpreadBlock_in_delimitedSpreadblockNoHyphenPair9653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair9709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_spreadBlockBodyNoHyphenPair9711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair9775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair9777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_spreadBlockBodyNoHyphenPair9780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair9851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair9854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_spreadBlockBodyNoHyphenPair9856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair9924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair9927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair9929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_spreadBlockBodyNoHyphenPair9932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair10115 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10117 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10143 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair10227 = new BitSet(new long[]{0x5400000000000002L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10255 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10258 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10269 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10271 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10329 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10340 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10342 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair10398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_spreadBlockBodyNoHyphenPair10400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair10471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_spreadBlockBodyNoHyphenPair10476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair10659 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10661 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10687 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_spreadBlockBodyNoHyphenPair10771 = new BitSet(new long[]{0x5400000000000002L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10799 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10802 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_spreadBlockBodyNoHyphenPair10813 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_spreadBlockBodyNoHyphenPair10815 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlockNoHyphenPair10867 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoHyphenPair10882 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedSpreadblockNoHyphenPair_in_mixedDelimitedSpreadBlockNoHyphenPair10897 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoHyphenPair10912 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoHyphenPair10927 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlockNoHyphenPair10938 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoHyphenPair10960 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedSpreadblockNoHyphenPair_in_mixedDelimitedSpreadBlockNoHyphenPair10973 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoHyphenPair10986 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoHyphenPair10999 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlockNoHyphenPair11018 = new BitSet(new long[]{0x5000000000000000L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedSpreadBlockNoHyphenPair11034 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedSpreadblockNoHyphenPair_in_mixedDelimitedSpreadBlockNoHyphenPair11049 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedSpreadBlockNoHyphenPair11064 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedSpreadBlockNoHyphenPair11079 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedSpreadBlockNoHyphenPair11121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blockAfterTilde_in_mixedDelimitedSpreadBlockNoHyphenPair11137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_hyphenPairMonoblock11169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_hyphenPairMonoblock11171 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_hyphenPairMonoblock11173 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_monoblockBodyNoHyphenPair_in_hyphenPairMonoblock11187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_hyphenPairMonoblock11196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_hyphenPairMonoblock11220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_hyphenPairMonoblock11222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedMonoblock_in_delimitedMonoblockNoHyphenPair11270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_squarebracketsMonoblock_in_delimitedMonoblockNoHyphenPair11276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_emphasizedMonoblock_in_delimitedMonoblockNoHyphenPair11282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_doubleQuotedMonoblock_in_delimitedMonoblockNoHyphenPair11288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixedDelimitedMonoblockNoHyphenPair_in_monoblockBodyNoHyphenPair11303 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_monoblockBodyNoHyphenPair11313 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedMonoblockNoHyphenPair_in_monoblockBodyNoHyphenPair11315 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_monoblockBodyNoHyphenPair11332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_monoblockBodyNoHyphenPair11335 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_monoblockBodyNoHyphenPair11337 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedMonoblockNoHyphenPair_in_monoblockBodyNoHyphenPair11347 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_monoblockBodyNoHyphenPair11357 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedMonoblockNoHyphenPair_in_monoblockBodyNoHyphenPair11368 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoHyphenPair11424 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoHyphenPair11439 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoHyphenPair_in_mixedDelimitedMonoblockNoHyphenPair11454 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoHyphenPair11469 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoHyphenPair11484 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoHyphenPair11495 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoHyphenPair11517 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoHyphenPair_in_mixedDelimitedMonoblockNoHyphenPair11530 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoHyphenPair11543 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoHyphenPair11556 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoHyphenPair11575 = new BitSet(new long[]{0x5000000000000000L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_mixedDelimitedMonoblockNoHyphenPair11591 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoHyphenPair_in_mixedDelimitedMonoblockNoHyphenPair11606 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_mixedDelimitedMonoblockNoHyphenPair11621 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_mixedDelimitedMonoblockNoHyphenPair11636 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_mixedDelimitedMonoblockNoHyphenPair11678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tags_in_bigDashedListItem11722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_bigDashedListItem11724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_bigDashedListItem11734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_bigDashedListItem11736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_bigDashedListItem11738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_bigDashedListItem11757 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_bigDashedListItem11763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_bigDashedListItem11780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_bigDashedListItem11787 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_url_in_bigDashedListItem11825 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_bigDashedListItem11855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_bigDashedListItem11862 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_bigDashedListItem11882 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_bigDashedListItem11889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_bigDashedListItem11912 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_bigDashedListItem11918 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_smallDashedListItem11992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_smallDashedListItem12011 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedMonoblock_in_smallDashedListItem12017 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_tags_in_cellRowSequence12066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_cellRowSequence12068 = new BitSet(new long[]{0x5C00000000000000L,0xF001FF5E19FFFEC7L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_cellRow_in_cellRowSequence12082 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_WHITESPACE_in_cellRowSequence12093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SOFTBREAK_in_cellRowSequence12096 = new BitSet(new long[]{0x5C00000000000000L,0xF001FF5E19FFFED7L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_WHITESPACE_in_cellRowSequence12098 = new BitSet(new long[]{0x5C00000000000000L,0xF001FF5E19FFFEC7L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_cellRow_in_cellRowSequence12107 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_VERTICAL_LINE_in_cellRow12139 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE57L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_cellRow12143 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE57L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_cell_in_cellRow12146 = new BitSet(new long[]{0x5400000000000002L,0xF001FF5E11FFFE57L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedMonoblock_in_cell12188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000050L});
    public static final BitSet FOLLOW_whitespace_in_cell12192 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedMonoblock_in_cell12194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000050L});
    public static final BitSet FOLLOW_whitespace_in_cell12199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_VERTICAL_LINE_in_cell12216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tags_in_blockQuote12284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_blockQuote12286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LESS_THAN_SIGN_in_blockQuote12297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LESS_THAN_SIGN_in_blockQuote12299 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFEB7L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mediumbreak_in_blockQuote12309 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE87L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_largebreak_in_blockQuote12313 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE87L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_paragraph_in_blockQuote12330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000130L});
    public static final BitSet FOLLOW_literal_in_blockQuote12338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000130L});
    public static final BitSet FOLLOW_largebreak_in_blockQuote12350 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE87L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_paragraph_in_blockQuote12358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000130L});
    public static final BitSet FOLLOW_literal_in_blockQuote12366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000130L});
    public static final BitSet FOLLOW_mediumbreak_in_blockQuote12381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_largebreak_in_blockQuote12385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_GREATER_THAN_SIGN_in_blockQuote12396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_GREATER_THAN_SIGN_in_blockQuote12398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tags_in_literal12448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_literal12450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LESS_THAN_SIGN_in_literal12459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LESS_THAN_SIGN_in_literal12461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LESS_THAN_SIGN_in_literal12463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_WHITESPACE_in_literal12470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SOFTBREAK_in_literal12473 = new BitSet(new long[]{0xFC00000000000000L,0xFFFFFF7FFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_literalLines_in_literal12483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SOFTBREAK_in_literal12489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_GREATER_THAN_SIGN_in_literal12491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_GREATER_THAN_SIGN_in_literal12493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_GREATER_THAN_SIGN_in_literal12495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literalLine_in_literalLines12533 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_SOFTBREAK_in_literalLines12547 = new BitSet(new long[]{0xFC00000000000000L,0xFFFFFF7FFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_literalLine_in_literalLines12561 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_anySymbolExceptGreaterthansign_in_literalLine12627 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_escapedCharacter_in_literalLine12650 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_WHITESPACE_in_literalLine12673 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_anySymbol_in_literalLine12708 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_escapedCharacter_in_literalLine12732 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_WHITESPACE_in_literalLine12756 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_GREATER_THAN_SIGN_in_literalLine12807 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_anySymbolExceptGreaterthansign_in_literalLine12837 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_escapedCharacter_in_literalLine12867 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_WHITESPACE_in_literalLine12897 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_anySymbol_in_literalLine12946 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_escapedCharacter_in_literalLine12976 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_WHITESPACE_in_literalLine13006 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_GREATER_THAN_SIGN_in_literalLine13066 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFEDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_anySymbolExceptGreaterthansign_in_literalLine13096 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_escapedCharacter_in_literalLine13126 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_WHITESPACE_in_literalLine13158 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_anySymbol_in_literalLine13209 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_escapedCharacter_in_literalLine13239 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_WHITESPACE_in_literalLine13269 = new BitSet(new long[]{0xFC00000000000002L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_GRAVE_ACCENT_in_softInlineLiteral13397 = new BitSet(new long[]{0xFC00000000000000L,0xFFFFFF7FFFFFFDDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_anySymbolExceptGraveAccent_in_softInlineLiteral13411 = new BitSet(new long[]{0xFC00000000000000L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_WHITESPACE_in_softInlineLiteral13427 = new BitSet(new long[]{0xFC00000000000000L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_escapedCharacter_in_softInlineLiteral13443 = new BitSet(new long[]{0xFC00000000000000L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_GRAVE_ACCENT_in_softInlineLiteral13459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAVE_ACCENT_in_hardInlineLiteral13488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_GRAVE_ACCENT_in_hardInlineLiteral13490 = new BitSet(new long[]{0xFC00000000000000L,0xFFFFFF7FFFFFFDDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_anySymbolExceptGraveAccent_in_hardInlineLiteral13504 = new BitSet(new long[]{0xFC00000000000000L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_WHITESPACE_in_hardInlineLiteral13520 = new BitSet(new long[]{0xFC00000000000000L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_escapedCharacter_in_hardInlineLiteral13536 = new BitSet(new long[]{0xFC00000000000000L,0xFFFFFF7FFFFFFFDFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_GRAVE_ACCENT_in_hardInlineLiteral13552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_GRAVE_ACCENT_in_hardInlineLiteral13554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anySymbolExceptGreaterthansign_in_anySymbol13584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_SIGN_in_anySymbol13590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anySymbolExceptGreaterthansignAndGraveAccent_in_anySymbolExceptGreaterthansign13607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAVE_ACCENT_in_anySymbolExceptGreaterthansign13613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anySymbolExceptGreaterthansignAndGraveAccent_in_anySymbolExceptGraveAccent13628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_SIGN_in_anySymbolExceptGraveAccent13634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_STOP_in_leadingPunctuationSign13661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FULL_STOP_in_leadingPunctuationSign13663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FULL_STOP_in_leadingPunctuationSign13665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_punctuationSign13682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_STOP_in_punctuationSign13717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FULL_STOP_in_punctuationSign13719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FULL_STOP_in_punctuationSign13721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_STOP_in_punctuationSign13763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_punctuationSign13784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXCLAMATION_MARK_in_punctuationSign13810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_punctuationSign13837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_punctuationSign13857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOSTROPHE_in_punctuationSign13878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_httpUrl_in_url13913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fileUrl_in_url13932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_F_in_fileUrl14000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_I_in_fileUrl14002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_L_in_fileUrl14004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_fileUrl14006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_fileUrl14013 = new BitSet(new long[]{0x3400000000000000L,0xF001FF1FFDFFFC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_SOLIDUS_in_fileUrl14015 = new BitSet(new long[]{0x3400000000000000L,0xF001FF1FFDFFFC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlFilePath_in_fileUrl14018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_H_in_httpUrl14158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_T_in_httpUrl14169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_T_in_httpUrl14180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_P_in_httpUrl14191 = new BitSet(new long[]{0x0000000000000000L,0x0000000001008000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_S_in_httpUrl14202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_httpUrl14213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_httpUrl14224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_httpUrl14235 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlHostPort_in_httpUrl14242 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_httpUrl14251 = new BitSet(new long[]{0x3400000000000000L,0xF001FF1FFDFFEC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_httpUrlPath_in_httpUrl14253 = new BitSet(new long[]{0x0000000000000002L,0x0000000002001000L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_httpUrl14264 = new BitSet(new long[]{0x3400000000000000L,0xF001FF1FEFFFEC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_httpUrlSearch_in_httpUrl14266 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_NUMBER_SIGN_in_httpUrl14285 = new BitSet(new long[]{0x3400000000000000L,0xF001FF1FEDFFEC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_httpUrlSearch_in_httpUrl14287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_urlIpSchemePart14306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_urlIpSchemePart14308 = new BitSet(new long[]{0x3400000000000000L,0xF001FF1FEDFFFC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlLogin_in_urlIpSchemePart14310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_urlIpSchemePart14314 = new BitSet(new long[]{0x3400000000000000L,0xF001FF1FEDFFFC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlPath_in_urlIpSchemePart14316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlUser_in_urlLogin14336 = new BitSet(new long[]{0x0400000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_urlLogin14340 = new BitSet(new long[]{0x3400000000000000L,0xF001FF1FEDFF7C0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlPassword_in_urlLogin14342 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_COMMERCIAL_AT_in_urlLogin14347 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlHostPort_in_urlLogin14352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlHost_in_urlHostPort14368 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_urlHostPort14374 = new BitSet(new long[]{0x0000000000000000L,0xF000000000000000L,0x000000000000003FL});
    public static final BitSet FOLLOW_urlPort_in_urlHostPort14376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlHostName_in_urlHost14396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlHostNumber_in_urlHost14402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlDomainLabel_in_urlHostName14419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FULL_STOP_in_urlHostName14421 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlTopLabel_in_urlHostName14426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlAlphaDigit_in_urlDomainLabel14441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlAlphaDigit_in_urlDomainLabel14450 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0004L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlAlphaDigit_in_urlDomainLabel14454 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0004L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_urlDomainLabel14458 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0004L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlAlphaDigit_in_urlDomainLabel14463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlAlpha_in_urlTopLabel14480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlAlpha_in_urlTopLabel14489 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0004L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlAlphaDigit_in_urlTopLabel14493 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0004L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_urlTopLabel14497 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0004L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlAlphaDigit_in_urlTopLabel14502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlDigits_in_urlHostNumber14519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FULL_STOP_in_urlHostNumber14521 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlDigits_in_urlHostNumber14523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FULL_STOP_in_urlHostNumber14525 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlDigits_in_urlHostNumber14527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FULL_STOP_in_urlHostNumber14529 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlDigits_in_urlHostNumber14531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_digit_in_urlPort14547 = new BitSet(new long[]{0x0000000000000002L,0xF000000000000000L,0x000000000000003FL});
    public static final BitSet FOLLOW_urlUChar_in_urlUser14568 = new BitSet(new long[]{0x3000000000000002L,0xF001FF1FEDFF7C0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_SEMICOLON_in_urlUser14580 = new BitSet(new long[]{0x3000000000000002L,0xF001FF1FEDFF7C0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_QUESTION_MARK_in_urlUser14590 = new BitSet(new long[]{0x3000000000000002L,0xF001FF1FEDFF7C0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_AMPERSAND_in_urlUser14600 = new BitSet(new long[]{0x3000000000000002L,0xF001FF1FEDFF7C0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_EQUALS_SIGN_in_urlUser14610 = new BitSet(new long[]{0x3000000000000002L,0xF001FF1FEDFF7C0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlUChar_in_urlPassword14634 = new BitSet(new long[]{0x3000000000000002L,0xF001FF1FEDFF7C0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_SEMICOLON_in_urlPassword14646 = new BitSet(new long[]{0x3000000000000002L,0xF001FF1FEDFF7C0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_QUESTION_MARK_in_urlPassword14656 = new BitSet(new long[]{0x3000000000000002L,0xF001FF1FEDFF7C0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_AMPERSAND_in_urlPassword14666 = new BitSet(new long[]{0x3000000000000002L,0xF001FF1FEDFF7C0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_EQUALS_SIGN_in_urlPassword14676 = new BitSet(new long[]{0x3000000000000002L,0xF001FF1FEDFF7C0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlXChar_in_urlPath14696 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FEDFFFC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlFileSegment_in_urlFilePath14712 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_urlFilePath14716 = new BitSet(new long[]{0x3400000000000000L,0xF001FF1FFDFFFC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlFileSegment_in_urlFilePath14718 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_urlUChar_in_urlFileSegment14740 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FFDFFFC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_QUESTION_MARK_in_urlFileSegment14755 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FFDFFFC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_COLON_in_urlFileSegment14765 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FFDFFFC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_SEMICOLON_in_urlFileSegment14775 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FFDFFFC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_COMMERCIAL_AT_in_urlFileSegment14785 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FFDFFFC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_AMPERSAND_in_urlFileSegment14795 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FFDFFFC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_EQUALS_SIGN_in_urlFileSegment14805 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FFDFFFC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_TILDE_in_urlFileSegment14815 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FFDFFFC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_httpUrlSegment_in_httpUrlPath14863 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_httpUrlPath14882 = new BitSet(new long[]{0x3400000000000000L,0xF001FF1FFDFFEC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_httpUrlPath_in_httpUrlPath14884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_urlUChar_in_httpUrlSegment14907 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FFDFFEC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_SEMICOLON_in_httpUrlSegment14917 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FFDFFEC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_COLON_in_httpUrlSegment14927 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FFDFFEC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_COMMERCIAL_AT_in_httpUrlSegment14937 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FFDFFEC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_AMPERSAND_in_httpUrlSegment14947 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FFDFFEC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_EQUALS_SIGN_in_httpUrlSegment14957 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FFDFFEC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_TILDE_in_httpUrlSegment14967 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FFDFFEC0CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_urlUChar_in_httpUrlSearch15005 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FEDFFEC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_SEMICOLON_in_httpUrlSearch15015 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FEDFFEC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_COLON_in_httpUrlSearch15025 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FEDFFEC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_COMMERCIAL_AT_in_httpUrlSearch15035 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FEDFFEC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_AMPERSAND_in_httpUrlSearch15045 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FEDFFEC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_EQUALS_SIGN_in_httpUrlSearch15055 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FEDFFEC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_SOLIDUS_in_httpUrlSearch15065 = new BitSet(new long[]{0x3400000000000002L,0xF001FF1FEDFFEC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_hexLetter_in_urlAlpha15102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonHexLetter_in_urlAlpha15109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hexLetter_in_urlAlphaDigit15124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonHexLetter_in_urlAlphaDigit15131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_digit_in_urlAlphaDigit15137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_digit_in_urlDigits15152 = new BitSet(new long[]{0x0000000000000002L,0xF000000000000000L,0x000000000000003FL});
    public static final BitSet FOLLOW_set_in_urlSafe0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_urlExtra0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_urlReserved0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_digit_in_urlHex15303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hexLetter_in_urlHex15307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_SIGN_in_urlEscape15322 = new BitSet(new long[]{0x0000000000000000L,0xF000720000120000L,0x0000000000000FFFL});
    public static final BitSet FOLLOW_urlHex_in_urlEscape15324 = new BitSet(new long[]{0x0000000000000000L,0xF000720000120000L,0x0000000000000FFFL});
    public static final BitSet FOLLOW_urlHex_in_urlEscape15326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hexLetter_in_urlUnreserved15341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonHexLetter_in_urlUnreserved15348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_digit_in_urlUnreserved15354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlSafe_in_urlUnreserved15361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlExtra_in_urlUnreserved15368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlUnreserved_in_urlUChar15383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlEscape_in_urlUChar15389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlUnreserved_in_urlXChar15404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlReserved_in_urlXChar15410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_urlEscape_in_urlXChar15416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externalResourcePath_in_embeddableResource15441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_rasterImageExtension_in_embeddableResource15455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vectorImageExtension_in_embeddableResource15513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_STOP_in_externalResourcePath15585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000402L});
    public static final BitSet FOLLOW_FULL_STOP_in_externalResourcePath15589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_externalResourcePath15593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FULL_STOP_in_externalResourcePath15595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FULL_STOP_in_externalResourcePath15597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_externalResourcePath15608 = new BitSet(new long[]{0x0400000000000000L,0xF001FF1F69FE080CL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_externalResourceSegment_in_externalResourcePath15614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_externalResourcePath15618 = new BitSet(new long[]{0x0400000000000000L,0xF001FF1F69FE080CL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_externalResourceSegment_in_externalResourcePath15620 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_externalResourceCharacter_in_externalResourceSegment15642 = new BitSet(new long[]{0x0400000000000000L,0xF001FF1F69FE0C0CL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_FULL_STOP_in_externalResourceSegment15654 = new BitSet(new long[]{0x0400000000000000L,0xF001FF1F69FE0C0CL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_FULL_STOP_in_externalResourceSegment15656 = new BitSet(new long[]{0x0400000000000000L,0xF001FF1F69FE080CL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_externalResourceCharacter_in_externalResourceSegment15673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_letter_in_externalResourceCharacter15704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_digit_in_externalResourceCharacter15710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_externalResourceCharacter15716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_SIGN_in_externalResourceCharacter15722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_SIGN_in_externalResourceCharacter15728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_SIGN_in_externalResourceCharacter15734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_externalResourceCharacter15740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMERCIAL_AT_in_externalResourceCharacter15746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOW_LINE_in_externalResourceCharacter15752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_SIGN_in_externalResourceCharacter15758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_STOP_in_rasterImageExtension15771 = new BitSet(new long[]{0x0000000000000000L,0x0000000C00800000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_P_in_rasterImageExtension15786 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_N_in_rasterImageExtension15788 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_G_in_rasterImageExtension15790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_J_in_rasterImageExtension15804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_P_in_rasterImageExtension15806 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_G_in_rasterImageExtension15808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_G_in_rasterImageExtension15822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_I_in_rasterImageExtension15824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_F_in_rasterImageExtension15826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_STOP_in_vectorImageExtension15856 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_S_in_vectorImageExtension15871 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_V_in_vectorImageExtension15873 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_G_in_vectorImageExtension15875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_blockAfterTilde15919 = new BitSet(new long[]{0x5000000000000000L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_subblockAfterTilde_in_blockAfterTilde15932 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_word_in_subblockAfterTilde15982 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_subblockAfterTilde16002 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoSeparator_in_subblockAfterTilde16022 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_subblockAfterTilde16041 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_subblockAfterTilde16061 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_subblockAfterTilde16077 = new BitSet(new long[]{0x5000000000000002L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_subblockAfterTilde16113 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoSeparator_in_subblockAfterTilde16131 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_subblockAfterTilde16148 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_subblockAfterTilde16166 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_subblockAfterTilde16191 = new BitSet(new long[]{0x5000000000000000L,0x000000000001FE07L});
    public static final BitSet FOLLOW_punctuationSign_in_subblockAfterTilde16212 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_delimitedMonoblockNoSeparator_in_subblockAfterTilde16232 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_softInlineLiteral_in_subblockAfterTilde16251 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hardInlineLiteral_in_subblockAfterTilde16271 = new BitSet(new long[]{0x5000000000000002L,0xF001FF5E01FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_word_in_subblockAfterTilde16320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rawWord_in_word16368 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_CIRCUMFLEX_ACCENT_in_word16372 = new BitSet(new long[]{0x0000000000000000L,0xF001FF5E01FE0000L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_rawWord_in_word16378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rawWord_in_word16440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hexLetter_in_symbolicName16470 = new BitSet(new long[]{0x0000000000000002L,0xF001FF1E01FE000CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_nonHexLetter_in_symbolicName16474 = new BitSet(new long[]{0x0000000000000002L,0xF001FF1E01FE000CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_digit_in_symbolicName16478 = new BitSet(new long[]{0x0000000000000002L,0xF001FF1E01FE000CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_symbolicName16488 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_hexLetter_in_symbolicName16501 = new BitSet(new long[]{0x0000000000000002L,0xF001FF1E01FE000CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_nonHexLetter_in_symbolicName16505 = new BitSet(new long[]{0x0000000000000002L,0xF001FF1E01FE000CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_digit_in_symbolicName16509 = new BitSet(new long[]{0x0000000000000002L,0xF001FF1E01FE000CL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_hexLetter_in_rawWord16546 = new BitSet(new long[]{0x0000000000000002L,0xF001FF5E01FE0004L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_nonHexLetter_in_rawWord16562 = new BitSet(new long[]{0x0000000000000002L,0xF001FF5E01FE0004L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_letterWithDiacritics_in_rawWord16577 = new BitSet(new long[]{0x0000000000000002L,0xF001FF5E01FE0004L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_digit_in_rawWord16593 = new BitSet(new long[]{0x0000000000000002L,0xF001FF5E01FE0004L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_escapedCharacter_in_rawWord16609 = new BitSet(new long[]{0x0000000000000002L,0xF001FF5E01FE0004L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_rawWord16631 = new BitSet(new long[]{0x0000000000000000L,0xF001FF5E01FE0000L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hexLetter_in_rawWord16648 = new BitSet(new long[]{0x0000000000000002L,0xF001FF5E01FE0004L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_nonHexLetter_in_rawWord16665 = new BitSet(new long[]{0x0000000000000002L,0xF001FF5E01FE0004L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_letterWithDiacritics_in_rawWord16682 = new BitSet(new long[]{0x0000000000000002L,0xF001FF5E01FE0004L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_digit_in_rawWord16699 = new BitSet(new long[]{0x0000000000000002L,0xF001FF5E01FE0004L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_escapedCharacter_in_rawWord16716 = new BitSet(new long[]{0x0000000000000002L,0xF001FF5E01FE0004L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK_in_escapedCharacter16762 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_symbolicName_in_escapedCharacter16769 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK_in_escapedCharacter16776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediumbreak_in_composium16806 = new BitSet(new long[]{0x0000000000000000L,0x0001000000040000L});
    public static final BitSet FOLLOW_largebreak_in_composium16810 = new BitSet(new long[]{0x0000000000000000L,0x0001000000040000L});
    public static final BitSet FOLLOW_functionCall_in_composium16819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_largebreak_in_composium16827 = new BitSet(new long[]{0x0000000000000000L,0x0001000000040000L});
    public static final BitSet FOLLOW_functionCall_in_composium16829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_composium16846 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_largebreak_in_composium16850 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_composium16859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCallInsert_in_functionCall16891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCallMapstylesheet_in_functionCall16898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordInsert_in_functionCallInsert16925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_functionCallInsert16933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_functionCallInsert16939 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_functionCallInsert16950 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_keywordRecurse_in_functionCallInsert16956 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_functionCallInsert16969 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_keywordSort_in_functionCallInsert16975 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_functionCallInsert16988 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_keywordCreateLevel_in_functionCallInsert16994 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_functionCallInsert16998 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_keywordNoHead_in_functionCallInsert17004 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_functionCallInsert17017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_parameterLevelAbove_in_functionCallInsert17023 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_functionCallInsert17036 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_parameterInsertStyle_in_functionCallInsert17042 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_functionCallInsert17064 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_compositeIdentifier_in_functionCallInsert17070 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_I_in_keywordInsert17118 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_N_in_keywordInsert17120 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_S_in_keywordInsert17122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_keywordInsert17129 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_R_in_keywordInsert17131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_T_in_keywordInsert17133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_R_in_keywordRecurse17152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_keywordRecurse17154 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_C_in_keywordRecurse17156 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_U_in_keywordRecurse17165 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_R_in_keywordRecurse17167 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_S_in_keywordRecurse17169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_keywordRecurse17171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_S_in_keywordSort17211 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_O_in_keywordSort17213 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_R_in_keywordSort17215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_T_in_keywordSort17217 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_EQUALS_SIGN_in_keywordSort17226 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_sortOrder_in_keywordSort17232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_letter_in_sortOrder17276 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E41FE0004L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_digit_in_sortOrder17280 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E41FE0004L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_set_in_sortOrder17285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_C_in_keywordCreateLevel17311 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_R_in_keywordCreateLevel17313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_keywordCreateLevel17315 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_A_in_keywordCreateLevel17324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_T_in_keywordCreateLevel17326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_keywordCreateLevel17328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_L_in_keywordCreateLevel17330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_keywordCreateLevel17339 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_V_in_keywordCreateLevel17341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_keywordCreateLevel17343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_L_in_keywordCreateLevel17345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_N_in_keywordNoHead17381 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_O_in_keywordNoHead17383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_H_in_keywordNoHead17385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_keywordNoHead17393 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_A_in_keywordNoHead17395 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_D_in_keywordNoHead17397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_L_in_parameterLevelAbove17430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_parameterLevelAbove17432 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_V_in_parameterLevelAbove17434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_parameterLevelAbove17436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_L_in_parameterLevelAbove17445 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_A_in_parameterLevelAbove17447 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_B_in_parameterLevelAbove17449 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_O_in_parameterLevelAbove17451 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_V_in_parameterLevelAbove17460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_parameterLevelAbove17462 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_EQUALS_SIGN_in_parameterLevelAbove17464 = new BitSet(new long[]{0x0000000000000000L,0xF000000000000000L,0x000000000000003FL});
    public static final BitSet FOLLOW_digit_in_parameterLevelAbove17470 = new BitSet(new long[]{0x0000000000000002L,0xF000000000000000L,0x000000000000003FL});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_S_in_parameterInsertStyle17519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_T_in_parameterInsertStyle17521 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_Y_in_parameterInsertStyle17523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_L_in_parameterInsertStyle17532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_parameterInsertStyle17534 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_EQUALS_SIGN_in_parameterInsertStyle17536 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_rawExtendedWord_in_parameterInsertStyle17548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordMapstylesheet_in_functionCallMapstylesheet17583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_mediumbreak_in_functionCallMapstylesheet17587 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_assignmentArgument_in_functionCallMapstylesheet17589 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_M_in_keywordMapstylesheet17624 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_A_in_keywordMapstylesheet17627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_P_in_keywordMapstylesheet17629 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_S_in_keywordMapstylesheet17635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_T_in_keywordMapstylesheet17637 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_Y_in_keywordMapstylesheet17639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_L_in_keywordMapstylesheet17646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_keywordMapstylesheet17648 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_S_in_keywordMapstylesheet17650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_H_in_keywordMapstylesheet17656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_keywordMapstylesheet17658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_E_in_keywordMapstylesheet17660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LATIN_SMALL_LETTER_T_in_keywordMapstylesheet17666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rawExtendedWord_in_assignmentArgument17693 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_EQUALS_SIGN_in_assignmentArgument17695 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_rawExtendedWord_in_assignmentArgument17701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rawExtendedWord_in_extendedWord17783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hexLetter_in_rawExtendedWord17828 = new BitSet(new long[]{0x0000000000000002L,0xF001FF1E01FE0406L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_nonHexLetter_in_rawExtendedWord17844 = new BitSet(new long[]{0x0000000000000002L,0xF001FF1E01FE0406L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_digit_in_rawExtendedWord17860 = new BitSet(new long[]{0x0000000000000002L,0xF001FF1E01FE0406L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_rawExtendedWord17885 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_SOLIDUS_in_rawExtendedWord17903 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_FULL_STOP_in_rawExtendedWord17921 = new BitSet(new long[]{0x0000000000000000L,0xF001FF1E01FE0000L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_hexLetter_in_rawExtendedWord17946 = new BitSet(new long[]{0x0000000000000002L,0xF001FF1E01FE0406L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_nonHexLetter_in_rawExtendedWord17963 = new BitSet(new long[]{0x0000000000000002L,0xF001FF1E01FE0406L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_digit_in_rawExtendedWord17980 = new BitSet(new long[]{0x0000000000000002L,0xF001FF1E01FE0406L,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_SOFTBREAK_in_softbreak18026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHITESPACE_in_whitespace18047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_SIGN_in_levelIntroducerIndent18067 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_EQUALS_SIGN_in_levelIntroducerIndent18069 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_whitespace_in_mediumbreak18094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_mediumbreak18106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_mediumbreak18109 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_whitespace_in_mediumbreak18111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_largebreak18142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_largebreak18145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_largebreak18151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_largebreak18154 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_largebreak18159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_digit_in_anySymbolExceptGreaterthansignAndGraveAccent18181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hexLetter_in_anySymbolExceptGreaterthansignAndGraveAccent18191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonHexLetter_in_anySymbolExceptGreaterthansignAndGraveAccent18201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_letterWithDiacritics_in_anySymbolExceptGreaterthansignAndGraveAccent18212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMPERSAND_in_anySymbolExceptGreaterthansignAndGraveAccent18222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOSTROPHE_in_anySymbolExceptGreaterthansignAndGraveAccent18233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_anySymbolExceptGreaterthansignAndGraveAccent18246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CIRCUMFLEX_ACCENT_in_anySymbolExceptGreaterthansignAndGraveAccent18256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_anySymbolExceptGreaterthansignAndGraveAccent18266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COPYRIGHT_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_anySymbolExceptGreaterthansignAndGraveAccent18286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMERCIAL_AT_in_anySymbolExceptGreaterthansignAndGraveAccent18297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEGREE_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_QUOTE_in_anySymbolExceptGreaterthansignAndGraveAccent18327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EURO_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXCLAMATION_MARK_in_anySymbolExceptGreaterthansignAndGraveAccent18358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_STOP_in_anySymbolExceptGreaterthansignAndGraveAccent18368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HYPHEN_MINUS_in_anySymbolExceptGreaterthansignAndGraveAccent18380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_BRACKET_in_anySymbolExceptGreaterthansignAndGraveAccent18390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PARENTHESIS_in_anySymbolExceptGreaterthansignAndGraveAccent18400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SINGLE_QUOTATION_MARK_in_anySymbolExceptGreaterthansignAndGraveAccent18410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_BRACKET_in_anySymbolExceptGreaterthansignAndGraveAccent18420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOW_LINE_in_anySymbolExceptGreaterthansignAndGraveAccent18440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULTIPLICATION_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_anySymbolExceptGreaterthansignAndGraveAccent18500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGISTERED_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REVERSE_SOLIDUS_in_anySymbolExceptGreaterthansignAndGraveAccent18520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_CURLY_BRACKET_in_anySymbolExceptGreaterthansignAndGraveAccent18530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_PARENTHESIS_in_anySymbolExceptGreaterthansignAndGraveAccent18540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_SINGLE_QUOTATION_MARK_in_anySymbolExceptGreaterthansignAndGraveAccent18550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_BRACKET_in_anySymbolExceptGreaterthansignAndGraveAccent18560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SECTION_SIGN_in_anySymbolExceptGreaterthansignAndGraveAccent18570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_anySymbolExceptGreaterthansignAndGraveAccent18580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_anySymbolExceptGreaterthansignAndGraveAccent18590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_anySymbolExceptGreaterthansignAndGraveAccent18600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VERTICAL_LINE_in_anySymbolExceptGreaterthansignAndGraveAccent18612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_letter_in_letters18624 = new BitSet(new long[]{0x0000000000000002L,0x0001FF1E01FE0000L,0xFFFFFFFFFFFFFFC0L,0x000000000007FFFFL});
    public static final BitSet FOLLOW_hexLetter_in_letter18634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonHexLetter_in_letter18638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_letterWithDiacritics_in_letter18642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hexLetter_in_asciiLetter18651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonHexLetter_in_asciiLetter18655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_digit0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_hexLetter0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_nonHexLetter0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_letterWithDiacritics0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_url_in_synpred1_Novelang1396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred2_Novelang1421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_url_in_synpred3_Novelang1619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred4_Novelang1642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_url_in_synpred5_Novelang1752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred6_Novelang1777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred6_Novelang1780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_softbreak_in_synpred7_Novelang2365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_synpred7_Novelang2367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_softbreak_in_synpred8_Novelang2409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_synpred8_Novelang2411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred8_Novelang2414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred9_Novelang2504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred9_Novelang2507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_synpred9_Novelang2509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred10_Novelang2558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred10_Novelang2561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_synpred10_Novelang2563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred10_Novelang2566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred11_Novelang2665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred11_Novelang2668 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_synpred11_Novelang2670 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_synpred11_Novelang2673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred11_Novelang2694 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_synpred11_Novelang2696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred11_Novelang2718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred11_Novelang2721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred12_Novelang3048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred12_Novelang3051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_synpred12_Novelang3053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred13_Novelang3102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred13_Novelang3105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_synpred13_Novelang3107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred13_Novelang3110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred14_Novelang3209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred14_Novelang3212 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE17L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_synpred14_Novelang3214 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_synpred14_Novelang3217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred14_Novelang3238 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE07L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlock_in_synpred14_Novelang3240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred14_Novelang3262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred14_Novelang3265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_softbreak_in_synpred15_Novelang4896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_synpred15_Novelang4898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_softbreak_in_synpred16_Novelang4940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_synpred16_Novelang4942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred16_Novelang4945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred17_Novelang5035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred17_Novelang5038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_synpred17_Novelang5040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred18_Novelang5089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred18_Novelang5092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_synpred18_Novelang5094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred18_Novelang5097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred19_Novelang5196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred19_Novelang5199 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_synpred19_Novelang5201 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_synpred19_Novelang5204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred19_Novelang5225 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_synpred19_Novelang5227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred19_Novelang5249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred19_Novelang5252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred20_Novelang5579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred20_Novelang5582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_synpred20_Novelang5584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred21_Novelang5633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred21_Novelang5636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_synpred21_Novelang5638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred21_Novelang5641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred22_Novelang5740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred22_Novelang5743 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_synpred22_Novelang5745 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_synpred22_Novelang5748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred22_Novelang5769 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoDoubleQuotes_in_synpred22_Novelang5771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred22_Novelang5793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred22_Novelang5796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_softbreak_in_synpred23_Novelang7079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_synpred23_Novelang7081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_softbreak_in_synpred24_Novelang7123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_synpred24_Novelang7125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred24_Novelang7128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred25_Novelang7218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred25_Novelang7221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_synpred25_Novelang7223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred26_Novelang7272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred26_Novelang7275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_synpred26_Novelang7277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred26_Novelang7280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred27_Novelang7379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred27_Novelang7382 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_synpred27_Novelang7384 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_synpred27_Novelang7387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred27_Novelang7408 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_synpred27_Novelang7410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred27_Novelang7432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred27_Novelang7435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred28_Novelang7762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred28_Novelang7765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_synpred28_Novelang7767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred29_Novelang7816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred29_Novelang7819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_synpred29_Novelang7821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred29_Novelang7824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred30_Novelang7923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred30_Novelang7926 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_synpred30_Novelang7928 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_synpred30_Novelang7931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred30_Novelang7952 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoEmphasis_in_synpred30_Novelang7954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred30_Novelang7976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred30_Novelang7979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_softbreak_in_synpred31_Novelang9699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_synpred31_Novelang9701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_softbreak_in_synpred32_Novelang9743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_synpred32_Novelang9745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred32_Novelang9748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred33_Novelang9838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred33_Novelang9841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_synpred33_Novelang9843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred34_Novelang9892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred34_Novelang9895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_synpred34_Novelang9897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred34_Novelang9900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred35_Novelang9999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred35_Novelang10002 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_synpred35_Novelang10004 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_synpred35_Novelang10007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred35_Novelang10028 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_synpred35_Novelang10030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred35_Novelang10052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred35_Novelang10055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred36_Novelang10382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred36_Novelang10385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_url_in_synpred36_Novelang10387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred37_Novelang10436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred37_Novelang10439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_whitespace_in_synpred37_Novelang10441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred37_Novelang10444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred38_Novelang10543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred38_Novelang10546 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_whitespace_in_synpred38_Novelang10548 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_synpred38_Novelang10551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred38_Novelang10572 = new BitSet(new long[]{0x5400000000000000L,0xF001FF5E11FFFE37L,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
    public static final BitSet FOLLOW_mixedDelimitedSpreadBlockNoHyphenPair_in_synpred38_Novelang10574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_whitespace_in_synpred38_Novelang10596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_softbreak_in_synpred38_Novelang10599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_url_in_synpred39_Novelang11815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whitespace_in_synpred40_Novelang11842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_smallDashedListItem_in_synpred40_Novelang11845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_STOP_in_synpred41_Novelang13707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FULL_STOP_in_synpred41_Novelang13709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FULL_STOP_in_synpred41_Novelang13711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOLIDUS_in_synpred43_Novelang14874 = new BitSet(new long[]{0x3400000000000000L,0xF001FF1FFDFFEC0EL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_httpUrlPath_in_synpred43_Novelang14876 = new BitSet(new long[]{0x0000000000000002L});

}