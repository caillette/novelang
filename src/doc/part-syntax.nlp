
== General syntax for Parts

Part files focus on a textual content. Part files have the ``.nlp`` suffix. 
They support multiple syntactic features. 
A great example of Novelang syntax is the source of this page. You can find it on:
http://github.com/caillette/novelang/raw/master/src/doc/part-syntax.nlp
This document explains the effect of syntactic features supported inside Part files.
 


=== Paragraphs

The central notion of Novelang's Part grammar is the paragraph.
A paragraph is a sequence of textual items kept together because there is 
// no more than one line break at a time//. 
So a paragraph cannot contain two consecutive line breaks, 
or it would be split in two paragraphs.

Paragraphs mainly contain words, punctuation signs, blocks, list items and URL.


=== Blocks

A block is a subset of a paragraph (for things like text in parenthesis). Blocks may contain blocks.
Because blocks occur only inside paragraphs, they cannot contain two consecutive line breaks.
 

=== Literal

Literal is text with uninterpreted characters. 

Novelang supports several kinds of literal, whether it is inside a paragraph or outside.


=== Levels

A level is a hierarchical container, that carries meaning about text structure.
Levels represent things like chapters and sections.


== Detailed syntax for Parts


=== Regular paragraph

XML element: ``n:regular-paragraph``

A regular paragraph is made of contiguous lines of text 
(two consecutive line breaks cannot occur inside a paragraph).
A paragraph may contain words, punctuation signs, URL, list items and blocks.

With Novelang default stylesheet, such text is rendered as normal text: 

<<<
First
paragraph.

Second paragraph.
>>>


=== Levels

XML element: ``n:level``

Levels are delimited with a simple syntax, using a separator ``=`` telling about the depth 
of the level.
A Part contains up to three levels, including level 0 which is the default.

Considering a Part like this:

<<<
Text at depth 0.

== Depth 1

Introductory text.

=== Depth 2

Blah blah blah...

=== Depth 2

Blah.

== Depth 1 again

=== Depth 2

...
>>>

The level structure of the Part looks like this:

<<<
n:part
 +-- n:paragraph-regular "Text at depth 0"
 +-- n:level
 | +-- n:title-description "Depth 1"
 | +-- n:paragraph-regular "Introductory text."
 | +-- n:level
 | |    +-- n:level-description "Depth 2"
 | |    +-- n:paragraph-regular "Blah blah blah..."
 | +-- n:level
 |      +-- n:title-description "Depth 2"
 |      +-- n:paragraph-regular "Blah."
 +-- n:level
      +-- n:level-description "Depth 1 again"
      +-- n:title-description "Depth 2"
           +-- n:paragraph-regular "..."
>>>

As explained later in this document, the depth of levels may be changed (increased) at Book level. 
This is useful for creating documents which have great depth, while keeping edited content with
at reasonable depth. 



=== Block inside pairs of solidus

XML element: ``n:block-inside-solidus-pairs``

Two pairs of solidus ``//`` may enclose a block of text.

With Novelang default stylesheet, such text is rendered as italics: 

<<< 
There are //italics//.
>>>


=== Block inside double quotes

XML element: ``n:block-inside-double-quotes``

Two double quotes ``"`` may enclose a block of text.

With Novelang default stylesheet, such text is rendered inside double quotes. 
The character may vary depending on the language.

<<<
There are "double quotes".
>>>


=== Block inside square brackets

XML element: ``n:block-inside-square-brackets``

Two pairs of square brackets ``[`` and ``]`` may enclose a block of text.

With Novelang default stylesheet, such text is rendered inside square brackets. 

<<<
There are [square brackets].
>>>


=== Block inside parenthesis

XML element: ``n:block-inside-parenthesis``

Two pairs of square brackets ``(`` and ``)`` may enclose a block of text.

With Novelang default stylesheet, such text is rendered inside parenthesis. 

<<<
There are (parenthesis).
>>>


=== Block inside double hyphen

XML element: ``n:block-inside-hyphen-pairs``, ``n:block-inside-two-hyphens-then-hyphen-low-line``

Two pairs of hyphen minus ``--`` may enclose a block of text.


There is an alternative where the ending delimiter is an hyphen then a low line ``_``.

With Novelang default stylesheet, such text is rendered inside a pair of en dash characters 
(or em dash depending on language). This creates an interpolated clause.
With the ending low line, there is no visible ending. 

<<<
See -- interpolated clause -- here.
See -- no visible end -_.
>>>


=== Block of literal inside grave accents 

XML element: ``n:block-of-literal-inside-grave-accents``

Two grave accents ``«grave-accent»`` may enclose a block of text containing characters 
which are not allowed otherwise (because they serve other Novelang grammar's purpose).

With Novelang default stylesheet, such text is rendered as normal text.

<<<
Almost `4ny- ch@rac7er 0.0.0 "'&#^> / *`
>>>


=== Block of literal inside two pairs of grave accents 

XML element: ``n:block-of-literal-inside-grave-accent-pairs``

Two pairs of grave accents ``«grave-accent»«grave-accent»`` may enclose a block of text 
containing characters which are not allowed otherwise 
(because they serve other Novelang grammar's purpose).

With Novelang default stylesheet, such text is rendered as monospaced text.

<<<
Almost ``4ny- ch@rac7er 0.0.0 "'&#^> / *``
>>>



=== Paragraphs inside pairs of angled brackets

XML element: ``paragraphs-inside-angled-bracket-pairs``

Two lower-than signs ``<<`` and two greater-than signs ``>>`` may enclose one paragraph or more.
The angled bracket delimiting the paragraphs take place on the first column of the line, 
and there must be no other character on the same line.

Whith Novelang default stylesheet, such text is rendered as quoted paragraphs.

<<<
<<
First paragraph.

Second paragraph.
>>
>>>


=== Lines of literal

XML element: ``lines-of-literal``

Three lower-than signs``<<<`` and two greater-than signs ``>>>`` may enclose one line of literal
text or more. 
The angled brackets delimiting the paragraphs take place on the first column of the line, 
and there must be no other character on the same line.

The literal text may contain any character, including escaped characters and greater-than signs, 
as long as they don't form an ending delimiter (if you need to display that, then use an escaped 
character).

<<<
<<<
Here is literal.
  Indentation will be kept.
«greater-than-sign»>>
>>>


=== Circumflex accent introducing a trailing word

XML element: ``n:word-after-circumflex-accent``

A circumflex accent ``^`` may appear between two words. 
 
With Novelang default stylesheet, the second word is is displayed as superscript.

<<<
April, the 1^st.
>>>


=== URL

XML element: ``n:url``

A URL may appear at the first column of a line. There must be nothing else after, except spaces
or a line break.

<<<
http://novelang.blogspot.com
>>>


=== Escaped characters

For displaying character that have a special meaning in the rendered documents, they must be escaped.
An escaped character is enclosed into a left-pointing double angle quotation mark ``«laquo»`` and 
a right-pointing double angled quotation mark ``«raquo»``. The escape code is the unicode name.
HTML entity name is supported as well.

<<<
«grave-accent»   «laquo»grave-accent«raquo»
«left-curly-bracket»   «laquo»left-curly-bracket«raquo»
«right-curly-bracket»   «laquo»right-curly-bracket«raquo»
«percent-sign»   «laquo»percent-sign«raquo»
«greater-than-sign»   «laquo»greater-than-sign«raquo»
    alias: «laquo»gt«raquo»
«laquo»   «laquo»left-pointing-double-angle-quotation-mark«raquo»
    alias: «laquo»laquo«raquo»
«raquo»   «laquo»right-pointing-double-angle-quotation-mark«raquo» 
    alias: «laquo»raquo«raquo»

>>>

Using those characters is exceptional, however -- except in Novelang documentation! -- 
as most of useful character are accessible as literal.

=== Comments

Sometimes it is useful to tell Novelang to ignore some lines in a Part files.

Line comments begin with double percent sign ``«percent-sign»«percent-sign»``.

Blocks comments are delimited by a pair of double accolades  
``«left-curly-bracket»«left-curly-bracket»`` and  ``«right-curly-bracket»«right-curly-bracket»``.

<<<
«percent-sign»«percent-sign» This line is commented.

«left-curly-bracket»«left-curly-bracket» These two lines are
commented. «right-curly-bracket»«right-curly-bracket»
>>>