gunit AntlrPart ;

@header {
  package novelang.parser.antlr ;
}

paragraph :

//
// Speech
//
"--- w0" -> (PARAGRAPH_SPEECH (WORD w0))
"--| w0" -> (PARAGRAPH_SPEECH_ESCAPED (WORD w0))
"--+ w0" -> (PARAGRAPH_SPEECH_CONTINUED (WORD w0))
"--- w0 w1 :: w2" -> (PARAGRAPH_SPEECH (LOCUTOR (WORD w0) (WORD w1)) (WORD w2))






// Following tests are for paragraphBody rule. But we need to rely on a rule
// returning a sole tree as GUnit doesn't support exepecting more than one.

"w0," -> (PARAGRAPH_PLAIN (WORD w0) (PUNCTUATION_SIGN SIGN_COMMA))
"w0;" -> (PARAGRAPH_PLAIN (WORD w0) (PUNCTUATION_SIGN SIGN_SEMICOLON))
"w0." -> (PARAGRAPH_PLAIN (WORD w0) (PUNCTUATION_SIGN SIGN_FULLSTOP))
"w0?" -> (PARAGRAPH_PLAIN (WORD w0) (PUNCTUATION_SIGN SIGN_QUESTIONMARK))
"w0!" -> (PARAGRAPH_PLAIN (WORD w0) (PUNCTUATION_SIGN SIGN_EXCLAMATIONMARK))
"w0:" -> (PARAGRAPH_PLAIN (WORD w0) (PUNCTUATION_SIGN SIGN_COLON))
"w0..." -> (PARAGRAPH_PLAIN (WORD w0) (PUNCTUATION_SIGN SIGN_ELLIPSIS))

"w0, w1 ; w2. w3 ? w4 ! w5 : w6..." OK

/*
"w0.." FAIL
"w0,," FAIL
"w0??" FAIL
"w0;;" FAIL
*/

"w0 w1'/w2/." -> (PARAGRAPH_PLAIN (WORD w0) (WORD w1') (EMPHASIS (WORD w2)) (PUNCTUATION_SIGN SIGN_FULLSTOP))



