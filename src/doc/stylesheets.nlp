*** Custom stylesheets

It's easy to customize rendering of PDF, HTML and plain text because Novelang relies on FO (Formatting Objects) stylesheets. 

Novelang looks for stylesheets in that order:

1«rp» In the directory given by "novelang«fullstop»stylesheet«fullstop»dir" system property, if defined.

2«rp» In a "style" directory right under the project directory (from where Novelang was launched)

3«rp» Inside "Novelang-x«fullstop»x«fullstop»x«fullstop»jar" under the "«solidus»style" directory.

By default Novelang attempts to render final document using the stylesheet with the name of corresponding format. Otherwise, it uses a default, built-in stylesheet.

<<<
MIME type extension                .pdf     .html
Corresponding default stylesheet   pdf.xsl  html.xsl
>>>

After launching Novelang HTTP daemon, you can use the stylesheet query parameter to override any other stylesheet name:

<<<
http://localhost:8080/chapter-1.html?stylesheet=html-beautiful.xsl
>>>

Stylesheets may be defined for a whole Book as explained later, see the "mapstylesheet" command.


=== eXensible Stylesheet Language

The stylesheets are written in XSL«solidus»FO, which stands for eXtensible Stylesheet Language «solidus» Formatting Objects. Both are standards developed by the W3C (World Wide Web Consortium). There are many tutorials on the Web and reference documentation is here:

http://www.w3.org/TR/xsl

Novelang also supports stylesheet reuse with the "import" command. You can reuse Novelang's bundled stylesheets:

<<<
general-punctuation.xsl
punctuation-FR.xsl
punctuation-US-EN.xsl
>>>


=== Character entities

Novelang stylesheets support inclusion of character entities. This means, you can include definition of characters which can no be typed verbatim in the stylesheet, like the non-breaking space.

Such a definition looks like this:

<<<
<!ENTITY nbsp   "&#160;" >
>>>

So inside the stylesheet you just have to type "«amp»nbsp;" instead of "«amp»«numbersign»160;".

Novelang comes bundled with those files. Here is how to refer them (it's quite verbose as XML always is) :

<<<
<!DOCTYPE doctype [

    <!ENTITY % ISOnum PUBLIC
        "ISO 8879:1986//ENTITIES Numeric and Special Graphic//EN//XML"
        "ISOnum.pen"
    >
    %ISOnum;

    <!ENTITY % ISOpub PUBLIC
        "ISO 8879:1986//ENTITIES Publishing//EN//XML"
        "ISOpub.pen"
    >
    %ISOpub;

    <!ENTITY % ISOlat1 PUBLIC
        "ISO 8879:1986//ENTITIES Added Latin 1//EN//XML"
        "ISOlat1.pen"
    >
    %ISOlat1;

]>
>>>

For HTML documents, those entities are automatically HTML-escaped when their system name starts with "ISO 8879«colon»1986«solidus»«solidus»ENTITIES" as above.