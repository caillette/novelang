
== Why we need one more word processor


=== WYSIWIG word processors

There was a time the "What You See Is What You Get" paradigm was great, especially for word 
processors. 
It was a major breakthrough since mainframes and console mode, and allowed many people to write
their wishcards or resume with minimal knowledge about computers.

On the other hand, wishcards are the best these tools can do. They're not serious about 
automatic content handling because it would make them "too difficult" for casual users.
But, as shown by Microsoft Word, WYSIWIG word processors get bloated by plenty of useless 
features which do not make the tool easier to use. Instead, they try to mimic publishing tools
but they fail at this stage, as you can't ask a car to become an airplane.
 
The list of annoyances is endless. 
Files saved in binary format, so you can't use general-purpose diff tool.
It's uneasy to aggregate multiple documents into a single one.
Styles are lenient, in the way you can always change the style in a way that is not 
in the style list. 
There is no clear separation between content and presentation.
Word processors are standalone applications, not designed at all to fit into an application server.
And so on...


=== WYSIWIG publishing tools

Those tools, like XPress and InDesign, are fine for high-end publishing with ultimate control 
of every aspect of how the document looks like.
But they're definitely not content-oriented. 


=== LaTeX

LaTeX got it right. It is based on plain text with simple markup and a powerful macro system. 
It exists from 20 years and is incredibly mature now.

Why not using LaTex? The markup is too verbose, it accepts macro language inside the content, 
and it's uneasy to setup. But if you have complex typography to automate 
(like for a book about mathematics) it's definitely the right tool:
http://www.latex-project.org


=== DocBook

DocBook is a semantic XML-based markup for technical documentation. It has many great ideas 
(Novelang borrows some of them) but fails to cover every case and is really too verbose.
And it lacks a solution off-the-shelf.
You can find Docbook at 
http://www.docbook.org

=== Wiki


Wikis are a family Content Management Systems aiming at creating Web sites quickly. 
They rely on a simplified markup that Novelang is inspired from. 
But Wikis are completely different as they are collaborative tools for creating dynamic websites, 
while Novelang focuses on document generation. 

Here is an overview on various wiki systems:
http://www.wikimatrix.org

Here are interesting discussions about wiki syntaxes:
http://daringfireball.net/projects/markdown/syntax
http://www.wikicreole.org/wiki/Reasoning
http://www.codinghorror.com/blog/archives/001116.html


== Technical considerations

Novelang relies on a three-stage processing : source parsing, tree mangling, rendering. 


=== Source parsing

This is about turning source files into an AST (Abstract Syntax Tree). An AST is a tree where each node contains a text payload, and has zero or more children of the Tree type. There is no backlink from each Tree to its parent, so a Tree may be the child of several other Trees.

When parsing yields a Word like "foo", it is under the form of a Tree with the "WORD" text, and a single child containing the "foo" text.

Novelang's parser was generated by ANTLR, that made such a complicated job incredibly simple. 

=== Tree mangling

Tree mangling means twisting the AST a bit before rendering. By now Novelang uses it only for generating metadata (like word count), adding a special "METADATA" node. This stage is a place for adding lots of hack, and why not user-defined ones.

=== Rendering

This is about converting the AST to a human-readable format, like PDF or HTML. There is a built-in renderer relying on XSL but as the Renderer is basically a function taking an output stream and an AST as input parameters, rendering can occur in virtually any format.

=== Reinventing the wheel

Novelang's processing stages make it look a lot like Cocoon, which relies on XML instead of AST -- but it's all about trees in both cases-_. 
Forrest is an attempt to make Cocoon simpler while some nice packaging. There are a lot of small problems with Cocoon `/ Forrest`. Want some?

Forrest's Wiki-like APT grammar is too weak. The caching pipeling cannot cache fragments of rendered documents. The bundled version of FOP is too old. XPath doesn't spit error messages when no link target was found. Startup is slow. Error messages are unclear. 

By now, the grammar took `50%` of Novelang development effort, and stylesheets about `25%`. As I aimed to produce some documents with precise requirements for my personal usage, I found quicker to redevelop Novelang's plumbing than fixing Forrest's one. 

http://forrest.apache.org 



