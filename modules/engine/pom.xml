<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <relativePath>../../pom.xml</relativePath>
    <groupId>org.novelang</groupId>
    <artifactId>Novelang</artifactId>
    <version>SNAPSHOT</version>
  </parent>

  <artifactId>Novelang-engine</artifactId>
  <name>${artifactId}</name>

  <description>
    The real thing happens here: document parsing and rendering.
  </description>

  <!--
      The class containing the version at the time of the build goes in a separate source
       directory. So we can tweak it apart. 
       This is because compiler plugin doesn't support compile source roots redefinition.
       Instead, we add a source root corresponding to the tweaked version class.
  -->
  <properties>
    <originalVersionSources.dir>src/main/version</originalVersionSources.dir>
    <updatedVersionSources.dir>${project.build.directory}/generated-sources/updated-version</updatedVersionSources.dir>
    <versionJavaClassName>Version</versionJavaClassName>
  </properties>

  <build>
    
    <plugins>



      <!-- Then, copy the version class with its update. -->
      <plugin>
        <groupId>${lib.maven-resources-plugin.groupId}</groupId>
        <artifactId>${lib.maven-resources-plugin.artefactId}</artifactId>
        <version>${lib.maven-resources-plugin.version}</version>
        <executions>
          <execution>
            <id>copy-version</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${updatedVersionSources.dir}</outputDirectory>
              <!-- Delimiter '@' doesn't seem to work here. -->
              <resources>
                <resource>
                  <directory>${originalVersionSources.dir}</directory>
                  <filtering>true</filtering>
                  <includes>
                    <include>**/${versionJavaClassName}.java</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>${lib.build-helper-plugin.groupId}</groupId>
        <artifactId>${lib.build-helper-plugin.artefactId}</artifactId>
        <version>${lib.build-helper-plugin.version}</version>
        <executions>
          <execution>
            <id>add-source</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${updatedVersionSources.dir}</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>
  

  <dependencies>

<!--
  ====================
  3rd-party libraries.
  ====================
-->

    <dependency>
      <groupId>${lib.apache-httpclient.groupId}</groupId>
      <artifactId>${lib.apache-httpclient.artefactId}</artifactId>
      <version>${lib.apache-httpclient.version}</version>
      <scope>test</scope>
    </dependency>

    

    <dependency>
        <groupId>dom4j</groupId>
        <artifactId>dom4j</artifactId>
        <version>1.6.1</version>
    </dependency>

    <dependency>
      <!-- dom4j needs that for XPath queries. TODO: remove once ImageFixer uses pull parsing. -->
      <groupId>jaxen</groupId>
      <artifactId>jaxen</artifactId>
      <version>1.1.1</version>
      <scope>runtime</scope>
    </dependency>
    
    <dependency>
      <!-- For configuring FOP. -->
      <groupId> org.apache.avalon.framework</groupId>
      <artifactId>avalon-framework-impl</artifactId>
      <version>4.3.1</version>
    </dependency>

    <dependency>
        <groupId>org.apache.xmlgraphics</groupId>
        <artifactId>fop</artifactId>
        <version>0.95</version>
    </dependency>

    <dependency>
      <!-- JDK's XSLT implementation doesn't work well. -->
      <groupId>xalan</groupId>
      <artifactId>xalan</artifactId>
      <version>2.7.1</version>
    </dependency>

    <dependency>
      <!-- JDK's XSLT implementation doesn't work well. -->
      <groupId>xerces</groupId>
      <artifactId>xercesImpl</artifactId>
      <version>2.9.1</version>
    </dependency>

    <dependency>
      <groupId>org.mortbay.jetty</groupId>
      <artifactId>jetty</artifactId>
      <version>6.1.24</version>
    </dependency>


    
<!--
  =================
  Novelang modules.
  =================
-->
    
    <dependency>
      <groupId>${parent.groupId}</groupId>
      <artifactId>Novelang-primer</artifactId>
      <version>${parent.version}</version>
    </dependency>

    <dependency>
      <groupId>${parent.groupId}</groupId>
      <artifactId>Novelang-parser-facade</artifactId>
      <version>${parent.version}</version>
    </dependency>

    <dependency>
      <groupId>${parent.groupId}</groupId>
      <artifactId>Novelang-vanilla-fixture</artifactId>
      <version>${parent.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>${parent.groupId}</groupId>
      <artifactId>Novelang-syntactic-tree-fixture</artifactId>
      <version>${parent.version}</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

</project>

