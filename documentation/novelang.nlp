*** The simplest text processor

===

Novelang takes plain text files and transforms them into nicely-formatted documents like PDF or HTML.
Unlike mainstream word-processors, it keeps you focused on the text you type in and what it means, instead of struggling with how it should appear. It relies on the text editor of your choice, with a very simple syntax to add some formatting hints. You can see resulting documents from your Web browser or generate them from command-line. 

Plain text is great as it is cross-platform and can be viewed under almost any condition. It takes less space and is easier to manipulate through automated processes, including search.

Novelang enforces a consistent presentation across a set of documents through stylesheets that can be customized.
This page was produced with Novelang, using a dedicated stylesheet.

Novelang is a project started by Laurent Caillette, a software engineer who specializes in Human-Computer Interaction. You can mail him on Users' mailing list or leave a comment on the Novelang blog (see links).

Novelang software is free to use and redistribute, under the terms of the GNU Public License v3.



*** Quickstart

=== Install

Requirements : Java 5 and Apache's Ant 1&fullstop;7.

First, download the latest version of Novelang, and unzip it in some directory we'll call &dollar;NOVELANG&lowline;DIR. Build the Novelang project :

<<<
ant -buildfile $NOVELANG_HOME/build.xml clean-run-tests
>>>

Right, installation has to be streamlined!

=== First document

Just create a file with your favorite text editor and name it "first&fullstop;nlp". Content could look like this:

<<<
*** My first chapter

=== My first section

My first paragraph //here//!
>>>

=== Run!

Then, from the directory where the file is located, launch the Novelang dæmon (one day I'll write a nicer interface):

<<<
ant -buildfile $NOVELANG_HOME/build.xml start-httpd
>>>

Open your favorite Web browser at this address:

http://localhost:8080/first.nlp

And you should see your text, with correct formatting! 


*** Project status

===

Currently, Novelang is a proof-of-concept. It has been used for editing documents of hundreds of kilobytes, but still needs //lots// of polish. 


*** Why we need one more word processor


=== WYSIWIG word processors

The "What You See Is What You Get" paradigm hit its own limits and now those tools are full of needless features. As they got feature-bloated they lose their primary focus, which is to edit document, as they become publishing tools. But since it was not their initial purpose they don't do that well, neither.

In fact I really got bored of struggling with MS Word (but this could apply to others like Open Office) while all of its pricey options didn't help me to get my text right.

=== WYSIWIG publishing tools

Those tools, like XPress and InDesign, are fine for high-end publishing with ultimate control of every aspect of how the document looks like, but they're definitely not content-oriented.

=== LaTex

http://www.latex-project.org

LaTex got it all right. It is based on plain text with simple markup and a powerful macro system. It exists from 20 years and is incredibly mature now.

Why not using LaTex? Because the markup is too verbose for my personal taste, I don't like its macro language, and it's uneasy to setup. 

=== DocBook

http://www.docbook.org

DocBook is a semantic XML-based markup for technical documentation. It has many great ideas (Novelang borrows some of them) but fails to cover every case and is really too verbose.

=== Wiki

http://www.wikimatrix.org

Wikis are a family Content Management Systems aiming at creating Web sites quickly. They rely on a simplified markup that Novelang is inspired from. But Wikis are completely different as they are collaborative tools for creating dynamic websites, while Novelang focuses on document generation.

http://daringfireball.net/projects/markdown/syntax


=== Other discussions

http://www.wikicreole.org/wiki/Reasoning

http://www.codinghorror.com/blog/archives/001116.html


*** Technical considerations

===

Novelang relies on a three-stage processing : source parsing, tree mangling, rendering. 


=== Source parsing

This is about turning source files into an AST (Abstract Syntax Tree). An AST is a tree where each node contains a text payload, and has zero or more children of the Tree type. There is no backlink from each Tree to its parent, so a Tree may be the child of several other Trees.

When parsing yields a Word like "foo", it is under the form of a Tree with the "WORD" text, and a single child containing the "foo" text.

Novelang's parser was generated by ANTLR, that made such a complicated job incredibly simple. 

=== Tree mangling

Tree mangling means twisting the AST a bit before rendering. By now Novelang uses it only for generating metadata (like word count), adding a special "METADATA" node. This stage is a place for adding lots of hack, and why not user-defined ones.

=== Rendering

This is about converting the AST to a human-readable format, like PDF or HTML. There is a built-in renderer relying on XSL but as the Renderer is basically a function taking an output stream and an AST as input parameters, rendering can occur in virtually any format.

=== Reinventing the wheel

Novelang's processing stages make it look a lot like Cocoon, which relies on XML instead of AST -- but it's all about trees in both cases-_. 
Forrest is an attempt to make Cocoon simpler while some nice packaging. There are a lot of small problems with Cocoon &solidus; Forrest. Want some?

Forrest's Wiki-like APT grammar is too weak. The caching pipeling cannot cache fragments of rendered documents. The bundled version of FOP is too old. XPath doesn't spit error messages when no link target was found. Startup is slow. Error messages are unclear. 

By now, the grammar took 50&percent; of Novelang development effort, and stylesheets about 25&percent;. As I aimed to produce some documents with precise requirements for my personal usage, I found quicker to redevelop Novelang's plumbing than fixing Forrest's one. 

http://forrest.apache.org 



