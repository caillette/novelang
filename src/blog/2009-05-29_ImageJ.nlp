== ImageJ

In my endless quest of nice libraries to integrate into Novelang, I've been wandering about image
processing. This makes sense for technical documentation with screen captures; often it is useful
to do some rescale of fade. Ccompression is useful, too, but it should be probably be left
to the rendering stage.

When updating the captured image, you need to process the image again with your Gimp or whatever. 
This should be done automatically! I'm looking for a scripting language to do clever things.
I've no idea on how to integrate it to Novelang -- maybe some special files to avoid messing
macro-instructions with content-_.

The language itself could be something like this:

<<<
  {
    rescale( 40% )
    fade( SOUTHWEST, 3px )
  }
  ./my-image.png
>>>

I want something clever with an explicit representation of pipeline processing. And, yes, it should
be all in Java and with a GPL-compatible license. Am I asking too much here?

I've found an amazing software piece: "ImageJ"
http://rsbweb.nih.gov/ij
, a public domain tool for image processing with huge amount of macros and plugins. It seems
widely used for science. Bad news, image transparency "doesn't look"
http://homepages.inf.ed.ac.uk/s9808248/imagej/unpack
like a great concern.
The "Alpha Channel plugin"
http://imagejdocu.tudor.lu/doku.php?id=plugin:utilities:alpha_channel:start
is the best I've found so far with its rough edges.

NetKernel has a "pipeline image processing"
http://www.1060research-server-1.co.uk/docs/2.0.6/book/declarative/doc_map_Images.html
feature that looks like what I want. But I don't like their everything-is-a-String approach.

Maybe I shouldn't be so ambitious, and just start hacking "the smallest thing that could possibly
work" for solving my own problem instead of looking for a save-the-world solution.

By the way, this is an interactive "rendering effect editor"
http://weblogs.java.net/blog/zixle/archive/2006/07/beanshell_2d_in.html
based on BeanShell that may ease some pain while hacking image filters.